/*
* reg_disp_top.h- Sigmastar
*
* Copyright (c) [2019~2020] SigmaStar Technology.
*
*
* This software is licensed under the terms of the GNU General Public
* License version 2, as published by the Free Software Foundation, and
* may be copied, distributed, and modified under those terms.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU General Public License version 2 for more details.
*
*/
#ifndef __REG_DISP_TOP__
#define __REG_DISP_TOP__

#define REG_DISP_GP_CTRL_BASE    (0x113700)
#define REG_DISP_TOP0_BASE       (0x115000)
#define REG_DISP_TOP_OP20_BASE   (0x115100)
#define REG_DISP_TOP_MACE_BASE   (0x115200)
#define REG_DISP_TOP_GAMMA0_BASE (0x115300)
#define REG_TVENC_BASE           (0x115700)
#define REG_DISP_CVBS_BASE       (0x115800)
#define REG_DISP_TOP1_BASE       (0x116000)
#define REG_DISP_TOP_OP21_BASE   (0x116100)
#define REG_DISP_TOP_GAMMA1_BASE (0x116200)
#define REG_DISP_TOP2_BASE       (0x118000)
#define REG_DISP_TOP_OP22_BASE   (0x118100)
#define REG_DISP_TOP_GAMMA2_BASE (0x118200)
#define REG_DAC_ATOP_BASE        (0x145B00)
#define REG_ACE2_BASE            (0x116900)
#define REG_ACE3_BASE            (0x116A00)
#define REG_ACE_BASE             (0x116B00)
#define REG_DLC_BASE             (0x116C00)
#define REG_LCE_BASE             (0x116D00)
#define REG_MWE_BASE             (0x116E00)
#define REG_VPS_BASE             (0x116F00)
#define REG_ACE2_2_BASE          (0x118300)
#define REG_ACE3_2_BASE          (0x118400)
#define REG_ACE_2_BASE           (0x118500)
#define REG_DLC_2_BASE           (0x118600)
#define REG_LCE_2_BASE           (0x118700)
#define REG_MWE_2_BASE           (0x118800)
#define REG_VPS_2_BASE           (0x118900)
#define REG_DISP_GP_CTRL_00_L    (REG_DISP_GP_CTRL_BASE + 0x0)
#define REG_DISP_GP_CTRL_01_L    (REG_DISP_GP_CTRL_BASE + 0x2)
#define REG_DISP_GP_CTRL_02_L    (REG_DISP_GP_CTRL_BASE + 0x4)
#define REG_DISP_GP_CTRL_03_L    (REG_DISP_GP_CTRL_BASE + 0x6)
#define REG_DISP_GP_CTRL_04_L    (REG_DISP_GP_CTRL_BASE + 0x8)
#define REG_DISP_GP_CTRL_05_L    (REG_DISP_GP_CTRL_BASE + 0xa)
#define REG_DISP_GP_CTRL_06_L    (REG_DISP_GP_CTRL_BASE + 0xc)
#define REG_DISP_GP_CTRL_07_L    (REG_DISP_GP_CTRL_BASE + 0xe)
#define REG_DISP_GP_CTRL_08_L    (REG_DISP_GP_CTRL_BASE + 0x10)
#define REG_DISP_GP_CTRL_09_L    (REG_DISP_GP_CTRL_BASE + 0x12)
#define REG_DISP_GP_CTRL_0A_L    (REG_DISP_GP_CTRL_BASE + 0x14)
#define REG_DISP_GP_CTRL_0B_L    (REG_DISP_GP_CTRL_BASE + 0x16)
#define REG_DISP_GP_CTRL_0C_L    (REG_DISP_GP_CTRL_BASE + 0x18)
#define REG_DISP_GP_CTRL_0D_L    (REG_DISP_GP_CTRL_BASE + 0x1a)
#define REG_DISP_GP_CTRL_0E_L    (REG_DISP_GP_CTRL_BASE + 0x1c)
#define REG_DISP_GP_CTRL_0F_L    (REG_DISP_GP_CTRL_BASE + 0x1e)
// bigger than 16 bit case allh0010
#define offset_of_disp_gp_ctrl_reg_sram_sd_en (0x20)
#define mask_of_disp_gp_ctrl_reg_sram_sd_en   (0xffffffff)
#define shift_of_disp_gp_ctrl_reg_sram_sd_en  (0)
#define DISP_GP_CTRL_REG_SRAM_SD_EN           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_sram_sd_en)
// h0010, bit: 15
/* 1. Each bits means  each IP's SRAM group power ON/OFF signal.
2. 1'b0: Power-ON
[0] : bach sram power ctrl.: 0:power-on, 1:power-off
[1] : aesdma sram power ctrl.: 0:power-on, 1:power-off
[2] : cmdq sram power ctrl.: 0:power-on, 1:power-off
[3] : emac sram power ctrl.: 0:power-on, 1:power-off
[4] : sd sram power ctrl.: 0:power-on, 1:power-off
[5] : gop0 sram power ctrl.: 0:power-on, 1:power-off
[6] : imi sram power ctrl.: 0:power-on, 1:power-off
[7] : isp sram power ctrl.: 0:power-on, 1:power-off
[8] : jpe sram power ctrl.: 0:power-on, 1:power-off
[9] : dip0 sram power ctrl.: 0:power-on, 1:power-off
[10] : sdio sram power ctrl.: 0:power-on, 1:power-off
[11] : usb sram power ctrl.: 0:power-on, 1:power-off
[12] : hvsp0 sram power ctrl.: 0:power-on, 1:power-off
[13] : hvsp1 sram power ctrl.: 0:power-on, 1:power-off
[14] : hvsp2 sram power ctrl.: 0:power-on, 1:power-off
[15] : reserved
[16] : reserved
[17] : reserved
[18] : reserved
[19] : reserved
[20] : sc0_frm sram power ctrl.: 0:power-on, 1:power-off
[21] : sc1_frm sram power ctrl.: 0:power-on, 1:power-off
[22] : debug sram power ctrl.: 0:power-on, 1:power-off
[23] : sc0_frm_r sram power ctrl.: 0:power-on, 1:power-off
[24] : reserved
[25] : sc2_frm sram power ctrl.: 0:power-on, 1:power-off
[26] : rsv1 sram power ctrl.: 0:power-on, 1:power-off
[27] : rsv2 sram power ctrl.: 0:power-on, 1:power-off
[28] : isp_dnr sram power ctrl.: 0:power-on, 1:power-off
[29] : isp_rot sram power ctrl.: 0:power-on, 1:power-off
[30] : reserved
[31] : usb_p1 sram power ctrl.: 0:power-on, 1:power-off
[32] : ive sram power ctrl.: 0:power-on, 1:power-off
[33] : cmdq1 sram power ctrl.: 0:power-on, 1:power-off
[34] : cmdq2 sram power ctrl.: 0:power-on, 1:power-off
[35] : gop1 sram power ctrl.: 0:power-on, 1:power-off
[36] : gop2 sram power ctrl.: 0:power-on, 1:power-off
[37] : reserved
[38] : reserved
[39] : reservedf
[40] : reserved
[41] : reserved
[42] : osdb1 sram power ctrl.: 0:power-on, 1:power-off
[43]: osdb2 sram power ctrl.: 0:power-on, 1:power-off
[44]: osdb3 sram power ctrl.: 0:power-on, 1:power-off
[45]: ldc sram power ctrl.: 0:power-on, 1:power-off
[46]: csi_tx sram power ctrl.: 0:power-on, 1:power-off
[47]: reserved
[48]: isp_bay sram power ctrl.: 0:power-on, 1:power-off
[49]: isp_pxl sram power ctrl.: 0:power-on, 1:power-off
[50]: isp_hdr0 sram power ctrl.: 0:power-on, 1:power-off
[51]: isp_hdr1 sram power ctrl.: 0:power-on, 1:power-off
[53]: isp_rot1 sram power ctrl.: 0:power-on, 1:power-off
[54]: isp_mot0 sram power ctrl.: 0:power-on, 1:power-off
[55] isp_mot1 sram power ctrl.: 0:power-on, 1:power-off
[56]: isp_wdma sram power ctrl.: 0:power-on, 1:power-off
[57]: isp_rdma sram power ctrl.: 0:power-on, 1:power-off
[58]: isp_420dma sram power ctrl.: 0:power-on, 1:power-off
[59]: isp_rgbir sram power ctrl.: 0:power-on, 1:power-off
[60]: isp_3dnr sram power ctrl.: 0:power-on, 1:power-off
[61]: isp_afifo1 sram power ctrl.: 0:power-on, 1:power-off
[62]: isp_afifo2 sram power ctrl.: 0:power-on, 1:power-off*/
#define offset_of_disp_gp_ctrl_reg_sram_sd_en_0 (0x20)
#define mask_of_disp_gp_ctrl_reg_sram_sd_en_0   (0xffff)
#define shift_of_disp_gp_ctrl_reg_sram_sd_en_0  (0)
#define DISP_GP_CTRL_REG_SRAM_SD_EN_0           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_sram_sd_en_0)
#define REG_DISP_GP_CTRL_10_L                   (DISP_GP_CTRL_REG_SRAM_SD_EN_0)
// h0011, bit: 15
/* 1. Each bits means  each IP's SRAM group power ON/OFF signal.
2. 1'b0: Power-ON
[0] : bach sram power ctrl.: 0:power-on, 1:power-off
[1] : aesdma sram power ctrl.: 0:power-on, 1:power-off
[2] : cmdq sram power ctrl.: 0:power-on, 1:power-off
[3] : emac sram power ctrl.: 0:power-on, 1:power-off
[4] : sd sram power ctrl.: 0:power-on, 1:power-off
[5] : gop0 sram power ctrl.: 0:power-on, 1:power-off
[6] : imi sram power ctrl.: 0:power-on, 1:power-off
[7] : isp sram power ctrl.: 0:power-on, 1:power-off
[8] : jpe sram power ctrl.: 0:power-on, 1:power-off
[9] : dip0 sram power ctrl.: 0:power-on, 1:power-off
[10] : sdio sram power ctrl.: 0:power-on, 1:power-off
[11] : usb sram power ctrl.: 0:power-on, 1:power-off
[12] : hvsp0 sram power ctrl.: 0:power-on, 1:power-off
[13] : hvsp1 sram power ctrl.: 0:power-on, 1:power-off
[14] : hvsp2 sram power ctrl.: 0:power-on, 1:power-off
[15] : reserved
[16] : reserved
[17] : reserved
[18] : reserved
[19] : reserved
[20] : sc0_frm sram power ctrl.: 0:power-on, 1:power-off
[21] : sc1_frm sram power ctrl.: 0:power-on, 1:power-off
[22] : debug sram power ctrl.: 0:power-on, 1:power-off
[23] : sc0_frm_r sram power ctrl.: 0:power-on, 1:power-off
[24] : reserved
[25] : sc2_frm sram power ctrl.: 0:power-on, 1:power-off
[26] : rsv1 sram power ctrl.: 0:power-on, 1:power-off
[27] : rsv2 sram power ctrl.: 0:power-on, 1:power-off
[28] : isp_dnr sram power ctrl.: 0:power-on, 1:power-off
[29] : isp_rot sram power ctrl.: 0:power-on, 1:power-off
[30] : reserved
[31] : usb_p1 sram power ctrl.: 0:power-on, 1:power-off
[32] : ive sram power ctrl.: 0:power-on, 1:power-off
[33] : cmdq1 sram power ctrl.: 0:power-on, 1:power-off
[34] : cmdq2 sram power ctrl.: 0:power-on, 1:power-off
[35] : gop1 sram power ctrl.: 0:power-on, 1:power-off
[36] : gop2 sram power ctrl.: 0:power-on, 1:power-off
[37] : reserved
[38] : reserved
[39] : reservedf
[40] : reserved
[41] : reserved
[42] : osdb1 sram power ctrl.: 0:power-on, 1:power-off
[43]: osdb2 sram power ctrl.: 0:power-on, 1:power-off
[44]: osdb3 sram power ctrl.: 0:power-on, 1:power-off
[45]: ldc sram power ctrl.: 0:power-on, 1:power-off
[46]: csi_tx sram power ctrl.: 0:power-on, 1:power-off
[47]: reserved
[48]: isp_bay sram power ctrl.: 0:power-on, 1:power-off
[49]: isp_pxl sram power ctrl.: 0:power-on, 1:power-off
[50]: isp_hdr0 sram power ctrl.: 0:power-on, 1:power-off
[51]: isp_hdr1 sram power ctrl.: 0:power-on, 1:power-off
[53]: isp_rot1 sram power ctrl.: 0:power-on, 1:power-off
[54]: isp_mot0 sram power ctrl.: 0:power-on, 1:power-off
[55] isp_mot1 sram power ctrl.: 0:power-on, 1:power-off
[56]: isp_wdma sram power ctrl.: 0:power-on, 1:power-off
[57]: isp_rdma sram power ctrl.: 0:power-on, 1:power-off
[58]: isp_420dma sram power ctrl.: 0:power-on, 1:power-off
[59]: isp_rgbir sram power ctrl.: 0:power-on, 1:power-off
[60]: isp_3dnr sram power ctrl.: 0:power-on, 1:power-off
[61]: isp_afifo1 sram power ctrl.: 0:power-on, 1:power-off
[62]: isp_afifo2 sram power ctrl.: 0:power-on, 1:power-off*/
#define offset_of_disp_gp_ctrl_reg_sram_sd_en_1 (0x22)
#define mask_of_disp_gp_ctrl_reg_sram_sd_en_1   (0xffff)
#define shift_of_disp_gp_ctrl_reg_sram_sd_en_1  (0)
#define DISP_GP_CTRL_REG_SRAM_SD_EN_1           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_sram_sd_en_1)
#define REG_DISP_GP_CTRL_11_L                   (DISP_GP_CTRL_REG_SRAM_SD_EN_1)
#define REG_DISP_GP_CTRL_12_L                   (REG_DISP_GP_CTRL_BASE + 0x24)
#define REG_DISP_GP_CTRL_13_L                   (REG_DISP_GP_CTRL_BASE + 0x26)
#define REG_DISP_GP_CTRL_14_L                   (REG_DISP_GP_CTRL_BASE + 0x28)
#define REG_DISP_GP_CTRL_15_L                   (REG_DISP_GP_CTRL_BASE + 0x2a)
#define REG_DISP_GP_CTRL_16_L                   (REG_DISP_GP_CTRL_BASE + 0x2c)
#define REG_DISP_GP_CTRL_17_L                   (REG_DISP_GP_CTRL_BASE + 0x2e)
#define REG_DISP_GP_CTRL_18_L                   (REG_DISP_GP_CTRL_BASE + 0x30)
#define REG_DISP_GP_CTRL_19_L                   (REG_DISP_GP_CTRL_BASE + 0x32)
#define REG_DISP_GP_CTRL_1A_L                   (REG_DISP_GP_CTRL_BASE + 0x34)
#define REG_DISP_GP_CTRL_1B_L                   (REG_DISP_GP_CTRL_BASE + 0x36)
#define REG_DISP_GP_CTRL_1C_L                   (REG_DISP_GP_CTRL_BASE + 0x38)
#define REG_DISP_GP_CTRL_1D_L                   (REG_DISP_GP_CTRL_BASE + 0x3a)
#define REG_DISP_GP_CTRL_1E_L                   (REG_DISP_GP_CTRL_BASE + 0x3c)
#define REG_DISP_GP_CTRL_1F_L                   (REG_DISP_GP_CTRL_BASE + 0x3e)
// h0020, bit: 2
/* clk_imi clock setting  (See CLKGEN reg_ckg_boot)
[0]: gate (0: pass, 1: gated)
[1]: reserved
[2]: select BOOT clock source (See reg_ckg_boot) (glitch free)
0: select BOOT clock 12MHz (xtali)
1: select MIU clock*/
#define offset_of_disp_gp_ctrl_reg_ckg_imi (0x40)
#define mask_of_disp_gp_ctrl_reg_ckg_imi   (0x7)
#define shift_of_disp_gp_ctrl_reg_ckg_imi  (0)
#define DISP_GP_CTRL_REG_CKG_IMI           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_imi)
#define REG_DISP_GP_CTRL_20_L              (DISP_GP_CTRL_REG_CKG_IMI)
// h0020, bit: 8
/* */
#define offset_of_disp_gp_ctrl_reg_clk_mcu_brg_free_run (0x40)
#define mask_of_disp_gp_ctrl_reg_clk_mcu_brg_free_run   (0x100)
#define shift_of_disp_gp_ctrl_reg_clk_mcu_brg_free_run  (8)
#define DISP_GP_CTRL_REG_CLK_MCU_BRG_FREE_RUN           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_clk_mcu_brg_free_run)
// h0021, bit: 3
/* clk_gop0_psram setting
[3:2]: select, 00: gop clock, 01: miu clock
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_gop0_psram (0x42)
#define mask_of_disp_gp_ctrl_reg_ckg_gop0_psram   (0xf)
#define shift_of_disp_gp_ctrl_reg_ckg_gop0_psram  (0)
#define DISP_GP_CTRL_REG_CKG_GOP0_PSRAM           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_gop0_psram)
#define REG_DISP_GP_CTRL_21_L                     (DISP_GP_CTRL_REG_CKG_GOP0_PSRAM)
// h0021, bit: 7
/* clk_gop1_psram setting
[3:2]: select, 00: gop clock, 01: miu clock
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_gop1_psram (0x42)
#define mask_of_disp_gp_ctrl_reg_ckg_gop1_psram   (0xf0)
#define shift_of_disp_gp_ctrl_reg_ckg_gop1_psram  (4)
#define DISP_GP_CTRL_REG_CKG_GOP1_PSRAM           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_gop1_psram)
// h0021, bit: 11
/* clk_gop2_psram setting
[3:2]: select, 00: gop clock, 01: miu clock
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_gop2_psram (0x42)
#define mask_of_disp_gp_ctrl_reg_ckg_gop2_psram   (0xf00)
#define shift_of_disp_gp_ctrl_reg_ckg_gop2_psram  (8)
#define DISP_GP_CTRL_REG_CKG_GOP2_PSRAM           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_gop2_psram)
// h0022, bit: 4
/* clk_odclk0 setting
[4:2]: select, 000: hdmi clock, 001: dac_gate_div2 clock, 010: disp0_pixel_clk, 011: disp1_pixel_clk, 100: tvenc_27M,
101:disp2_pixel_clk [1]: invert clock [0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_odclk0 (0x44)
#define mask_of_disp_gp_ctrl_reg_ckg_odclk0   (0x1f)
#define shift_of_disp_gp_ctrl_reg_ckg_odclk0  (0)
#define DISP_GP_CTRL_REG_CKG_ODCLK0           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_odclk0)
#define REG_DISP_GP_CTRL_22_L                 (DISP_GP_CTRL_REG_CKG_ODCLK0)
// h0022, bit: 12
/* clk_odclk1 setting
[4:2]: select, 000: hdmi clock, 001: dac_gate_div2 clock, 010: disp0_pixel_clk, 011: disp1_pixel_clk, 100: tvenc_27M,
101:disp2_pixel_clk [1]: invert clock [0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_odclk1 (0x44)
#define mask_of_disp_gp_ctrl_reg_ckg_odclk1   (0x1f00)
#define shift_of_disp_gp_ctrl_reg_ckg_odclk1  (8)
#define DISP_GP_CTRL_REG_CKG_ODCLK1           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_odclk1)
// h0023, bit: 3
/* clk_mipi_pixel_g setting
[3:2]: select, 00: clk_odlck0 clock, 01: clk_odclk1 clock
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_mipi_pixel_g (0x46)
#define mask_of_disp_gp_ctrl_reg_ckg_mipi_pixel_g   (0xf)
#define shift_of_disp_gp_ctrl_reg_ckg_mipi_pixel_g  (0)
#define DISP_GP_CTRL_REG_CKG_MIPI_PIXEL_G           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_mipi_pixel_g)
#define REG_DISP_GP_CTRL_23_L                       (DISP_GP_CTRL_REG_CKG_MIPI_PIXEL_G)
// h0023, bit: 7
/* clk_mipi_pixel setting
[3:2]: select, 00: disp0_pixel_clk, 01: disp1_pixel_clk
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_mipi_pixel (0x46)
#define mask_of_disp_gp_ctrl_reg_ckg_mipi_pixel   (0xf0)
#define shift_of_disp_gp_ctrl_reg_ckg_mipi_pixel  (4)
#define DISP_GP_CTRL_REG_CKG_MIPI_PIXEL           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_mipi_pixel)
// h0024, bit: 3
/* clk_lcd_src setting
[3:2]: select, 00: clk_odlck0 clock, 01: clk_odclk1 clock, 10:clk_odclk2 clock
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_lcd_src (0x48)
#define mask_of_disp_gp_ctrl_reg_ckg_lcd_src   (0xf)
#define shift_of_disp_gp_ctrl_reg_ckg_lcd_src  (0)
#define DISP_GP_CTRL_REG_CKG_LCD_SRC           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_lcd_src)
#define REG_DISP_GP_CTRL_24_L                  (DISP_GP_CTRL_REG_CKG_LCD_SRC)
// h0024, bit: 12
/* clk_lcd setting
[4:2]: select,
000: disp0_pixel_clk,
001: disp1_pixel_clk,
010: dac_gate_div2 clock,
011: disp0_pixel_clk_div2
100: disp1_pixel_clk_div2
101: disp2_pixel_clk
110: disp2_pixel_clk_div2
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_lcd (0x48)
#define mask_of_disp_gp_ctrl_reg_ckg_lcd   (0x1f00)
#define shift_of_disp_gp_ctrl_reg_ckg_lcd  (8)
#define DISP_GP_CTRL_REG_CKG_LCD           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_lcd)
// h0025, bit: 3
/* clk_fpll_odclk setting
[3:2]: select,
00: clk_odlck0 clock,
01: clk_odclk1 clock,
10: clk_odclk2 clock,
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_fpll_odclk (0x4a)
#define mask_of_disp_gp_ctrl_reg_ckg_fpll_odclk   (0xf)
#define shift_of_disp_gp_ctrl_reg_ckg_fpll_odclk  (0)
#define DISP_GP_CTRL_REG_CKG_FPLL_ODCLK           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_fpll_odclk)
#define REG_DISP_GP_CTRL_25_L                     (DISP_GP_CTRL_REG_CKG_FPLL_ODCLK)
// h0025, bit: 7
/* clk_fpll_odclk1 setting
[3:2]: select,
00: clk_odlck0 clock,
01: clk_odclk1 clock
10: clk_odclk2 clock
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_fpll_odclk1 (0x4a)
#define mask_of_disp_gp_ctrl_reg_ckg_fpll_odclk1   (0xf0)
#define shift_of_disp_gp_ctrl_reg_ckg_fpll_odclk1  (4)
#define DISP_GP_CTRL_REG_CKG_FPLL_ODCLK1           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_fpll_odclk1)
// h0025, bit: 11
/* clk_odclk_cvbs setting
[3:2]: select, 00: clk_odlck0 clock, 01: clk_odclk1 clock
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_odclk_cvbs (0x4a)
#define mask_of_disp_gp_ctrl_reg_ckg_odclk_cvbs   (0xf00)
#define shift_of_disp_gp_ctrl_reg_ckg_odclk_cvbs  (8)
#define DISP_GP_CTRL_REG_CKG_ODCLK_CVBS           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_odclk_cvbs)
// h0026, bit: 3
/* clk_gop0_psram setting
[3:2]: select, 00: gop clock, 01: miu clock
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_gop3_psram (0x4c)
#define mask_of_disp_gp_ctrl_reg_ckg_gop3_psram   (0xf)
#define shift_of_disp_gp_ctrl_reg_ckg_gop3_psram  (0)
#define DISP_GP_CTRL_REG_CKG_GOP3_PSRAM           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_gop3_psram)
#define REG_DISP_GP_CTRL_26_L                     (DISP_GP_CTRL_REG_CKG_GOP3_PSRAM)
// h0026, bit: 7
/* clk_gop1_psram setting
[3:2]: select, 00: gop clock, 01: miu clock
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_gop4_psram (0x4c)
#define mask_of_disp_gp_ctrl_reg_ckg_gop4_psram   (0xf0)
#define shift_of_disp_gp_ctrl_reg_ckg_gop4_psram  (4)
#define DISP_GP_CTRL_REG_CKG_GOP4_PSRAM           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_gop4_psram)
// h0026, bit: 11
/* clk_gop2_psram setting
[3:2]: select, 00: gop clock, 01: miu clock
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_gop5_psram (0x4c)
#define mask_of_disp_gp_ctrl_reg_ckg_gop5_psram   (0xf00)
#define shift_of_disp_gp_ctrl_reg_ckg_gop5_psram  (8)
#define DISP_GP_CTRL_REG_CKG_GOP5_PSRAM           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_gop5_psram)
// h0027, bit: 3
/* clk_gop0_psram setting
[3:2]: select, 00: gop clock, 01: miu clock
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_gop6_psram (0x4e)
#define mask_of_disp_gp_ctrl_reg_ckg_gop6_psram   (0xf)
#define shift_of_disp_gp_ctrl_reg_ckg_gop6_psram  (0)
#define DISP_GP_CTRL_REG_CKG_GOP6_PSRAM           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_gop6_psram)
#define REG_DISP_GP_CTRL_27_L                     (DISP_GP_CTRL_REG_CKG_GOP6_PSRAM)
// h0027, bit: 7
/* clk_gop1_psram setting
[3:2]: select, 00: gop clock, 01: miu clock
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_gop7_psram (0x4e)
#define mask_of_disp_gp_ctrl_reg_ckg_gop7_psram   (0xf0)
#define shift_of_disp_gp_ctrl_reg_ckg_gop7_psram  (4)
#define DISP_GP_CTRL_REG_CKG_GOP7_PSRAM           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_gop7_psram)
// h0027, bit: 11
/* clk_gop2_psram setting
[3:2]: select, 00: gop clock, 01: miu clock
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_gop8_psram (0x4e)
#define mask_of_disp_gp_ctrl_reg_ckg_gop8_psram   (0xf00)
#define shift_of_disp_gp_ctrl_reg_ckg_gop8_psram  (8)
#define DISP_GP_CTRL_REG_CKG_GOP8_PSRAM           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_gop8_psram)
// h0028, bit: 1
/* */
#define offset_of_disp_gp_ctrl_reg_ckg_bach (0x50)
#define mask_of_disp_gp_ctrl_reg_ckg_bach   (0x3)
#define shift_of_disp_gp_ctrl_reg_ckg_bach  (0)
#define DISP_GP_CTRL_REG_CKG_BACH           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_bach)
#define REG_DISP_GP_CTRL_28_L               (DISP_GP_CTRL_REG_CKG_BACH)
// h0029, bit: 4
/* clk_odclk1 setting
[4:2]: select,
000: hdmi clock,
001: dac_gate_div2 clock,
010: disp0_pixel_clk,
011: disp1_pixel_clk,
100: tvenc_27M,
101:disp2_pixel_clk
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_odclk2 (0x52)
#define mask_of_disp_gp_ctrl_reg_ckg_odclk2   (0x1f)
#define shift_of_disp_gp_ctrl_reg_ckg_odclk2  (0)
#define DISP_GP_CTRL_REG_CKG_ODCLK2           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_odclk2)
#define REG_DISP_GP_CTRL_29_L                 (DISP_GP_CTRL_REG_CKG_ODCLK2)
#define REG_DISP_GP_CTRL_2A_L                 (REG_DISP_GP_CTRL_BASE + 0x54)
#define REG_DISP_GP_CTRL_2B_L                 (REG_DISP_GP_CTRL_BASE + 0x56)
#define REG_DISP_GP_CTRL_2C_L                 (REG_DISP_GP_CTRL_BASE + 0x58)
#define REG_DISP_GP_CTRL_2D_L                 (REG_DISP_GP_CTRL_BASE + 0x5a)
#define REG_DISP_GP_CTRL_2E_L                 (REG_DISP_GP_CTRL_BASE + 0x5c)
#define REG_DISP_GP_CTRL_2F_L                 (REG_DISP_GP_CTRL_BASE + 0x5e)
// h0030, bit: 15
/* spare register, default low*/
#define offset_of_disp_gp_ctrl_reg_disp_spare_lo (0x60)
#define mask_of_disp_gp_ctrl_reg_disp_spare_lo   (0xffff)
#define shift_of_disp_gp_ctrl_reg_disp_spare_lo  (0)
#define DISP_GP_CTRL_REG_DISP_SPARE_LO           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_disp_spare_lo)
#define REG_DISP_GP_CTRL_30_L                    (DISP_GP_CTRL_REG_DISP_SPARE_LO)
// h0031, bit: 15
/* spare register, default high*/
#define offset_of_disp_gp_ctrl_reg_disp_spare_hi (0x62)
#define mask_of_disp_gp_ctrl_reg_disp_spare_hi   (0xffff)
#define shift_of_disp_gp_ctrl_reg_disp_spare_hi  (0)
#define DISP_GP_CTRL_REG_DISP_SPARE_HI           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_disp_spare_hi)
#define REG_DISP_GP_CTRL_31_L                    (DISP_GP_CTRL_REG_DISP_SPARE_HI)
// h0032, bit: 7
/* select group IP testbus*/
#define offset_of_disp_gp_ctrl_reg_disp_test_in_sel (0x64)
#define mask_of_disp_gp_ctrl_reg_disp_test_in_sel   (0xff)
#define shift_of_disp_gp_ctrl_reg_disp_test_in_sel  (0)
#define DISP_GP_CTRL_REG_DISP_TEST_IN_SEL           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_disp_test_in_sel)
#define REG_DISP_GP_CTRL_32_L                       (DISP_GP_CTRL_REG_DISP_TEST_IN_SEL)
// h0033, bit: 15
/* imi_arb_disp ip0~ipf rq_type (0>1)*/
#define offset_of_disp_gp_ctrl_reg_rq_type_sel (0x66)
#define mask_of_disp_gp_ctrl_reg_rq_type_sel   (0xffff)
#define shift_of_disp_gp_ctrl_reg_rq_type_sel  (0)
#define DISP_GP_CTRL_REG_RQ_TYPE_SEL           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_rq_type_sel)
#define REG_DISP_GP_CTRL_33_L                  (DISP_GP_CTRL_REG_RQ_TYPE_SEL)
// h0034, bit: 15
/* imi_arb_disp ip0~ipf rq_mask */
#define offset_of_disp_gp_ctrl_reg_rq_mask (0x68)
#define mask_of_disp_gp_ctrl_reg_rq_mask   (0xffff)
#define shift_of_disp_gp_ctrl_reg_rq_mask  (0)
#define DISP_GP_CTRL_REG_RQ_MASK           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_rq_mask)
#define REG_DISP_GP_CTRL_34_L              (DISP_GP_CTRL_REG_RQ_MASK)
// h0035, bit: 3
/* clk_hdmi clock setting
[3:2]: 00: hdmi clock source
[1]: invert clock
[0]: disable clock; 1: gated
*/
#define offset_of_disp_gp_ctrl_reg_ckg_hdmi (0x6a)
#define mask_of_disp_gp_ctrl_reg_ckg_hdmi   (0xf)
#define shift_of_disp_gp_ctrl_reg_ckg_hdmi  (0)
#define DISP_GP_CTRL_REG_CKG_HDMI           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_hdmi)
#define REG_DISP_GP_CTRL_35_L               (DISP_GP_CTRL_REG_CKG_HDMI)
// h0035, bit: 7
/* clk_cvbs clock setting
[3:2]: 00: cvbs clock source
[1]: invert clock
[0]: disable clock; 1: gated
*/
#define offset_of_disp_gp_ctrl_reg_ckg_tve (0x6a)
#define mask_of_disp_gp_ctrl_reg_ckg_tve   (0xf0)
#define shift_of_disp_gp_ctrl_reg_ckg_tve  (4)
#define DISP_GP_CTRL_REG_CKG_TVE           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_tve)
// h0035, bit: 11
/* clk_hdmi_div2 clock setting
[3:2]: 00: hdmi clock source
[1]: invert clock
[0]: disable clock; 1: gated
*/
#define offset_of_disp_gp_ctrl_reg_ckg_hdmi_div2 (0x6a)
#define mask_of_disp_gp_ctrl_reg_ckg_hdmi_div2   (0xf00)
#define shift_of_disp_gp_ctrl_reg_ckg_hdmi_div2  (8)
#define DISP_GP_CTRL_REG_CKG_HDMI_DIV2           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_hdmi_div2)
// h0036, bit: 3
/* clk dac clock setting
[3:2]: 00: dac clock source
[1]: invert clock
[0]: disable clock; 1: gated
*/
#define offset_of_disp_gp_ctrl_reg_ckg_dac (0x6c)
#define mask_of_disp_gp_ctrl_reg_ckg_dac   (0xf)
#define shift_of_disp_gp_ctrl_reg_ckg_dac  (0)
#define DISP_GP_CTRL_REG_CKG_DAC           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_dac)
#define REG_DISP_GP_CTRL_36_L              (DISP_GP_CTRL_REG_CKG_DAC)
// h0036, bit: 7
/* clk_dac_waff setting
[3:2]: select, 00: hdmi clock, 01: dac_gate_div2 clock
[1]: invert clock
[0]: disable clock; 1: gated*/
#define offset_of_disp_gp_ctrl_reg_ckg_dac_waff (0x6c)
#define mask_of_disp_gp_ctrl_reg_ckg_dac_waff   (0xf0)
#define shift_of_disp_gp_ctrl_reg_ckg_dac_waff  (4)
#define DISP_GP_CTRL_REG_CKG_DAC_WAFF           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_dac_waff)
// h0037, bit: 3
/* */
#define offset_of_disp_gp_ctrl_reg_ckg_mipi_tx_dsi_apb (0x6e)
#define mask_of_disp_gp_ctrl_reg_ckg_mipi_tx_dsi_apb   (0xf)
#define shift_of_disp_gp_ctrl_reg_ckg_mipi_tx_dsi_apb  (0)
#define DISP_GP_CTRL_REG_CKG_MIPI_TX_DSI_APB           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_ckg_mipi_tx_dsi_apb)
#define REG_DISP_GP_CTRL_37_L                          (DISP_GP_CTRL_REG_CKG_MIPI_TX_DSI_APB)
// h0038, bit: 7
/* imi_arb_disp limit_max (unit 4)*/
#define offset_of_disp_gp_ctrl_reg_rq_limit_max (0x70)
#define mask_of_disp_gp_ctrl_reg_rq_limit_max   (0xff)
#define shift_of_disp_gp_ctrl_reg_rq_limit_max  (0)
#define DISP_GP_CTRL_REG_RQ_LIMIT_MAX           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_rq_limit_max)
#define REG_DISP_GP_CTRL_38_L                   (DISP_GP_CTRL_REG_RQ_LIMIT_MAX)
// h0038, bit: 8
/* imi_arb_disp limit_en*/
#define offset_of_disp_gp_ctrl_reg_limit_en (0x70)
#define mask_of_disp_gp_ctrl_reg_limit_en   (0x100)
#define shift_of_disp_gp_ctrl_reg_limit_en  (8)
#define DISP_GP_CTRL_REG_LIMIT_EN           (REG_DISP_GP_CTRL_BASE + offset_of_disp_gp_ctrl_reg_limit_en)
#define REG_DISP_GP_CTRL_39_L               (REG_DISP_GP_CTRL_BASE + 0x72)
#define REG_DISP_GP_CTRL_3A_L               (REG_DISP_GP_CTRL_BASE + 0x74)
#define REG_DISP_GP_CTRL_3B_L               (REG_DISP_GP_CTRL_BASE + 0x76)
#define REG_DISP_GP_CTRL_3C_L               (REG_DISP_GP_CTRL_BASE + 0x78)
#define REG_DISP_GP_CTRL_3D_L               (REG_DISP_GP_CTRL_BASE + 0x7a)
#define REG_DISP_GP_CTRL_3E_L               (REG_DISP_GP_CTRL_BASE + 0x7c)
#define REG_DISP_GP_CTRL_3F_L               (REG_DISP_GP_CTRL_BASE + 0x7e)
#define REG_DISP_GP_CTRL_40_L               (REG_DISP_GP_CTRL_BASE + 0x80)
#define REG_DISP_GP_CTRL_41_L               (REG_DISP_GP_CTRL_BASE + 0x82)
#define REG_DISP_GP_CTRL_42_L               (REG_DISP_GP_CTRL_BASE + 0x84)
#define REG_DISP_GP_CTRL_43_L               (REG_DISP_GP_CTRL_BASE + 0x86)
#define REG_DISP_GP_CTRL_44_L               (REG_DISP_GP_CTRL_BASE + 0x88)
#define REG_DISP_GP_CTRL_45_L               (REG_DISP_GP_CTRL_BASE + 0x8a)
#define REG_DISP_GP_CTRL_46_L               (REG_DISP_GP_CTRL_BASE + 0x8c)
#define REG_DISP_GP_CTRL_47_L               (REG_DISP_GP_CTRL_BASE + 0x8e)
#define REG_DISP_GP_CTRL_48_L               (REG_DISP_GP_CTRL_BASE + 0x90)
#define REG_DISP_GP_CTRL_49_L               (REG_DISP_GP_CTRL_BASE + 0x92)
#define REG_DISP_GP_CTRL_4A_L               (REG_DISP_GP_CTRL_BASE + 0x94)
#define REG_DISP_GP_CTRL_4B_L               (REG_DISP_GP_CTRL_BASE + 0x96)
#define REG_DISP_GP_CTRL_4C_L               (REG_DISP_GP_CTRL_BASE + 0x98)
#define REG_DISP_GP_CTRL_4D_L               (REG_DISP_GP_CTRL_BASE + 0x9a)
#define REG_DISP_GP_CTRL_4E_L               (REG_DISP_GP_CTRL_BASE + 0x9c)
#define REG_DISP_GP_CTRL_4F_L               (REG_DISP_GP_CTRL_BASE + 0x9e)
#define REG_DISP_GP_CTRL_50_L               (REG_DISP_GP_CTRL_BASE + 0xa0)
#define REG_DISP_GP_CTRL_51_L               (REG_DISP_GP_CTRL_BASE + 0xa2)
#define REG_DISP_GP_CTRL_52_L               (REG_DISP_GP_CTRL_BASE + 0xa4)
#define REG_DISP_GP_CTRL_53_L               (REG_DISP_GP_CTRL_BASE + 0xa6)
#define REG_DISP_GP_CTRL_54_L               (REG_DISP_GP_CTRL_BASE + 0xa8)
#define REG_DISP_GP_CTRL_55_L               (REG_DISP_GP_CTRL_BASE + 0xaa)
#define REG_DISP_GP_CTRL_56_L               (REG_DISP_GP_CTRL_BASE + 0xac)
#define REG_DISP_GP_CTRL_57_L               (REG_DISP_GP_CTRL_BASE + 0xae)
#define REG_DISP_GP_CTRL_58_L               (REG_DISP_GP_CTRL_BASE + 0xb0)
#define REG_DISP_GP_CTRL_59_L               (REG_DISP_GP_CTRL_BASE + 0xb2)
#define REG_DISP_GP_CTRL_5A_L               (REG_DISP_GP_CTRL_BASE + 0xb4)
#define REG_DISP_GP_CTRL_5B_L               (REG_DISP_GP_CTRL_BASE + 0xb6)
#define REG_DISP_GP_CTRL_5C_L               (REG_DISP_GP_CTRL_BASE + 0xb8)
#define REG_DISP_GP_CTRL_5D_L               (REG_DISP_GP_CTRL_BASE + 0xba)
#define REG_DISP_GP_CTRL_5E_L               (REG_DISP_GP_CTRL_BASE + 0xbc)
#define REG_DISP_GP_CTRL_5F_L               (REG_DISP_GP_CTRL_BASE + 0xbe)
#define REG_DISP_GP_CTRL_60_L               (REG_DISP_GP_CTRL_BASE + 0xc0)
#define REG_DISP_GP_CTRL_61_L               (REG_DISP_GP_CTRL_BASE + 0xc2)
#define REG_DISP_GP_CTRL_62_L               (REG_DISP_GP_CTRL_BASE + 0xc4)
#define REG_DISP_GP_CTRL_63_L               (REG_DISP_GP_CTRL_BASE + 0xc6)
#define REG_DISP_GP_CTRL_64_L               (REG_DISP_GP_CTRL_BASE + 0xc8)
#define REG_DISP_GP_CTRL_65_L               (REG_DISP_GP_CTRL_BASE + 0xca)
#define REG_DISP_GP_CTRL_66_L               (REG_DISP_GP_CTRL_BASE + 0xcc)
#define REG_DISP_GP_CTRL_67_L               (REG_DISP_GP_CTRL_BASE + 0xce)
#define REG_DISP_GP_CTRL_68_L               (REG_DISP_GP_CTRL_BASE + 0xd0)
#define REG_DISP_GP_CTRL_69_L               (REG_DISP_GP_CTRL_BASE + 0xd2)
#define REG_DISP_GP_CTRL_6A_L               (REG_DISP_GP_CTRL_BASE + 0xd4)
#define REG_DISP_GP_CTRL_6B_L               (REG_DISP_GP_CTRL_BASE + 0xd6)
#define REG_DISP_GP_CTRL_6C_L               (REG_DISP_GP_CTRL_BASE + 0xd8)
#define REG_DISP_GP_CTRL_6D_L               (REG_DISP_GP_CTRL_BASE + 0xda)
#define REG_DISP_GP_CTRL_6E_L               (REG_DISP_GP_CTRL_BASE + 0xdc)
#define REG_DISP_GP_CTRL_6F_L               (REG_DISP_GP_CTRL_BASE + 0xde)
#define REG_DISP_GP_CTRL_70_L               (REG_DISP_GP_CTRL_BASE + 0xe0)
#define REG_DISP_GP_CTRL_71_L               (REG_DISP_GP_CTRL_BASE + 0xe2)
#define REG_DISP_GP_CTRL_72_L               (REG_DISP_GP_CTRL_BASE + 0xe4)
#define REG_DISP_GP_CTRL_73_L               (REG_DISP_GP_CTRL_BASE + 0xe6)
#define REG_DISP_GP_CTRL_74_L               (REG_DISP_GP_CTRL_BASE + 0xe8)
#define REG_DISP_GP_CTRL_75_L               (REG_DISP_GP_CTRL_BASE + 0xea)
#define REG_DISP_GP_CTRL_76_L               (REG_DISP_GP_CTRL_BASE + 0xec)
#define REG_DISP_GP_CTRL_77_L               (REG_DISP_GP_CTRL_BASE + 0xee)
#define REG_DISP_GP_CTRL_78_L               (REG_DISP_GP_CTRL_BASE + 0xf0)
#define REG_DISP_GP_CTRL_79_L               (REG_DISP_GP_CTRL_BASE + 0xf2)
#define REG_DISP_GP_CTRL_7A_L               (REG_DISP_GP_CTRL_BASE + 0xf4)
#define REG_DISP_GP_CTRL_7B_L               (REG_DISP_GP_CTRL_BASE + 0xf6)
#define REG_DISP_GP_CTRL_7C_L               (REG_DISP_GP_CTRL_BASE + 0xf8)
#define REG_DISP_GP_CTRL_7D_L               (REG_DISP_GP_CTRL_BASE + 0xfa)
#define REG_DISP_GP_CTRL_7E_L               (REG_DISP_GP_CTRL_BASE + 0xfc)
#define REG_DISP_GP_CTRL_7F_L               (REG_DISP_GP_CTRL_BASE + 0xfe)
// h0000, bit: 3
/* Reserved for HW ECO*/
#define offset_of_disp_top0_reg_sc_top_hw_reserve (0x0)
#define mask_of_disp_top0_reg_sc_top_hw_reserve   (0xf)
#define shift_of_disp_top0_reg_sc_top_hw_reserve  (0)
#define DISP_TOP0_REG_SC_TOP_HW_RESERVE           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_sc_top_hw_reserve)
#define REG_DISP_TOP0_00_L                        (DISP_TOP0_REG_SC_TOP_HW_RESERVE)
// h0000, bit: 7
/* Select source of test_bus*/
#define offset_of_disp_top0_reg_test_sel (0x0)
#define mask_of_disp_top0_reg_test_sel   (0xf0)
#define shift_of_disp_top0_reg_test_sel  (4)
#define DISP_TOP0_REG_TEST_SEL           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_test_sel)
// h0000, bit: 15
/* SW reset
[0] sw reset IP0
[1] sw reset all engine  (without register)
[2] sw reset register0
[3] sw reset interrupt0
[4] sw reset of wdma path
[7]  sw reset interrupt of wdma path*/
#define offset_of_disp_top0_reg_sw_rst (0x0)
#define mask_of_disp_top0_reg_sw_rst   (0xff00)
#define shift_of_disp_top0_reg_sw_rst  (8)
#define DISP_TOP0_REG_SW_RST           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_sw_rst)
#define REG_DISP_TOP0_01_L             (REG_DISP_TOP0_BASE + 0x2)
// h0002, bit: 15
/* Status of interrupt, write 1 to clear*/
#define offset_of_disp_top0_reg_intr_status_grp_a (0x4)
#define mask_of_disp_top0_reg_intr_status_grp_a   (0xffff)
#define shift_of_disp_top0_reg_intr_status_grp_a  (0)
#define DISP_TOP0_REG_INTR_STATUS_GRP_A           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_intr_status_grp_a)
#define REG_DISP_TOP0_02_L                        (DISP_TOP0_REG_INTR_STATUS_GRP_A)
// h0003, bit: 15
/* Enable interrupt*/
#define offset_of_disp_top0_reg_intr_mask_grp_a (0x6)
#define mask_of_disp_top0_reg_intr_mask_grp_a   (0xffff)
#define shift_of_disp_top0_reg_intr_mask_grp_a  (0)
#define DISP_TOP0_REG_INTR_MASK_GRP_A           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_intr_mask_grp_a)
#define REG_DISP_TOP0_03_L                      (DISP_TOP0_REG_INTR_MASK_GRP_A)
// h0004, bit: 15
/* Original status of interrupt source*/
#define offset_of_disp_top0_reg_intr_raw_status_grp_a (0x8)
#define mask_of_disp_top0_reg_intr_raw_status_grp_a   (0xffff)
#define shift_of_disp_top0_reg_intr_raw_status_grp_a  (0)
#define DISP_TOP0_REG_INTR_RAW_STATUS_GRP_A           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_intr_raw_status_grp_a)
#define REG_DISP_TOP0_04_L                            (DISP_TOP0_REG_INTR_RAW_STATUS_GRP_A)
// h0005, bit: 15
/* force interrupt*/
#define offset_of_disp_top0_reg_intr_force_grp_a (0xa)
#define mask_of_disp_top0_reg_intr_force_grp_a   (0xffff)
#define shift_of_disp_top0_reg_intr_force_grp_a  (0)
#define DISP_TOP0_REG_INTR_FORCE_GRP_A           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_intr_force_grp_a)
#define REG_DISP_TOP0_05_L                       (DISP_TOP0_REG_INTR_FORCE_GRP_A)
#define REG_DISP_TOP0_06_L                       (REG_DISP_TOP0_BASE + 0xc)
// h0007, bit: 0
/* Select source of mace
0: from scaling patgen
1: from external video source*/
#define offset_of_disp_top0_reg_mace_src_sel (0xe)
#define mask_of_disp_top0_reg_mace_src_sel   (0x1)
#define shift_of_disp_top0_reg_mace_src_sel  (0)
#define DISP_TOP0_REG_MACE_SRC_SEL           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_mace_src_sel)
#define REG_DISP_TOP0_07_L                   (DISP_TOP0_REG_MACE_SRC_SEL)
// h0007, bit: 4
/* Select scaling patgen mode
3'h0: 1-pix gray ramp
3'h1: 16-pix gray ramp
3'h2: 32-pix gray ramp
3'h3: 64-pix gray ramp
3'h4: 16-pix gray stick
3'h5: 16-pix colorbar
3'h6: 32-pix colorbar
3'h7: 64-pix colorbar*/
#define offset_of_disp_top0_reg_patgen_mode (0xe)
#define mask_of_disp_top0_reg_patgen_mode   (0x1e)
#define shift_of_disp_top0_reg_patgen_mode  (1)
#define DISP_TOP0_REG_PATGEN_MODE           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_patgen_mode)
// h0007, bit: 8
/* Force window 0 no signal*/
#define offset_of_disp_top0_reg_force_w0_no_signal (0xe)
#define mask_of_disp_top0_reg_force_w0_no_signal   (0x100)
#define shift_of_disp_top0_reg_force_w0_no_signal  (8)
#define DISP_TOP0_REG_FORCE_W0_NO_SIGNAL           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_force_w0_no_signal)
// h0007, bit: 15
/* Force all windows no signal*/
#define offset_of_disp_top0_reg_force_all_no_signal (0xe)
#define mask_of_disp_top0_reg_force_all_no_signal   (0x8000)
#define shift_of_disp_top0_reg_force_all_no_signal  (15)
#define DISP_TOP0_REG_FORCE_ALL_NO_SIGNAL           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_force_all_no_signal)
// bigger than 16 bit case allh0008
#define offset_of_disp_top0_reg_bist_fail_status (0x10)
#define mask_of_disp_top0_reg_bist_fail_status   (0xffffffff)
#define shift_of_disp_top0_reg_bist_fail_status  (0)
#define DISP_TOP0_REG_BIST_FAIL_STATUS           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_bist_fail_status)
// h0008, bit: 15
/* Status of BIST fail*/
#define offset_of_disp_top0_reg_bist_fail_status_0 (0x10)
#define mask_of_disp_top0_reg_bist_fail_status_0   (0xffff)
#define shift_of_disp_top0_reg_bist_fail_status_0  (0)
#define DISP_TOP0_REG_BIST_FAIL_STATUS_0           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_bist_fail_status_0)
#define REG_DISP_TOP0_08_L                         (DISP_TOP0_REG_BIST_FAIL_STATUS_0)
// h0009, bit: 15
/* Status of BIST fail*/
#define offset_of_disp_top0_reg_bist_fail_status_1 (0x12)
#define mask_of_disp_top0_reg_bist_fail_status_1   (0xffff)
#define shift_of_disp_top0_reg_bist_fail_status_1  (0)
#define DISP_TOP0_REG_BIST_FAIL_STATUS_1           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_bist_fail_status_1)
#define REG_DISP_TOP0_09_L                         (DISP_TOP0_REG_BIST_FAIL_STATUS_1)
#define REG_DISP_TOP0_0A_L                         (REG_DISP_TOP0_BASE + 0x14)
#define REG_DISP_TOP0_0B_L                         (REG_DISP_TOP0_BASE + 0x16)
#define REG_DISP_TOP0_0C_L                         (REG_DISP_TOP0_BASE + 0x18)
#define REG_DISP_TOP0_0D_L                         (REG_DISP_TOP0_BASE + 0x1a)
#define REG_DISP_TOP0_0E_L                         (REG_DISP_TOP0_BASE + 0x1c)
#define REG_DISP_TOP0_0F_L                         (REG_DISP_TOP0_BASE + 0x1e)
// bigger than 16 bit case allh0010
#define offset_of_disp_top0_reg_syn_set (0x20)
#define mask_of_disp_top0_reg_syn_set   (0xffffff)
#define shift_of_disp_top0_reg_syn_set  (0)
#define DISP_TOP0_REG_SYN_SET           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_syn_set)
// h0010, bit: 15
/* Set of synthesizer*/
#define offset_of_disp_top0_reg_syn_set_0 (0x20)
#define mask_of_disp_top0_reg_syn_set_0   (0xffff)
#define shift_of_disp_top0_reg_syn_set_0  (0)
#define DISP_TOP0_REG_SYN_SET_0           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_syn_set_0)
#define REG_DISP_TOP0_10_L                (DISP_TOP0_REG_SYN_SET_0)
// h0011, bit: 7
/* Set of synthesizer*/
#define offset_of_disp_top0_reg_syn_set_1 (0x22)
#define mask_of_disp_top0_reg_syn_set_1   (0xff)
#define shift_of_disp_top0_reg_syn_set_1  (0)
#define DISP_TOP0_REG_SYN_SET_1           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_syn_set_1)
#define REG_DISP_TOP0_11_L                (DISP_TOP0_REG_SYN_SET_1)
// bigger than 16 bit case allh0012
#define offset_of_disp_top0_reg_syn_set_self (0x24)
#define mask_of_disp_top0_reg_syn_set_self   (0xffffff)
#define shift_of_disp_top0_reg_syn_set_self  (0)
#define DISP_TOP0_REG_SYN_SET_SELF           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_syn_set_self)
// h0012, bit: 15
/* Set of synthesizer2*/
#define offset_of_disp_top0_reg_syn_set_self_0 (0x24)
#define mask_of_disp_top0_reg_syn_set_self_0   (0xffff)
#define shift_of_disp_top0_reg_syn_set_self_0  (0)
#define DISP_TOP0_REG_SYN_SET_SELF_0           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_syn_set_self_0)
#define REG_DISP_TOP0_12_L                     (DISP_TOP0_REG_SYN_SET_SELF_0)
// h0013, bit: 7
/* Set of synthesizer2*/
#define offset_of_disp_top0_reg_syn_set_self_1 (0x26)
#define mask_of_disp_top0_reg_syn_set_self_1   (0xff)
#define shift_of_disp_top0_reg_syn_set_self_1  (0)
#define DISP_TOP0_REG_SYN_SET_SELF_1           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_syn_set_self_1)
#define REG_DISP_TOP0_13_L                     (DISP_TOP0_REG_SYN_SET_SELF_1)
// h0014, bit: 0
/* Set of synthesizer mux*/
#define offset_of_disp_top0_reg_syn_set_mux (0x28)
#define mask_of_disp_top0_reg_syn_set_mux   (0x1)
#define shift_of_disp_top0_reg_syn_set_mux  (0)
#define DISP_TOP0_REG_SYN_SET_MUX           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_syn_set_mux)
#define REG_DISP_TOP0_14_L                  (DISP_TOP0_REG_SYN_SET_MUX)
// h0015, bit: 0
/* Enable Frame PLL*/
#define offset_of_disp_top0_reg_frame_pll_en (0x2a)
#define mask_of_disp_top0_reg_frame_pll_en   (0x1)
#define shift_of_disp_top0_reg_frame_pll_en  (0)
#define DISP_TOP0_REG_FRAME_PLL_EN           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_frame_pll_en)
#define REG_DISP_TOP0_15_L                   (DISP_TOP0_REG_FRAME_PLL_EN)
// h0015, bit: 1
/* FPLL ovs selcetion*/
#define offset_of_disp_top0_reg_fpll_ovs_sel (0x2a)
#define mask_of_disp_top0_reg_fpll_ovs_sel   (0x2)
#define shift_of_disp_top0_reg_fpll_ovs_sel  (1)
#define DISP_TOP0_REG_FPLL_OVS_SEL           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_fpll_ovs_sel)
// h0015, bit: 7
/* Reset Frame PLL*/
#define offset_of_disp_top0_reg_frame_pll_rst (0x2a)
#define mask_of_disp_top0_reg_frame_pll_rst   (0x80)
#define shift_of_disp_top0_reg_frame_pll_rst  (7)
#define DISP_TOP0_REG_FRAME_PLL_RST           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_frame_pll_rst)
#define REG_DISP_TOP0_16_L                    (REG_DISP_TOP0_BASE + 0x2c)
// h0017, bit: 14
/* Status of FPLL lost lock, Write 1 to clear*/
#define offset_of_disp_top0_reg_fpll_unlocked (0x2e)
#define mask_of_disp_top0_reg_fpll_unlocked   (0x4000)
#define shift_of_disp_top0_reg_fpll_unlocked  (14)
#define DISP_TOP0_REG_FPLL_UNLOCKED           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_fpll_unlocked)
#define REG_DISP_TOP0_17_L                    (DISP_TOP0_REG_FPLL_UNLOCKED)
// h0017, bit: 15
/* Status of FPLL lock*/
#define offset_of_disp_top0_reg_fpll_locked (0x2e)
#define mask_of_disp_top0_reg_fpll_locked   (0x8000)
#define shift_of_disp_top0_reg_fpll_locked  (15)
#define DISP_TOP0_REG_FPLL_LOCKED           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_fpll_locked)
// h0018, bit: 15
/* Phase error*/
#define offset_of_disp_top0_reg_raw_phase_err_rd (0x30)
#define mask_of_disp_top0_reg_raw_phase_err_rd   (0xffff)
#define shift_of_disp_top0_reg_raw_phase_err_rd  (0)
#define DISP_TOP0_REG_RAW_PHASE_ERR_RD           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_raw_phase_err_rd)
#define REG_DISP_TOP0_18_L                       (DISP_TOP0_REG_RAW_PHASE_ERR_RD)
// h0019, bit: 15
/* Frequency error*/
#define offset_of_disp_top0_reg_raw_freq_err_rd (0x32)
#define mask_of_disp_top0_reg_raw_freq_err_rd   (0xffff)
#define shift_of_disp_top0_reg_raw_freq_err_rd  (0)
#define DISP_TOP0_REG_RAW_FREQ_ERR_RD           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_raw_freq_err_rd)
#define REG_DISP_TOP0_19_L                      (DISP_TOP0_REG_RAW_FREQ_ERR_RD)
// h001a, bit: 11
/* Ratio of one clock, format 4.8*/
#define offset_of_disp_top0_reg_fpll_step_gain (0x34)
#define mask_of_disp_top0_reg_fpll_step_gain   (0xfff)
#define shift_of_disp_top0_reg_fpll_step_gain  (0)
#define DISP_TOP0_REG_FPLL_STEP_GAIN           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_fpll_step_gain)
#define REG_DISP_TOP0_1A_L                     (DISP_TOP0_REG_FPLL_STEP_GAIN)
// h001a, bit: 14
/* Counter of input frame is overflow*/
#define offset_of_disp_top0_reg_fin_freq_overflow (0x34)
#define mask_of_disp_top0_reg_fin_freq_overflow   (0x4000)
#define shift_of_disp_top0_reg_fin_freq_overflow  (14)
#define DISP_TOP0_REG_FIN_FREQ_OVERFLOW           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_fin_freq_overflow)
// h001a, bit: 15
/* Counter of output frame is overflow*/
#define offset_of_disp_top0_reg_fout_freq_overflow (0x34)
#define mask_of_disp_top0_reg_fout_freq_overflow   (0x8000)
#define shift_of_disp_top0_reg_fout_freq_overflow  (15)
#define DISP_TOP0_REG_FOUT_FREQ_OVERFLOW           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_fout_freq_overflow)
// h001b, bit: 3
/* Gain of phase,
0x7: 2x
0x8: 1x
0x9: ½ x*/
#define offset_of_disp_top0_reg_fpll_phase_gain (0x36)
#define mask_of_disp_top0_reg_fpll_phase_gain   (0xf)
#define shift_of_disp_top0_reg_fpll_phase_gain  (0)
#define DISP_TOP0_REG_FPLL_PHASE_GAIN           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_fpll_phase_gain)
#define REG_DISP_TOP0_1B_L                      (DISP_TOP0_REG_FPLL_PHASE_GAIN)
// h001b, bit: 7
/* Gain of frequency,
0x7: 2x
0x8: 1x
0x9: ½ x*/
#define offset_of_disp_top0_reg_fpll_freq_gain (0x36)
#define mask_of_disp_top0_reg_fpll_freq_gain   (0xf0)
#define shift_of_disp_top0_reg_fpll_freq_gain  (4)
#define DISP_TOP0_REG_FPLL_FREQ_GAIN           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_fpll_freq_gain)
// h001b, bit: 15
/* Threshold({reg_fpll_phase_lock_thd,2'b11}) to judge lock or not.*/
#define offset_of_disp_top0_reg_fpll_phase_lock_thd (0x36)
#define mask_of_disp_top0_reg_fpll_phase_lock_thd   (0xff00)
#define shift_of_disp_top0_reg_fpll_phase_lock_thd  (8)
#define DISP_TOP0_REG_FPLL_PHASE_LOCK_THD           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_fpll_phase_lock_thd)
// bigger than 16 bit case allh001c
#define offset_of_disp_top0_reg_fpll_abs_limit (0x38)
#define mask_of_disp_top0_reg_fpll_abs_limit   (0xfffff)
#define shift_of_disp_top0_reg_fpll_abs_limit  (0)
#define DISP_TOP0_REG_FPLL_ABS_LIMIT           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_fpll_abs_limit)
// h001c, bit: 15
/* Limit of frame PLL step*/
#define offset_of_disp_top0_reg_fpll_abs_limit_0 (0x38)
#define mask_of_disp_top0_reg_fpll_abs_limit_0   (0xffff)
#define shift_of_disp_top0_reg_fpll_abs_limit_0  (0)
#define DISP_TOP0_REG_FPLL_ABS_LIMIT_0           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_fpll_abs_limit_0)
#define REG_DISP_TOP0_1C_L                       (DISP_TOP0_REG_FPLL_ABS_LIMIT_0)
// h001d, bit: 3
/* Limit of frame PLL step*/
#define offset_of_disp_top0_reg_fpll_abs_limit_1 (0x3a)
#define mask_of_disp_top0_reg_fpll_abs_limit_1   (0xf)
#define shift_of_disp_top0_reg_fpll_abs_limit_1  (0)
#define DISP_TOP0_REG_FPLL_ABS_LIMIT_1           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_fpll_abs_limit_1)
#define REG_DISP_TOP0_1D_L                       (DISP_TOP0_REG_FPLL_ABS_LIMIT_1)
#define REG_DISP_TOP0_1E_L                       (REG_DISP_TOP0_BASE + 0x3c)
#define REG_DISP_TOP0_1F_L                       (REG_DISP_TOP0_BASE + 0x3e)
// h0020, bit: 3
/* hdmi clk freq / odclk freq = ?
4'h0 : 1x, 4'h1: 2x, ….. 4'hf : 16x*/
#define offset_of_disp_top0_reg_hdmi_to_odclk_rate (0x40)
#define mask_of_disp_top0_reg_hdmi_to_odclk_rate   (0xf)
#define shift_of_disp_top0_reg_hdmi_to_odclk_rate  (0)
#define DISP_TOP0_REG_HDMI_TO_ODCLK_RATE           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_hdmi_to_odclk_rate)
#define REG_DISP_TOP0_20_L                         (DISP_TOP0_REG_HDMI_TO_ODCLK_RATE)
// h0020, bit: 13
/* OP2 -> 1'b0: osdb no swap(back). 1'b1:osdb swap to front*/
#define offset_of_disp_top0_reg_osdb_swap_en (0x40)
#define mask_of_disp_top0_reg_osdb_swap_en   (0x2000)
#define shift_of_disp_top0_reg_osdb_swap_en  (13)
#define DISP_TOP0_REG_OSDB_SWAP_EN           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_osdb_swap_en)
// h0020, bit: 15
/* [0]: 1'b0: mopg, 1'b1: moprot0
[1]: 1'b0: mops, 1'b1: moprot1*/
#define offset_of_disp_top0_reg_miu_moprot_mux (0x40)
#define mask_of_disp_top0_reg_miu_moprot_mux   (0xc000)
#define shift_of_disp_top0_reg_miu_moprot_mux  (14)
#define DISP_TOP0_REG_MIU_MOPROT_MUX           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_miu_moprot_mux)
// h0021, bit: 1
/* dac src:1'b0: disp_path0, 1'b1: disp_path1*/
#define offset_of_disp_top0_reg_dac_src_mux (0x42)
#define mask_of_disp_top0_reg_dac_src_mux   (0x3)
#define shift_of_disp_top0_reg_dac_src_mux  (0)
#define DISP_TOP0_REG_DAC_SRC_MUX           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_src_mux)
#define REG_DISP_TOP0_21_L                  (DISP_TOP0_REG_DAC_SRC_MUX)
// h0021, bit: 3
/* hdmi src:1'b0: disp_path0, 1'b1: disp_path1*/
#define offset_of_disp_top0_reg_hdmi_src_mux (0x42)
#define mask_of_disp_top0_reg_hdmi_src_mux   (0xc)
#define shift_of_disp_top0_reg_hdmi_src_mux  (2)
#define DISP_TOP0_REG_HDMI_SRC_MUX           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_hdmi_src_mux)
// h0021, bit: 5
/* lcd src:1'b0: disp_path0, 1'b1: disp_path1*/
#define offset_of_disp_top0_reg_lcd_src_mux (0x42)
#define mask_of_disp_top0_reg_lcd_src_mux   (0x30)
#define shift_of_disp_top0_reg_lcd_src_mux  (4)
#define DISP_TOP0_REG_LCD_SRC_MUX           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_lcd_src_mux)
// h0021, bit: 7
/* 2'h0: source from in front of op2 of disp0
2'h1: source from in back of op2 of disp0
2'h2: source from in front of op2 of disp1
2'h3: source from in back of op2 of disp1*/
#define offset_of_disp_top0_reg_disp_to_miu_mux (0x42)
#define mask_of_disp_top0_reg_disp_to_miu_mux   (0xc0)
#define shift_of_disp_top0_reg_disp_to_miu_mux  (6)
#define DISP_TOP0_REG_DISP_TO_MIU_MUX           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_disp_to_miu_mux)
// h0021, bit: 9
/* [1] enable.
[0] 1'b0: disp_path0, 1'b1: disp_path1*/
#define offset_of_disp_top0_reg_fpll1_src_mux (0x42)
#define mask_of_disp_top0_reg_fpll1_src_mux   (0x300)
#define shift_of_disp_top0_reg_fpll1_src_mux  (8)
#define DISP_TOP0_REG_FPLL1_SRC_MUX           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_fpll1_src_mux)
// h0021, bit: 11
/* dsi src:1'b0: disp_path0, 1'b1: disp_path1*/
#define offset_of_disp_top0_reg_dsi_src_mux (0x42)
#define mask_of_disp_top0_reg_dsi_src_mux   (0xc00)
#define shift_of_disp_top0_reg_dsi_src_mux  (10)
#define DISP_TOP0_REG_DSI_SRC_MUX           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dsi_src_mux)
// h0021, bit: 13
/* dsi src:1'b0: disp_path0, 1'b1: disp_path1*/
#define offset_of_disp_top0_reg_cvbs_src_mux (0x42)
#define mask_of_disp_top0_reg_cvbs_src_mux   (0x3000)
#define shift_of_disp_top0_reg_cvbs_src_mux  (12)
#define DISP_TOP0_REG_CVBS_SRC_MUX           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cvbs_src_mux)
#define REG_DISP_TOP0_22_L                   (REG_DISP_TOP0_BASE + 0x44)
#define REG_DISP_TOP0_23_L                   (REG_DISP_TOP0_BASE + 0x46)
// h0024, bit: 6
/* dsi afifo full threshold during dsi mode (wptr = rptr + thr)*/
#define offset_of_disp_top0_reg_dsi_aff_full_thr (0x48)
#define mask_of_disp_top0_reg_dsi_aff_full_thr   (0x7f)
#define shift_of_disp_top0_reg_dsi_aff_full_thr  (0)
#define DISP_TOP0_REG_DSI_AFF_FULL_THR           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dsi_aff_full_thr)
#define REG_DISP_TOP0_24_L                       (DISP_TOP0_REG_DSI_AFF_FULL_THR)
// h0024, bit: 8
/* 0: hdmi/dac mode; 1: dsi mode*/
#define offset_of_disp_top0_reg_dsi_aff_md_sel (0x48)
#define mask_of_disp_top0_reg_dsi_aff_md_sel   (0x100)
#define shift_of_disp_top0_reg_dsi_aff_md_sel  (8)
#define DISP_TOP0_REG_DSI_AFF_MD_SEL           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dsi_aff_md_sel)
// h0024, bit: 12
/* Write 1 to clear afifo ptr*/
#define offset_of_disp_top0_reg_dsi_aff_sw_rst (0x48)
#define mask_of_disp_top0_reg_dsi_aff_sw_rst   (0x1000)
#define shift_of_disp_top0_reg_dsi_aff_sw_rst  (12)
#define DISP_TOP0_REG_DSI_AFF_SW_RST           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dsi_aff_sw_rst)
// h0024, bit: 13
/* Write 0 to clear afifo dst*/
#define offset_of_disp_top0_reg_dsi_dst_sw_rstz (0x48)
#define mask_of_disp_top0_reg_dsi_dst_sw_rstz   (0x2000)
#define shift_of_disp_top0_reg_dsi_dst_sw_rstz  (13)
#define DISP_TOP0_REG_DSI_DST_SW_RSTZ           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dsi_dst_sw_rstz)
// h0024, bit: 14
/* Write 0 to clear afifo src*/
#define offset_of_disp_top0_reg_dsi_src_sw_rstz (0x48)
#define mask_of_disp_top0_reg_dsi_src_sw_rstz   (0x4000)
#define shift_of_disp_top0_reg_dsi_src_sw_rstz  (14)
#define DISP_TOP0_REG_DSI_SRC_SW_RSTZ           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dsi_src_sw_rstz)
// h0025, bit: 0
/* dsi afifo full flag, shall be clear by reg_aff_full_clr*/
#define offset_of_disp_top0_reg_dsi_aff_full_flag (0x4a)
#define mask_of_disp_top0_reg_dsi_aff_full_flag   (0x1)
#define shift_of_disp_top0_reg_dsi_aff_full_flag  (0)
#define DISP_TOP0_REG_DSI_AFF_FULL_FLAG           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dsi_aff_full_flag)
#define REG_DISP_TOP0_25_L                        (DISP_TOP0_REG_DSI_AFF_FULL_FLAG)
// h0025, bit: 1
/* dsi afifo empty flag, shall be clear by reg_aff_empty_clr*/
#define offset_of_disp_top0_reg_dsi_aff_empty_flag (0x4a)
#define mask_of_disp_top0_reg_dsi_aff_empty_flag   (0x2)
#define shift_of_disp_top0_reg_dsi_aff_empty_flag  (1)
#define DISP_TOP0_REG_DSI_AFF_EMPTY_FLAG           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dsi_aff_empty_flag)
// h0025, bit: 4
/* 0: disable pixel clock gate function for DSI Tx module
1: enable pixel clock gate function for DSI Tx module*/
#define offset_of_disp_top0_reg_dsi_clk_gate_en (0x4a)
#define mask_of_disp_top0_reg_dsi_clk_gate_en   (0x10)
#define shift_of_disp_top0_reg_dsi_clk_gate_en  (4)
#define DISP_TOP0_REG_DSI_CLK_GATE_EN           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dsi_clk_gate_en)
// h0025, bit: 8
/* 0: hsync, vsync after meta flip-flop rising edge may not sync
1: hsync, vsync after meta flip-flop rising edge guarantee sync*/
#define offset_of_disp_top0_reg_dsi_hv_sync_opt (0x4a)
#define mask_of_disp_top0_reg_dsi_hv_sync_opt   (0x100)
#define shift_of_disp_top0_reg_dsi_hv_sync_opt  (8)
#define DISP_TOP0_REG_DSI_HV_SYNC_OPT           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dsi_hv_sync_opt)
#define REG_DISP_TOP0_26_L                      (REG_DISP_TOP0_BASE + 0x4c)
#define REG_DISP_TOP0_27_L                      (REG_DISP_TOP0_BASE + 0x4e)
// h0028, bit: 3
/* Test out select
4'h0: mop0
4'h1: sc0
4'h2: gop0
4'h3: mop1
4'h4: sc1
4'h5: gop1
4'h6: mop2
4'h7: sc2
4'h8: gop2
4'h9: hdmi_tx
4'ha: lcd
4'hb: dsi
*/
#define offset_of_disp_top0_reg_disp_test_out (0x50)
#define mask_of_disp_top0_reg_disp_test_out   (0xf)
#define shift_of_disp_top0_reg_disp_test_out  (0)
#define DISP_TOP0_REG_DISP_TEST_OUT           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_disp_test_out)
#define REG_DISP_TOP0_28_L                    (DISP_TOP0_REG_DISP_TEST_OUT)
#define REG_DISP_TOP0_29_L                    (REG_DISP_TOP0_BASE + 0x52)
#define REG_DISP_TOP0_2A_L                    (REG_DISP_TOP0_BASE + 0x54)
#define REG_DISP_TOP0_2B_L                    (REG_DISP_TOP0_BASE + 0x56)
#define REG_DISP_TOP0_2C_L                    (REG_DISP_TOP0_BASE + 0x58)
#define REG_DISP_TOP0_2D_L                    (REG_DISP_TOP0_BASE + 0x5a)
#define REG_DISP_TOP0_2E_L                    (REG_DISP_TOP0_BASE + 0x5c)
#define REG_DISP_TOP0_2F_L                    (REG_DISP_TOP0_BASE + 0x5e)
// h0030, bit: 0
/* Write 1 to reset (level)*/
#define offset_of_disp_top0_reg_dac_sw_rst (0x60)
#define mask_of_disp_top0_reg_dac_sw_rst   (0x1)
#define shift_of_disp_top0_reg_dac_sw_rst  (0)
#define DISP_TOP0_REG_DAC_SW_RST           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_sw_rst)
#define REG_DISP_TOP0_30_L                 (DISP_TOP0_REG_DAC_SW_RST)
// h0030, bit: 1
/* Write 1 to clear afifo ptr*/
#define offset_of_disp_top0_reg_dac_aff_sw_rst (0x60)
#define mask_of_disp_top0_reg_dac_aff_sw_rst   (0x2)
#define shift_of_disp_top0_reg_dac_aff_sw_rst  (1)
#define DISP_TOP0_REG_DAC_AFF_SW_RST           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_aff_sw_rst)
// h0030, bit: 2
/* Write 1 to clear afifo full flag*/
#define offset_of_disp_top0_reg_dac_aff_full_clr (0x60)
#define mask_of_disp_top0_reg_dac_aff_full_clr   (0x4)
#define shift_of_disp_top0_reg_dac_aff_full_clr  (2)
#define DISP_TOP0_REG_DAC_AFF_FULL_CLR           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_aff_full_clr)
// h0030, bit: 3
/* Write 1 to clear afifo empty flag*/
#define offset_of_disp_top0_reg_dac_aff_empty_clr (0x60)
#define mask_of_disp_top0_reg_dac_aff_empty_clr   (0x8)
#define shift_of_disp_top0_reg_dac_aff_empty_clr  (3)
#define DISP_TOP0_REG_DAC_AFF_EMPTY_CLR           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_aff_empty_clr)
// h0030, bit: 5
/* 0: sel lsb for 2'b0
1: sel lsb for rgb[7:6]*/
#define offset_of_disp_top0_reg_dac_rgb_lsb_sel (0x60)
#define mask_of_disp_top0_reg_dac_rgb_lsb_sel   (0x20)
#define shift_of_disp_top0_reg_dac_rgb_lsb_sel  (5)
#define DISP_TOP0_REG_DAC_RGB_LSB_SEL           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_rgb_lsb_sel)
// h0030, bit: 15
/* reserved*/
#define offset_of_disp_top0_reg_reserved_30 (0x60)
#define mask_of_disp_top0_reg_reserved_30   (0xffc0)
#define shift_of_disp_top0_reg_reserved_30  (6)
#define DISP_TOP0_REG_RESERVED_30           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_reserved_30)
// h0031, bit: 0
/* dac afifo full flag, shall be clear by reg_aff_full_clr*/
#define offset_of_disp_top0_reg_dac_aff_full_flag (0x62)
#define mask_of_disp_top0_reg_dac_aff_full_flag   (0x1)
#define shift_of_disp_top0_reg_dac_aff_full_flag  (0)
#define DISP_TOP0_REG_DAC_AFF_FULL_FLAG           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_aff_full_flag)
#define REG_DISP_TOP0_31_L                        (DISP_TOP0_REG_DAC_AFF_FULL_FLAG)
// h0031, bit: 1
/* dac afifo empty flag, shall be clear by reg_aff_empty_clr*/
#define offset_of_disp_top0_reg_dac_aff_empty_flag (0x62)
#define mask_of_disp_top0_reg_dac_aff_empty_flag   (0x2)
#define shift_of_disp_top0_reg_dac_aff_empty_flag  (1)
#define DISP_TOP0_REG_DAC_AFF_EMPTY_FLAG           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_aff_empty_flag)
// h0031, bit: 2
/* dac sram bist fail rd*/
#define offset_of_disp_top0_reg_dac_bist_fail_rd (0x62)
#define mask_of_disp_top0_reg_dac_bist_fail_rd   (0x4)
#define shift_of_disp_top0_reg_dac_bist_fail_rd  (2)
#define DISP_TOP0_REG_DAC_BIST_FAIL_RD           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_bist_fail_rd)
// h0031, bit: 3
/* dsi cmdq sram bist fail rd*/
#define offset_of_disp_top0_reg_dsi_bist_fail_rd (0x62)
#define mask_of_disp_top0_reg_dsi_bist_fail_rd   (0x8)
#define shift_of_disp_top0_reg_dsi_bist_fail_rd  (3)
#define DISP_TOP0_REG_DSI_BIST_FAIL_RD           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dsi_bist_fail_rd)
// h0031, bit: 4
/* */
#define offset_of_disp_top0_reg_tvenc_bist_fail_rd (0x62)
#define mask_of_disp_top0_reg_tvenc_bist_fail_rd   (0x10)
#define shift_of_disp_top0_reg_tvenc_bist_fail_rd  (4)
#define DISP_TOP0_REG_TVENC_BIST_FAIL_RD           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_tvenc_bist_fail_rd)
// h0031, bit: 5
/* dsi afifo sram bist fail rd*/
#define offset_of_disp_top0_reg_dsi_aff_fail_rd (0x62)
#define mask_of_disp_top0_reg_dsi_aff_fail_rd   (0x20)
#define shift_of_disp_top0_reg_dsi_aff_fail_rd  (5)
#define DISP_TOP0_REG_DSI_AFF_FAIL_RD           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dsi_aff_fail_rd)
// h0032, bit: 1
/* 0: hdmi/dac mode;
1: dsi mode (no use in m6)
2: cvbs mode (no use)*/
#define offset_of_disp_top0_reg_dac_mux (0x64)
#define mask_of_disp_top0_reg_dac_mux   (0x3)
#define shift_of_disp_top0_reg_dac_mux  (0)
#define DISP_TOP0_REG_DAC_MUX           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_mux)
#define REG_DISP_TOP0_32_L              (DISP_TOP0_REG_DAC_MUX)
// h0032, bit: 7
/* clk_dac_gate_div2 clk freq / clk_dac_p freq = ?
4'h0 : 1x, 4'h1: 2x, ….. 4'hf : 16x*/
#define offset_of_disp_top0_reg_clk_dac_rate (0x64)
#define mask_of_disp_top0_reg_clk_dac_rate   (0xf0)
#define shift_of_disp_top0_reg_clk_dac_rate  (4)
#define DISP_TOP0_REG_CLK_DAC_RATE           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_clk_dac_rate)
// h0033, bit: 6
/* dac afifo full threshold during dsi mode (wptr = rptr + thr)*/
#define offset_of_disp_top0_reg_dsi_aff_thr (0x66)
#define mask_of_disp_top0_reg_dsi_aff_thr   (0x7f)
#define shift_of_disp_top0_reg_dsi_aff_thr  (0)
#define DISP_TOP0_REG_DSI_AFF_THR           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dsi_aff_thr)
#define REG_DISP_TOP0_33_L                  (DISP_TOP0_REG_DSI_AFF_THR)
// h0034, bit: 0
/* 1: enable dac dig hot plug mode*/
#define offset_of_disp_top0_reg_dac_hot_plug_en (0x68)
#define mask_of_disp_top0_reg_dac_hot_plug_en   (0x1)
#define shift_of_disp_top0_reg_dac_hot_plug_en  (0)
#define DISP_TOP0_REG_DAC_HOT_PLUG_EN           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_hot_plug_en)
#define REG_DISP_TOP0_34_L                      (DISP_TOP0_REG_DAC_HOT_PLUG_EN)
// h0035, bit: 12
/* matching line index of dig hot plug function*/
#define offset_of_disp_top0_reg_dac_hp_v_match (0x6a)
#define mask_of_disp_top0_reg_dac_hp_v_match   (0x1fff)
#define shift_of_disp_top0_reg_dac_hp_v_match  (0)
#define DISP_TOP0_REG_DAC_HP_V_MATCH           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_hp_v_match)
#define REG_DISP_TOP0_35_L                     (DISP_TOP0_REG_DAC_HP_V_MATCH)
// h0036, bit: 12
/* start point of dig hot plug function*/
#define offset_of_disp_top0_reg_dac_hp_h_start (0x6c)
#define mask_of_disp_top0_reg_dac_hp_h_start   (0x1fff)
#define shift_of_disp_top0_reg_dac_hp_h_start  (0)
#define DISP_TOP0_REG_DAC_HP_H_START           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_hp_h_start)
#define REG_DISP_TOP0_36_L                     (DISP_TOP0_REG_DAC_HP_H_START)
// h0037, bit: 12
/* length of dig hot plug function*/
#define offset_of_disp_top0_reg_dac_hp_h_len (0x6e)
#define mask_of_disp_top0_reg_dac_hp_h_len   (0x1fff)
#define shift_of_disp_top0_reg_dac_hp_h_len  (0)
#define DISP_TOP0_REG_DAC_HP_H_LEN           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_hp_h_len)
#define REG_DISP_TOP0_37_L                   (DISP_TOP0_REG_DAC_HP_H_LEN)
// h0038, bit: 7
/* latch delay after the start of dig hot plug function (unit T)*/
#define offset_of_disp_top0_reg_dac_hp_latch_delay (0x70)
#define mask_of_disp_top0_reg_dac_hp_latch_delay   (0xff)
#define shift_of_disp_top0_reg_dac_hp_latch_delay  (0)
#define DISP_TOP0_REG_DAC_HP_LATCH_DELAY           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_hp_latch_delay)
#define REG_DISP_TOP0_38_L                         (DISP_TOP0_REG_DAC_HP_LATCH_DELAY)
// h0039, bit: 9
/* data input during hot plug function*/
#define offset_of_disp_top0_reg_dac_hp_data_code (0x72)
#define mask_of_disp_top0_reg_dac_hp_data_code   (0x3ff)
#define shift_of_disp_top0_reg_dac_hp_data_code  (0)
#define DISP_TOP0_REG_DAC_HP_DATA_CODE           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_hp_data_code)
#define REG_DISP_TOP0_39_L                       (DISP_TOP0_REG_DAC_HP_DATA_CODE)
// h003a, bit: 0
/* raw status select, 0: IP source, 1: F.F.*/
#define offset_of_disp_top0_reg_dac_irq_select (0x74)
#define mask_of_disp_top0_reg_dac_irq_select   (0x1)
#define shift_of_disp_top0_reg_dac_irq_select  (0)
#define DISP_TOP0_REG_DAC_IRQ_SELECT           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_irq_select)
#define REG_DISP_TOP0_3A_L                     (DISP_TOP0_REG_DAC_IRQ_SELECT)
// h003b, bit: 15
/* interrupt mask*/
#define offset_of_disp_top0_reg_dac_irq_mask (0x76)
#define mask_of_disp_top0_reg_dac_irq_mask   (0xffff)
#define shift_of_disp_top0_reg_dac_irq_mask  (0)
#define DISP_TOP0_REG_DAC_IRQ_MASK           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_irq_mask)
#define REG_DISP_TOP0_3B_L                   (DISP_TOP0_REG_DAC_IRQ_MASK)
// h003c, bit: 15
/* interrupt sw force*/
#define offset_of_disp_top0_reg_dac_irq_force (0x78)
#define mask_of_disp_top0_reg_dac_irq_force   (0xffff)
#define shift_of_disp_top0_reg_dac_irq_force  (0)
#define DISP_TOP0_REG_DAC_IRQ_FORCE           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_irq_force)
#define REG_DISP_TOP0_3C_L                    (DISP_TOP0_REG_DAC_IRQ_FORCE)
// h003d, bit: 15
/* write 1 to clear interrupt*/
#define offset_of_disp_top0_reg_dac_irq_clr (0x7a)
#define mask_of_disp_top0_reg_dac_irq_clr   (0xffff)
#define shift_of_disp_top0_reg_dac_irq_clr  (0)
#define DISP_TOP0_REG_DAC_IRQ_CLR           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_irq_clr)
#define REG_DISP_TOP0_3D_L                  (DISP_TOP0_REG_DAC_IRQ_CLR)
// h003e, bit: 15
/* irq final status*/
#define offset_of_disp_top0_reg_dac_irq_final_status (0x7c)
#define mask_of_disp_top0_reg_dac_irq_final_status   (0xffff)
#define shift_of_disp_top0_reg_dac_irq_final_status  (0)
#define DISP_TOP0_REG_DAC_IRQ_FINAL_STATUS           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_irq_final_status)
#define REG_DISP_TOP0_3E_L                           (DISP_TOP0_REG_DAC_IRQ_FINAL_STATUS)
// h003f, bit: 15
/* irq raw status*/
#define offset_of_disp_top0_reg_dac_irq_raw_status (0x7e)
#define mask_of_disp_top0_reg_dac_irq_raw_status   (0xffff)
#define shift_of_disp_top0_reg_dac_irq_raw_status  (0)
#define DISP_TOP0_REG_DAC_IRQ_RAW_STATUS           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_dac_irq_raw_status)
#define REG_DISP_TOP0_3F_L                         (DISP_TOP0_REG_DAC_IRQ_RAW_STATUS)
// h0040, bit: 15
/* Status of CMDQ interrupt, write 1 to clear*/
#define offset_of_disp_top0_reg_cmdq_intr_status_grp_a (0x80)
#define mask_of_disp_top0_reg_cmdq_intr_status_grp_a   (0xffff)
#define shift_of_disp_top0_reg_cmdq_intr_status_grp_a  (0)
#define DISP_TOP0_REG_CMDQ_INTR_STATUS_GRP_A           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cmdq_intr_status_grp_a)
#define REG_DISP_TOP0_40_L                             (DISP_TOP0_REG_CMDQ_INTR_STATUS_GRP_A)
// h0041, bit: 15
/* Enable CMDQ interrupt*/
#define offset_of_disp_top0_reg_cmdq_intr_mask_grp_a (0x82)
#define mask_of_disp_top0_reg_cmdq_intr_mask_grp_a   (0xffff)
#define shift_of_disp_top0_reg_cmdq_intr_mask_grp_a  (0)
#define DISP_TOP0_REG_CMDQ_INTR_MASK_GRP_A           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cmdq_intr_mask_grp_a)
#define REG_DISP_TOP0_41_L                           (DISP_TOP0_REG_CMDQ_INTR_MASK_GRP_A)
// h0042, bit: 15
/* Original status of CMDQ interrupt source*/
#define offset_of_disp_top0_reg_cmdq_intr_raw_status_grp_a (0x84)
#define mask_of_disp_top0_reg_cmdq_intr_raw_status_grp_a   (0xffff)
#define shift_of_disp_top0_reg_cmdq_intr_raw_status_grp_a  (0)
#define DISP_TOP0_REG_CMDQ_INTR_RAW_STATUS_GRP_A \
    (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cmdq_intr_raw_status_grp_a)
#define REG_DISP_TOP0_42_L (DISP_TOP0_REG_CMDQ_INTR_RAW_STATUS_GRP_A)
// h0043, bit: 15
/* force CMDQ interrupt*/
#define offset_of_disp_top0_reg_cmdq_intr_force_grp_a (0x86)
#define mask_of_disp_top0_reg_cmdq_intr_force_grp_a   (0xffff)
#define shift_of_disp_top0_reg_cmdq_intr_force_grp_a  (0)
#define DISP_TOP0_REG_CMDQ_INTR_FORCE_GRP_A           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cmdq_intr_force_grp_a)
#define REG_DISP_TOP0_43_L                            (DISP_TOP0_REG_CMDQ_INTR_FORCE_GRP_A)
// h0044, bit: 15
/* debug hcnt*/
#define offset_of_disp_top0_reg_debug_hcnt (0x88)
#define mask_of_disp_top0_reg_debug_hcnt   (0xffff)
#define shift_of_disp_top0_reg_debug_hcnt  (0)
#define DISP_TOP0_REG_DEBUG_HCNT           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_debug_hcnt)
#define REG_DISP_TOP0_44_L                 (DISP_TOP0_REG_DEBUG_HCNT)
// h0045, bit: 15
/* debug vcnt*/
#define offset_of_disp_top0_reg_debug_vcnt (0x8a)
#define mask_of_disp_top0_reg_debug_vcnt   (0xffff)
#define shift_of_disp_top0_reg_debug_vcnt  (0)
#define DISP_TOP0_REG_DEBUG_VCNT           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_debug_vcnt)
#define REG_DISP_TOP0_45_L                 (DISP_TOP0_REG_DEBUG_VCNT)
// h0046, bit: 1
/* debug mode*/
#define offset_of_disp_top0_reg_debug_mode (0x8c)
#define mask_of_disp_top0_reg_debug_mode   (0x3)
#define shift_of_disp_top0_reg_debug_mode  (0)
#define DISP_TOP0_REG_DEBUG_MODE           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_debug_mode)
#define REG_DISP_TOP0_46_L                 (DISP_TOP0_REG_DEBUG_MODE)
#define REG_DISP_TOP0_47_L                 (REG_DISP_TOP0_BASE + 0x8e)
#define REG_DISP_TOP0_48_L                 (REG_DISP_TOP0_BASE + 0x90)
#define REG_DISP_TOP0_49_L                 (REG_DISP_TOP0_BASE + 0x92)
#define REG_DISP_TOP0_4A_L                 (REG_DISP_TOP0_BASE + 0x94)
#define REG_DISP_TOP0_4B_L                 (REG_DISP_TOP0_BASE + 0x96)
#define REG_DISP_TOP0_4C_L                 (REG_DISP_TOP0_BASE + 0x98)
#define REG_DISP_TOP0_4D_L                 (REG_DISP_TOP0_BASE + 0x9a)
#define REG_DISP_TOP0_4E_L                 (REG_DISP_TOP0_BASE + 0x9c)
#define REG_DISP_TOP0_4F_L                 (REG_DISP_TOP0_BASE + 0x9e)
// h0050, bit: 0
/* Write 1 to reset (level)*/
#define offset_of_disp_top0_reg_cvbs_sw_rst (0xa0)
#define mask_of_disp_top0_reg_cvbs_sw_rst   (0x1)
#define shift_of_disp_top0_reg_cvbs_sw_rst  (0)
#define DISP_TOP0_REG_CVBS_SW_RST           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cvbs_sw_rst)
#define REG_DISP_TOP0_50_L                  (DISP_TOP0_REG_CVBS_SW_RST)
// h0051, bit: 7
/* latch delay after the start of dig hot plug function (unit T)*/
#define offset_of_disp_top0_reg_cvbs_hp_latch_delay (0xa2)
#define mask_of_disp_top0_reg_cvbs_hp_latch_delay   (0xff)
#define shift_of_disp_top0_reg_cvbs_hp_latch_delay  (0)
#define DISP_TOP0_REG_CVBS_HP_LATCH_DELAY           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cvbs_hp_latch_delay)
#define REG_DISP_TOP0_51_L                          (DISP_TOP0_REG_CVBS_HP_LATCH_DELAY)
// h0052, bit: 9
/* data input during hot plug function*/
#define offset_of_disp_top0_reg_cvbs_hp_data_code (0xa4)
#define mask_of_disp_top0_reg_cvbs_hp_data_code   (0x3ff)
#define shift_of_disp_top0_reg_cvbs_hp_data_code  (0)
#define DISP_TOP0_REG_CVBS_HP_DATA_CODE           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cvbs_hp_data_code)
#define REG_DISP_TOP0_52_L                        (DISP_TOP0_REG_CVBS_HP_DATA_CODE)
// h0053, bit: 0
/* */
#define offset_of_disp_top0_reg_cvbs_bist_fail_rd (0xa6)
#define mask_of_disp_top0_reg_cvbs_bist_fail_rd   (0x1)
#define shift_of_disp_top0_reg_cvbs_bist_fail_rd  (0)
#define DISP_TOP0_REG_CVBS_BIST_FAIL_RD           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cvbs_bist_fail_rd)
#define REG_DISP_TOP0_53_L                        (DISP_TOP0_REG_CVBS_BIST_FAIL_RD)
// h0054, bit: 0
/* raw status select, 0: IP source, 1: F.F.*/
#define offset_of_disp_top0_reg_cvbs_irq_select (0xa8)
#define mask_of_disp_top0_reg_cvbs_irq_select   (0x1)
#define shift_of_disp_top0_reg_cvbs_irq_select  (0)
#define DISP_TOP0_REG_CVBS_IRQ_SELECT           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cvbs_irq_select)
#define REG_DISP_TOP0_54_L                      (DISP_TOP0_REG_CVBS_IRQ_SELECT)
// h0055, bit: 15
/* interrupt mask*/
#define offset_of_disp_top0_reg_cvbs_irq_mask (0xaa)
#define mask_of_disp_top0_reg_cvbs_irq_mask   (0xffff)
#define shift_of_disp_top0_reg_cvbs_irq_mask  (0)
#define DISP_TOP0_REG_CVBS_IRQ_MASK           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cvbs_irq_mask)
#define REG_DISP_TOP0_55_L                    (DISP_TOP0_REG_CVBS_IRQ_MASK)
// h0056, bit: 15
/* interrupt sw force*/
#define offset_of_disp_top0_reg_cvbs_irq_force (0xac)
#define mask_of_disp_top0_reg_cvbs_irq_force   (0xffff)
#define shift_of_disp_top0_reg_cvbs_irq_force  (0)
#define DISP_TOP0_REG_CVBS_IRQ_FORCE           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cvbs_irq_force)
#define REG_DISP_TOP0_56_L                     (DISP_TOP0_REG_CVBS_IRQ_FORCE)
// h0057, bit: 15
/* write 1 to clear interrupt*/
#define offset_of_disp_top0_reg_cvbs_irq_clr (0xae)
#define mask_of_disp_top0_reg_cvbs_irq_clr   (0xffff)
#define shift_of_disp_top0_reg_cvbs_irq_clr  (0)
#define DISP_TOP0_REG_CVBS_IRQ_CLR           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cvbs_irq_clr)
#define REG_DISP_TOP0_57_L                   (DISP_TOP0_REG_CVBS_IRQ_CLR)
// h0058, bit: 15
/* irq final status*/
#define offset_of_disp_top0_reg_cvbs_irq_final_status (0xb0)
#define mask_of_disp_top0_reg_cvbs_irq_final_status   (0xffff)
#define shift_of_disp_top0_reg_cvbs_irq_final_status  (0)
#define DISP_TOP0_REG_CVBS_IRQ_FINAL_STATUS           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cvbs_irq_final_status)
#define REG_DISP_TOP0_58_L                            (DISP_TOP0_REG_CVBS_IRQ_FINAL_STATUS)
// h0059, bit: 15
/* irq raw status*/
#define offset_of_disp_top0_reg_cvbs_irq_raw_status (0xb2)
#define mask_of_disp_top0_reg_cvbs_irq_raw_status   (0xffff)
#define shift_of_disp_top0_reg_cvbs_irq_raw_status  (0)
#define DISP_TOP0_REG_CVBS_IRQ_RAW_STATUS           (REG_DISP_TOP0_BASE + offset_of_disp_top0_reg_cvbs_irq_raw_status)
#define REG_DISP_TOP0_59_L                          (DISP_TOP0_REG_CVBS_IRQ_RAW_STATUS)
#define REG_DISP_TOP0_5A_L                          (REG_DISP_TOP0_BASE + 0xb4)
#define REG_DISP_TOP0_5B_L                          (REG_DISP_TOP0_BASE + 0xb6)
#define REG_DISP_TOP0_5C_L                          (REG_DISP_TOP0_BASE + 0xb8)
#define REG_DISP_TOP0_5D_L                          (REG_DISP_TOP0_BASE + 0xba)
#define REG_DISP_TOP0_5E_L                          (REG_DISP_TOP0_BASE + 0xbc)
#define REG_DISP_TOP0_5F_L                          (REG_DISP_TOP0_BASE + 0xbe)
#define REG_DISP_TOP0_60_L                          (REG_DISP_TOP0_BASE + 0xc0)
#define REG_DISP_TOP0_61_L                          (REG_DISP_TOP0_BASE + 0xc2)
#define REG_DISP_TOP0_62_L                          (REG_DISP_TOP0_BASE + 0xc4)
#define REG_DISP_TOP0_63_L                          (REG_DISP_TOP0_BASE + 0xc6)
#define REG_DISP_TOP0_64_L                          (REG_DISP_TOP0_BASE + 0xc8)
#define REG_DISP_TOP0_65_L                          (REG_DISP_TOP0_BASE + 0xca)
#define REG_DISP_TOP0_66_L                          (REG_DISP_TOP0_BASE + 0xcc)
#define REG_DISP_TOP0_67_L                          (REG_DISP_TOP0_BASE + 0xce)
#define REG_DISP_TOP0_68_L                          (REG_DISP_TOP0_BASE + 0xd0)
#define REG_DISP_TOP0_69_L                          (REG_DISP_TOP0_BASE + 0xd2)
#define REG_DISP_TOP0_6A_L                          (REG_DISP_TOP0_BASE + 0xd4)
#define REG_DISP_TOP0_6B_L                          (REG_DISP_TOP0_BASE + 0xd6)
#define REG_DISP_TOP0_6C_L                          (REG_DISP_TOP0_BASE + 0xd8)
#define REG_DISP_TOP0_6D_L                          (REG_DISP_TOP0_BASE + 0xda)
#define REG_DISP_TOP0_6E_L                          (REG_DISP_TOP0_BASE + 0xdc)
#define REG_DISP_TOP0_6F_L                          (REG_DISP_TOP0_BASE + 0xde)
#define REG_DISP_TOP0_70_L                          (REG_DISP_TOP0_BASE + 0xe0)
#define REG_DISP_TOP0_71_L                          (REG_DISP_TOP0_BASE + 0xe2)
#define REG_DISP_TOP0_72_L                          (REG_DISP_TOP0_BASE + 0xe4)
#define REG_DISP_TOP0_73_L                          (REG_DISP_TOP0_BASE + 0xe6)
#define REG_DISP_TOP0_74_L                          (REG_DISP_TOP0_BASE + 0xe8)
#define REG_DISP_TOP0_75_L                          (REG_DISP_TOP0_BASE + 0xea)
#define REG_DISP_TOP0_76_L                          (REG_DISP_TOP0_BASE + 0xec)
#define REG_DISP_TOP0_77_L                          (REG_DISP_TOP0_BASE + 0xee)
#define REG_DISP_TOP0_78_L                          (REG_DISP_TOP0_BASE + 0xf0)
#define REG_DISP_TOP0_79_L                          (REG_DISP_TOP0_BASE + 0xf2)
#define REG_DISP_TOP0_7A_L                          (REG_DISP_TOP0_BASE + 0xf4)
#define REG_DISP_TOP0_7B_L                          (REG_DISP_TOP0_BASE + 0xf6)
#define REG_DISP_TOP0_7C_L                          (REG_DISP_TOP0_BASE + 0xf8)
#define REG_DISP_TOP0_7D_L                          (REG_DISP_TOP0_BASE + 0xfa)
#define REG_DISP_TOP0_7E_L                          (REG_DISP_TOP0_BASE + 0xfc)
#define REG_DISP_TOP0_7F_L                          (REG_DISP_TOP0_BASE + 0xfe)
#define REG_DISP_CVBS_00_L                          (REG_DISP_CVBS_BASE + 0x0)
// h0001, bit: 0
/* WDMA start trigger*/
#define offset_of_disp_cvbs_reg_sc_frm_w_dma_trigger (0x2)
#define mask_of_disp_cvbs_reg_sc_frm_w_dma_trigger   (0x1)
#define shift_of_disp_cvbs_reg_sc_frm_w_dma_trigger  (0)
#define DISP_CVBS_REG_SC_FRM_W_DMA_TRIGGER           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_dma_trigger)
#define REG_DISP_CVBS_01_L                           (DISP_CVBS_REG_SC_FRM_W_DMA_TRIGGER)
// h0001, bit: 1
/* WDMA start trigger vsync aligned mode*/
#define offset_of_disp_cvbs_reg_sc_frm_w_dma_trigger_mode (0x2)
#define mask_of_disp_cvbs_reg_sc_frm_w_dma_trigger_mode   (0x2)
#define shift_of_disp_cvbs_reg_sc_frm_w_dma_trigger_mode  (1)
#define DISP_CVBS_REG_SC_FRM_W_DMA_TRIGGER_MODE           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_dma_trigger_mode)
// h0001, bit: 2
/* WDMA trigger mode frame end mask*/
#define offset_of_disp_cvbs_reg_sc_frm_w_dma_trig_frm_end_mask_en (0x2)
#define mask_of_disp_cvbs_reg_sc_frm_w_dma_trig_frm_end_mask_en   (0x4)
#define shift_of_disp_cvbs_reg_sc_frm_w_dma_trig_frm_end_mask_en  (2)
#define DISP_CVBS_REG_SC_FRM_W_DMA_TRIG_FRM_END_MASK_EN \
    (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_dma_trig_frm_end_mask_en)
// h0001, bit: 3
/* WDMA start trigger enable*/
#define offset_of_disp_cvbs_reg_sc_frm_w_dma_trigger_en (0x2)
#define mask_of_disp_cvbs_reg_sc_frm_w_dma_trigger_en   (0x8)
#define shift_of_disp_cvbs_reg_sc_frm_w_dma_trigger_en  (3)
#define DISP_CVBS_REG_SC_FRM_W_DMA_TRIGGER_EN           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_dma_trigger_en)
// h0001, bit: 4
/* WDMA start trigger double buffer enable*/
#define offset_of_disp_cvbs_reg_sc_frm_w_dma_trigger_dbf_en (0x2)
#define mask_of_disp_cvbs_reg_sc_frm_w_dma_trigger_dbf_en   (0x10)
#define shift_of_disp_cvbs_reg_sc_frm_w_dma_trigger_dbf_en  (4)
#define DISP_CVBS_REG_SC_FRM_W_DMA_TRIGGER_DBF_EN \
    (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_dma_trigger_dbf_en)
// h0001, bit: 8
/* Force MIU to WDMA ack*/
#define offset_of_disp_cvbs_reg_sc_frm_w_dma_force_ack (0x2)
#define mask_of_disp_cvbs_reg_sc_frm_w_dma_force_ack   (0x100)
#define shift_of_disp_cvbs_reg_sc_frm_w_dma_force_ack  (8)
#define DISP_CVBS_REG_SC_FRM_W_DMA_FORCE_ACK           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_dma_force_ack)
// h0001, bit: 9
/* 1'b0: by source vsync rising pulse
1'b1: by source vsync falling pulse*/
#define offset_of_disp_cvbs_reg_sc_frm_w_dma_vs_sel (0x2)
#define mask_of_disp_cvbs_reg_sc_frm_w_dma_vs_sel   (0x200)
#define shift_of_disp_cvbs_reg_sc_frm_w_dma_vs_sel  (9)
#define DISP_CVBS_REG_SC_FRM_W_DMA_VS_SEL           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_dma_vs_sel)
// h0001, bit: 10
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_uv_inv (0x2)
#define mask_of_disp_cvbs_reg_sc_frm_w_uv_inv   (0x400)
#define shift_of_disp_cvbs_reg_sc_frm_w_uv_inv  (10)
#define DISP_CVBS_REG_SC_FRM_W_UV_INV           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_uv_inv)
// h0001, bit: 11
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_vsync_inv (0x2)
#define mask_of_disp_cvbs_reg_sc_frm_w_vsync_inv   (0x800)
#define shift_of_disp_cvbs_reg_sc_frm_w_vsync_inv  (11)
#define DISP_CVBS_REG_SC_FRM_W_VSYNC_INV           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_vsync_inv)
// h0001, bit: 12
/* 1'b0: from src path
1'b1: cvbs_path only*/
#define offset_of_disp_cvbs_reg_sw_reset_src_mux (0x2)
#define mask_of_disp_cvbs_reg_sw_reset_src_mux   (0x1000)
#define shift_of_disp_cvbs_reg_sw_reset_src_mux  (12)
#define DISP_CVBS_REG_SW_RESET_SRC_MUX           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sw_reset_src_mux)
// h0001, bit: 13
/* 1'b0: set register ready
1'b1: start to set register*/
#define offset_of_disp_cvbs_reg_register_setting_monitor (0x2)
#define mask_of_disp_cvbs_reg_register_setting_monitor   (0x2000)
#define shift_of_disp_cvbs_reg_register_setting_monitor  (13)
#define DISP_CVBS_REG_REGISTER_SETTING_MONITOR           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_register_setting_monitor)
// h0001, bit: 14
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_dma_dbf_en (0x2)
#define mask_of_disp_cvbs_reg_sc_frm_w_dma_dbf_en   (0x4000)
#define shift_of_disp_cvbs_reg_sc_frm_w_dma_dbf_en  (14)
#define DISP_CVBS_REG_SC_FRM_W_DMA_DBF_EN           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_dma_dbf_en)
// h0001, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_dma_en (0x2)
#define mask_of_disp_cvbs_reg_sc_frm_w_dma_en   (0x8000)
#define shift_of_disp_cvbs_reg_sc_frm_w_dma_en  (15)
#define DISP_CVBS_REG_SC_FRM_W_DMA_EN           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_dma_en)
// h0002, bit: 2
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_c_filter (0x4)
#define mask_of_disp_cvbs_reg_sc_frm_w_c_filter   (0x7)
#define shift_of_disp_cvbs_reg_sc_frm_w_c_filter  (0)
#define DISP_CVBS_REG_SC_FRM_W_C_FILTER           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_c_filter)
#define REG_DISP_CVBS_02_L                        (DISP_CVBS_REG_SC_FRM_W_C_FILTER)
// h0002, bit: 3
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_422to420_md (0x4)
#define mask_of_disp_cvbs_reg_sc_frm_w_422to420_md   (0x8)
#define shift_of_disp_cvbs_reg_sc_frm_w_422to420_md  (3)
#define DISP_CVBS_REG_SC_FRM_W_422TO420_MD           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_422to420_md)
// h0002, bit: 4
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_420_planer_md (0x4)
#define mask_of_disp_cvbs_reg_sc_frm_w_420_planer_md   (0x10)
#define shift_of_disp_cvbs_reg_sc_frm_w_420_planer_md  (4)
#define DISP_CVBS_REG_SC_FRM_W_420_PLANER_MD           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_420_planer_md)
// h0002, bit: 5
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_422_sep (0x4)
#define mask_of_disp_cvbs_reg_sc_frm_w_422_sep   (0x20)
#define shift_of_disp_cvbs_reg_sc_frm_w_422_sep  (5)
#define DISP_CVBS_REG_SC_FRM_W_422_SEP           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_422_sep)
// h0002, bit: 6
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_422_planer (0x4)
#define mask_of_disp_cvbs_reg_sc_frm_w_422_planer   (0x40)
#define shift_of_disp_cvbs_reg_sc_frm_w_422_planer  (6)
#define DISP_CVBS_REG_SC_FRM_W_422_PLANER           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_422_planer)
// h0002, bit: 7
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_422_pack (0x4)
#define mask_of_disp_cvbs_reg_sc_frm_w_422_pack   (0x80)
#define shift_of_disp_cvbs_reg_sc_frm_w_422_pack  (7)
#define DISP_CVBS_REG_SC_FRM_W_422_PACK           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_422_pack)
// h0002, bit: 8
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_32b_md (0x4)
#define mask_of_disp_cvbs_reg_sc_frm_w_32b_md   (0x100)
#define shift_of_disp_cvbs_reg_sc_frm_w_32b_md  (8)
#define DISP_CVBS_REG_SC_FRM_W_32B_MD           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_32b_md)
// h0002, bit: 9
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_32b_md_ext (0x4)
#define mask_of_disp_cvbs_reg_sc_frm_w_32b_md_ext   (0x200)
#define shift_of_disp_cvbs_reg_sc_frm_w_32b_md_ext  (9)
#define DISP_CVBS_REG_SC_FRM_W_32B_MD_EXT           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_32b_md_ext)
// h0002, bit: 10
/* 1'b0: original address series
1'b1: even/odd inverse series*/
#define offset_of_disp_cvbs_reg_sc_frm_w_h_mirror_md (0x4)
#define mask_of_disp_cvbs_reg_sc_frm_w_h_mirror_md   (0x400)
#define shift_of_disp_cvbs_reg_sc_frm_w_h_mirror_md  (10)
#define DISP_CVBS_REG_SC_FRM_W_H_MIRROR_MD           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_h_mirror_md)
// h0002, bit: 11
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_rgb565 (0x4)
#define mask_of_disp_cvbs_reg_sc_frm_w_rgb565   (0x800)
#define shift_of_disp_cvbs_reg_sc_frm_w_rgb565  (11)
#define DISP_CVBS_REG_SC_FRM_W_RGB565           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_rgb565)
// h0002, bit: 12
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_v_flip (0x4)
#define mask_of_disp_cvbs_reg_sc_frm_w_v_flip   (0x1000)
#define shift_of_disp_cvbs_reg_sc_frm_w_v_flip  (12)
#define DISP_CVBS_REG_SC_FRM_W_V_FLIP           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_v_flip)
// h0002, bit: 13
/* 0: normal
1: H mirror*/
#define offset_of_disp_cvbs_reg_sc_frm_w_h_mirror (0x4)
#define mask_of_disp_cvbs_reg_sc_frm_w_h_mirror   (0x2000)
#define shift_of_disp_cvbs_reg_sc_frm_w_h_mirror  (13)
#define DISP_CVBS_REG_SC_FRM_W_H_MIRROR           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_h_mirror)
// h0002, bit: 14
/* 0: YUV mode
1: ARGB mode*/
#define offset_of_disp_cvbs_reg_sc_frm_w_argb_mode (0x4)
#define mask_of_disp_cvbs_reg_sc_frm_w_argb_mode   (0x4000)
#define shift_of_disp_cvbs_reg_sc_frm_w_argb_mode  (14)
#define DISP_CVBS_REG_SC_FRM_W_ARGB_MODE           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_argb_mode)
// h0003, bit: 7
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_444_a_value (0x6)
#define mask_of_disp_cvbs_reg_sc_frm_w_444_a_value   (0xff)
#define shift_of_disp_cvbs_reg_sc_frm_w_444_a_value  (0)
#define DISP_CVBS_REG_SC_FRM_W_444_A_VALUE           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_444_a_value)
#define REG_DISP_CVBS_03_L                           (DISP_CVBS_REG_SC_FRM_W_444_A_VALUE)
// h0003, bit: 9
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_444_y_location (0x6)
#define mask_of_disp_cvbs_reg_sc_frm_w_444_y_location   (0x300)
#define shift_of_disp_cvbs_reg_sc_frm_w_444_y_location  (8)
#define DISP_CVBS_REG_SC_FRM_W_444_Y_LOCATION           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_444_y_location)
// h0003, bit: 11
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_444_u_location (0x6)
#define mask_of_disp_cvbs_reg_sc_frm_w_444_u_location   (0xc00)
#define shift_of_disp_cvbs_reg_sc_frm_w_444_u_location  (10)
#define DISP_CVBS_REG_SC_FRM_W_444_U_LOCATION           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_444_u_location)
// h0003, bit: 13
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_444_v_location (0x6)
#define mask_of_disp_cvbs_reg_sc_frm_w_444_v_location   (0x3000)
#define shift_of_disp_cvbs_reg_sc_frm_w_444_v_location  (12)
#define DISP_CVBS_REG_SC_FRM_W_444_V_LOCATION           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_444_v_location)
// h0003, bit: 15
/* 0:420/422 mode
1: 444 pack mode*/
#define offset_of_disp_cvbs_reg_sc_frm_w_444_pack (0x6)
#define mask_of_disp_cvbs_reg_sc_frm_w_444_pack   (0x8000)
#define shift_of_disp_cvbs_reg_sc_frm_w_444_pack  (15)
#define DISP_CVBS_REG_SC_FRM_W_444_PACK           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_444_pack)
// h0004, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_hsize (0x8)
#define mask_of_disp_cvbs_reg_sc_frm_w_hsize   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_hsize  (0)
#define DISP_CVBS_REG_SC_FRM_W_HSIZE           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_hsize)
#define REG_DISP_CVBS_04_L                     (DISP_CVBS_REG_SC_FRM_W_HSIZE)
// h0005, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_vsize (0xa)
#define mask_of_disp_cvbs_reg_sc_frm_w_vsize   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_vsize  (0)
#define DISP_CVBS_REG_SC_FRM_W_VSIZE           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_vsize)
#define REG_DISP_CVBS_05_L                     (DISP_CVBS_REG_SC_FRM_W_VSIZE)
#define REG_DISP_CVBS_06_L                     (REG_DISP_CVBS_BASE + 0xc)
#define REG_DISP_CVBS_07_L                     (REG_DISP_CVBS_BASE + 0xe)
// bigger than 16 bit case allh0008
#define offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr0 (0x10)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_y_adr0   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_y_adr0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr0)
// h0008, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr0_0 (0x10)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_y_adr0_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_y_adr0_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR0_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr0_0)
#define REG_DISP_CVBS_08_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR0_0)
// h0009, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr0_1 (0x12)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_y_adr0_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_y_adr0_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR0_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr0_1)
#define REG_DISP_CVBS_09_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR0_1)
// bigger than 16 bit case allh000a
#define offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr1 (0x14)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_y_adr1   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_y_adr1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr1)
// h000a, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr1_0 (0x14)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_y_adr1_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_y_adr1_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR1_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr1_0)
#define REG_DISP_CVBS_0A_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR1_0)
// h000b, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr1_1 (0x16)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_y_adr1_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_y_adr1_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR1_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr1_1)
#define REG_DISP_CVBS_0B_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR1_1)
// bigger than 16 bit case allh000c
#define offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr2 (0x18)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_y_adr2   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_y_adr2  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR2           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr2)
// h000c, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr2_0 (0x18)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_y_adr2_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_y_adr2_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR2_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr2_0)
#define REG_DISP_CVBS_0C_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR2_0)
// h000d, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr2_1 (0x1a)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_y_adr2_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_y_adr2_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR2_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr2_1)
#define REG_DISP_CVBS_0D_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR2_1)
// bigger than 16 bit case allh000e
#define offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr3 (0x1c)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_y_adr3   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_y_adr3  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR3           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr3)
// h000e, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr3_0 (0x1c)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_y_adr3_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_y_adr3_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR3_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr3_0)
#define REG_DISP_CVBS_0E_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR3_0)
// h000f, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr3_1 (0x1e)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_y_adr3_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_y_adr3_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR3_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_y_adr3_1)
#define REG_DISP_CVBS_0F_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_Y_ADR3_1)
// bigger than 16 bit case allh0010
#define offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr0 (0x20)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_c_adr0   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_c_adr0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr0)
// h0010, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr0_0 (0x20)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_c_adr0_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_c_adr0_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR0_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr0_0)
#define REG_DISP_CVBS_10_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR0_0)
// h0011, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr0_1 (0x22)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_c_adr0_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_c_adr0_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR0_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr0_1)
#define REG_DISP_CVBS_11_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR0_1)
// bigger than 16 bit case allh0012
#define offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr1 (0x24)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_c_adr1   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_c_adr1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr1)
// h0012, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr1_0 (0x24)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_c_adr1_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_c_adr1_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR1_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr1_0)
#define REG_DISP_CVBS_12_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR1_0)
// h0013, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr1_1 (0x26)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_c_adr1_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_c_adr1_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR1_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr1_1)
#define REG_DISP_CVBS_13_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR1_1)
// bigger than 16 bit case allh0014
#define offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr2 (0x28)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_c_adr2   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_c_adr2  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR2           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr2)
// h0014, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr2_0 (0x28)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_c_adr2_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_c_adr2_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR2_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr2_0)
#define REG_DISP_CVBS_14_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR2_0)
// h0015, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr2_1 (0x2a)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_c_adr2_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_c_adr2_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR2_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr2_1)
#define REG_DISP_CVBS_15_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR2_1)
// bigger than 16 bit case allh0016
#define offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr3 (0x2c)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_c_adr3   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_c_adr3  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR3           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr3)
// h0016, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr3_0 (0x2c)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_c_adr3_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_c_adr3_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR3_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr3_0)
#define REG_DISP_CVBS_16_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR3_0)
// h0017, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr3_1 (0x2e)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_c_adr3_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_c_adr3_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR3_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_c_adr3_1)
#define REG_DISP_CVBS_17_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_C_ADR3_1)
// bigger than 16 bit case allh0018
#define offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr0 (0x30)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_v_adr0   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_v_adr0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr0)
// h0018, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr0_0 (0x30)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_v_adr0_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_v_adr0_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR0_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr0_0)
#define REG_DISP_CVBS_18_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR0_0)
// h0019, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr0_1 (0x32)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_v_adr0_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_v_adr0_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR0_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr0_1)
#define REG_DISP_CVBS_19_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR0_1)
// bigger than 16 bit case allh001a
#define offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr1 (0x34)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_v_adr1   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_v_adr1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr1)
// h001a, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr1_0 (0x34)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_v_adr1_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_v_adr1_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR1_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr1_0)
#define REG_DISP_CVBS_1A_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR1_0)
// h001b, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr1_1 (0x36)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_v_adr1_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_v_adr1_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR1_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr1_1)
#define REG_DISP_CVBS_1B_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR1_1)
// bigger than 16 bit case allh001c
#define offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr2 (0x38)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_v_adr2   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_v_adr2  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR2           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr2)
// h001c, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr2_0 (0x38)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_v_adr2_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_v_adr2_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR2_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr2_0)
#define REG_DISP_CVBS_1C_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR2_0)
// h001d, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr2_1 (0x3a)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_v_adr2_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_v_adr2_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR2_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr2_1)
#define REG_DISP_CVBS_1D_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR2_1)
// bigger than 16 bit case allh001e
#define offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr3 (0x3c)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_v_adr3   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_v_adr3  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR3           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr3)
// h001e, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr3_0 (0x3c)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_v_adr3_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_v_adr3_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR3_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr3_0)
#define REG_DISP_CVBS_1E_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR3_0)
// h001f, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr3_1 (0x3e)
#define mask_of_disp_cvbs_reg_sc_frm_w_base_v_adr3_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_base_v_adr3_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR3_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_base_v_adr3_1)
#define REG_DISP_CVBS_1F_L                             (DISP_CVBS_REG_SC_FRM_W_BASE_V_ADR3_1)
// h0020, bit: 1
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_req_mask (0x40)
#define mask_of_disp_cvbs_reg_sc_frm_w_req_mask   (0x3)
#define shift_of_disp_cvbs_reg_sc_frm_w_req_mask  (0)
#define DISP_CVBS_REG_SC_FRM_W_REQ_MASK           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_req_mask)
#define REG_DISP_CVBS_20_L                        (DISP_CVBS_REG_SC_FRM_W_REQ_MASK)
// h0020, bit: 6
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_last_ctrl (0x40)
#define mask_of_disp_cvbs_reg_sc_frm_w_last_ctrl   (0x70)
#define shift_of_disp_cvbs_reg_sc_frm_w_last_ctrl  (4)
#define DISP_CVBS_REG_SC_FRM_W_LAST_CTRL           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_last_ctrl)
// h0020, bit: 9
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_uv_req_mask (0x40)
#define mask_of_disp_cvbs_reg_sc_frm_w_uv_req_mask   (0x300)
#define shift_of_disp_cvbs_reg_sc_frm_w_uv_req_mask  (8)
#define DISP_CVBS_REG_SC_FRM_W_UV_REQ_MASK           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_uv_req_mask)
// h0020, bit: 14
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_uv_last_ctrl (0x40)
#define mask_of_disp_cvbs_reg_sc_frm_w_uv_last_ctrl   (0x7000)
#define shift_of_disp_cvbs_reg_sc_frm_w_uv_last_ctrl  (12)
#define DISP_CVBS_REG_SC_FRM_W_UV_LAST_CTRL           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_uv_last_ctrl)
// h0021, bit: 7
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_req_th (0x42)
#define mask_of_disp_cvbs_reg_sc_frm_w_req_th   (0xff)
#define shift_of_disp_cvbs_reg_sc_frm_w_req_th  (0)
#define DISP_CVBS_REG_SC_FRM_W_REQ_TH           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_req_th)
#define REG_DISP_CVBS_21_L                      (DISP_CVBS_REG_SC_FRM_W_REQ_TH)
// h0021, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_req_len (0x42)
#define mask_of_disp_cvbs_reg_sc_frm_w_req_len   (0xff00)
#define shift_of_disp_cvbs_reg_sc_frm_w_req_len  (8)
#define DISP_CVBS_REG_SC_FRM_W_REQ_LEN           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_req_len)
// h0022, bit: 7
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_req_th_c (0x44)
#define mask_of_disp_cvbs_reg_sc_frm_w_req_th_c   (0xff)
#define shift_of_disp_cvbs_reg_sc_frm_w_req_th_c  (0)
#define DISP_CVBS_REG_SC_FRM_W_REQ_TH_C           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_req_th_c)
#define REG_DISP_CVBS_22_L                        (DISP_CVBS_REG_SC_FRM_W_REQ_TH_C)
// h0022, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_req_len_c (0x44)
#define mask_of_disp_cvbs_reg_sc_frm_w_req_len_c   (0xff00)
#define shift_of_disp_cvbs_reg_sc_frm_w_req_len_c  (8)
#define DISP_CVBS_REG_SC_FRM_W_REQ_LEN_C           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_req_len_c)
// h0023, bit: 7
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_max_length_r0 (0x46)
#define mask_of_disp_cvbs_reg_sc_frm_w_max_length_r0   (0xff)
#define shift_of_disp_cvbs_reg_sc_frm_w_max_length_r0  (0)
#define DISP_CVBS_REG_SC_FRM_W_MAX_LENGTH_R0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_max_length_r0)
#define REG_DISP_CVBS_23_L                             (DISP_CVBS_REG_SC_FRM_W_MAX_LENGTH_R0)
// h0023, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_max_length_r1 (0x46)
#define mask_of_disp_cvbs_reg_sc_frm_w_max_length_r1   (0xff00)
#define shift_of_disp_cvbs_reg_sc_frm_w_max_length_r1  (8)
#define DISP_CVBS_REG_SC_FRM_W_MAX_LENGTH_R1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_max_length_r1)
// h0024, bit: 7
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_max_length_all (0x48)
#define mask_of_disp_cvbs_reg_sc_frm_w_max_length_all   (0xff)
#define shift_of_disp_cvbs_reg_sc_frm_w_max_length_all  (0)
#define DISP_CVBS_REG_SC_FRM_W_MAX_LENGTH_ALL           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_max_length_all)
#define REG_DISP_CVBS_24_L                              (DISP_CVBS_REG_SC_FRM_W_MAX_LENGTH_ALL)
#define REG_DISP_CVBS_25_L                              (REG_DISP_CVBS_BASE + 0x4a)
#define REG_DISP_CVBS_26_L                              (REG_DISP_CVBS_BASE + 0x4c)
#define REG_DISP_CVBS_27_L                              (REG_DISP_CVBS_BASE + 0x4e)
// h0028, bit: 15
/* Status of CMDQ interrupt, write 1 to clear*/
#define offset_of_disp_cvbs_reg_cmdq_intr_status_grp_a (0x50)
#define mask_of_disp_cvbs_reg_cmdq_intr_status_grp_a   (0xffff)
#define shift_of_disp_cvbs_reg_cmdq_intr_status_grp_a  (0)
#define DISP_CVBS_REG_CMDQ_INTR_STATUS_GRP_A           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cmdq_intr_status_grp_a)
#define REG_DISP_CVBS_28_L                             (DISP_CVBS_REG_CMDQ_INTR_STATUS_GRP_A)
// h0029, bit: 15
/* Enable CMDQ interrupt*/
#define offset_of_disp_cvbs_reg_cmdq_intr_mask_grp_a (0x52)
#define mask_of_disp_cvbs_reg_cmdq_intr_mask_grp_a   (0xffff)
#define shift_of_disp_cvbs_reg_cmdq_intr_mask_grp_a  (0)
#define DISP_CVBS_REG_CMDQ_INTR_MASK_GRP_A           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cmdq_intr_mask_grp_a)
#define REG_DISP_CVBS_29_L                           (DISP_CVBS_REG_CMDQ_INTR_MASK_GRP_A)
// h002a, bit: 15
/* Original status of CMDQ interrupt source*/
#define offset_of_disp_cvbs_reg_cmdq_intr_raw_status_grp_a (0x54)
#define mask_of_disp_cvbs_reg_cmdq_intr_raw_status_grp_a   (0xffff)
#define shift_of_disp_cvbs_reg_cmdq_intr_raw_status_grp_a  (0)
#define DISP_CVBS_REG_CMDQ_INTR_RAW_STATUS_GRP_A \
    (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cmdq_intr_raw_status_grp_a)
#define REG_DISP_CVBS_2A_L (DISP_CVBS_REG_CMDQ_INTR_RAW_STATUS_GRP_A)
// h002b, bit: 15
/* force CMDQ interrupt*/
#define offset_of_disp_cvbs_reg_cmdq_intr_force_grp_a (0x56)
#define mask_of_disp_cvbs_reg_cmdq_intr_force_grp_a   (0xffff)
#define shift_of_disp_cvbs_reg_cmdq_intr_force_grp_a  (0)
#define DISP_CVBS_REG_CMDQ_INTR_FORCE_GRP_A           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cmdq_intr_force_grp_a)
#define REG_DISP_CVBS_2B_L                            (DISP_CVBS_REG_CMDQ_INTR_FORCE_GRP_A)
// h002c, bit: 15
/* Status of interrupt, write 1 to clear*/
#define offset_of_disp_cvbs_reg_intr_status_grp_a (0x58)
#define mask_of_disp_cvbs_reg_intr_status_grp_a   (0xffff)
#define shift_of_disp_cvbs_reg_intr_status_grp_a  (0)
#define DISP_CVBS_REG_INTR_STATUS_GRP_A           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_intr_status_grp_a)
#define REG_DISP_CVBS_2C_L                        (DISP_CVBS_REG_INTR_STATUS_GRP_A)
// h002d, bit: 15
/* Enable interrupt*/
#define offset_of_disp_cvbs_reg_intr_mask_grp_a (0x5a)
#define mask_of_disp_cvbs_reg_intr_mask_grp_a   (0xffff)
#define shift_of_disp_cvbs_reg_intr_mask_grp_a  (0)
#define DISP_CVBS_REG_INTR_MASK_GRP_A           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_intr_mask_grp_a)
#define REG_DISP_CVBS_2D_L                      (DISP_CVBS_REG_INTR_MASK_GRP_A)
// h002e, bit: 15
/* Original status of interrupt source*/
#define offset_of_disp_cvbs_reg_intr_raw_status_grp_a (0x5c)
#define mask_of_disp_cvbs_reg_intr_raw_status_grp_a   (0xffff)
#define shift_of_disp_cvbs_reg_intr_raw_status_grp_a  (0)
#define DISP_CVBS_REG_INTR_RAW_STATUS_GRP_A           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_intr_raw_status_grp_a)
#define REG_DISP_CVBS_2E_L                            (DISP_CVBS_REG_INTR_RAW_STATUS_GRP_A)
// h002f, bit: 15
/* force interrupt*/
#define offset_of_disp_cvbs_reg_intr_force_grp_a (0x5e)
#define mask_of_disp_cvbs_reg_intr_force_grp_a   (0xffff)
#define shift_of_disp_cvbs_reg_intr_force_grp_a  (0)
#define DISP_CVBS_REG_INTR_FORCE_GRP_A           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_intr_force_grp_a)
#define REG_DISP_CVBS_2F_L                       (DISP_CVBS_REG_INTR_FORCE_GRP_A)
// h0030, bit: 15
/* lineoffset value for y image (MUST BE 32 ALIGN)
For YUYV422, it must be same as lineoffset_c*/
#define offset_of_disp_cvbs_reg_sc_frm_w_lineoffset_y (0x60)
#define mask_of_disp_cvbs_reg_sc_frm_w_lineoffset_y   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_lineoffset_y  (0)
#define DISP_CVBS_REG_SC_FRM_W_LINEOFFSET_Y           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_lineoffset_y)
#define REG_DISP_CVBS_30_L                            (DISP_CVBS_REG_SC_FRM_W_LINEOFFSET_Y)
// h0031, bit: 15
/* lineoffset value for c image (MUST BE 32 ALIGN)
For YUYV422, it must be same as lineoffset_y*/
#define offset_of_disp_cvbs_reg_sc_frm_w_lineoffset_c (0x62)
#define mask_of_disp_cvbs_reg_sc_frm_w_lineoffset_c   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_lineoffset_c  (0)
#define DISP_CVBS_REG_SC_FRM_W_LINEOFFSET_C           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_lineoffset_c)
#define REG_DISP_CVBS_31_L                            (DISP_CVBS_REG_SC_FRM_W_LINEOFFSET_C)
// h0032, bit: 0
/* lineoffset feature enable*/
#define offset_of_disp_cvbs_reg_sc_frm_w_lf_en (0x64)
#define mask_of_disp_cvbs_reg_sc_frm_w_lf_en   (0x1)
#define shift_of_disp_cvbs_reg_sc_frm_w_lf_en  (0)
#define DISP_CVBS_REG_SC_FRM_W_LF_EN           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_lf_en)
#define REG_DISP_CVBS_32_L                     (DISP_CVBS_REG_SC_FRM_W_LF_EN)
// h0032, bit: 1
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_force_priority (0x64)
#define mask_of_disp_cvbs_reg_sc_frm_w_force_priority   (0x2)
#define shift_of_disp_cvbs_reg_sc_frm_w_force_priority  (1)
#define DISP_CVBS_REG_SC_FRM_W_FORCE_PRIORITY           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_force_priority)
// h0032, bit: 3
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_priority_by_wf (0x64)
#define mask_of_disp_cvbs_reg_sc_frm_w_priority_by_wf   (0x8)
#define shift_of_disp_cvbs_reg_sc_frm_w_priority_by_wf  (3)
#define DISP_CVBS_REG_SC_FRM_W_PRIORITY_BY_WF           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_priority_by_wf)
// h0032, bit: 4
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_hp_cut_in_en0 (0x64)
#define mask_of_disp_cvbs_reg_sc_frm_w_hp_cut_in_en0   (0x10)
#define shift_of_disp_cvbs_reg_sc_frm_w_hp_cut_in_en0  (4)
#define DISP_CVBS_REG_SC_FRM_W_HP_CUT_IN_EN0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_hp_cut_in_en0)
// h0032, bit: 5
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_hp_cut_in_en1 (0x64)
#define mask_of_disp_cvbs_reg_sc_frm_w_hp_cut_in_en1   (0x20)
#define shift_of_disp_cvbs_reg_sc_frm_w_hp_cut_in_en1  (5)
#define DISP_CVBS_REG_SC_FRM_W_HP_CUT_IN_EN1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_hp_cut_in_en1)
// h0032, bit: 7
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_hpmask (0x64)
#define mask_of_disp_cvbs_reg_sc_frm_w_hpmask   (0xc0)
#define shift_of_disp_cvbs_reg_sc_frm_w_hpmask  (6)
#define DISP_CVBS_REG_SC_FRM_W_HPMASK           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_hpmask)
// h0032, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_pri_thd (0x64)
#define mask_of_disp_cvbs_reg_sc_frm_w_pri_thd   (0xff00)
#define shift_of_disp_cvbs_reg_sc_frm_w_pri_thd  (8)
#define DISP_CVBS_REG_SC_FRM_W_PRI_THD           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_pri_thd)
// h0033, bit: 7
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_hp_cut_min0 (0x66)
#define mask_of_disp_cvbs_reg_sc_frm_w_hp_cut_min0   (0xff)
#define shift_of_disp_cvbs_reg_sc_frm_w_hp_cut_min0  (0)
#define DISP_CVBS_REG_SC_FRM_W_HP_CUT_MIN0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_hp_cut_min0)
#define REG_DISP_CVBS_33_L                           (DISP_CVBS_REG_SC_FRM_W_HP_CUT_MIN0)
// h0033, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_hp_cut_min1 (0x66)
#define mask_of_disp_cvbs_reg_sc_frm_w_hp_cut_min1   (0xff00)
#define shift_of_disp_cvbs_reg_sc_frm_w_hp_cut_min1  (8)
#define DISP_CVBS_REG_SC_FRM_W_HP_CUT_MIN1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_hp_cut_min1)
#define REG_DISP_CVBS_34_L                           (REG_DISP_CVBS_BASE + 0x68)
#define REG_DISP_CVBS_35_L                           (REG_DISP_CVBS_BASE + 0x6a)
// h0036, bit: 1
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_sm_st_y (0x6c)
#define mask_of_disp_cvbs_reg_sc_frm_w_sm_st_y   (0x3)
#define shift_of_disp_cvbs_reg_sc_frm_w_sm_st_y  (0)
#define DISP_CVBS_REG_SC_FRM_W_SM_ST_Y           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_sm_st_y)
#define REG_DISP_CVBS_36_L                       (DISP_CVBS_REG_SC_FRM_W_SM_ST_Y)
// h0036, bit: 3
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_sm_st_c (0x6c)
#define mask_of_disp_cvbs_reg_sc_frm_w_sm_st_c   (0xc)
#define shift_of_disp_cvbs_reg_sc_frm_w_sm_st_c  (2)
#define DISP_CVBS_REG_SC_FRM_W_SM_ST_C           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_sm_st_c)
// h0036, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_idx_rpt (0x6c)
#define mask_of_disp_cvbs_reg_sc_frm_w_idx_rpt   (0xf000)
#define shift_of_disp_cvbs_reg_sc_frm_w_idx_rpt  (12)
#define DISP_CVBS_REG_SC_FRM_W_IDX_RPT           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_idx_rpt)
// h0037, bit: 0
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_imi_en (0x6e)
#define mask_of_disp_cvbs_reg_sc_frm_w_imi_en   (0x1)
#define shift_of_disp_cvbs_reg_sc_frm_w_imi_en  (0)
#define DISP_CVBS_REG_SC_FRM_W_IMI_EN           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_imi_en)
#define REG_DISP_CVBS_37_L                      (DISP_CVBS_REG_SC_FRM_W_IMI_EN)
// h0037, bit: 10
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_idx_md (0x6e)
#define mask_of_disp_cvbs_reg_sc_frm_w_idx_md   (0x700)
#define shift_of_disp_cvbs_reg_sc_frm_w_idx_md  (8)
#define DISP_CVBS_REG_SC_FRM_W_IDX_MD           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_idx_md)
// h0037, bit: 15
/* SC0 JPE/VEN encoding frame index*/
#define offset_of_disp_cvbs_reg_sc_frm_idx_w (0x6e)
#define mask_of_disp_cvbs_reg_sc_frm_idx_w   (0xf000)
#define shift_of_disp_cvbs_reg_sc_frm_idx_w  (12)
#define DISP_CVBS_REG_SC_FRM_IDX_W           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_idx_w)
// bigger than 16 bit case allh0038
#define offset_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_y (0x70)
#define mask_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_y   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_y  (0)
#define DISP_CVBS_REG_SC_FRM_W_IMI_STA_ADR_Y           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_y)
// h0038, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_y_0 (0x70)
#define mask_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_y_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_y_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_IMI_STA_ADR_Y_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_y_0)
#define REG_DISP_CVBS_38_L                               (DISP_CVBS_REG_SC_FRM_W_IMI_STA_ADR_Y_0)
// h0039, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_y_1 (0x72)
#define mask_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_y_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_y_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_IMI_STA_ADR_Y_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_y_1)
#define REG_DISP_CVBS_39_L                               (DISP_CVBS_REG_SC_FRM_W_IMI_STA_ADR_Y_1)
// bigger than 16 bit case allh003a
#define offset_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_c (0x74)
#define mask_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_c   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_c  (0)
#define DISP_CVBS_REG_SC_FRM_W_IMI_STA_ADR_C           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_c)
// h003a, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_c_0 (0x74)
#define mask_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_c_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_c_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_IMI_STA_ADR_C_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_c_0)
#define REG_DISP_CVBS_3A_L                               (DISP_CVBS_REG_SC_FRM_W_IMI_STA_ADR_C_0)
// h003b, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_c_1 (0x76)
#define mask_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_c_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_c_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_IMI_STA_ADR_C_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_imi_sta_adr_c_1)
#define REG_DISP_CVBS_3B_L                               (DISP_CVBS_REG_SC_FRM_W_IMI_STA_ADR_C_1)
// bigger than 16 bit case allh003c
#define offset_of_disp_cvbs_reg_sc_frm_w_imi_offset_y (0x78)
#define mask_of_disp_cvbs_reg_sc_frm_w_imi_offset_y   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_imi_offset_y  (0)
#define DISP_CVBS_REG_SC_FRM_W_IMI_OFFSET_Y           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_imi_offset_y)
// h003c, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_imi_offset_y_0 (0x78)
#define mask_of_disp_cvbs_reg_sc_frm_w_imi_offset_y_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_imi_offset_y_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_IMI_OFFSET_Y_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_imi_offset_y_0)
#define REG_DISP_CVBS_3C_L                              (DISP_CVBS_REG_SC_FRM_W_IMI_OFFSET_Y_0)
// h003d, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_imi_offset_y_1 (0x7a)
#define mask_of_disp_cvbs_reg_sc_frm_w_imi_offset_y_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_imi_offset_y_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_IMI_OFFSET_Y_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_imi_offset_y_1)
#define REG_DISP_CVBS_3D_L                              (DISP_CVBS_REG_SC_FRM_W_IMI_OFFSET_Y_1)
// bigger than 16 bit case allh003e
#define offset_of_disp_cvbs_reg_sc_frm_w_imi_offset_c (0x7c)
#define mask_of_disp_cvbs_reg_sc_frm_w_imi_offset_c   (0xffffffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_imi_offset_c  (0)
#define DISP_CVBS_REG_SC_FRM_W_IMI_OFFSET_C           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_imi_offset_c)
// h003e, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_imi_offset_c_0 (0x7c)
#define mask_of_disp_cvbs_reg_sc_frm_w_imi_offset_c_0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_imi_offset_c_0  (0)
#define DISP_CVBS_REG_SC_FRM_W_IMI_OFFSET_C_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_imi_offset_c_0)
#define REG_DISP_CVBS_3E_L                              (DISP_CVBS_REG_SC_FRM_W_IMI_OFFSET_C_0)
// h003f, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_frm_w_imi_offset_c_1 (0x7e)
#define mask_of_disp_cvbs_reg_sc_frm_w_imi_offset_c_1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_imi_offset_c_1  (0)
#define DISP_CVBS_REG_SC_FRM_W_IMI_OFFSET_C_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_imi_offset_c_1)
#define REG_DISP_CVBS_3F_L                              (DISP_CVBS_REG_SC_FRM_W_IMI_OFFSET_C_1)
// h0040, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_dma_dummy0 (0x80)
#define mask_of_disp_cvbs_reg_sc_dma_dummy0   (0xffff)
#define shift_of_disp_cvbs_reg_sc_dma_dummy0  (0)
#define DISP_CVBS_REG_SC_DMA_DUMMY0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_dma_dummy0)
#define REG_DISP_CVBS_40_L                    (DISP_CVBS_REG_SC_DMA_DUMMY0)
// h0041, bit: 15
/* */
#define offset_of_disp_cvbs_reg_sc_dma_dummy1 (0x82)
#define mask_of_disp_cvbs_reg_sc_dma_dummy1   (0xffff)
#define shift_of_disp_cvbs_reg_sc_dma_dummy1  (0)
#define DISP_CVBS_REG_SC_DMA_DUMMY1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_dma_dummy1)
#define REG_DISP_CVBS_41_L                    (DISP_CVBS_REG_SC_DMA_DUMMY1)
// h0042, bit: 1
/* 00 :no handshake
01 :handshake(Dual)
1x :ring*/
#define offset_of_disp_cvbs_reg_ven_mode_sel (0x84)
#define mask_of_disp_cvbs_reg_ven_mode_sel   (0x3)
#define shift_of_disp_cvbs_reg_ven_mode_sel  (0)
#define DISP_CVBS_REG_VEN_MODE_SEL           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_ven_mode_sel)
#define REG_DISP_CVBS_42_L                   (DISP_CVBS_REG_VEN_MODE_SEL)
#define REG_DISP_CVBS_43_L                   (REG_DISP_CVBS_BASE + 0x86)
#define REG_DISP_CVBS_44_L                   (REG_DISP_CVBS_BASE + 0x88)
#define REG_DISP_CVBS_45_L                   (REG_DISP_CVBS_BASE + 0x8a)
#define REG_DISP_CVBS_46_L                   (REG_DISP_CVBS_BASE + 0x8c)
#define REG_DISP_CVBS_47_L                   (REG_DISP_CVBS_BASE + 0x8e)
#define REG_DISP_CVBS_48_L                   (REG_DISP_CVBS_BASE + 0x90)
#define REG_DISP_CVBS_49_L                   (REG_DISP_CVBS_BASE + 0x92)
#define REG_DISP_CVBS_4A_L                   (REG_DISP_CVBS_BASE + 0x94)
// h004b, bit: 15
/* line cnt update at frame end*/
#define offset_of_disp_cvbs_reg_sc_frm_w_v_cnt_y (0x96)
#define mask_of_disp_cvbs_reg_sc_frm_w_v_cnt_y   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_v_cnt_y  (0)
#define DISP_CVBS_REG_SC_FRM_W_V_CNT_Y           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_v_cnt_y)
#define REG_DISP_CVBS_4B_L                       (DISP_CVBS_REG_SC_FRM_W_V_CNT_Y)
// h004c, bit: 15
/* line cnt update at frame end*/
#define offset_of_disp_cvbs_reg_sc_frm_w_v_cnt_c (0x98)
#define mask_of_disp_cvbs_reg_sc_frm_w_v_cnt_c   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_v_cnt_c  (0)
#define DISP_CVBS_REG_SC_FRM_W_V_CNT_C           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_v_cnt_c)
#define REG_DISP_CVBS_4C_L                       (DISP_CVBS_REG_SC_FRM_W_V_CNT_C)
// h004d, bit: 15
/* line cnt update immediately*/
#define offset_of_disp_cvbs_reg_sc_frm_w_v_cnt (0x9a)
#define mask_of_disp_cvbs_reg_sc_frm_w_v_cnt   (0xffff)
#define shift_of_disp_cvbs_reg_sc_frm_w_v_cnt  (0)
#define DISP_CVBS_REG_SC_FRM_W_V_CNT           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_v_cnt)
#define REG_DISP_CVBS_4D_L                     (DISP_CVBS_REG_SC_FRM_W_V_CNT)
// h004e, bit: 0
/* rgb565 dither enable*/
#define offset_of_disp_cvbs_reg_sc_frm_w_dith_en (0x9c)
#define mask_of_disp_cvbs_reg_sc_frm_w_dith_en   (0x1)
#define shift_of_disp_cvbs_reg_sc_frm_w_dith_en  (0)
#define DISP_CVBS_REG_SC_FRM_W_DITH_EN           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_dith_en)
#define REG_DISP_CVBS_4E_L                       (DISP_CVBS_REG_SC_FRM_W_DITH_EN)
// h004e, bit: 1
/* rgb565 dither clear enable*/
#define offset_of_disp_cvbs_reg_sc_frm_w_vclr_en (0x9c)
#define mask_of_disp_cvbs_reg_sc_frm_w_vclr_en   (0x2)
#define shift_of_disp_cvbs_reg_sc_frm_w_vclr_en  (1)
#define DISP_CVBS_REG_SC_FRM_W_VCLR_EN           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_vclr_en)
// h004e, bit: 3
/* rgb565 dither clear number*/
#define offset_of_disp_cvbs_reg_sc_frm_w_vclr_no (0x9c)
#define mask_of_disp_cvbs_reg_sc_frm_w_vclr_no   (0xc)
#define shift_of_disp_cvbs_reg_sc_frm_w_vclr_no  (2)
#define DISP_CVBS_REG_SC_FRM_W_VCLR_NO           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_sc_frm_w_vclr_no)
#define REG_DISP_CVBS_4F_L                       (REG_DISP_CVBS_BASE + 0x9e)
// h0050, bit: 0
/* DMA_W0 enable*/
#define offset_of_disp_cvbs_reg_mdma_csc_y2r_en (0xa0)
#define mask_of_disp_cvbs_reg_mdma_csc_y2r_en   (0x1)
#define shift_of_disp_cvbs_reg_mdma_csc_y2r_en  (0)
#define DISP_CVBS_REG_MDMA_CSC_Y2R_EN           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_csc_y2r_en)
#define REG_DISP_CVBS_50_L                      (DISP_CVBS_REG_MDMA_CSC_Y2R_EN)
// h0050, bit: 8
/* 1'b0: YUV to RGB
1'b1: YUV to H.264*/
#define offset_of_disp_cvbs_reg_mdma_csc_y2r_mode (0xa0)
#define mask_of_disp_cvbs_reg_mdma_csc_y2r_mode   (0x100)
#define shift_of_disp_cvbs_reg_mdma_csc_y2r_mode  (8)
#define DISP_CVBS_REG_MDMA_CSC_Y2R_MODE           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_csc_y2r_mode)
// h0050, bit: 15
/* */
#define offset_of_disp_cvbs_reg_mdma_cbs_clamp_mode (0xa0)
#define mask_of_disp_cvbs_reg_mdma_cbs_clamp_mode   (0x8000)
#define shift_of_disp_cvbs_reg_mdma_cbs_clamp_mode  (15)
#define DISP_CVBS_REG_MDMA_CBS_CLAMP_MODE           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_cbs_clamp_mode)
// h0051, bit: 7
/* */
#define offset_of_disp_cvbs_reg_mdma_cbs_bri (0xa2)
#define mask_of_disp_cvbs_reg_mdma_cbs_bri   (0xff)
#define shift_of_disp_cvbs_reg_mdma_cbs_bri  (0)
#define DISP_CVBS_REG_MDMA_CBS_BRI           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_cbs_bri)
#define REG_DISP_CVBS_51_L                   (DISP_CVBS_REG_MDMA_CBS_BRI)
// h0051, bit: 15
/* */
#define offset_of_disp_cvbs_reg_mdma_csc_y2r_y_ofset8 (0xa2)
#define mask_of_disp_cvbs_reg_mdma_csc_y2r_y_ofset8   (0xff00)
#define shift_of_disp_cvbs_reg_mdma_csc_y2r_y_ofset8  (8)
#define DISP_CVBS_REG_MDMA_CSC_Y2R_Y_OFSET8           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_csc_y2r_y_ofset8)
// h0052, bit: 7
/* */
#define offset_of_disp_cvbs_reg_mdma_csc_y2r_cb_ofset8 (0xa4)
#define mask_of_disp_cvbs_reg_mdma_csc_y2r_cb_ofset8   (0xff)
#define shift_of_disp_cvbs_reg_mdma_csc_y2r_cb_ofset8  (0)
#define DISP_CVBS_REG_MDMA_CSC_Y2R_CB_OFSET8           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_csc_y2r_cb_ofset8)
#define REG_DISP_CVBS_52_L                             (DISP_CVBS_REG_MDMA_CSC_Y2R_CB_OFSET8)
// h0052, bit: 15
/* */
#define offset_of_disp_cvbs_reg_mdma_csc_y2r_cr_ofset8 (0xa4)
#define mask_of_disp_cvbs_reg_mdma_csc_y2r_cr_ofset8   (0xff00)
#define shift_of_disp_cvbs_reg_mdma_csc_y2r_cr_ofset8  (8)
#define DISP_CVBS_REG_MDMA_CSC_Y2R_CR_OFSET8           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_csc_y2r_cr_ofset8)
// h0053, bit: 13
/* */
#define offset_of_disp_cvbs_reg_mdma_csc_y2r_a11 (0xa6)
#define mask_of_disp_cvbs_reg_mdma_csc_y2r_a11   (0x3fff)
#define shift_of_disp_cvbs_reg_mdma_csc_y2r_a11  (0)
#define DISP_CVBS_REG_MDMA_CSC_Y2R_A11           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_csc_y2r_a11)
#define REG_DISP_CVBS_53_L                       (DISP_CVBS_REG_MDMA_CSC_Y2R_A11)
// h0054, bit: 13
/* */
#define offset_of_disp_cvbs_reg_mdma_csc_y2r_a12 (0xa8)
#define mask_of_disp_cvbs_reg_mdma_csc_y2r_a12   (0x3fff)
#define shift_of_disp_cvbs_reg_mdma_csc_y2r_a12  (0)
#define DISP_CVBS_REG_MDMA_CSC_Y2R_A12           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_csc_y2r_a12)
#define REG_DISP_CVBS_54_L                       (DISP_CVBS_REG_MDMA_CSC_Y2R_A12)
// h0055, bit: 13
/* */
#define offset_of_disp_cvbs_reg_mdma_csc_y2r_a13 (0xaa)
#define mask_of_disp_cvbs_reg_mdma_csc_y2r_a13   (0x3fff)
#define shift_of_disp_cvbs_reg_mdma_csc_y2r_a13  (0)
#define DISP_CVBS_REG_MDMA_CSC_Y2R_A13           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_csc_y2r_a13)
#define REG_DISP_CVBS_55_L                       (DISP_CVBS_REG_MDMA_CSC_Y2R_A13)
// h0056, bit: 13
/* */
#define offset_of_disp_cvbs_reg_mdma_csc_y2r_a21 (0xac)
#define mask_of_disp_cvbs_reg_mdma_csc_y2r_a21   (0x3fff)
#define shift_of_disp_cvbs_reg_mdma_csc_y2r_a21  (0)
#define DISP_CVBS_REG_MDMA_CSC_Y2R_A21           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_csc_y2r_a21)
#define REG_DISP_CVBS_56_L                       (DISP_CVBS_REG_MDMA_CSC_Y2R_A21)
// h0057, bit: 13
/* */
#define offset_of_disp_cvbs_reg_mdma_csc_y2r_a22 (0xae)
#define mask_of_disp_cvbs_reg_mdma_csc_y2r_a22   (0x3fff)
#define shift_of_disp_cvbs_reg_mdma_csc_y2r_a22  (0)
#define DISP_CVBS_REG_MDMA_CSC_Y2R_A22           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_csc_y2r_a22)
#define REG_DISP_CVBS_57_L                       (DISP_CVBS_REG_MDMA_CSC_Y2R_A22)
// h0058, bit: 13
/* */
#define offset_of_disp_cvbs_reg_mdma_csc_y2r_a23 (0xb0)
#define mask_of_disp_cvbs_reg_mdma_csc_y2r_a23   (0x3fff)
#define shift_of_disp_cvbs_reg_mdma_csc_y2r_a23  (0)
#define DISP_CVBS_REG_MDMA_CSC_Y2R_A23           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_csc_y2r_a23)
#define REG_DISP_CVBS_58_L                       (DISP_CVBS_REG_MDMA_CSC_Y2R_A23)
// h0059, bit: 13
/* */
#define offset_of_disp_cvbs_reg_mdma_csc_y2r_a31 (0xb2)
#define mask_of_disp_cvbs_reg_mdma_csc_y2r_a31   (0x3fff)
#define shift_of_disp_cvbs_reg_mdma_csc_y2r_a31  (0)
#define DISP_CVBS_REG_MDMA_CSC_Y2R_A31           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_csc_y2r_a31)
#define REG_DISP_CVBS_59_L                       (DISP_CVBS_REG_MDMA_CSC_Y2R_A31)
// h005a, bit: 13
/* */
#define offset_of_disp_cvbs_reg_mdma_csc_y2r_a32 (0xb4)
#define mask_of_disp_cvbs_reg_mdma_csc_y2r_a32   (0x3fff)
#define shift_of_disp_cvbs_reg_mdma_csc_y2r_a32  (0)
#define DISP_CVBS_REG_MDMA_CSC_Y2R_A32           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_csc_y2r_a32)
#define REG_DISP_CVBS_5A_L                       (DISP_CVBS_REG_MDMA_CSC_Y2R_A32)
// h005b, bit: 13
/* */
#define offset_of_disp_cvbs_reg_mdma_csc_y2r_a33 (0xb6)
#define mask_of_disp_cvbs_reg_mdma_csc_y2r_a33   (0x3fff)
#define shift_of_disp_cvbs_reg_mdma_csc_y2r_a33  (0)
#define DISP_CVBS_REG_MDMA_CSC_Y2R_A33           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_mdma_csc_y2r_a33)
#define REG_DISP_CVBS_5B_L                       (DISP_CVBS_REG_MDMA_CSC_Y2R_A33)
#define REG_DISP_CVBS_5C_L                       (REG_DISP_CVBS_BASE + 0xb8)
#define REG_DISP_CVBS_5D_L                       (REG_DISP_CVBS_BASE + 0xba)
#define REG_DISP_CVBS_5E_L                       (REG_DISP_CVBS_BASE + 0xbc)
// h005f, bit: 0
/* Debug mode*/
#define offset_of_disp_cvbs_reg_cvbs_r2y_en (0xbe)
#define mask_of_disp_cvbs_reg_cvbs_r2y_en   (0x1)
#define shift_of_disp_cvbs_reg_cvbs_r2y_en  (0)
#define DISP_CVBS_REG_CVBS_R2Y_EN           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_r2y_en)
#define REG_DISP_CVBS_5F_L                  (DISP_CVBS_REG_CVBS_R2Y_EN)
// h005f, bit: 3
/* Debug mode*/
#define offset_of_disp_cvbs_reg_cvbs_r2y_eq_sel (0xbe)
#define mask_of_disp_cvbs_reg_cvbs_r2y_eq_sel   (0xe)
#define shift_of_disp_cvbs_reg_cvbs_r2y_eq_sel  (1)
#define DISP_CVBS_REG_CVBS_R2Y_EQ_SEL           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_r2y_eq_sel)
// h0060, bit: 12
/* DDA mode horizontal scaling factor = ceil[(out_width * 2^12)/input_width]*/
#define offset_of_disp_cvbs_reg_dda_h_ratio (0xc0)
#define mask_of_disp_cvbs_reg_dda_h_ratio   (0x1fff)
#define shift_of_disp_cvbs_reg_dda_h_ratio  (0)
#define DISP_CVBS_REG_DDA_H_RATIO           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_dda_h_ratio)
#define REG_DISP_CVBS_60_L                  (DISP_CVBS_REG_DDA_H_RATIO)
// h0060, bit: 15
/* DDA mode horizontal enable*/
#define offset_of_disp_cvbs_reg_dda_h_enable (0xc0)
#define mask_of_disp_cvbs_reg_dda_h_enable   (0x8000)
#define shift_of_disp_cvbs_reg_dda_h_enable  (15)
#define DISP_CVBS_REG_DDA_H_ENABLE           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_dda_h_enable)
// h0061, bit: 12
/* DDA mode vertical scaling factor  = ceil[(out_height * 2^12)/input_height]*/
#define offset_of_disp_cvbs_reg_dda_v_ratio (0xc2)
#define mask_of_disp_cvbs_reg_dda_v_ratio   (0x1fff)
#define shift_of_disp_cvbs_reg_dda_v_ratio  (0)
#define DISP_CVBS_REG_DDA_V_RATIO           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_dda_v_ratio)
#define REG_DISP_CVBS_61_L                  (DISP_CVBS_REG_DDA_V_RATIO)
// h0061, bit: 15
/* DDA mode vertival enable*/
#define offset_of_disp_cvbs_reg_dda_v_enable (0xc2)
#define mask_of_disp_cvbs_reg_dda_v_enable   (0x8000)
#define shift_of_disp_cvbs_reg_dda_v_enable  (15)
#define DISP_CVBS_REG_DDA_V_ENABLE           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_dda_v_enable)
// h0062, bit: 15
/* DDA mode input h size*/
#define offset_of_disp_cvbs_reg_dda_h_size (0xc4)
#define mask_of_disp_cvbs_reg_dda_h_size   (0xffff)
#define shift_of_disp_cvbs_reg_dda_h_size  (0)
#define DISP_CVBS_REG_DDA_H_SIZE           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_dda_h_size)
#define REG_DISP_CVBS_62_L                 (DISP_CVBS_REG_DDA_H_SIZE)
// h0063, bit: 15
/* DDA mode input v size*/
#define offset_of_disp_cvbs_reg_dda_v_size (0xc6)
#define mask_of_disp_cvbs_reg_dda_v_size   (0xffff)
#define shift_of_disp_cvbs_reg_dda_v_size  (0)
#define DISP_CVBS_REG_DDA_V_SIZE           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_dda_v_size)
#define REG_DISP_CVBS_63_L                 (DISP_CVBS_REG_DDA_V_SIZE)
// h0064, bit: 15
/* DDA mode output h size*/
#define offset_of_disp_cvbs_reg_dda_scl_h_size (0xc8)
#define mask_of_disp_cvbs_reg_dda_scl_h_size   (0xffff)
#define shift_of_disp_cvbs_reg_dda_scl_h_size  (0)
#define DISP_CVBS_REG_DDA_SCL_H_SIZE           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_dda_scl_h_size)
#define REG_DISP_CVBS_64_L                     (DISP_CVBS_REG_DDA_SCL_H_SIZE)
// h0065, bit: 15
/* DDA mode output v size*/
#define offset_of_disp_cvbs_reg_dda_scl_v_size (0xca)
#define mask_of_disp_cvbs_reg_dda_scl_v_size   (0xffff)
#define shift_of_disp_cvbs_reg_dda_scl_v_size  (0)
#define DISP_CVBS_REG_DDA_SCL_V_SIZE           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_dda_scl_v_size)
#define REG_DISP_CVBS_65_L                     (DISP_CVBS_REG_DDA_SCL_V_SIZE)
// h0066, bit: 15
/* dda h write pixel count*/
#define offset_of_disp_cvbs_reg_dda_h_pix_wcnt_rpt (0xcc)
#define mask_of_disp_cvbs_reg_dda_h_pix_wcnt_rpt   (0xffff)
#define shift_of_disp_cvbs_reg_dda_h_pix_wcnt_rpt  (0)
#define DISP_CVBS_REG_DDA_H_PIX_WCNT_RPT           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_dda_h_pix_wcnt_rpt)
#define REG_DISP_CVBS_66_L                         (DISP_CVBS_REG_DDA_H_PIX_WCNT_RPT)
// h0067, bit: 15
/* dda h read pixel count*/
#define offset_of_disp_cvbs_reg_dda_h_pix_rcnt_rpt (0xce)
#define mask_of_disp_cvbs_reg_dda_h_pix_rcnt_rpt   (0xffff)
#define shift_of_disp_cvbs_reg_dda_h_pix_rcnt_rpt  (0)
#define DISP_CVBS_REG_DDA_H_PIX_RCNT_RPT           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_dda_h_pix_rcnt_rpt)
#define REG_DISP_CVBS_67_L                         (DISP_CVBS_REG_DDA_H_PIX_RCNT_RPT)
// h0068, bit: 15
/* dda v write line count*/
#define offset_of_disp_cvbs_reg_dda_v_line_wcnt_rpt (0xd0)
#define mask_of_disp_cvbs_reg_dda_v_line_wcnt_rpt   (0xffff)
#define shift_of_disp_cvbs_reg_dda_v_line_wcnt_rpt  (0)
#define DISP_CVBS_REG_DDA_V_LINE_WCNT_RPT           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_dda_v_line_wcnt_rpt)
#define REG_DISP_CVBS_68_L                          (DISP_CVBS_REG_DDA_V_LINE_WCNT_RPT)
// h0069, bit: 15
/* dda v read line count*/
#define offset_of_disp_cvbs_reg_dda_v_line_rcnt_rpt (0xd2)
#define mask_of_disp_cvbs_reg_dda_v_line_rcnt_rpt   (0xffff)
#define shift_of_disp_cvbs_reg_dda_v_line_rcnt_rpt  (0)
#define DISP_CVBS_REG_DDA_V_LINE_RCNT_RPT           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_dda_v_line_rcnt_rpt)
#define REG_DISP_CVBS_69_L                          (DISP_CVBS_REG_DDA_V_LINE_RCNT_RPT)
#define REG_DISP_CVBS_6A_L                          (REG_DISP_CVBS_BASE + 0xd4)
#define REG_DISP_CVBS_6B_L                          (REG_DISP_CVBS_BASE + 0xd6)
#define REG_DISP_CVBS_6C_L                          (REG_DISP_CVBS_BASE + 0xd8)
#define REG_DISP_CVBS_6D_L                          (REG_DISP_CVBS_BASE + 0xda)
#define REG_DISP_CVBS_6E_L                          (REG_DISP_CVBS_BASE + 0xdc)
// h006f, bit: 0
/* cvbs ring mode enable*/
#define offset_of_disp_cvbs_reg_cvbs_ring_en (0xde)
#define mask_of_disp_cvbs_reg_cvbs_ring_en   (0x1)
#define shift_of_disp_cvbs_reg_cvbs_ring_en  (0)
#define DISP_CVBS_REG_CVBS_RING_EN           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_ring_en)
#define REG_DISP_CVBS_6F_L                   (DISP_CVBS_REG_CVBS_RING_EN)
// h006f, bit: 1
/* 1'b0:to path0 mops
1'b1:to path1 mops*/
#define offset_of_disp_cvbs_reg_cvbs_to_mop_mux (0xde)
#define mask_of_disp_cvbs_reg_cvbs_to_mop_mux   (0x2)
#define shift_of_disp_cvbs_reg_cvbs_to_mop_mux  (1)
#define DISP_CVBS_REG_CVBS_TO_MOP_MUX           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_to_mop_mux)
// h006f, bit: 2
/* 1'b0:to EMI, 1'b1: to IMI*/
#define offset_of_disp_cvbs_reg_cvbs_to_dst (0xde)
#define mask_of_disp_cvbs_reg_cvbs_to_dst   (0x4)
#define shift_of_disp_cvbs_reg_cvbs_to_dst  (2)
#define DISP_CVBS_REG_CVBS_TO_DST           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_to_dst)
// h006f, bit: 3
/* */
#define offset_of_disp_cvbs_reg_cvbs_offset_enable (0xde)
#define mask_of_disp_cvbs_reg_cvbs_offset_enable   (0x8)
#define shift_of_disp_cvbs_reg_cvbs_offset_enable  (3)
#define DISP_CVBS_REG_CVBS_OFFSET_ENABLE           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_offset_enable)
// h006f, bit: 4
/* fifo_full_flag clear*/
#define offset_of_disp_cvbs_reg_cvbs_wdma_fifo_full_clear (0xde)
#define mask_of_disp_cvbs_reg_cvbs_wdma_fifo_full_clear   (0x10)
#define shift_of_disp_cvbs_reg_cvbs_wdma_fifo_full_clear  (4)
#define DISP_CVBS_REG_CVBS_WDMA_FIFO_FULL_CLEAR           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_wdma_fifo_full_clear)
// h006f, bit: 8
/* fifo_full flag*/
#define offset_of_disp_cvbs_reg_cvbs_wdma_fifo_full (0xde)
#define mask_of_disp_cvbs_reg_cvbs_wdma_fifo_full   (0x100)
#define shift_of_disp_cvbs_reg_cvbs_wdma_fifo_full  (8)
#define DISP_CVBS_REG_CVBS_WDMA_FIFO_FULL           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_wdma_fifo_full)
// bigger than 16 bit case allh0070
#define offset_of_disp_cvbs_reg_cvbs_imi_sta_adr_y (0xe0)
#define mask_of_disp_cvbs_reg_cvbs_imi_sta_adr_y   (0xffffffff)
#define shift_of_disp_cvbs_reg_cvbs_imi_sta_adr_y  (0)
#define DISP_CVBS_REG_CVBS_IMI_STA_ADR_Y           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_imi_sta_adr_y)
// h0070, bit: 15
/* */
#define offset_of_disp_cvbs_reg_cvbs_imi_sta_adr_y_0 (0xe0)
#define mask_of_disp_cvbs_reg_cvbs_imi_sta_adr_y_0   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_imi_sta_adr_y_0  (0)
#define DISP_CVBS_REG_CVBS_IMI_STA_ADR_Y_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_imi_sta_adr_y_0)
#define REG_DISP_CVBS_70_L                           (DISP_CVBS_REG_CVBS_IMI_STA_ADR_Y_0)
// h0071, bit: 15
/* */
#define offset_of_disp_cvbs_reg_cvbs_imi_sta_adr_y_1 (0xe2)
#define mask_of_disp_cvbs_reg_cvbs_imi_sta_adr_y_1   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_imi_sta_adr_y_1  (0)
#define DISP_CVBS_REG_CVBS_IMI_STA_ADR_Y_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_imi_sta_adr_y_1)
#define REG_DISP_CVBS_71_L                           (DISP_CVBS_REG_CVBS_IMI_STA_ADR_Y_1)
// bigger than 16 bit case allh0072
#define offset_of_disp_cvbs_reg_cvbs_imi_sta_adr_c (0xe4)
#define mask_of_disp_cvbs_reg_cvbs_imi_sta_adr_c   (0xffffffff)
#define shift_of_disp_cvbs_reg_cvbs_imi_sta_adr_c  (0)
#define DISP_CVBS_REG_CVBS_IMI_STA_ADR_C           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_imi_sta_adr_c)
// h0072, bit: 15
/* */
#define offset_of_disp_cvbs_reg_cvbs_imi_sta_adr_c_0 (0xe4)
#define mask_of_disp_cvbs_reg_cvbs_imi_sta_adr_c_0   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_imi_sta_adr_c_0  (0)
#define DISP_CVBS_REG_CVBS_IMI_STA_ADR_C_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_imi_sta_adr_c_0)
#define REG_DISP_CVBS_72_L                           (DISP_CVBS_REG_CVBS_IMI_STA_ADR_C_0)
// h0073, bit: 15
/* */
#define offset_of_disp_cvbs_reg_cvbs_imi_sta_adr_c_1 (0xe6)
#define mask_of_disp_cvbs_reg_cvbs_imi_sta_adr_c_1   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_imi_sta_adr_c_1  (0)
#define DISP_CVBS_REG_CVBS_IMI_STA_ADR_C_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_imi_sta_adr_c_1)
#define REG_DISP_CVBS_73_L                           (DISP_CVBS_REG_CVBS_IMI_STA_ADR_C_1)
// bigger than 16 bit case allh0074
#define offset_of_disp_cvbs_reg_cvbs_imi_offset_y (0xe8)
#define mask_of_disp_cvbs_reg_cvbs_imi_offset_y   (0xffffffff)
#define shift_of_disp_cvbs_reg_cvbs_imi_offset_y  (0)
#define DISP_CVBS_REG_CVBS_IMI_OFFSET_Y           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_imi_offset_y)
// h0074, bit: 15
/* */
#define offset_of_disp_cvbs_reg_cvbs_imi_offset_y_0 (0xe8)
#define mask_of_disp_cvbs_reg_cvbs_imi_offset_y_0   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_imi_offset_y_0  (0)
#define DISP_CVBS_REG_CVBS_IMI_OFFSET_Y_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_imi_offset_y_0)
#define REG_DISP_CVBS_74_L                          (DISP_CVBS_REG_CVBS_IMI_OFFSET_Y_0)
// h0075, bit: 15
/* */
#define offset_of_disp_cvbs_reg_cvbs_imi_offset_y_1 (0xea)
#define mask_of_disp_cvbs_reg_cvbs_imi_offset_y_1   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_imi_offset_y_1  (0)
#define DISP_CVBS_REG_CVBS_IMI_OFFSET_Y_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_imi_offset_y_1)
#define REG_DISP_CVBS_75_L                          (DISP_CVBS_REG_CVBS_IMI_OFFSET_Y_1)
// bigger than 16 bit case allh0076
#define offset_of_disp_cvbs_reg_cvbs_imi_offset_c (0xec)
#define mask_of_disp_cvbs_reg_cvbs_imi_offset_c   (0xffffffff)
#define shift_of_disp_cvbs_reg_cvbs_imi_offset_c  (0)
#define DISP_CVBS_REG_CVBS_IMI_OFFSET_C           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_imi_offset_c)
// h0076, bit: 15
/* */
#define offset_of_disp_cvbs_reg_cvbs_imi_offset_c_0 (0xec)
#define mask_of_disp_cvbs_reg_cvbs_imi_offset_c_0   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_imi_offset_c_0  (0)
#define DISP_CVBS_REG_CVBS_IMI_OFFSET_C_0           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_imi_offset_c_0)
#define REG_DISP_CVBS_76_L                          (DISP_CVBS_REG_CVBS_IMI_OFFSET_C_0)
// h0077, bit: 15
/* */
#define offset_of_disp_cvbs_reg_cvbs_imi_offset_c_1 (0xee)
#define mask_of_disp_cvbs_reg_cvbs_imi_offset_c_1   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_imi_offset_c_1  (0)
#define DISP_CVBS_REG_CVBS_IMI_OFFSET_C_1           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_imi_offset_c_1)
#define REG_DISP_CVBS_77_L                          (DISP_CVBS_REG_CVBS_IMI_OFFSET_C_1)
// h0078, bit: 15
/* WDMA to CVBS burst number of 1 line*/
#define offset_of_disp_cvbs_reg_cvbs_width_y (0xf0)
#define mask_of_disp_cvbs_reg_cvbs_width_y   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_width_y  (0)
#define DISP_CVBS_REG_CVBS_WIDTH_Y           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_width_y)
#define REG_DISP_CVBS_78_L                   (DISP_CVBS_REG_CVBS_WIDTH_Y)
// h0079, bit: 15
/* WDMA to CVBS offset at line end*/
#define offset_of_disp_cvbs_reg_cvbs_h_buf_y (0xf2)
#define mask_of_disp_cvbs_reg_cvbs_h_buf_y   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_h_buf_y  (0)
#define DISP_CVBS_REG_CVBS_H_BUF_Y           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_h_buf_y)
#define REG_DISP_CVBS_79_L                   (DISP_CVBS_REG_CVBS_H_BUF_Y)
// h007a, bit: 15
/* WDMA to CVBS burst line count*/
#define offset_of_disp_cvbs_reg_cvbs_height_y (0xf4)
#define mask_of_disp_cvbs_reg_cvbs_height_y   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_height_y  (0)
#define DISP_CVBS_REG_CVBS_HEIGHT_Y           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_height_y)
#define REG_DISP_CVBS_7A_L                    (DISP_CVBS_REG_CVBS_HEIGHT_Y)
// h007b, bit: 15
/* WDMA to CVBS offset at last line*/
#define offset_of_disp_cvbs_reg_cvbs_v_buf_y (0xf6)
#define mask_of_disp_cvbs_reg_cvbs_v_buf_y   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_v_buf_y  (0)
#define DISP_CVBS_REG_CVBS_V_BUF_Y           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_v_buf_y)
#define REG_DISP_CVBS_7B_L                   (DISP_CVBS_REG_CVBS_V_BUF_Y)
// h007c, bit: 15
/* WDMA to CVBS burst number of 1 line*/
#define offset_of_disp_cvbs_reg_cvbs_width_c (0xf8)
#define mask_of_disp_cvbs_reg_cvbs_width_c   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_width_c  (0)
#define DISP_CVBS_REG_CVBS_WIDTH_C           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_width_c)
#define REG_DISP_CVBS_7C_L                   (DISP_CVBS_REG_CVBS_WIDTH_C)
// h007d, bit: 15
/* WDMA to CVBS offset at line end*/
#define offset_of_disp_cvbs_reg_cvbs_h_buf_c (0xfa)
#define mask_of_disp_cvbs_reg_cvbs_h_buf_c   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_h_buf_c  (0)
#define DISP_CVBS_REG_CVBS_H_BUF_C           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_h_buf_c)
#define REG_DISP_CVBS_7D_L                   (DISP_CVBS_REG_CVBS_H_BUF_C)
// h007e, bit: 15
/* WDMA to CVBS burst line count*/
#define offset_of_disp_cvbs_reg_cvbs_height_c (0xfc)
#define mask_of_disp_cvbs_reg_cvbs_height_c   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_height_c  (0)
#define DISP_CVBS_REG_CVBS_HEIGHT_C           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_height_c)
#define REG_DISP_CVBS_7E_L                    (DISP_CVBS_REG_CVBS_HEIGHT_C)
// h007f, bit: 15
/* WDMA to CVBS offset at last line*/
#define offset_of_disp_cvbs_reg_cvbs_v_buf_c (0xfe)
#define mask_of_disp_cvbs_reg_cvbs_v_buf_c   (0xffff)
#define shift_of_disp_cvbs_reg_cvbs_v_buf_c  (0)
#define DISP_CVBS_REG_CVBS_V_BUF_C           (REG_DISP_CVBS_BASE + offset_of_disp_cvbs_reg_cvbs_v_buf_c)
#define REG_DISP_CVBS_7F_L                   (DISP_CVBS_REG_CVBS_V_BUF_C)
#define REG_DISP_TOP_OP20_00_L               (REG_DISP_TOP_OP20_BASE + 0x0)
#define REG_DISP_TOP_OP20_01_L               (REG_DISP_TOP_OP20_BASE + 0x2)
#define REG_DISP_TOP_OP20_02_L               (REG_DISP_TOP_OP20_BASE + 0x4)
#define REG_DISP_TOP_OP20_03_L               (REG_DISP_TOP_OP20_BASE + 0x6)
#define REG_DISP_TOP_OP20_04_L               (REG_DISP_TOP_OP20_BASE + 0x8)
#define REG_DISP_TOP_OP20_05_L               (REG_DISP_TOP_OP20_BASE + 0xa)
#define REG_DISP_TOP_OP20_06_L               (REG_DISP_TOP_OP20_BASE + 0xc)
#define REG_DISP_TOP_OP20_07_L               (REG_DISP_TOP_OP20_BASE + 0xe)
#define REG_DISP_TOP_OP20_08_L               (REG_DISP_TOP_OP20_BASE + 0x10)
#define REG_DISP_TOP_OP20_09_L               (REG_DISP_TOP_OP20_BASE + 0x12)
#define REG_DISP_TOP_OP20_0A_L               (REG_DISP_TOP_OP20_BASE + 0x14)
#define REG_DISP_TOP_OP20_0B_L               (REG_DISP_TOP_OP20_BASE + 0x16)
#define REG_DISP_TOP_OP20_0C_L               (REG_DISP_TOP_OP20_BASE + 0x18)
#define REG_DISP_TOP_OP20_0D_L               (REG_DISP_TOP_OP20_BASE + 0x1a)
#define REG_DISP_TOP_OP20_0E_L               (REG_DISP_TOP_OP20_BASE + 0x1c)
#define REG_DISP_TOP_OP20_0F_L               (REG_DISP_TOP_OP20_BASE + 0x1e)
// h0010, bit: 0
/* Using external pulse to reset HCOUNT/VCOUNT // v0 usage*/
#define offset_of_disp_top_op20_reg_tgen_ext_frm_reset_en (0x20)
#define mask_of_disp_top_op20_reg_tgen_ext_frm_reset_en   (0x1)
#define shift_of_disp_top_op20_reg_tgen_ext_frm_reset_en  (0)
#define DISP_TOP_OP20_REG_TGEN_EXT_FRM_RESET_EN \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_ext_frm_reset_en)
#define REG_DISP_TOP_OP20_10_L (DISP_TOP_OP20_REG_TGEN_EXT_FRM_RESET_EN)
// h0010, bit: 1
/* 0: reset immediatlly // v0 usage
1: reset at line end*/
#define offset_of_disp_top_op20_reg_tgen_ext_frm_reset_mode (0x20)
#define mask_of_disp_top_op20_reg_tgen_ext_frm_reset_mode   (0x2)
#define shift_of_disp_top_op20_reg_tgen_ext_frm_reset_mode  (1)
#define DISP_TOP_OP20_REG_TGEN_EXT_FRM_RESET_MODE \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_ext_frm_reset_mode)
// h0010, bit: 2
/* Using external pulse to reset HCOUNT // v0 usage*/
#define offset_of_disp_top_op20_reg_tgen_ext_hs_en (0x20)
#define mask_of_disp_top_op20_reg_tgen_ext_hs_en   (0x4)
#define shift_of_disp_top_op20_reg_tgen_ext_hs_en  (2)
#define DISP_TOP_OP20_REG_TGEN_EXT_HS_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_ext_hs_en)
// h0010, bit: 4
/* Using external pulse to reset HCOUNT/VCOUNT // dac usage*/
#define offset_of_disp_top_op20_reg_tgen_ext_frm_reset_en_dac (0x20)
#define mask_of_disp_top_op20_reg_tgen_ext_frm_reset_en_dac   (0x10)
#define shift_of_disp_top_op20_reg_tgen_ext_frm_reset_en_dac  (4)
#define DISP_TOP_OP20_REG_TGEN_EXT_FRM_RESET_EN_DAC \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_ext_frm_reset_en_dac)
// h0010, bit: 5
/* 0: reset immediatlly // dac usage
1: reset at line end*/
#define offset_of_disp_top_op20_reg_tgen_ext_frm_reset_mode_dac (0x20)
#define mask_of_disp_top_op20_reg_tgen_ext_frm_reset_mode_dac   (0x20)
#define shift_of_disp_top_op20_reg_tgen_ext_frm_reset_mode_dac  (5)
#define DISP_TOP_OP20_REG_TGEN_EXT_FRM_RESET_MODE_DAC \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_ext_frm_reset_mode_dac)
// h0010, bit: 7
/* Reference source of FPLL // dac usage
00: End of VFDE
01: Start of VFDE
10: End of VSYNC
11: Startof VSYNC*/
#define offset_of_disp_top_op20_reg_tgen_fpll_ref_sel (0x20)
#define mask_of_disp_top_op20_reg_tgen_fpll_ref_sel   (0xc0)
#define shift_of_disp_top_op20_reg_tgen_fpll_ref_sel  (6)
#define DISP_TOP_OP20_REG_TGEN_FPLL_REF_SEL           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_fpll_ref_sel)
// h0010, bit: 15
/* Reference delayed PIPE to FPLL // dac usage*/
#define offset_of_disp_top_op20_reg_tgen_fpll_dly (0x20)
#define mask_of_disp_top_op20_reg_tgen_fpll_dly   (0xff00)
#define shift_of_disp_top_op20_reg_tgen_fpll_dly  (8)
#define DISP_TOP_OP20_REG_TGEN_FPLL_DLY           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_fpll_dly)
// h0011, bit: 12
/* H_TOTAL, total pixel minus 1*/
#define offset_of_disp_top_op20_reg_tgen_h_total (0x22)
#define mask_of_disp_top_op20_reg_tgen_h_total   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_h_total  (0)
#define DISP_TOP_OP20_REG_TGEN_H_TOTAL           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_h_total)
#define REG_DISP_TOP_OP20_11_L                   (DISP_TOP_OP20_REG_TGEN_H_TOTAL)
// h0012, bit: 12
/* V_TOTAL, total lines minus 1*/
#define offset_of_disp_top_op20_reg_tgen_v_total (0x24)
#define mask_of_disp_top_op20_reg_tgen_v_total   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_v_total  (0)
#define DISP_TOP_OP20_REG_TGEN_V_TOTAL           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_v_total)
#define REG_DISP_TOP_OP20_12_L                   (DISP_TOP_OP20_REG_TGEN_V_TOTAL)
// h0013, bit: 12
/* HSYNC start (included)*/
#define offset_of_disp_top_op20_reg_tgen_hs_start (0x26)
#define mask_of_disp_top_op20_reg_tgen_hs_start   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_hs_start  (0)
#define DISP_TOP_OP20_REG_TGEN_HS_START           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_hs_start)
#define REG_DISP_TOP_OP20_13_L                    (DISP_TOP_OP20_REG_TGEN_HS_START)
// h0014, bit: 12
/* HSYNC end (included)*/
#define offset_of_disp_top_op20_reg_tgen_hs_end (0x28)
#define mask_of_disp_top_op20_reg_tgen_hs_end   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_hs_end  (0)
#define DISP_TOP_OP20_REG_TGEN_HS_END           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_hs_end)
#define REG_DISP_TOP_OP20_14_L                  (DISP_TOP_OP20_REG_TGEN_HS_END)
// h0015, bit: 12
/* VSYNC start (included)*/
#define offset_of_disp_top_op20_reg_tgen_vs_start (0x2a)
#define mask_of_disp_top_op20_reg_tgen_vs_start   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_vs_start  (0)
#define DISP_TOP_OP20_REG_TGEN_VS_START           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_vs_start)
#define REG_DISP_TOP_OP20_15_L                    (DISP_TOP_OP20_REG_TGEN_VS_START)
// h0016, bit: 12
/* VSYNC end (included)*/
#define offset_of_disp_top_op20_reg_tgen_vs_end (0x2c)
#define mask_of_disp_top_op20_reg_tgen_vs_end   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_vs_end  (0)
#define DISP_TOP_OP20_REG_TGEN_VS_END           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_vs_end)
#define REG_DISP_TOP_OP20_16_L                  (DISP_TOP_OP20_REG_TGEN_VS_END)
// h0017, bit: 12
/* H frame de start (included)*/
#define offset_of_disp_top_op20_reg_tgen_hfde_start (0x2e)
#define mask_of_disp_top_op20_reg_tgen_hfde_start   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_hfde_start  (0)
#define DISP_TOP_OP20_REG_TGEN_HFDE_START           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_hfde_start)
#define REG_DISP_TOP_OP20_17_L                      (DISP_TOP_OP20_REG_TGEN_HFDE_START)
// h0018, bit: 12
/* H frame de end (included)*/
#define offset_of_disp_top_op20_reg_tgen_hfde_end (0x30)
#define mask_of_disp_top_op20_reg_tgen_hfde_end   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_hfde_end  (0)
#define DISP_TOP_OP20_REG_TGEN_HFDE_END           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_hfde_end)
#define REG_DISP_TOP_OP20_18_L                    (DISP_TOP_OP20_REG_TGEN_HFDE_END)
// h0019, bit: 12
/* V frame de start (included)*/
#define offset_of_disp_top_op20_reg_tgen_vfde_start (0x32)
#define mask_of_disp_top_op20_reg_tgen_vfde_start   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_vfde_start  (0)
#define DISP_TOP_OP20_REG_TGEN_VFDE_START           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_vfde_start)
#define REG_DISP_TOP_OP20_19_L                      (DISP_TOP_OP20_REG_TGEN_VFDE_START)
// h001a, bit: 12
/* V frame de end (included)*/
#define offset_of_disp_top_op20_reg_tgen_vfde_end (0x34)
#define mask_of_disp_top_op20_reg_tgen_vfde_end   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_vfde_end  (0)
#define DISP_TOP_OP20_REG_TGEN_VFDE_END           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_vfde_end)
#define REG_DISP_TOP_OP20_1A_L                    (DISP_TOP_OP20_REG_TGEN_VFDE_END)
// h001b, bit: 7
/* Frame no signal color B channel*/
#define offset_of_disp_top_op20_reg_fcolor_b (0x36)
#define mask_of_disp_top_op20_reg_fcolor_b   (0xff)
#define shift_of_disp_top_op20_reg_fcolor_b  (0)
#define DISP_TOP_OP20_REG_FCOLOR_B           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_fcolor_b)
#define REG_DISP_TOP_OP20_1B_L               (DISP_TOP_OP20_REG_FCOLOR_B)
// h001b, bit: 15
/* Frame no signal color G channel*/
#define offset_of_disp_top_op20_reg_fcolor_g (0x36)
#define mask_of_disp_top_op20_reg_fcolor_g   (0xff00)
#define shift_of_disp_top_op20_reg_fcolor_g  (8)
#define DISP_TOP_OP20_REG_FCOLOR_G           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_fcolor_g)
// h001c, bit: 7
/* Frame no signal color R channel*/
#define offset_of_disp_top_op20_reg_fcolor_r (0x38)
#define mask_of_disp_top_op20_reg_fcolor_r   (0xff)
#define shift_of_disp_top_op20_reg_fcolor_r  (0)
#define DISP_TOP_OP20_REG_FCOLOR_R           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_fcolor_r)
#define REG_DISP_TOP_OP20_1C_L               (DISP_TOP_OP20_REG_FCOLOR_R)
// h001c, bit: 15
/* Forced to show frame color*/
#define offset_of_disp_top_op20_reg_fcolor_force (0x38)
#define mask_of_disp_top_op20_reg_fcolor_force   (0x8000)
#define shift_of_disp_top_op20_reg_fcolor_force  (15)
#define DISP_TOP_OP20_REG_FCOLOR_FORCE           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_fcolor_force)
// h001d, bit: 12
/* Window 0 H de start (included)*/
#define offset_of_disp_top_op20_reg_tgen_w0_hde_start (0x3a)
#define mask_of_disp_top_op20_reg_tgen_w0_hde_start   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_w0_hde_start  (0)
#define DISP_TOP_OP20_REG_TGEN_W0_HDE_START           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_w0_hde_start)
#define REG_DISP_TOP_OP20_1D_L                        (DISP_TOP_OP20_REG_TGEN_W0_HDE_START)
// h001e, bit: 12
/* Window 0 H de end (included)*/
#define offset_of_disp_top_op20_reg_tgen_w0_hde_end (0x3c)
#define mask_of_disp_top_op20_reg_tgen_w0_hde_end   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_w0_hde_end  (0)
#define DISP_TOP_OP20_REG_TGEN_W0_HDE_END           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_w0_hde_end)
#define REG_DISP_TOP_OP20_1E_L                      (DISP_TOP_OP20_REG_TGEN_W0_HDE_END)
// h001f, bit: 12
/* Window 0 V de start (included)*/
#define offset_of_disp_top_op20_reg_tgen_w0_vde_start (0x3e)
#define mask_of_disp_top_op20_reg_tgen_w0_vde_start   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_w0_vde_start  (0)
#define DISP_TOP_OP20_REG_TGEN_W0_VDE_START           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_w0_vde_start)
#define REG_DISP_TOP_OP20_1F_L                        (DISP_TOP_OP20_REG_TGEN_W0_VDE_START)
// h0020, bit: 12
/* Window 0 V de end (included)*/
#define offset_of_disp_top_op20_reg_tgen_w0_vde_end (0x40)
#define mask_of_disp_top_op20_reg_tgen_w0_vde_end   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_w0_vde_end  (0)
#define DISP_TOP_OP20_REG_TGEN_W0_VDE_END           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_w0_vde_end)
#define REG_DISP_TOP_OP20_20_L                      (DISP_TOP_OP20_REG_TGEN_W0_VDE_END)
// h0021, bit: 7
/* Window 0 no signal color B channel*/
#define offset_of_disp_top_op20_reg_w0_fcolor_b (0x42)
#define mask_of_disp_top_op20_reg_w0_fcolor_b   (0xff)
#define shift_of_disp_top_op20_reg_w0_fcolor_b  (0)
#define DISP_TOP_OP20_REG_W0_FCOLOR_B           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_w0_fcolor_b)
#define REG_DISP_TOP_OP20_21_L                  (DISP_TOP_OP20_REG_W0_FCOLOR_B)
// h0021, bit: 15
/* Window 0 no signal color G channel*/
#define offset_of_disp_top_op20_reg_w0_fcolor_g (0x42)
#define mask_of_disp_top_op20_reg_w0_fcolor_g   (0xff00)
#define shift_of_disp_top_op20_reg_w0_fcolor_g  (8)
#define DISP_TOP_OP20_REG_W0_FCOLOR_G           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_w0_fcolor_g)
// h0022, bit: 7
/* Window 0 no signal color R channel*/
#define offset_of_disp_top_op20_reg_w0_fcolor_r (0x44)
#define mask_of_disp_top_op20_reg_w0_fcolor_r   (0xff)
#define shift_of_disp_top_op20_reg_w0_fcolor_r  (0)
#define DISP_TOP_OP20_REG_W0_FCOLOR_R           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_w0_fcolor_r)
#define REG_DISP_TOP_OP20_22_L                  (DISP_TOP_OP20_REG_W0_FCOLOR_R)
// h0022, bit: 15
/* Window 0 forced to show no signal color*/
#define offset_of_disp_top_op20_reg_w0_fcolor_force (0x44)
#define mask_of_disp_top_op20_reg_w0_fcolor_force   (0x8000)
#define shift_of_disp_top_op20_reg_w0_fcolor_force  (15)
#define DISP_TOP_OP20_REG_W0_FCOLOR_FORCE           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_w0_fcolor_force)
// h0023, bit: 12
/* HSYNC start (included) // dac usage*/
#define offset_of_disp_top_op20_reg_tgen_dac_hs_start (0x46)
#define mask_of_disp_top_op20_reg_tgen_dac_hs_start   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_dac_hs_start  (0)
#define DISP_TOP_OP20_REG_TGEN_DAC_HS_START           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_dac_hs_start)
#define REG_DISP_TOP_OP20_23_L                        (DISP_TOP_OP20_REG_TGEN_DAC_HS_START)
// h0024, bit: 12
/* HSYNC end (included) // dac usage*/
#define offset_of_disp_top_op20_reg_tgen_dac_hs_end (0x48)
#define mask_of_disp_top_op20_reg_tgen_dac_hs_end   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_dac_hs_end  (0)
#define DISP_TOP_OP20_REG_TGEN_DAC_HS_END           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_dac_hs_end)
#define REG_DISP_TOP_OP20_24_L                      (DISP_TOP_OP20_REG_TGEN_DAC_HS_END)
#define REG_DISP_TOP_OP20_25_L                      (REG_DISP_TOP_OP20_BASE + 0x4a)
#define REG_DISP_TOP_OP20_26_L                      (REG_DISP_TOP_OP20_BASE + 0x4c)
// h0027, bit: 12
/* H frame de start (included) // dac usage*/
#define offset_of_disp_top_op20_reg_tgen_dac_hfde_start (0x4e)
#define mask_of_disp_top_op20_reg_tgen_dac_hfde_start   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_dac_hfde_start  (0)
#define DISP_TOP_OP20_REG_TGEN_DAC_HFDE_START           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_dac_hfde_start)
#define REG_DISP_TOP_OP20_27_L                          (DISP_TOP_OP20_REG_TGEN_DAC_HFDE_START)
// h0028, bit: 12
/* H frame de end (included) // dac usage*/
#define offset_of_disp_top_op20_reg_tgen_dac_hfde_end (0x50)
#define mask_of_disp_top_op20_reg_tgen_dac_hfde_end   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_dac_hfde_end  (0)
#define DISP_TOP_OP20_REG_TGEN_DAC_HFDE_END           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_dac_hfde_end)
#define REG_DISP_TOP_OP20_28_L                        (DISP_TOP_OP20_REG_TGEN_DAC_HFDE_END)
// h0029, bit: 12
/* V frame de start (included) // dac usage*/
#define offset_of_disp_top_op20_reg_tgen_dac_vfde_start (0x52)
#define mask_of_disp_top_op20_reg_tgen_dac_vfde_start   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_dac_vfde_start  (0)
#define DISP_TOP_OP20_REG_TGEN_DAC_VFDE_START           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_dac_vfde_start)
#define REG_DISP_TOP_OP20_29_L                          (DISP_TOP_OP20_REG_TGEN_DAC_VFDE_START)
// h002a, bit: 12
/* V frame de end (included) // dac usage*/
#define offset_of_disp_top_op20_reg_tgen_dac_vfde_end (0x54)
#define mask_of_disp_top_op20_reg_tgen_dac_vfde_end   (0x1fff)
#define shift_of_disp_top_op20_reg_tgen_dac_vfde_end  (0)
#define DISP_TOP_OP20_REG_TGEN_DAC_VFDE_END           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_dac_vfde_end)
#define REG_DISP_TOP_OP20_2A_L                        (DISP_TOP_OP20_REG_TGEN_DAC_VFDE_END)
// h002b, bit: 1
/* Reference source of FPLL // v0 & v1 usage
00: End of VFDE
01: Start of VFDE
10: End of VSYNC
11: Startof VSYNC*/
#define offset_of_disp_top_op20_reg_video_path_fpll_ref_sel (0x56)
#define mask_of_disp_top_op20_reg_video_path_fpll_ref_sel   (0x3)
#define shift_of_disp_top_op20_reg_video_path_fpll_ref_sel  (0)
#define DISP_TOP_OP20_REG_VIDEO_PATH_FPLL_REF_SEL \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_video_path_fpll_ref_sel)
#define REG_DISP_TOP_OP20_2B_L (DISP_TOP_OP20_REG_VIDEO_PATH_FPLL_REF_SEL)
// h002c, bit: 12
/* Reference line delay PIPE to FPLL // v0 & v1 usage*/
#define offset_of_disp_top_op20_reg_video_path_fpll_dly (0x58)
#define mask_of_disp_top_op20_reg_video_path_fpll_dly   (0x1fff)
#define shift_of_disp_top_op20_reg_video_path_fpll_dly  (0)
#define DISP_TOP_OP20_REG_VIDEO_PATH_FPLL_DLY           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_video_path_fpll_dly)
#define REG_DISP_TOP_OP20_2C_L                          (DISP_TOP_OP20_REG_VIDEO_PATH_FPLL_DLY)
#define REG_DISP_TOP_OP20_2D_L                          (REG_DISP_TOP_OP20_BASE + 0x5a)
// h002e, bit: 0
/* Reference the unit of delayed PIPE to FPLL // dac usage*/
#define offset_of_disp_top_op20_reg_tgen_fpll_dly_unit (0x5c)
#define mask_of_disp_top_op20_reg_tgen_fpll_dly_unit   (0x1)
#define shift_of_disp_top_op20_reg_tgen_fpll_dly_unit  (0)
#define DISP_TOP_OP20_REG_TGEN_FPLL_DLY_UNIT           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tgen_fpll_dly_unit)
#define REG_DISP_TOP_OP20_2E_L                         (DISP_TOP_OP20_REG_TGEN_FPLL_DLY_UNIT)
// h002f, bit: 15
/* time stamp read register*/
#define offset_of_disp_top_op20_reg_time_stamp_dp (0x5e)
#define mask_of_disp_top_op20_reg_time_stamp_dp   (0xffff)
#define shift_of_disp_top_op20_reg_time_stamp_dp  (0)
#define DISP_TOP_OP20_REG_TIME_STAMP_DP           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_time_stamp_dp)
#define REG_DISP_TOP_OP20_2F_L                    (DISP_TOP_OP20_REG_TIME_STAMP_DP)
// h0030, bit: 0
/* Enable operation of  3X3 matrix for color management*/
#define offset_of_disp_top_op20_reg_cm3x3_en (0x60)
#define mask_of_disp_top_op20_reg_cm3x3_en   (0x1)
#define shift_of_disp_top_op20_reg_cm3x3_en  (0)
#define DISP_TOP_OP20_REG_CM3X3_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_en)
#define REG_DISP_TOP_OP20_30_L               (DISP_TOP_OP20_REG_CM3X3_EN)
// h0030, bit: 1
/* For data R
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op20_reg_cm3x3_in_range_1 (0x60)
#define mask_of_disp_top_op20_reg_cm3x3_in_range_1   (0x2)
#define shift_of_disp_top_op20_reg_cm3x3_in_range_1  (1)
#define DISP_TOP_OP20_REG_CM3X3_IN_RANGE_1           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_in_range_1)
// h0030, bit: 2
/* For data G
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op20_reg_cm3x3_in_range_2 (0x60)
#define mask_of_disp_top_op20_reg_cm3x3_in_range_2   (0x4)
#define shift_of_disp_top_op20_reg_cm3x3_in_range_2  (2)
#define DISP_TOP_OP20_REG_CM3X3_IN_RANGE_2           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_in_range_2)
// h0030, bit: 3
/* For data B
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op20_reg_cm3x3_in_range_3 (0x60)
#define mask_of_disp_top_op20_reg_cm3x3_in_range_3   (0x8)
#define shift_of_disp_top_op20_reg_cm3x3_in_range_3  (3)
#define DISP_TOP_OP20_REG_CM3X3_IN_RANGE_3           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_in_range_3)
// h0030, bit: 8
/* Enable brightness adjustment*/
#define offset_of_disp_top_op20_reg_bri_en (0x60)
#define mask_of_disp_top_op20_reg_bri_en   (0x100)
#define shift_of_disp_top_op20_reg_bri_en  (8)
#define DISP_TOP_OP20_REG_BRI_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_bri_en)
// h0030, bit: 9
/* Rounding with pseudo noise*/
#define offset_of_disp_top_op20_reg_bri_noise_round (0x60)
#define mask_of_disp_top_op20_reg_bri_noise_round   (0x200)
#define shift_of_disp_top_op20_reg_bri_noise_round  (9)
#define DISP_TOP_OP20_REG_BRI_NOISE_ROUND           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_bri_noise_round)
// h0031, bit: 12
/* Coefficient (1,1) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_coef11 (0x62)
#define mask_of_disp_top_op20_reg_cm3x3_coef11   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_coef11  (0)
#define DISP_TOP_OP20_REG_CM3X3_COEF11           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_coef11)
#define REG_DISP_TOP_OP20_31_L                   (DISP_TOP_OP20_REG_CM3X3_COEF11)
// h0032, bit: 12
/* Coefficient (1,2) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_coef12 (0x64)
#define mask_of_disp_top_op20_reg_cm3x3_coef12   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_coef12  (0)
#define DISP_TOP_OP20_REG_CM3X3_COEF12           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_coef12)
#define REG_DISP_TOP_OP20_32_L                   (DISP_TOP_OP20_REG_CM3X3_COEF12)
// h0033, bit: 12
/* Coefficient (1,3) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_coef13 (0x66)
#define mask_of_disp_top_op20_reg_cm3x3_coef13   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_coef13  (0)
#define DISP_TOP_OP20_REG_CM3X3_COEF13           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_coef13)
#define REG_DISP_TOP_OP20_33_L                   (DISP_TOP_OP20_REG_CM3X3_COEF13)
// h0034, bit: 12
/* Coefficient (2,1) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_coef21 (0x68)
#define mask_of_disp_top_op20_reg_cm3x3_coef21   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_coef21  (0)
#define DISP_TOP_OP20_REG_CM3X3_COEF21           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_coef21)
#define REG_DISP_TOP_OP20_34_L                   (DISP_TOP_OP20_REG_CM3X3_COEF21)
// h0035, bit: 12
/* Coefficient (2,2) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_coef22 (0x6a)
#define mask_of_disp_top_op20_reg_cm3x3_coef22   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_coef22  (0)
#define DISP_TOP_OP20_REG_CM3X3_COEF22           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_coef22)
#define REG_DISP_TOP_OP20_35_L                   (DISP_TOP_OP20_REG_CM3X3_COEF22)
// h0036, bit: 12
/* Coefficient (2,3) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_coef23 (0x6c)
#define mask_of_disp_top_op20_reg_cm3x3_coef23   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_coef23  (0)
#define DISP_TOP_OP20_REG_CM3X3_COEF23           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_coef23)
#define REG_DISP_TOP_OP20_36_L                   (DISP_TOP_OP20_REG_CM3X3_COEF23)
// h0037, bit: 12
/* Coefficient (3,1) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_coef31 (0x6e)
#define mask_of_disp_top_op20_reg_cm3x3_coef31   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_coef31  (0)
#define DISP_TOP_OP20_REG_CM3X3_COEF31           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_coef31)
#define REG_DISP_TOP_OP20_37_L                   (DISP_TOP_OP20_REG_CM3X3_COEF31)
// h0038, bit: 12
/* Coefficient (3,2) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_coef32 (0x70)
#define mask_of_disp_top_op20_reg_cm3x3_coef32   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_coef32  (0)
#define DISP_TOP_OP20_REG_CM3X3_COEF32           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_coef32)
#define REG_DISP_TOP_OP20_38_L                   (DISP_TOP_OP20_REG_CM3X3_COEF32)
// h0039, bit: 12
/* Coefficient (3,3) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_coef33 (0x72)
#define mask_of_disp_top_op20_reg_cm3x3_coef33   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_coef33  (0)
#define DISP_TOP_OP20_REG_CM3X3_COEF33           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_coef33)
#define REG_DISP_TOP_OP20_39_L                   (DISP_TOP_OP20_REG_CM3X3_COEF33)
// h003a, bit: 7
/* Offset of R*/
#define offset_of_disp_top_op20_reg_bri_r (0x74)
#define mask_of_disp_top_op20_reg_bri_r   (0xff)
#define shift_of_disp_top_op20_reg_bri_r  (0)
#define DISP_TOP_OP20_REG_BRI_R           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_bri_r)
#define REG_DISP_TOP_OP20_3A_L            (DISP_TOP_OP20_REG_BRI_R)
// h003a, bit: 15
/* Offset of G*/
#define offset_of_disp_top_op20_reg_bri_g (0x74)
#define mask_of_disp_top_op20_reg_bri_g   (0xff00)
#define shift_of_disp_top_op20_reg_bri_g  (8)
#define DISP_TOP_OP20_REG_BRI_G           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_bri_g)
// h003b, bit: 7
/* Offset of B*/
#define offset_of_disp_top_op20_reg_bri_b (0x76)
#define mask_of_disp_top_op20_reg_bri_b   (0xff)
#define shift_of_disp_top_op20_reg_bri_b  (0)
#define DISP_TOP_OP20_REG_BRI_B           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_bri_b)
#define REG_DISP_TOP_OP20_3B_L            (DISP_TOP_OP20_REG_BRI_B)
// h003c, bit: 0
/* Enable operation of  3X3 matrix for color management*/
#define offset_of_disp_top_op20_reg_cm3x3_2_en (0x78)
#define mask_of_disp_top_op20_reg_cm3x3_2_en   (0x1)
#define shift_of_disp_top_op20_reg_cm3x3_2_en  (0)
#define DISP_TOP_OP20_REG_CM3X3_2_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_2_en)
#define REG_DISP_TOP_OP20_3C_L                 (DISP_TOP_OP20_REG_CM3X3_2_EN)
// h003c, bit: 1
/* For data R
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op20_reg_cm3x3_2_in_range_1 (0x78)
#define mask_of_disp_top_op20_reg_cm3x3_2_in_range_1   (0x2)
#define shift_of_disp_top_op20_reg_cm3x3_2_in_range_1  (1)
#define DISP_TOP_OP20_REG_CM3X3_2_IN_RANGE_1           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_2_in_range_1)
// h003c, bit: 2
/* For data G
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op20_reg_cm3x3_2_in_range_2 (0x78)
#define mask_of_disp_top_op20_reg_cm3x3_2_in_range_2   (0x4)
#define shift_of_disp_top_op20_reg_cm3x3_2_in_range_2  (2)
#define DISP_TOP_OP20_REG_CM3X3_2_IN_RANGE_2           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_2_in_range_2)
// h003c, bit: 3
/* For data B
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op20_reg_cm3x3_2_in_range_3 (0x78)
#define mask_of_disp_top_op20_reg_cm3x3_2_in_range_3   (0x8)
#define shift_of_disp_top_op20_reg_cm3x3_2_in_range_3  (3)
#define DISP_TOP_OP20_REG_CM3X3_2_IN_RANGE_3           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_2_in_range_3)
// h003c, bit: 8
/* Enable brightness adjustment*/
#define offset_of_disp_top_op20_reg_bri_2_en (0x78)
#define mask_of_disp_top_op20_reg_bri_2_en   (0x100)
#define shift_of_disp_top_op20_reg_bri_2_en  (8)
#define DISP_TOP_OP20_REG_BRI_2_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_bri_2_en)
// h003c, bit: 9
/* Rounding with pseudo noise*/
#define offset_of_disp_top_op20_reg_bri_2_noise_round (0x78)
#define mask_of_disp_top_op20_reg_bri_2_noise_round   (0x200)
#define shift_of_disp_top_op20_reg_bri_2_noise_round  (9)
#define DISP_TOP_OP20_REG_BRI_2_NOISE_ROUND           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_bri_2_noise_round)
// h003d, bit: 12
/* Coefficient (1,1) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_2_coef11 (0x7a)
#define mask_of_disp_top_op20_reg_cm3x3_2_coef11   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_2_coef11  (0)
#define DISP_TOP_OP20_REG_CM3X3_2_COEF11           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_2_coef11)
#define REG_DISP_TOP_OP20_3D_L                     (DISP_TOP_OP20_REG_CM3X3_2_COEF11)
// h003e, bit: 12
/* Coefficient (1,2) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_2_coef12 (0x7c)
#define mask_of_disp_top_op20_reg_cm3x3_2_coef12   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_2_coef12  (0)
#define DISP_TOP_OP20_REG_CM3X3_2_COEF12           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_2_coef12)
#define REG_DISP_TOP_OP20_3E_L                     (DISP_TOP_OP20_REG_CM3X3_2_COEF12)
// h003f, bit: 12
/* Coefficient (1,3) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_2_coef13 (0x7e)
#define mask_of_disp_top_op20_reg_cm3x3_2_coef13   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_2_coef13  (0)
#define DISP_TOP_OP20_REG_CM3X3_2_COEF13           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_2_coef13)
#define REG_DISP_TOP_OP20_3F_L                     (DISP_TOP_OP20_REG_CM3X3_2_COEF13)
// h0040, bit: 12
/* Coefficient (2,1) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_2_coef21 (0x80)
#define mask_of_disp_top_op20_reg_cm3x3_2_coef21   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_2_coef21  (0)
#define DISP_TOP_OP20_REG_CM3X3_2_COEF21           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_2_coef21)
#define REG_DISP_TOP_OP20_40_L                     (DISP_TOP_OP20_REG_CM3X3_2_COEF21)
// h0041, bit: 12
/* Coefficient (2,2) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_2_coef22 (0x82)
#define mask_of_disp_top_op20_reg_cm3x3_2_coef22   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_2_coef22  (0)
#define DISP_TOP_OP20_REG_CM3X3_2_COEF22           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_2_coef22)
#define REG_DISP_TOP_OP20_41_L                     (DISP_TOP_OP20_REG_CM3X3_2_COEF22)
// h0042, bit: 12
/* Coefficient (2,3) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_2_coef23 (0x84)
#define mask_of_disp_top_op20_reg_cm3x3_2_coef23   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_2_coef23  (0)
#define DISP_TOP_OP20_REG_CM3X3_2_COEF23           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_2_coef23)
#define REG_DISP_TOP_OP20_42_L                     (DISP_TOP_OP20_REG_CM3X3_2_COEF23)
// h0043, bit: 12
/* Coefficient (3,1) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_2_coef31 (0x86)
#define mask_of_disp_top_op20_reg_cm3x3_2_coef31   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_2_coef31  (0)
#define DISP_TOP_OP20_REG_CM3X3_2_COEF31           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_2_coef31)
#define REG_DISP_TOP_OP20_43_L                     (DISP_TOP_OP20_REG_CM3X3_2_COEF31)
// h0044, bit: 12
/* Coefficient (3,2) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_2_coef32 (0x88)
#define mask_of_disp_top_op20_reg_cm3x3_2_coef32   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_2_coef32  (0)
#define DISP_TOP_OP20_REG_CM3X3_2_COEF32           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_2_coef32)
#define REG_DISP_TOP_OP20_44_L                     (DISP_TOP_OP20_REG_CM3X3_2_COEF32)
// h0045, bit: 12
/* Coefficient (3,3) of 3X3 matrix*/
#define offset_of_disp_top_op20_reg_cm3x3_2_coef33 (0x8a)
#define mask_of_disp_top_op20_reg_cm3x3_2_coef33   (0x1fff)
#define shift_of_disp_top_op20_reg_cm3x3_2_coef33  (0)
#define DISP_TOP_OP20_REG_CM3X3_2_COEF33           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_cm3x3_2_coef33)
#define REG_DISP_TOP_OP20_45_L                     (DISP_TOP_OP20_REG_CM3X3_2_COEF33)
// h0046, bit: 7
/* Offset of R*/
#define offset_of_disp_top_op20_reg_bri_2_r (0x8c)
#define mask_of_disp_top_op20_reg_bri_2_r   (0xff)
#define shift_of_disp_top_op20_reg_bri_2_r  (0)
#define DISP_TOP_OP20_REG_BRI_2_R           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_bri_2_r)
#define REG_DISP_TOP_OP20_46_L              (DISP_TOP_OP20_REG_BRI_2_R)
// h0046, bit: 15
/* Offset of G*/
#define offset_of_disp_top_op20_reg_bri_2_g (0x8c)
#define mask_of_disp_top_op20_reg_bri_2_g   (0xff00)
#define shift_of_disp_top_op20_reg_bri_2_g  (8)
#define DISP_TOP_OP20_REG_BRI_2_G           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_bri_2_g)
// h0047, bit: 7
/* Offset of B*/
#define offset_of_disp_top_op20_reg_bri_2_b (0x8e)
#define mask_of_disp_top_op20_reg_bri_2_b   (0xff)
#define shift_of_disp_top_op20_reg_bri_2_b  (0)
#define DISP_TOP_OP20_REG_BRI_2_B           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_bri_2_b)
#define REG_DISP_TOP_OP20_47_L              (DISP_TOP_OP20_REG_BRI_2_B)
// h0048, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram_thrd_0 (0x90)
#define mask_of_disp_top_op20_reg_histogram_thrd_0   (0xffff)
#define shift_of_disp_top_op20_reg_histogram_thrd_0  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM_THRD_0           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram_thrd_0)
#define REG_DISP_TOP_OP20_48_L                       (DISP_TOP_OP20_REG_HISTOGRAM_THRD_0)
// h0049, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram_thrd_1 (0x92)
#define mask_of_disp_top_op20_reg_histogram_thrd_1   (0xffff)
#define shift_of_disp_top_op20_reg_histogram_thrd_1  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM_THRD_1           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram_thrd_1)
#define REG_DISP_TOP_OP20_49_L                       (DISP_TOP_OP20_REG_HISTOGRAM_THRD_1)
// h004a, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram_thrd_2 (0x94)
#define mask_of_disp_top_op20_reg_histogram_thrd_2   (0xffff)
#define shift_of_disp_top_op20_reg_histogram_thrd_2  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM_THRD_2           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram_thrd_2)
#define REG_DISP_TOP_OP20_4A_L                       (DISP_TOP_OP20_REG_HISTOGRAM_THRD_2)
// h004b, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram_thrd_3 (0x96)
#define mask_of_disp_top_op20_reg_histogram_thrd_3   (0xffff)
#define shift_of_disp_top_op20_reg_histogram_thrd_3  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM_THRD_3           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram_thrd_3)
#define REG_DISP_TOP_OP20_4B_L                       (DISP_TOP_OP20_REG_HISTOGRAM_THRD_3)
// h004c, bit: 3
/* */
#define offset_of_disp_top_op20_reg_yavg_alpha (0x98)
#define mask_of_disp_top_op20_reg_yavg_alpha   (0xf)
#define shift_of_disp_top_op20_reg_yavg_alpha  (0)
#define DISP_TOP_OP20_REG_YAVG_ALPHA           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_yavg_alpha)
#define REG_DISP_TOP_OP20_4C_L                 (DISP_TOP_OP20_REG_YAVG_ALPHA)
// h004c, bit: 7
/* */
#define offset_of_disp_top_op20_reg_fstable (0x98)
#define mask_of_disp_top_op20_reg_fstable   (0xf0)
#define shift_of_disp_top_op20_reg_fstable  (4)
#define DISP_TOP_OP20_REG_FSTABLE           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_fstable)
// h004c, bit: 8
/* */
#define offset_of_disp_top_op20_reg_dcr_en (0x98)
#define mask_of_disp_top_op20_reg_dcr_en   (0x100)
#define shift_of_disp_top_op20_reg_dcr_en  (8)
#define DISP_TOP_OP20_REG_DCR_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_dcr_en)
// h004c, bit: 9
/* */
#define offset_of_disp_top_op20_reg_dlc_gain_lim_en (0x98)
#define mask_of_disp_top_op20_reg_dlc_gain_lim_en   (0x200)
#define shift_of_disp_top_op20_reg_dlc_gain_lim_en  (9)
#define DISP_TOP_OP20_REG_DLC_GAIN_LIM_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_dlc_gain_lim_en)
// h004c, bit: 10
/* */
#define offset_of_disp_top_op20_reg_ygain_hist_lim_en (0x98)
#define mask_of_disp_top_op20_reg_ygain_hist_lim_en   (0x400)
#define shift_of_disp_top_op20_reg_ygain_hist_lim_en  (10)
#define DISP_TOP_OP20_REG_YGAIN_HIST_LIM_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_ygain_hist_lim_en)
// h004c, bit: 11
/* */
#define offset_of_disp_top_op20_reg_yout_rgb_en (0x98)
#define mask_of_disp_top_op20_reg_yout_rgb_en   (0x800)
#define shift_of_disp_top_op20_reg_yout_rgb_en  (11)
#define DISP_TOP_OP20_REG_YOUT_RGB_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_yout_rgb_en)
// h004c, bit: 12
/* */
#define offset_of_disp_top_op20_reg_hist_121_en (0x98)
#define mask_of_disp_top_op20_reg_hist_121_en   (0x1000)
#define shift_of_disp_top_op20_reg_hist_121_en  (12)
#define DISP_TOP_OP20_REG_HIST_121_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_hist_121_en)
// h004c, bit: 13
/* */
#define offset_of_disp_top_op20_reg_hist_rgb_en (0x98)
#define mask_of_disp_top_op20_reg_hist_rgb_en   (0x2000)
#define shift_of_disp_top_op20_reg_hist_rgb_en  (13)
#define DISP_TOP_OP20_REG_HIST_RGB_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_hist_rgb_en)
// h004c, bit: 14
/* */
#define offset_of_disp_top_op20_reg_yavg_lim_en (0x98)
#define mask_of_disp_top_op20_reg_yavg_lim_en   (0x4000)
#define shift_of_disp_top_op20_reg_yavg_lim_en  (14)
#define DISP_TOP_OP20_REG_YAVG_LIM_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_yavg_lim_en)
// h004c, bit: 15
/* */
#define offset_of_disp_top_op20_reg_yavg_rgb_en (0x98)
#define mask_of_disp_top_op20_reg_yavg_rgb_en   (0x8000)
#define shift_of_disp_top_op20_reg_yavg_rgb_en  (15)
#define DISP_TOP_OP20_REG_YAVG_RGB_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_yavg_rgb_en)
// h004d, bit: 7
/* */
#define offset_of_disp_top_op20_reg_ygain (0x9a)
#define mask_of_disp_top_op20_reg_ygain   (0xff)
#define shift_of_disp_top_op20_reg_ygain  (0)
#define DISP_TOP_OP20_REG_YGAIN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_ygain)
#define REG_DISP_TOP_OP20_4D_L            (DISP_TOP_OP20_REG_YGAIN)
// h004d, bit: 15
/* */
#define offset_of_disp_top_op20_reg_ygain_step (0x9a)
#define mask_of_disp_top_op20_reg_ygain_step   (0xff00)
#define shift_of_disp_top_op20_reg_ygain_step  (8)
#define DISP_TOP_OP20_REG_YGAIN_STEP           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_ygain_step)
// h004e, bit: 7
/* */
#define offset_of_disp_top_op20_reg_ygain_step_max (0x9c)
#define mask_of_disp_top_op20_reg_ygain_step_max   (0xff)
#define shift_of_disp_top_op20_reg_ygain_step_max  (0)
#define DISP_TOP_OP20_REG_YGAIN_STEP_MAX           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_ygain_step_max)
#define REG_DISP_TOP_OP20_4E_L                     (DISP_TOP_OP20_REG_YGAIN_STEP_MAX)
// h004e, bit: 15
/* */
#define offset_of_disp_top_op20_reg_ygain_step_min (0x9c)
#define mask_of_disp_top_op20_reg_ygain_step_min   (0xff00)
#define shift_of_disp_top_op20_reg_ygain_step_min  (8)
#define DISP_TOP_OP20_REG_YGAIN_STEP_MIN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_ygain_step_min)
// h004f, bit: 11
/* */
#define offset_of_disp_top_op20_reg_ygain_offset (0x9e)
#define mask_of_disp_top_op20_reg_ygain_offset   (0xfff)
#define shift_of_disp_top_op20_reg_ygain_offset  (0)
#define DISP_TOP_OP20_REG_YGAIN_OFFSET           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_ygain_offset)
#define REG_DISP_TOP_OP20_4F_L                   (DISP_TOP_OP20_REG_YGAIN_OFFSET)
// h0050, bit: 11
/* */
#define offset_of_disp_top_op20_reg_dlc_offset (0xa0)
#define mask_of_disp_top_op20_reg_dlc_offset   (0xfff)
#define shift_of_disp_top_op20_reg_dlc_offset  (0)
#define DISP_TOP_OP20_REG_DLC_OFFSET           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_dlc_offset)
#define REG_DISP_TOP_OP20_50_L                 (DISP_TOP_OP20_REG_DLC_OFFSET)
// h0051, bit: 7
/* */
#define offset_of_disp_top_op20_reg_dlc_gain (0xa2)
#define mask_of_disp_top_op20_reg_dlc_gain   (0xff)
#define shift_of_disp_top_op20_reg_dlc_gain  (0)
#define DISP_TOP_OP20_REG_DLC_GAIN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_dlc_gain)
#define REG_DISP_TOP_OP20_51_L               (DISP_TOP_OP20_REG_DLC_GAIN)
// h0051, bit: 15
/* */
#define offset_of_disp_top_op20_reg_pwm_fdly (0xa2)
#define mask_of_disp_top_op20_reg_pwm_fdly   (0xff00)
#define shift_of_disp_top_op20_reg_pwm_fdly  (8)
#define DISP_TOP_OP20_REG_PWM_FDLY           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_pwm_fdly)
// h0052, bit: 15
/* */
#define offset_of_disp_top_op20_reg_pwm_period (0xa4)
#define mask_of_disp_top_op20_reg_pwm_period   (0xffff)
#define shift_of_disp_top_op20_reg_pwm_period  (0)
#define DISP_TOP_OP20_REG_PWM_PERIOD           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_pwm_period)
#define REG_DISP_TOP_OP20_52_L                 (DISP_TOP_OP20_REG_PWM_PERIOD)
// h0053, bit: 15
/* */
#define offset_of_disp_top_op20_reg_pwm_duty (0xa6)
#define mask_of_disp_top_op20_reg_pwm_duty   (0xffff)
#define shift_of_disp_top_op20_reg_pwm_duty  (0)
#define DISP_TOP_OP20_REG_PWM_DUTY           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_pwm_duty)
#define REG_DISP_TOP_OP20_53_L               (DISP_TOP_OP20_REG_PWM_DUTY)
// h0054, bit: 11
/* */
#define offset_of_disp_top_op20_reg_pwm_r_offset (0xa8)
#define mask_of_disp_top_op20_reg_pwm_r_offset   (0xfff)
#define shift_of_disp_top_op20_reg_pwm_r_offset  (0)
#define DISP_TOP_OP20_REG_PWM_R_OFFSET           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_pwm_r_offset)
#define REG_DISP_TOP_OP20_54_L                   (DISP_TOP_OP20_REG_PWM_R_OFFSET)
// h0055, bit: 11
/* */
#define offset_of_disp_top_op20_reg_dcr_offset (0xaa)
#define mask_of_disp_top_op20_reg_dcr_offset   (0xfff)
#define shift_of_disp_top_op20_reg_dcr_offset  (0)
#define DISP_TOP_OP20_REG_DCR_OFFSET           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_dcr_offset)
#define REG_DISP_TOP_OP20_55_L                 (DISP_TOP_OP20_REG_DCR_OFFSET)
// h0056, bit: 7
/* */
#define offset_of_disp_top_op20_reg_dcr_gain (0xac)
#define mask_of_disp_top_op20_reg_dcr_gain   (0xff)
#define shift_of_disp_top_op20_reg_dcr_gain  (0)
#define DISP_TOP_OP20_REG_DCR_GAIN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_dcr_gain)
#define REG_DISP_TOP_OP20_56_L               (DISP_TOP_OP20_REG_DCR_GAIN)
// h0056, bit: 9
/* */
#define offset_of_disp_top_op20_reg_pwm_table_en (0xac)
#define mask_of_disp_top_op20_reg_pwm_table_en   (0x200)
#define shift_of_disp_top_op20_reg_pwm_table_en  (9)
#define DISP_TOP_OP20_REG_PWM_TABLE_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_pwm_table_en)
// h0056, bit: 10
/* */
#define offset_of_disp_top_op20_reg_dlc_table_sel (0xac)
#define mask_of_disp_top_op20_reg_dlc_table_sel   (0x400)
#define shift_of_disp_top_op20_reg_dlc_table_sel  (10)
#define DISP_TOP_OP20_REG_DLC_TABLE_SEL           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_dlc_table_sel)
// h0056, bit: 11
/* */
#define offset_of_disp_top_op20_reg_dlc_en (0xac)
#define mask_of_disp_top_op20_reg_dlc_en   (0x800)
#define shift_of_disp_top_op20_reg_dlc_en  (11)
#define DISP_TOP_OP20_REG_DLC_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_dlc_en)
// h0056, bit: 13
/* */
#define offset_of_disp_top_op20_reg_pwm_rst_sel (0xac)
#define mask_of_disp_top_op20_reg_pwm_rst_sel   (0x3000)
#define shift_of_disp_top_op20_reg_pwm_rst_sel  (12)
#define DISP_TOP_OP20_REG_PWM_RST_SEL           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_pwm_rst_sel)
// h0056, bit: 14
/* */
#define offset_of_disp_top_op20_reg_pwm_inv (0xac)
#define mask_of_disp_top_op20_reg_pwm_inv   (0x4000)
#define shift_of_disp_top_op20_reg_pwm_inv  (14)
#define DISP_TOP_OP20_REG_PWM_INV           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_pwm_inv)
// h0056, bit: 15
/* */
#define offset_of_disp_top_op20_reg_pwm_htotal_en (0xac)
#define mask_of_disp_top_op20_reg_pwm_htotal_en   (0x8000)
#define shift_of_disp_top_op20_reg_pwm_htotal_en  (15)
#define DISP_TOP_OP20_REG_PWM_HTOTAL_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_pwm_htotal_en)
// h0057, bit: 7
/* */
#define offset_of_disp_top_op20_reg_dlc_table_din (0xae)
#define mask_of_disp_top_op20_reg_dlc_table_din   (0xff)
#define shift_of_disp_top_op20_reg_dlc_table_din  (0)
#define DISP_TOP_OP20_REG_DLC_TABLE_DIN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_dlc_table_din)
#define REG_DISP_TOP_OP20_57_L                    (DISP_TOP_OP20_REG_DLC_TABLE_DIN)
// h0057, bit: 15
/* */
#define offset_of_disp_top_op20_reg_pwm_table_din (0xae)
#define mask_of_disp_top_op20_reg_pwm_table_din   (0xff00)
#define shift_of_disp_top_op20_reg_pwm_table_din  (8)
#define DISP_TOP_OP20_REG_PWM_TABLE_DIN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_pwm_table_din)
// h0058, bit: 7
/* */
#define offset_of_disp_top_op20_reg_yavg_out (0xb0)
#define mask_of_disp_top_op20_reg_yavg_out   (0xff)
#define shift_of_disp_top_op20_reg_yavg_out  (0)
#define DISP_TOP_OP20_REG_YAVG_OUT           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_yavg_out)
#define REG_DISP_TOP_OP20_58_L               (DISP_TOP_OP20_REG_YAVG_OUT)
// h0058, bit: 15
/* */
#define offset_of_disp_top_op20_reg_yavg_pre_out (0xb0)
#define mask_of_disp_top_op20_reg_yavg_pre_out   (0xff00)
#define shift_of_disp_top_op20_reg_yavg_pre_out  (8)
#define DISP_TOP_OP20_REG_YAVG_PRE_OUT           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_yavg_pre_out)
// h0059, bit: 7
/* */
#define offset_of_disp_top_op20_reg_yavg_avg_out (0xb2)
#define mask_of_disp_top_op20_reg_yavg_avg_out   (0xff)
#define shift_of_disp_top_op20_reg_yavg_avg_out  (0)
#define DISP_TOP_OP20_REG_YAVG_AVG_OUT           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_yavg_avg_out)
#define REG_DISP_TOP_OP20_59_L                   (DISP_TOP_OP20_REG_YAVG_AVG_OUT)
// h0059, bit: 15
/* */
#define offset_of_disp_top_op20_reg_ygain_out (0xb2)
#define mask_of_disp_top_op20_reg_ygain_out   (0xff00)
#define shift_of_disp_top_op20_reg_ygain_out  (8)
#define DISP_TOP_OP20_REG_YGAIN_OUT           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_ygain_out)
// h005a, bit: 7
/* */
#define offset_of_disp_top_op20_reg_ygain_tmp_out (0xb4)
#define mask_of_disp_top_op20_reg_ygain_tmp_out   (0xff)
#define shift_of_disp_top_op20_reg_ygain_tmp_out  (0)
#define DISP_TOP_OP20_REG_YGAIN_TMP_OUT           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_ygain_tmp_out)
#define REG_DISP_TOP_OP20_5A_L                    (DISP_TOP_OP20_REG_YGAIN_TMP_OUT)
// h005a, bit: 15
/* */
#define offset_of_disp_top_op20_reg_ygain_hist_out (0xb4)
#define mask_of_disp_top_op20_reg_ygain_hist_out   (0xff00)
#define shift_of_disp_top_op20_reg_ygain_hist_out  (8)
#define DISP_TOP_OP20_REG_YGAIN_HIST_OUT           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_ygain_hist_out)
// h005b, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram0 (0xb6)
#define mask_of_disp_top_op20_reg_histogram0   (0xffff)
#define shift_of_disp_top_op20_reg_histogram0  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM0           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram0)
#define REG_DISP_TOP_OP20_5B_L                 (DISP_TOP_OP20_REG_HISTOGRAM0)
// h005c, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram1 (0xb8)
#define mask_of_disp_top_op20_reg_histogram1   (0xffff)
#define shift_of_disp_top_op20_reg_histogram1  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM1           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram1)
#define REG_DISP_TOP_OP20_5C_L                 (DISP_TOP_OP20_REG_HISTOGRAM1)
// h005d, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram2 (0xba)
#define mask_of_disp_top_op20_reg_histogram2   (0xffff)
#define shift_of_disp_top_op20_reg_histogram2  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM2           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram2)
#define REG_DISP_TOP_OP20_5D_L                 (DISP_TOP_OP20_REG_HISTOGRAM2)
// h005e, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram3 (0xbc)
#define mask_of_disp_top_op20_reg_histogram3   (0xffff)
#define shift_of_disp_top_op20_reg_histogram3  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM3           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram3)
#define REG_DISP_TOP_OP20_5E_L                 (DISP_TOP_OP20_REG_HISTOGRAM3)
// h005f, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram4 (0xbe)
#define mask_of_disp_top_op20_reg_histogram4   (0xffff)
#define shift_of_disp_top_op20_reg_histogram4  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM4           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram4)
#define REG_DISP_TOP_OP20_5F_L                 (DISP_TOP_OP20_REG_HISTOGRAM4)
// h0060, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram5 (0xc0)
#define mask_of_disp_top_op20_reg_histogram5   (0xffff)
#define shift_of_disp_top_op20_reg_histogram5  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM5           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram5)
#define REG_DISP_TOP_OP20_60_L                 (DISP_TOP_OP20_REG_HISTOGRAM5)
// h0061, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram6 (0xc2)
#define mask_of_disp_top_op20_reg_histogram6   (0xffff)
#define shift_of_disp_top_op20_reg_histogram6  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM6           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram6)
#define REG_DISP_TOP_OP20_61_L                 (DISP_TOP_OP20_REG_HISTOGRAM6)
// h0062, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram7 (0xc4)
#define mask_of_disp_top_op20_reg_histogram7   (0xffff)
#define shift_of_disp_top_op20_reg_histogram7  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM7           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram7)
#define REG_DISP_TOP_OP20_62_L                 (DISP_TOP_OP20_REG_HISTOGRAM7)
// h0063, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram8 (0xc6)
#define mask_of_disp_top_op20_reg_histogram8   (0xffff)
#define shift_of_disp_top_op20_reg_histogram8  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM8           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram8)
#define REG_DISP_TOP_OP20_63_L                 (DISP_TOP_OP20_REG_HISTOGRAM8)
// h0064, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram9 (0xc8)
#define mask_of_disp_top_op20_reg_histogram9   (0xffff)
#define shift_of_disp_top_op20_reg_histogram9  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM9           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram9)
#define REG_DISP_TOP_OP20_64_L                 (DISP_TOP_OP20_REG_HISTOGRAM9)
// h0065, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram10 (0xca)
#define mask_of_disp_top_op20_reg_histogram10   (0xffff)
#define shift_of_disp_top_op20_reg_histogram10  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM10           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram10)
#define REG_DISP_TOP_OP20_65_L                  (DISP_TOP_OP20_REG_HISTOGRAM10)
// h0066, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram11 (0xcc)
#define mask_of_disp_top_op20_reg_histogram11   (0xffff)
#define shift_of_disp_top_op20_reg_histogram11  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM11           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram11)
#define REG_DISP_TOP_OP20_66_L                  (DISP_TOP_OP20_REG_HISTOGRAM11)
// h0067, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram12 (0xce)
#define mask_of_disp_top_op20_reg_histogram12   (0xffff)
#define shift_of_disp_top_op20_reg_histogram12  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM12           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram12)
#define REG_DISP_TOP_OP20_67_L                  (DISP_TOP_OP20_REG_HISTOGRAM12)
// h0068, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram13 (0xd0)
#define mask_of_disp_top_op20_reg_histogram13   (0xffff)
#define shift_of_disp_top_op20_reg_histogram13  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM13           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram13)
#define REG_DISP_TOP_OP20_68_L                  (DISP_TOP_OP20_REG_HISTOGRAM13)
// h0069, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram14 (0xd2)
#define mask_of_disp_top_op20_reg_histogram14   (0xffff)
#define shift_of_disp_top_op20_reg_histogram14  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM14           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram14)
#define REG_DISP_TOP_OP20_69_L                  (DISP_TOP_OP20_REG_HISTOGRAM14)
// h006a, bit: 15
/* */
#define offset_of_disp_top_op20_reg_histogram15 (0xd4)
#define mask_of_disp_top_op20_reg_histogram15   (0xffff)
#define shift_of_disp_top_op20_reg_histogram15  (0)
#define DISP_TOP_OP20_REG_HISTOGRAM15           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_histogram15)
#define REG_DISP_TOP_OP20_6A_L                  (DISP_TOP_OP20_REG_HISTOGRAM15)
// h006b, bit: 11
/* */
#define offset_of_disp_top_op20_reg_hact (0xd6)
#define mask_of_disp_top_op20_reg_hact   (0xfff)
#define shift_of_disp_top_op20_reg_hact  (0)
#define DISP_TOP_OP20_REG_HACT           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_hact)
#define REG_DISP_TOP_OP20_6B_L           (DISP_TOP_OP20_REG_HACT)
// h006c, bit: 11
/* */
#define offset_of_disp_top_op20_reg_vact (0xd8)
#define mask_of_disp_top_op20_reg_vact   (0xfff)
#define shift_of_disp_top_op20_reg_vact  (0)
#define DISP_TOP_OP20_REG_VACT           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vact)
#define REG_DISP_TOP_OP20_6C_L           (DISP_TOP_OP20_REG_VACT)
// h006d, bit: 7
/* */
#define offset_of_disp_top_op20_reg_hblank (0xda)
#define mask_of_disp_top_op20_reg_hblank   (0xff)
#define shift_of_disp_top_op20_reg_hblank  (0)
#define DISP_TOP_OP20_REG_HBLANK           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_hblank)
#define REG_DISP_TOP_OP20_6D_L             (DISP_TOP_OP20_REG_HBLANK)
// h006d, bit: 15
/* */
#define offset_of_disp_top_op20_reg_ygain_tmp_min (0xda)
#define mask_of_disp_top_op20_reg_ygain_tmp_min   (0xff00)
#define shift_of_disp_top_op20_reg_ygain_tmp_min  (8)
#define DISP_TOP_OP20_REG_YGAIN_TMP_MIN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_ygain_tmp_min)
// h006e, bit: 7
/* */
#define offset_of_disp_top_op20_reg_pwm_period_r (0xdc)
#define mask_of_disp_top_op20_reg_pwm_period_r   (0xff)
#define shift_of_disp_top_op20_reg_pwm_period_r  (0)
#define DISP_TOP_OP20_REG_PWM_PERIOD_R           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_pwm_period_r)
#define REG_DISP_TOP_OP20_6E_L                   (DISP_TOP_OP20_REG_PWM_PERIOD_R)
// h006e, bit: 15
/* */
#define offset_of_disp_top_op20_reg_pwm_duty_r (0xdc)
#define mask_of_disp_top_op20_reg_pwm_duty_r   (0xff00)
#define shift_of_disp_top_op20_reg_pwm_duty_r  (8)
#define DISP_TOP_OP20_REG_PWM_DUTY_R           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_pwm_duty_r)
#define REG_DISP_TOP_OP20_6F_L                 (REG_DISP_TOP_OP20_BASE + 0xde)
// h0070, bit: 1
/* 3d dither MSB dither table select */
#define offset_of_disp_top_op20_reg_vip_3d_dither_msb_sel (0xe0)
#define mask_of_disp_top_op20_reg_vip_3d_dither_msb_sel   (0x3)
#define shift_of_disp_top_op20_reg_vip_3d_dither_msb_sel  (0)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_MSB_SEL \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_msb_sel)
#define REG_DISP_TOP_OP20_70_L (DISP_TOP_OP20_REG_VIP_3D_DITHER_MSB_SEL)
// h0070, bit: 3
/* 3d dither LSB dither table select */
#define offset_of_disp_top_op20_reg_vip_3d_dither_lsb_sel (0xe0)
#define mask_of_disp_top_op20_reg_vip_3d_dither_lsb_sel   (0xc)
#define shift_of_disp_top_op20_reg_vip_3d_dither_lsb_sel  (2)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_LSB_SEL \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_lsb_sel)
// h0070, bit: 4
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_lsb_en (0xe0)
#define mask_of_disp_top_op20_reg_vip_3d_dither_lsb_en   (0x10)
#define shift_of_disp_top_op20_reg_vip_3d_dither_lsb_en  (4)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_LSB_EN \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_lsb_en)
// h0070, bit: 5
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_mono_en (0xe0)
#define mask_of_disp_top_op20_reg_vip_3d_dither_mono_en   (0x20)
#define shift_of_disp_top_op20_reg_vip_3d_dither_mono_en  (5)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_MONO_EN \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_mono_en)
// h0070, bit: 6
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_obn8_en (0xe0)
#define mask_of_disp_top_op20_reg_vip_3d_dither_obn8_en   (0x40)
#define shift_of_disp_top_op20_reg_vip_3d_dither_obn8_en  (6)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_OBN8_EN \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_obn8_en)
// h0070, bit: 7
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_en (0xe0)
#define mask_of_disp_top_op20_reg_vip_3d_dither_en   (0x80)
#define shift_of_disp_top_op20_reg_vip_3d_dither_en  (7)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_en)
// h0070, bit: 9
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_lsb_vclr_no (0xe0)
#define mask_of_disp_top_op20_reg_vip_3d_dither_lsb_vclr_no   (0x300)
#define shift_of_disp_top_op20_reg_vip_3d_dither_lsb_vclr_no  (8)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_LSB_VCLR_NO \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_lsb_vclr_no)
// h0070, bit: 10
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_10_mod_en (0xe0)
#define mask_of_disp_top_op20_reg_vip_3d_dither_10_mod_en   (0x400)
#define shift_of_disp_top_op20_reg_vip_3d_dither_10_mod_en  (10)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_10_MOD_EN \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_10_mod_en)
// h0070, bit: 11
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_lsb_vclr_en (0xe0)
#define mask_of_disp_top_op20_reg_vip_3d_dither_lsb_vclr_en   (0x800)
#define shift_of_disp_top_op20_reg_vip_3d_dither_lsb_vclr_en  (11)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_LSB_VCLR_EN \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_lsb_vclr_en)
// h0070, bit: 13
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_vclr_no (0xe0)
#define mask_of_disp_top_op20_reg_vip_3d_dither_vclr_no   (0x3000)
#define shift_of_disp_top_op20_reg_vip_3d_dither_vclr_no  (12)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_VCLR_NO \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_vclr_no)
// h0070, bit: 14
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_vclr_en (0xe0)
#define mask_of_disp_top_op20_reg_vip_3d_dither_vclr_en   (0x4000)
#define shift_of_disp_top_op20_reg_vip_3d_dither_vclr_en  (14)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_VCLR_EN \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_vclr_en)
// h0070, bit: 15
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_on (0xe0)
#define mask_of_disp_top_op20_reg_vip_3d_dither_on   (0x8000)
#define shift_of_disp_top_op20_reg_vip_3d_dither_on  (15)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_ON           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_on)
// h0071, bit: 1
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_lsb_b_mask (0xe2)
#define mask_of_disp_top_op20_reg_vip_3d_dither_lsb_b_mask   (0x3)
#define shift_of_disp_top_op20_reg_vip_3d_dither_lsb_b_mask  (0)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_LSB_B_MASK \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_lsb_b_mask)
#define REG_DISP_TOP_OP20_71_L (DISP_TOP_OP20_REG_VIP_3D_DITHER_LSB_B_MASK)
// h0071, bit: 3
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_lsb_r_mask (0xe2)
#define mask_of_disp_top_op20_reg_vip_3d_dither_lsb_r_mask   (0xc)
#define shift_of_disp_top_op20_reg_vip_3d_dither_lsb_r_mask  (2)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_LSB_R_MASK \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_lsb_r_mask)
// h0071, bit: 5
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_msb_b_mask (0xe2)
#define mask_of_disp_top_op20_reg_vip_3d_dither_msb_b_mask   (0x30)
#define shift_of_disp_top_op20_reg_vip_3d_dither_msb_b_mask  (4)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_MSB_B_MASK \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_msb_b_mask)
// h0071, bit: 7
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_msb_r_mask (0xe2)
#define mask_of_disp_top_op20_reg_vip_3d_dither_msb_r_mask   (0xc0)
#define shift_of_disp_top_op20_reg_vip_3d_dither_msb_r_mask  (6)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_MSB_R_MASK \
    (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_msb_r_mask)
// h0071, bit: 15
/* */
#define offset_of_disp_top_op20_reg_vip_3d_dither_debug (0xe2)
#define mask_of_disp_top_op20_reg_vip_3d_dither_debug   (0xff00)
#define shift_of_disp_top_op20_reg_vip_3d_dither_debug  (8)
#define DISP_TOP_OP20_REG_VIP_3D_DITHER_DEBUG           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_vip_3d_dither_debug)
// h0072, bit: 7
/* */
#define offset_of_disp_top_op20_reg_h_dither_table0 (0xe4)
#define mask_of_disp_top_op20_reg_h_dither_table0   (0xff)
#define shift_of_disp_top_op20_reg_h_dither_table0  (0)
#define DISP_TOP_OP20_REG_H_DITHER_TABLE0           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_h_dither_table0)
#define REG_DISP_TOP_OP20_72_L                      (DISP_TOP_OP20_REG_H_DITHER_TABLE0)
// h0072, bit: 15
/* */
#define offset_of_disp_top_op20_reg_h_dither_table1 (0xe4)
#define mask_of_disp_top_op20_reg_h_dither_table1   (0xff00)
#define shift_of_disp_top_op20_reg_h_dither_table1  (8)
#define DISP_TOP_OP20_REG_H_DITHER_TABLE1           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_h_dither_table1)
// h0073, bit: 7
/* */
#define offset_of_disp_top_op20_reg_h_dither_table2 (0xe6)
#define mask_of_disp_top_op20_reg_h_dither_table2   (0xff)
#define shift_of_disp_top_op20_reg_h_dither_table2  (0)
#define DISP_TOP_OP20_REG_H_DITHER_TABLE2           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_h_dither_table2)
#define REG_DISP_TOP_OP20_73_L                      (DISP_TOP_OP20_REG_H_DITHER_TABLE2)
// h0073, bit: 15
/* */
#define offset_of_disp_top_op20_reg_h_dither_table3 (0xe6)
#define mask_of_disp_top_op20_reg_h_dither_table3   (0xff00)
#define shift_of_disp_top_op20_reg_h_dither_table3  (8)
#define DISP_TOP_OP20_REG_H_DITHER_TABLE3           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_h_dither_table3)
// h0074, bit: 7
/* */
#define offset_of_disp_top_op20_reg_v_dither_table0 (0xe8)
#define mask_of_disp_top_op20_reg_v_dither_table0   (0xff)
#define shift_of_disp_top_op20_reg_v_dither_table0  (0)
#define DISP_TOP_OP20_REG_V_DITHER_TABLE0           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_v_dither_table0)
#define REG_DISP_TOP_OP20_74_L                      (DISP_TOP_OP20_REG_V_DITHER_TABLE0)
// h0074, bit: 15
/* */
#define offset_of_disp_top_op20_reg_v_dither_table1 (0xe8)
#define mask_of_disp_top_op20_reg_v_dither_table1   (0xff00)
#define shift_of_disp_top_op20_reg_v_dither_table1  (8)
#define DISP_TOP_OP20_REG_V_DITHER_TABLE1           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_v_dither_table1)
// h0075, bit: 7
/* */
#define offset_of_disp_top_op20_reg_v_dither_table2 (0xea)
#define mask_of_disp_top_op20_reg_v_dither_table2   (0xff)
#define shift_of_disp_top_op20_reg_v_dither_table2  (0)
#define DISP_TOP_OP20_REG_V_DITHER_TABLE2           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_v_dither_table2)
#define REG_DISP_TOP_OP20_75_L                      (DISP_TOP_OP20_REG_V_DITHER_TABLE2)
// h0075, bit: 15
/* */
#define offset_of_disp_top_op20_reg_v_dither_table3 (0xea)
#define mask_of_disp_top_op20_reg_v_dither_table3   (0xff00)
#define shift_of_disp_top_op20_reg_v_dither_table3  (8)
#define DISP_TOP_OP20_REG_V_DITHER_TABLE3           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_v_dither_table3)
// h0076, bit: 0
/* */
#define offset_of_disp_top_op20_reg_dith_en (0xec)
#define mask_of_disp_top_op20_reg_dith_en   (0x1)
#define shift_of_disp_top_op20_reg_dith_en  (0)
#define DISP_TOP_OP20_REG_DITH_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_dith_en)
#define REG_DISP_TOP_OP20_76_L              (DISP_TOP_OP20_REG_DITH_EN)
// h0076, bit: 1
/* */
#define offset_of_disp_top_op20_reg_obn (0xec)
#define mask_of_disp_top_op20_reg_obn   (0x2)
#define shift_of_disp_top_op20_reg_obn  (1)
#define DISP_TOP_OP20_REG_OBN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_obn)
// h0076, bit: 2
/* */
#define offset_of_disp_top_op20_reg_t_rot (0xec)
#define mask_of_disp_top_op20_reg_t_rot   (0x4)
#define shift_of_disp_top_op20_reg_t_rot  (2)
#define DISP_TOP_OP20_REG_T_ROT           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_t_rot)
// h0076, bit: 3
/* */
#define offset_of_disp_top_op20_reg_s_rot (0xec)
#define mask_of_disp_top_op20_reg_s_rot   (0x8)
#define shift_of_disp_top_op20_reg_s_rot  (3)
#define DISP_TOP_OP20_REG_S_ROT           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_s_rot)
// h0076, bit: 5
/* */
#define offset_of_disp_top_op20_reg_g_xor (0xec)
#define mask_of_disp_top_op20_reg_g_xor   (0x30)
#define shift_of_disp_top_op20_reg_g_xor  (4)
#define DISP_TOP_OP20_REG_G_XOR           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_g_xor)
// h0076, bit: 7
/* */
#define offset_of_disp_top_op20_reg_b_xor (0xec)
#define mask_of_disp_top_op20_reg_b_xor   (0xc0)
#define shift_of_disp_top_op20_reg_b_xor  (6)
#define DISP_TOP_OP20_REG_B_XOR           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_b_xor)
// h0076, bit: 9
/* */
#define offset_of_disp_top_op20_reg_br (0xec)
#define mask_of_disp_top_op20_reg_br   (0x300)
#define shift_of_disp_top_op20_reg_br  (8)
#define DISP_TOP_OP20_REG_BR           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_br)
// h0076, bit: 11
/* */
#define offset_of_disp_top_op20_reg_bl (0xec)
#define mask_of_disp_top_op20_reg_bl   (0xc00)
#define shift_of_disp_top_op20_reg_bl  (10)
#define DISP_TOP_OP20_REG_BL           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_bl)
// h0076, bit: 13
/* */
#define offset_of_disp_top_op20_reg_tr (0xec)
#define mask_of_disp_top_op20_reg_tr   (0x3000)
#define shift_of_disp_top_op20_reg_tr  (12)
#define DISP_TOP_OP20_REG_TR           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tr)
// h0076, bit: 15
/* */
#define offset_of_disp_top_op20_reg_tl (0xec)
#define mask_of_disp_top_op20_reg_tl   (0xc000)
#define shift_of_disp_top_op20_reg_tl  (14)
#define DISP_TOP_OP20_REG_TL           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_tl)
// h0077, bit: 0
/* */
#define offset_of_disp_top_op20_reg_dither_minus (0xee)
#define mask_of_disp_top_op20_reg_dither_minus   (0x1)
#define shift_of_disp_top_op20_reg_dither_minus  (0)
#define DISP_TOP_OP20_REG_DITHER_MINUS           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_dither_minus)
#define REG_DISP_TOP_OP20_77_L                   (DISP_TOP_OP20_REG_DITHER_MINUS)
// h0077, bit: 1
/* */
#define offset_of_disp_top_op20_reg_noise_8to6 (0xee)
#define mask_of_disp_top_op20_reg_noise_8to6   (0x2)
#define shift_of_disp_top_op20_reg_noise_8to6  (1)
#define DISP_TOP_OP20_REG_NOISE_8TO6           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_noise_8to6)
// h0077, bit: 2
/* */
#define offset_of_disp_top_op20_reg_pseudo_en (0xee)
#define mask_of_disp_top_op20_reg_pseudo_en   (0x4)
#define shift_of_disp_top_op20_reg_pseudo_en  (2)
#define DISP_TOP_OP20_REG_PSEUDO_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_pseudo_en)
// h0077, bit: 3
/* */
#define offset_of_disp_top_op20_reg_auto_dither_en (0xee)
#define mask_of_disp_top_op20_reg_auto_dither_en   (0x8)
#define shift_of_disp_top_op20_reg_auto_dither_en  (3)
#define DISP_TOP_OP20_REG_AUTO_DITHER_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_auto_dither_en)
// h0077, bit: 4
/* */
#define offset_of_disp_top_op20_reg_reset_e_4_frame (0xee)
#define mask_of_disp_top_op20_reg_reset_e_4_frame   (0x10)
#define shift_of_disp_top_op20_reg_reset_e_4_frame  (4)
#define DISP_TOP_OP20_REG_RESET_E_4_FRAME           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_reset_e_4_frame)
#define REG_DISP_TOP_OP20_78_L                      (REG_DISP_TOP_OP20_BASE + 0xf0)
#define REG_DISP_TOP_OP20_79_L                      (REG_DISP_TOP_OP20_BASE + 0xf2)
#define REG_DISP_TOP_OP20_7A_L                      (REG_DISP_TOP_OP20_BASE + 0xf4)
#define REG_DISP_TOP_OP20_7B_L                      (REG_DISP_TOP_OP20_BASE + 0xf6)
#define REG_DISP_TOP_OP20_7C_L                      (REG_DISP_TOP_OP20_BASE + 0xf8)
#define REG_DISP_TOP_OP20_7D_L                      (REG_DISP_TOP_OP20_BASE + 0xfa)
// h007e, bit: 1
/* Select source of output swap for B channel
2'b00: 0
2'b01: B channel
2'b10: G channel
2'b11: R channel*/
#define offset_of_disp_top_op20_reg_output_swap_sel_b (0xfc)
#define mask_of_disp_top_op20_reg_output_swap_sel_b   (0x3)
#define shift_of_disp_top_op20_reg_output_swap_sel_b  (0)
#define DISP_TOP_OP20_REG_OUTPUT_SWAP_SEL_B           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_output_swap_sel_b)
#define REG_DISP_TOP_OP20_7E_L                        (DISP_TOP_OP20_REG_OUTPUT_SWAP_SEL_B)
// h007e, bit: 3
/* Select source of output swap for G channel
2'b00: 0
2'b01: B channel
2'b10: G channel
2'b11: R channel*/
#define offset_of_disp_top_op20_reg_output_swap_sel_g (0xfc)
#define mask_of_disp_top_op20_reg_output_swap_sel_g   (0xc)
#define shift_of_disp_top_op20_reg_output_swap_sel_g  (2)
#define DISP_TOP_OP20_REG_OUTPUT_SWAP_SEL_G           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_output_swap_sel_g)
// h007e, bit: 5
/* Select source of output swap for R channel
2'b00: 0
2'b01: B channel
2'b10: G channel
2'b11: R channel*/
#define offset_of_disp_top_op20_reg_output_swap_sel_r (0xfc)
#define mask_of_disp_top_op20_reg_output_swap_sel_r   (0x30)
#define shift_of_disp_top_op20_reg_output_swap_sel_r  (4)
#define DISP_TOP_OP20_REG_OUTPUT_SWAP_SEL_R           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_output_swap_sel_r)
// h007e, bit: 7
/* 2'b00:RGB888
2'b01:RGB666
2'b10:RGB565-1
2'b11:RGB565-2*/
#define offset_of_disp_top_op20_reg_rgb_mode (0xfc)
#define mask_of_disp_top_op20_reg_rgb_mode   (0xc0)
#define shift_of_disp_top_op20_reg_rgb_mode  (6)
#define DISP_TOP_OP20_REG_RGB_MODE           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_rgb_mode)
// h007e, bit: 8
/* MSB/LSB swap*/
#define offset_of_disp_top_op20_reg_rgb_ml_swap (0xfc)
#define mask_of_disp_top_op20_reg_rgb_ml_swap   (0x100)
#define shift_of_disp_top_op20_reg_rgb_ml_swap  (8)
#define DISP_TOP_OP20_REG_RGB_ML_SWAP           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_rgb_ml_swap)
// h007e, bit: 11
/* rgb_swap dither pseudo clear number*/
#define offset_of_disp_top_op20_reg_rgb_pseudo_vclr_no (0xfc)
#define mask_of_disp_top_op20_reg_rgb_pseudo_vclr_no   (0xc00)
#define shift_of_disp_top_op20_reg_rgb_pseudo_vclr_no  (10)
#define DISP_TOP_OP20_REG_RGB_PSEUDO_VCLR_NO           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_rgb_pseudo_vclr_no)
// h007e, bit: 13
/* rgb_swap dither pseudo clear enable*/
#define offset_of_disp_top_op20_reg_rgb_pseudo_vclr_en (0xfc)
#define mask_of_disp_top_op20_reg_rgb_pseudo_vclr_en   (0x2000)
#define shift_of_disp_top_op20_reg_rgb_pseudo_vclr_en  (13)
#define DISP_TOP_OP20_REG_RGB_PSEUDO_VCLR_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_rgb_pseudo_vclr_en)
// h007e, bit: 14
/* rgb_swap dither:
1'b0 : 666 mode, 1'b1 : 565 mode*/
#define offset_of_disp_top_op20_reg_rgb_dith_mode (0xfc)
#define mask_of_disp_top_op20_reg_rgb_dith_mode   (0x4000)
#define shift_of_disp_top_op20_reg_rgb_dith_mode  (14)
#define DISP_TOP_OP20_REG_RGB_DITH_MODE           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_rgb_dith_mode)
// h007e, bit: 15
/* rgb_swap dither enable*/
#define offset_of_disp_top_op20_reg_rgb_dith_en (0xfc)
#define mask_of_disp_top_op20_reg_rgb_dith_en   (0x8000)
#define shift_of_disp_top_op20_reg_rgb_dith_en  (15)
#define DISP_TOP_OP20_REG_RGB_DITH_EN           (REG_DISP_TOP_OP20_BASE + offset_of_disp_top_op20_reg_rgb_dith_en)
#define REG_DISP_TOP_OP20_7F_L                  (REG_DISP_TOP_OP20_BASE + 0xfe)
#define REG_DISP_TOP_MACE_00_L                  (REG_DISP_TOP_MACE_BASE + 0x0)
#define REG_DISP_TOP_MACE_01_L                  (REG_DISP_TOP_MACE_BASE + 0x2)
// h0002, bit: 7
/* */
#define offset_of_disp_top_mace_reg_cb_t1 (0x4)
#define mask_of_disp_top_mace_reg_cb_t1   (0xff)
#define shift_of_disp_top_mace_reg_cb_t1  (0)
#define DISP_TOP_MACE_REG_CB_T1           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_t1)
#define REG_DISP_TOP_MACE_02_L            (DISP_TOP_MACE_REG_CB_T1)
// h0002, bit: 15
/* */
#define offset_of_disp_top_mace_reg_cr_t1 (0x4)
#define mask_of_disp_top_mace_reg_cr_t1   (0xff00)
#define shift_of_disp_top_mace_reg_cr_t1  (8)
#define DISP_TOP_MACE_REG_CR_T1           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_t1)
// h0003, bit: 7
/* */
#define offset_of_disp_top_mace_reg_cb_t2 (0x6)
#define mask_of_disp_top_mace_reg_cb_t2   (0xff)
#define shift_of_disp_top_mace_reg_cb_t2  (0)
#define DISP_TOP_MACE_REG_CB_T2           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_t2)
#define REG_DISP_TOP_MACE_03_L            (DISP_TOP_MACE_REG_CB_T2)
// h0003, bit: 15
/* */
#define offset_of_disp_top_mace_reg_cr_t2 (0x6)
#define mask_of_disp_top_mace_reg_cr_t2   (0xff00)
#define shift_of_disp_top_mace_reg_cr_t2  (8)
#define DISP_TOP_MACE_REG_CR_T2           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_t2)
// h0004, bit: 7
/* */
#define offset_of_disp_top_mace_reg_cb_t3 (0x8)
#define mask_of_disp_top_mace_reg_cb_t3   (0xff)
#define shift_of_disp_top_mace_reg_cb_t3  (0)
#define DISP_TOP_MACE_REG_CB_T3           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_t3)
#define REG_DISP_TOP_MACE_04_L            (DISP_TOP_MACE_REG_CB_T3)
// h0004, bit: 15
/* */
#define offset_of_disp_top_mace_reg_cr_t3 (0x8)
#define mask_of_disp_top_mace_reg_cr_t3   (0xff00)
#define shift_of_disp_top_mace_reg_cr_t3  (8)
#define DISP_TOP_MACE_REG_CR_T3           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_t3)
// h0005, bit: 7
/* */
#define offset_of_disp_top_mace_reg_cb_t4 (0xa)
#define mask_of_disp_top_mace_reg_cb_t4   (0xff)
#define shift_of_disp_top_mace_reg_cb_t4  (0)
#define DISP_TOP_MACE_REG_CB_T4           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_t4)
#define REG_DISP_TOP_MACE_05_L            (DISP_TOP_MACE_REG_CB_T4)
// h0005, bit: 15
/* */
#define offset_of_disp_top_mace_reg_cr_t4 (0xa)
#define mask_of_disp_top_mace_reg_cr_t4   (0xff00)
#define shift_of_disp_top_mace_reg_cr_t4  (8)
#define DISP_TOP_MACE_REG_CR_T4           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_t4)
// h0006, bit: 7
/* */
#define offset_of_disp_top_mace_reg_cb_t5 (0xc)
#define mask_of_disp_top_mace_reg_cb_t5   (0xff)
#define shift_of_disp_top_mace_reg_cb_t5  (0)
#define DISP_TOP_MACE_REG_CB_T5           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_t5)
#define REG_DISP_TOP_MACE_06_L            (DISP_TOP_MACE_REG_CB_T5)
// h0006, bit: 15
/* */
#define offset_of_disp_top_mace_reg_cr_t5 (0xc)
#define mask_of_disp_top_mace_reg_cr_t5   (0xff00)
#define shift_of_disp_top_mace_reg_cr_t5  (8)
#define DISP_TOP_MACE_REG_CR_T5           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_t5)
// h0007, bit: 7
/* */
#define offset_of_disp_top_mace_reg_cb_t6 (0xe)
#define mask_of_disp_top_mace_reg_cb_t6   (0xff)
#define shift_of_disp_top_mace_reg_cb_t6  (0)
#define DISP_TOP_MACE_REG_CB_T6           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_t6)
#define REG_DISP_TOP_MACE_07_L            (DISP_TOP_MACE_REG_CB_T6)
// h0007, bit: 15
/* */
#define offset_of_disp_top_mace_reg_cr_t6 (0xe)
#define mask_of_disp_top_mace_reg_cr_t6   (0xff00)
#define shift_of_disp_top_mace_reg_cr_t6  (8)
#define DISP_TOP_MACE_REG_CR_T6           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_t6)
// h0008, bit: 7
/* */
#define offset_of_disp_top_mace_reg_cb_t7 (0x10)
#define mask_of_disp_top_mace_reg_cb_t7   (0xff)
#define shift_of_disp_top_mace_reg_cb_t7  (0)
#define DISP_TOP_MACE_REG_CB_T7           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_t7)
#define REG_DISP_TOP_MACE_08_L            (DISP_TOP_MACE_REG_CB_T7)
// h0008, bit: 15
/* */
#define offset_of_disp_top_mace_reg_cr_t7 (0x10)
#define mask_of_disp_top_mace_reg_cr_t7   (0xff00)
#define shift_of_disp_top_mace_reg_cr_t7  (8)
#define DISP_TOP_MACE_REG_CR_T7           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_t7)
// h0009, bit: 7
/* */
#define offset_of_disp_top_mace_reg_cb_t8 (0x12)
#define mask_of_disp_top_mace_reg_cb_t8   (0xff)
#define shift_of_disp_top_mace_reg_cb_t8  (0)
#define DISP_TOP_MACE_REG_CB_T8           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_t8)
#define REG_DISP_TOP_MACE_09_L            (DISP_TOP_MACE_REG_CB_T8)
// h0009, bit: 15
/* */
#define offset_of_disp_top_mace_reg_cr_t8 (0x12)
#define mask_of_disp_top_mace_reg_cr_t8   (0xff00)
#define shift_of_disp_top_mace_reg_cr_t8  (8)
#define DISP_TOP_MACE_REG_CR_T8           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_t8)
// h000a, bit: 7
/* */
#define offset_of_disp_top_mace_reg_dd_white_slope (0x14)
#define mask_of_disp_top_mace_reg_dd_white_slope   (0xff)
#define shift_of_disp_top_mace_reg_dd_white_slope  (0)
#define DISP_TOP_MACE_REG_DD_WHITE_SLOPE           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_white_slope)
#define REG_DISP_TOP_MACE_0A_L                     (DISP_TOP_MACE_REG_DD_WHITE_SLOPE)
// h000a, bit: 15
/* */
#define offset_of_disp_top_mace_reg_dd_black_slope (0x14)
#define mask_of_disp_top_mace_reg_dd_black_slope   (0xff00)
#define shift_of_disp_top_mace_reg_dd_black_slope  (8)
#define DISP_TOP_MACE_REG_DD_BLACK_SLOPE           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_black_slope)
// h000b, bit: 1
/* */
#define offset_of_disp_top_mace_reg_cr_d1d (0x16)
#define mask_of_disp_top_mace_reg_cr_d1d   (0x3)
#define shift_of_disp_top_mace_reg_cr_d1d  (0)
#define DISP_TOP_MACE_REG_CR_D1D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d1d)
#define REG_DISP_TOP_MACE_0B_L             (DISP_TOP_MACE_REG_CR_D1D)
// h000b, bit: 3
/* */
#define offset_of_disp_top_mace_reg_cr_d1u (0x16)
#define mask_of_disp_top_mace_reg_cr_d1u   (0xc)
#define shift_of_disp_top_mace_reg_cr_d1u  (2)
#define DISP_TOP_MACE_REG_CR_D1U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d1u)
// h000b, bit: 5
/* */
#define offset_of_disp_top_mace_reg_cb_d1d (0x16)
#define mask_of_disp_top_mace_reg_cb_d1d   (0x30)
#define shift_of_disp_top_mace_reg_cb_d1d  (4)
#define DISP_TOP_MACE_REG_CB_D1D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d1d)
// h000b, bit: 7
/* */
#define offset_of_disp_top_mace_reg_cb_d1u (0x16)
#define mask_of_disp_top_mace_reg_cb_d1u   (0xc0)
#define shift_of_disp_top_mace_reg_cb_d1u  (6)
#define DISP_TOP_MACE_REG_CB_D1U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d1u)
// h000b, bit: 9
/* */
#define offset_of_disp_top_mace_reg_cr_d2d (0x16)
#define mask_of_disp_top_mace_reg_cr_d2d   (0x300)
#define shift_of_disp_top_mace_reg_cr_d2d  (8)
#define DISP_TOP_MACE_REG_CR_D2D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d2d)
// h000b, bit: 11
/* */
#define offset_of_disp_top_mace_reg_cr_d2u (0x16)
#define mask_of_disp_top_mace_reg_cr_d2u   (0xc00)
#define shift_of_disp_top_mace_reg_cr_d2u  (10)
#define DISP_TOP_MACE_REG_CR_D2U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d2u)
// h000b, bit: 13
/* */
#define offset_of_disp_top_mace_reg_cb_d2d (0x16)
#define mask_of_disp_top_mace_reg_cb_d2d   (0x3000)
#define shift_of_disp_top_mace_reg_cb_d2d  (12)
#define DISP_TOP_MACE_REG_CB_D2D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d2d)
// h000b, bit: 15
/* */
#define offset_of_disp_top_mace_reg_cb_d2u (0x16)
#define mask_of_disp_top_mace_reg_cb_d2u   (0xc000)
#define shift_of_disp_top_mace_reg_cb_d2u  (14)
#define DISP_TOP_MACE_REG_CB_D2U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d2u)
// h000c, bit: 1
/* */
#define offset_of_disp_top_mace_reg_cr_d3d (0x18)
#define mask_of_disp_top_mace_reg_cr_d3d   (0x3)
#define shift_of_disp_top_mace_reg_cr_d3d  (0)
#define DISP_TOP_MACE_REG_CR_D3D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d3d)
#define REG_DISP_TOP_MACE_0C_L             (DISP_TOP_MACE_REG_CR_D3D)
// h000c, bit: 3
/* */
#define offset_of_disp_top_mace_reg_cr_d3u (0x18)
#define mask_of_disp_top_mace_reg_cr_d3u   (0xc)
#define shift_of_disp_top_mace_reg_cr_d3u  (2)
#define DISP_TOP_MACE_REG_CR_D3U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d3u)
// h000c, bit: 5
/* */
#define offset_of_disp_top_mace_reg_cb_d3d (0x18)
#define mask_of_disp_top_mace_reg_cb_d3d   (0x30)
#define shift_of_disp_top_mace_reg_cb_d3d  (4)
#define DISP_TOP_MACE_REG_CB_D3D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d3d)
// h000c, bit: 7
/* */
#define offset_of_disp_top_mace_reg_cb_d3u (0x18)
#define mask_of_disp_top_mace_reg_cb_d3u   (0xc0)
#define shift_of_disp_top_mace_reg_cb_d3u  (6)
#define DISP_TOP_MACE_REG_CB_D3U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d3u)
// h000c, bit: 9
/* */
#define offset_of_disp_top_mace_reg_cr_d4d (0x18)
#define mask_of_disp_top_mace_reg_cr_d4d   (0x300)
#define shift_of_disp_top_mace_reg_cr_d4d  (8)
#define DISP_TOP_MACE_REG_CR_D4D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d4d)
// h000c, bit: 11
/* */
#define offset_of_disp_top_mace_reg_cr_d4u (0x18)
#define mask_of_disp_top_mace_reg_cr_d4u   (0xc00)
#define shift_of_disp_top_mace_reg_cr_d4u  (10)
#define DISP_TOP_MACE_REG_CR_D4U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d4u)
// h000c, bit: 13
/* */
#define offset_of_disp_top_mace_reg_cb_d4d (0x18)
#define mask_of_disp_top_mace_reg_cb_d4d   (0x3000)
#define shift_of_disp_top_mace_reg_cb_d4d  (12)
#define DISP_TOP_MACE_REG_CB_D4D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d4d)
// h000c, bit: 15
/* */
#define offset_of_disp_top_mace_reg_cb_d4u (0x18)
#define mask_of_disp_top_mace_reg_cb_d4u   (0xc000)
#define shift_of_disp_top_mace_reg_cb_d4u  (14)
#define DISP_TOP_MACE_REG_CB_D4U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d4u)
// h000d, bit: 1
/* */
#define offset_of_disp_top_mace_reg_cr_d5d (0x1a)
#define mask_of_disp_top_mace_reg_cr_d5d   (0x3)
#define shift_of_disp_top_mace_reg_cr_d5d  (0)
#define DISP_TOP_MACE_REG_CR_D5D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d5d)
#define REG_DISP_TOP_MACE_0D_L             (DISP_TOP_MACE_REG_CR_D5D)
// h000d, bit: 3
/* */
#define offset_of_disp_top_mace_reg_cr_d5u (0x1a)
#define mask_of_disp_top_mace_reg_cr_d5u   (0xc)
#define shift_of_disp_top_mace_reg_cr_d5u  (2)
#define DISP_TOP_MACE_REG_CR_D5U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d5u)
// h000d, bit: 5
/* */
#define offset_of_disp_top_mace_reg_cb_d5d (0x1a)
#define mask_of_disp_top_mace_reg_cb_d5d   (0x30)
#define shift_of_disp_top_mace_reg_cb_d5d  (4)
#define DISP_TOP_MACE_REG_CB_D5D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d5d)
// h000d, bit: 7
/* */
#define offset_of_disp_top_mace_reg_cb_d5u (0x1a)
#define mask_of_disp_top_mace_reg_cb_d5u   (0xc0)
#define shift_of_disp_top_mace_reg_cb_d5u  (6)
#define DISP_TOP_MACE_REG_CB_D5U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d5u)
// h000d, bit: 9
/* */
#define offset_of_disp_top_mace_reg_cr_d6d (0x1a)
#define mask_of_disp_top_mace_reg_cr_d6d   (0x300)
#define shift_of_disp_top_mace_reg_cr_d6d  (8)
#define DISP_TOP_MACE_REG_CR_D6D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d6d)
// h000d, bit: 11
/* */
#define offset_of_disp_top_mace_reg_cr_d6u (0x1a)
#define mask_of_disp_top_mace_reg_cr_d6u   (0xc00)
#define shift_of_disp_top_mace_reg_cr_d6u  (10)
#define DISP_TOP_MACE_REG_CR_D6U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d6u)
// h000d, bit: 13
/* */
#define offset_of_disp_top_mace_reg_cb_d6d (0x1a)
#define mask_of_disp_top_mace_reg_cb_d6d   (0x3000)
#define shift_of_disp_top_mace_reg_cb_d6d  (12)
#define DISP_TOP_MACE_REG_CB_D6D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d6d)
// h000d, bit: 15
/* */
#define offset_of_disp_top_mace_reg_cb_d6u (0x1a)
#define mask_of_disp_top_mace_reg_cb_d6u   (0xc000)
#define shift_of_disp_top_mace_reg_cb_d6u  (14)
#define DISP_TOP_MACE_REG_CB_D6U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d6u)
// h000e, bit: 1
/* */
#define offset_of_disp_top_mace_reg_cr_d7d (0x1c)
#define mask_of_disp_top_mace_reg_cr_d7d   (0x3)
#define shift_of_disp_top_mace_reg_cr_d7d  (0)
#define DISP_TOP_MACE_REG_CR_D7D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d7d)
#define REG_DISP_TOP_MACE_0E_L             (DISP_TOP_MACE_REG_CR_D7D)
// h000e, bit: 3
/* */
#define offset_of_disp_top_mace_reg_cr_d7u (0x1c)
#define mask_of_disp_top_mace_reg_cr_d7u   (0xc)
#define shift_of_disp_top_mace_reg_cr_d7u  (2)
#define DISP_TOP_MACE_REG_CR_D7U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d7u)
// h000e, bit: 5
/* */
#define offset_of_disp_top_mace_reg_cb_d7d (0x1c)
#define mask_of_disp_top_mace_reg_cb_d7d   (0x30)
#define shift_of_disp_top_mace_reg_cb_d7d  (4)
#define DISP_TOP_MACE_REG_CB_D7D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d7d)
// h000e, bit: 7
/* */
#define offset_of_disp_top_mace_reg_cb_d7u (0x1c)
#define mask_of_disp_top_mace_reg_cb_d7u   (0xc0)
#define shift_of_disp_top_mace_reg_cb_d7u  (6)
#define DISP_TOP_MACE_REG_CB_D7U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d7u)
// h000e, bit: 9
/* */
#define offset_of_disp_top_mace_reg_cr_d8d (0x1c)
#define mask_of_disp_top_mace_reg_cr_d8d   (0x300)
#define shift_of_disp_top_mace_reg_cr_d8d  (8)
#define DISP_TOP_MACE_REG_CR_D8D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d8d)
// h000e, bit: 11
/* */
#define offset_of_disp_top_mace_reg_cr_d8u (0x1c)
#define mask_of_disp_top_mace_reg_cr_d8u   (0xc00)
#define shift_of_disp_top_mace_reg_cr_d8u  (10)
#define DISP_TOP_MACE_REG_CR_D8U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d8u)
// h000e, bit: 13
/* */
#define offset_of_disp_top_mace_reg_cb_d8d (0x1c)
#define mask_of_disp_top_mace_reg_cb_d8d   (0x3000)
#define shift_of_disp_top_mace_reg_cb_d8d  (12)
#define DISP_TOP_MACE_REG_CB_D8D           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d8d)
// h000e, bit: 15
/* */
#define offset_of_disp_top_mace_reg_cb_d8u (0x1c)
#define mask_of_disp_top_mace_reg_cb_d8u   (0xc000)
#define shift_of_disp_top_mace_reg_cb_d8u  (14)
#define DISP_TOP_MACE_REG_CB_D8U           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d8u)
// h000f, bit: 2
/* */
#define offset_of_disp_top_mace_reg_cr_d9 (0x1e)
#define mask_of_disp_top_mace_reg_cr_d9   (0x7)
#define shift_of_disp_top_mace_reg_cr_d9  (0)
#define DISP_TOP_MACE_REG_CR_D9           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cr_d9)
#define REG_DISP_TOP_MACE_0F_L            (DISP_TOP_MACE_REG_CR_D9)
// h000f, bit: 5
/* */
#define offset_of_disp_top_mace_reg_cb_d9 (0x1e)
#define mask_of_disp_top_mace_reg_cb_d9   (0x38)
#define shift_of_disp_top_mace_reg_cb_d9  (3)
#define DISP_TOP_MACE_REG_CB_D9           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_cb_d9)
// h0010, bit: 3
/* */
#define offset_of_disp_top_mace_reg_k_t1 (0x20)
#define mask_of_disp_top_mace_reg_k_t1   (0xf)
#define shift_of_disp_top_mace_reg_k_t1  (0)
#define DISP_TOP_MACE_REG_K_T1           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_k_t1)
#define REG_DISP_TOP_MACE_10_L           (DISP_TOP_MACE_REG_K_T1)
// h0010, bit: 7
/* */
#define offset_of_disp_top_mace_reg_k_t2 (0x20)
#define mask_of_disp_top_mace_reg_k_t2   (0xf0)
#define shift_of_disp_top_mace_reg_k_t2  (4)
#define DISP_TOP_MACE_REG_K_T2           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_k_t2)
// h0010, bit: 11
/* */
#define offset_of_disp_top_mace_reg_k_t3 (0x20)
#define mask_of_disp_top_mace_reg_k_t3   (0xf00)
#define shift_of_disp_top_mace_reg_k_t3  (8)
#define DISP_TOP_MACE_REG_K_T3           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_k_t3)
// h0010, bit: 15
/* */
#define offset_of_disp_top_mace_reg_k_t4 (0x20)
#define mask_of_disp_top_mace_reg_k_t4   (0xf000)
#define shift_of_disp_top_mace_reg_k_t4  (12)
#define DISP_TOP_MACE_REG_K_T4           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_k_t4)
// h0011, bit: 3
/* */
#define offset_of_disp_top_mace_reg_k_t5 (0x22)
#define mask_of_disp_top_mace_reg_k_t5   (0xf)
#define shift_of_disp_top_mace_reg_k_t5  (0)
#define DISP_TOP_MACE_REG_K_T5           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_k_t5)
#define REG_DISP_TOP_MACE_11_L           (DISP_TOP_MACE_REG_K_T5)
// h0011, bit: 7
/* */
#define offset_of_disp_top_mace_reg_k_t6 (0x22)
#define mask_of_disp_top_mace_reg_k_t6   (0xf0)
#define shift_of_disp_top_mace_reg_k_t6  (4)
#define DISP_TOP_MACE_REG_K_T6           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_k_t6)
// h0011, bit: 11
/* */
#define offset_of_disp_top_mace_reg_k_t7 (0x22)
#define mask_of_disp_top_mace_reg_k_t7   (0xf00)
#define shift_of_disp_top_mace_reg_k_t7  (8)
#define DISP_TOP_MACE_REG_K_T7           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_k_t7)
// h0011, bit: 15
/* */
#define offset_of_disp_top_mace_reg_k_t8 (0x22)
#define mask_of_disp_top_mace_reg_k_t8   (0xf000)
#define shift_of_disp_top_mace_reg_k_t8  (12)
#define DISP_TOP_MACE_REG_K_T8           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_k_t8)
// h0012, bit: 0
/* */
#define offset_of_disp_top_mace_reg_main_en_t1_t2 (0x24)
#define mask_of_disp_top_mace_reg_main_en_t1_t2   (0x1)
#define shift_of_disp_top_mace_reg_main_en_t1_t2  (0)
#define DISP_TOP_MACE_REG_MAIN_EN_T1_T2           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_main_en_t1_t2)
#define REG_DISP_TOP_MACE_12_L                    (DISP_TOP_MACE_REG_MAIN_EN_T1_T2)
// h0012, bit: 1
/* */
#define offset_of_disp_top_mace_reg_main_en_t3 (0x24)
#define mask_of_disp_top_mace_reg_main_en_t3   (0x2)
#define shift_of_disp_top_mace_reg_main_en_t3  (1)
#define DISP_TOP_MACE_REG_MAIN_EN_T3           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_main_en_t3)
// h0012, bit: 2
/* */
#define offset_of_disp_top_mace_reg_main_en_t4 (0x24)
#define mask_of_disp_top_mace_reg_main_en_t4   (0x4)
#define shift_of_disp_top_mace_reg_main_en_t4  (2)
#define DISP_TOP_MACE_REG_MAIN_EN_T4           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_main_en_t4)
// h0012, bit: 3
/* */
#define offset_of_disp_top_mace_reg_main_en_t5 (0x24)
#define mask_of_disp_top_mace_reg_main_en_t5   (0x8)
#define shift_of_disp_top_mace_reg_main_en_t5  (3)
#define DISP_TOP_MACE_REG_MAIN_EN_T5           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_main_en_t5)
// h0012, bit: 4
/* */
#define offset_of_disp_top_mace_reg_main_en_t6 (0x24)
#define mask_of_disp_top_mace_reg_main_en_t6   (0x10)
#define shift_of_disp_top_mace_reg_main_en_t6  (4)
#define DISP_TOP_MACE_REG_MAIN_EN_T6           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_main_en_t6)
// h0012, bit: 5
/* */
#define offset_of_disp_top_mace_reg_main_en_t7 (0x24)
#define mask_of_disp_top_mace_reg_main_en_t7   (0x20)
#define shift_of_disp_top_mace_reg_main_en_t7  (5)
#define DISP_TOP_MACE_REG_MAIN_EN_T7           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_main_en_t7)
// h0012, bit: 6
/* */
#define offset_of_disp_top_mace_reg_main_en_t8 (0x24)
#define mask_of_disp_top_mace_reg_main_en_t8   (0x40)
#define shift_of_disp_top_mace_reg_main_en_t8  (6)
#define DISP_TOP_MACE_REG_MAIN_EN_T8           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_main_en_t8)
// h0012, bit: 7
/* */
#define offset_of_disp_top_mace_reg_main_en_t9 (0x24)
#define mask_of_disp_top_mace_reg_main_en_t9   (0x80)
#define shift_of_disp_top_mace_reg_main_en_t9  (7)
#define DISP_TOP_MACE_REG_MAIN_EN_T9           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_main_en_t9)
// h0012, bit: 10
/* */
#define offset_of_disp_top_mace_reg_dd_main_peak_en (0x24)
#define mask_of_disp_top_mace_reg_dd_main_peak_en   (0x400)
#define shift_of_disp_top_mace_reg_dd_main_peak_en  (10)
#define DISP_TOP_MACE_REG_DD_MAIN_PEAK_EN           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_peak_en)
// h0012, bit: 11
/* */
#define offset_of_disp_top_mace_reg_dd_main_lti_en (0x24)
#define mask_of_disp_top_mace_reg_dd_main_lti_en   (0x800)
#define shift_of_disp_top_mace_reg_dd_main_lti_en  (11)
#define DISP_TOP_MACE_REG_DD_MAIN_LTI_EN           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_lti_en)
// h0012, bit: 12
/* */
#define offset_of_disp_top_mace_reg_dd_main_lti_median_filter_on (0x24)
#define mask_of_disp_top_mace_reg_dd_main_lti_median_filter_on   (0x1000)
#define shift_of_disp_top_mace_reg_dd_main_lti_median_filter_on  (12)
#define DISP_TOP_MACE_REG_DD_MAIN_LTI_MEDIAN_FILTER_ON \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_lti_median_filter_on)
// h0012, bit: 13
/* */
#define offset_of_disp_top_mace_reg_dd_main_cti_en (0x24)
#define mask_of_disp_top_mace_reg_dd_main_cti_en   (0x2000)
#define shift_of_disp_top_mace_reg_dd_main_cti_en  (13)
#define DISP_TOP_MACE_REG_DD_MAIN_CTI_EN           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_cti_en)
// h0012, bit: 14
/* */
#define offset_of_disp_top_mace_reg_dd_main_cti_median_filter_on (0x24)
#define mask_of_disp_top_mace_reg_dd_main_cti_median_filter_on   (0x4000)
#define shift_of_disp_top_mace_reg_dd_main_cti_median_filter_on  (14)
#define DISP_TOP_MACE_REG_DD_MAIN_CTI_MEDIAN_FILTER_ON \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_cti_median_filter_on)
// h0012, bit: 15
/* */
#define offset_of_disp_top_mace_reg_dd_main_peaking_diff_adaptive_en (0x24)
#define mask_of_disp_top_mace_reg_dd_main_peaking_diff_adaptive_en   (0x8000)
#define shift_of_disp_top_mace_reg_dd_main_peaking_diff_adaptive_en  (15)
#define DISP_TOP_MACE_REG_DD_MAIN_PEAKING_DIFF_ADAPTIVE_EN \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_peaking_diff_adaptive_en)
// h0013, bit: 5
/* */
#define offset_of_disp_top_mace_reg_dd_main_band1_coef (0x26)
#define mask_of_disp_top_mace_reg_dd_main_band1_coef   (0x3f)
#define shift_of_disp_top_mace_reg_dd_main_band1_coef  (0)
#define DISP_TOP_MACE_REG_DD_MAIN_BAND1_COEF           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_band1_coef)
#define REG_DISP_TOP_MACE_13_L                         (DISP_TOP_MACE_REG_DD_MAIN_BAND1_COEF)
// h0013, bit: 7
/* */
#define offset_of_disp_top_mace_reg_dd_main_band1_step (0x26)
#define mask_of_disp_top_mace_reg_dd_main_band1_step   (0xc0)
#define shift_of_disp_top_mace_reg_dd_main_band1_step  (6)
#define DISP_TOP_MACE_REG_DD_MAIN_BAND1_STEP           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_band1_step)
// h0013, bit: 13
/* */
#define offset_of_disp_top_mace_reg_dd_main_band2_coef (0x26)
#define mask_of_disp_top_mace_reg_dd_main_band2_coef   (0x3f00)
#define shift_of_disp_top_mace_reg_dd_main_band2_coef  (8)
#define DISP_TOP_MACE_REG_DD_MAIN_BAND2_COEF           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_band2_coef)
// h0013, bit: 15
/* */
#define offset_of_disp_top_mace_reg_dd_main_band2_step (0x26)
#define mask_of_disp_top_mace_reg_dd_main_band2_step   (0xc000)
#define shift_of_disp_top_mace_reg_dd_main_band2_step  (14)
#define DISP_TOP_MACE_REG_DD_MAIN_BAND2_STEP           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_band2_step)
// h0014, bit: 5
/* */
#define offset_of_disp_top_mace_reg_dd_main_lti_coef (0x28)
#define mask_of_disp_top_mace_reg_dd_main_lti_coef   (0x3f)
#define shift_of_disp_top_mace_reg_dd_main_lti_coef  (0)
#define DISP_TOP_MACE_REG_DD_MAIN_LTI_COEF           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_lti_coef)
#define REG_DISP_TOP_MACE_14_L                       (DISP_TOP_MACE_REG_DD_MAIN_LTI_COEF)
// h0014, bit: 7
/* */
#define offset_of_disp_top_mace_reg_dd_main_lti_step (0x28)
#define mask_of_disp_top_mace_reg_dd_main_lti_step   (0xc0)
#define shift_of_disp_top_mace_reg_dd_main_lti_step  (6)
#define DISP_TOP_MACE_REG_DD_MAIN_LTI_STEP           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_lti_step)
// h0014, bit: 9
/* */
#define offset_of_disp_top_mace_reg_dd_main_peaking_term1_select (0x28)
#define mask_of_disp_top_mace_reg_dd_main_peaking_term1_select   (0x300)
#define shift_of_disp_top_mace_reg_dd_main_peaking_term1_select  (8)
#define DISP_TOP_MACE_REG_DD_MAIN_PEAKING_TERM1_SELECT \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_peaking_term1_select)
// h0014, bit: 11
/* */
#define offset_of_disp_top_mace_reg_dd_main_peaking_term2_select (0x28)
#define mask_of_disp_top_mace_reg_dd_main_peaking_term2_select   (0xc00)
#define shift_of_disp_top_mace_reg_dd_main_peaking_term2_select  (10)
#define DISP_TOP_MACE_REG_DD_MAIN_PEAKING_TERM2_SELECT \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_peaking_term2_select)
// h0014, bit: 13
/* */
#define offset_of_disp_top_mace_reg_dd_main_peaking_term3_select (0x28)
#define mask_of_disp_top_mace_reg_dd_main_peaking_term3_select   (0x3000)
#define shift_of_disp_top_mace_reg_dd_main_peaking_term3_select  (12)
#define DISP_TOP_MACE_REG_DD_MAIN_PEAKING_TERM3_SELECT \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_peaking_term3_select)
// h0014, bit: 15
/* */
#define offset_of_disp_top_mace_reg_dd_main_peaking_term4_select (0x28)
#define mask_of_disp_top_mace_reg_dd_main_peaking_term4_select   (0xc000)
#define shift_of_disp_top_mace_reg_dd_main_peaking_term4_select  (14)
#define DISP_TOP_MACE_REG_DD_MAIN_PEAKING_TERM4_SELECT \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_peaking_term4_select)
// h0015, bit: 3
/* */
#define offset_of_disp_top_mace_reg_dd_main_coring_thrd_1 (0x2a)
#define mask_of_disp_top_mace_reg_dd_main_coring_thrd_1   (0xf)
#define shift_of_disp_top_mace_reg_dd_main_coring_thrd_1  (0)
#define DISP_TOP_MACE_REG_DD_MAIN_CORING_THRD_1 \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_coring_thrd_1)
#define REG_DISP_TOP_MACE_15_L (DISP_TOP_MACE_REG_DD_MAIN_CORING_THRD_1)
// h0015, bit: 7
/* */
#define offset_of_disp_top_mace_reg_dd_main_coring_thrd_2 (0x2a)
#define mask_of_disp_top_mace_reg_dd_main_coring_thrd_2   (0xf0)
#define shift_of_disp_top_mace_reg_dd_main_coring_thrd_2  (4)
#define DISP_TOP_MACE_REG_DD_MAIN_CORING_THRD_2 \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_coring_thrd_2)
// h0015, bit: 12
/* */
#define offset_of_disp_top_mace_reg_dd_main_cti_coef (0x2a)
#define mask_of_disp_top_mace_reg_dd_main_cti_coef   (0x1f00)
#define shift_of_disp_top_mace_reg_dd_main_cti_coef  (8)
#define DISP_TOP_MACE_REG_DD_MAIN_CTI_COEF           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_cti_coef)
// h0015, bit: 14
/* */
#define offset_of_disp_top_mace_reg_dd_main_cti_step (0x2a)
#define mask_of_disp_top_mace_reg_dd_main_cti_step   (0x6000)
#define shift_of_disp_top_mace_reg_dd_main_cti_step  (13)
#define DISP_TOP_MACE_REG_DD_MAIN_CTI_STEP           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_cti_step)
// h0016, bit: 0
/* */
#define offset_of_disp_top_mace_reg_dd_main_ble_en (0x2c)
#define mask_of_disp_top_mace_reg_dd_main_ble_en   (0x1)
#define shift_of_disp_top_mace_reg_dd_main_ble_en  (0)
#define DISP_TOP_MACE_REG_DD_MAIN_BLE_EN           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_ble_en)
#define REG_DISP_TOP_MACE_16_L                     (DISP_TOP_MACE_REG_DD_MAIN_BLE_EN)
// h0016, bit: 1
/* */
#define offset_of_disp_top_mace_reg_dd_main_wle_en (0x2c)
#define mask_of_disp_top_mace_reg_dd_main_wle_en   (0x2)
#define shift_of_disp_top_mace_reg_dd_main_wle_en  (1)
#define DISP_TOP_MACE_REG_DD_MAIN_WLE_EN           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_wle_en)
// h0016, bit: 14
/* */
#define offset_of_disp_top_mace_reg_dd_white_start (0x2c)
#define mask_of_disp_top_mace_reg_dd_white_start   (0x7f00)
#define shift_of_disp_top_mace_reg_dd_white_start  (8)
#define DISP_TOP_MACE_REG_DD_WHITE_START           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_white_start)
// h0017, bit: 6
/* */
#define offset_of_disp_top_mace_reg_dd_black_start (0x2e)
#define mask_of_disp_top_mace_reg_dd_black_start   (0x7f)
#define shift_of_disp_top_mace_reg_dd_black_start  (0)
#define DISP_TOP_MACE_REG_DD_BLACK_START           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_black_start)
#define REG_DISP_TOP_MACE_17_L                     (DISP_TOP_MACE_REG_DD_BLACK_START)
// h0018, bit: 7
/* */
#define offset_of_disp_top_mace_reg_dd_main_band1_pos_limit_th (0x30)
#define mask_of_disp_top_mace_reg_dd_main_band1_pos_limit_th   (0xff)
#define shift_of_disp_top_mace_reg_dd_main_band1_pos_limit_th  (0)
#define DISP_TOP_MACE_REG_DD_MAIN_BAND1_POS_LIMIT_TH \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_band1_pos_limit_th)
#define REG_DISP_TOP_MACE_18_L (DISP_TOP_MACE_REG_DD_MAIN_BAND1_POS_LIMIT_TH)
// h0018, bit: 15
/* */
#define offset_of_disp_top_mace_reg_dd_main_band1_neg_limit_th (0x30)
#define mask_of_disp_top_mace_reg_dd_main_band1_neg_limit_th   (0xff00)
#define shift_of_disp_top_mace_reg_dd_main_band1_neg_limit_th  (8)
#define DISP_TOP_MACE_REG_DD_MAIN_BAND1_NEG_LIMIT_TH \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_band1_neg_limit_th)
// h0019, bit: 7
/* */
#define offset_of_disp_top_mace_reg_dd_main_band2_pos_limit_th (0x32)
#define mask_of_disp_top_mace_reg_dd_main_band2_pos_limit_th   (0xff)
#define shift_of_disp_top_mace_reg_dd_main_band2_pos_limit_th  (0)
#define DISP_TOP_MACE_REG_DD_MAIN_BAND2_POS_LIMIT_TH \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_band2_pos_limit_th)
#define REG_DISP_TOP_MACE_19_L (DISP_TOP_MACE_REG_DD_MAIN_BAND2_POS_LIMIT_TH)
// h0019, bit: 15
/* */
#define offset_of_disp_top_mace_reg_dd_main_band2_neg_limit_th (0x32)
#define mask_of_disp_top_mace_reg_dd_main_band2_neg_limit_th   (0xff00)
#define shift_of_disp_top_mace_reg_dd_main_band2_neg_limit_th  (8)
#define DISP_TOP_MACE_REG_DD_MAIN_BAND2_NEG_LIMIT_TH \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_band2_neg_limit_th)
// h001a, bit: 7
/* */
#define offset_of_disp_top_mace_reg_dd_main_bw2sbri (0x34)
#define mask_of_disp_top_mace_reg_dd_main_bw2sbri   (0xff)
#define shift_of_disp_top_mace_reg_dd_main_bw2sbri  (0)
#define DISP_TOP_MACE_REG_DD_MAIN_BW2SBRI           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_bw2sbri)
#define REG_DISP_TOP_MACE_1A_L                      (DISP_TOP_MACE_REG_DD_MAIN_BW2SBRI)
// h001b, bit: 7
/* */
#define offset_of_disp_top_mace_reg_dd_main_pos_limit_th (0x36)
#define mask_of_disp_top_mace_reg_dd_main_pos_limit_th   (0xff)
#define shift_of_disp_top_mace_reg_dd_main_pos_limit_th  (0)
#define DISP_TOP_MACE_REG_DD_MAIN_POS_LIMIT_TH \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_pos_limit_th)
#define REG_DISP_TOP_MACE_1B_L (DISP_TOP_MACE_REG_DD_MAIN_POS_LIMIT_TH)
// h001b, bit: 15
/* */
#define offset_of_disp_top_mace_reg_dd_main_neg_limit_th (0x36)
#define mask_of_disp_top_mace_reg_dd_main_neg_limit_th   (0xff00)
#define shift_of_disp_top_mace_reg_dd_main_neg_limit_th  (8)
#define DISP_TOP_MACE_REG_DD_MAIN_NEG_LIMIT_TH \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_neg_limit_th)
// h001c, bit: 0
/* */
#define offset_of_disp_top_mace_reg_dd_main_band2_diff_adaptive_en (0x38)
#define mask_of_disp_top_mace_reg_dd_main_band2_diff_adaptive_en   (0x1)
#define shift_of_disp_top_mace_reg_dd_main_band2_diff_adaptive_en  (0)
#define DISP_TOP_MACE_REG_DD_MAIN_BAND2_DIFF_ADAPTIVE_EN \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_band2_diff_adaptive_en)
#define REG_DISP_TOP_MACE_1C_L (DISP_TOP_MACE_REG_DD_MAIN_BAND2_DIFF_ADAPTIVE_EN)
// h001c, bit: 1
/* */
#define offset_of_disp_top_mace_reg_dd_main_band1_diff_adaptive_en (0x38)
#define mask_of_disp_top_mace_reg_dd_main_band1_diff_adaptive_en   (0x2)
#define shift_of_disp_top_mace_reg_dd_main_band1_diff_adaptive_en  (1)
#define DISP_TOP_MACE_REG_DD_MAIN_BAND1_DIFF_ADAPTIVE_EN \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_band1_diff_adaptive_en)
// h001c, bit: 3
/* */
#define offset_of_disp_top_mace_reg_dd_main_y_lpf_mode (0x38)
#define mask_of_disp_top_mace_reg_dd_main_y_lpf_mode   (0xc)
#define shift_of_disp_top_mace_reg_dd_main_y_lpf_mode  (2)
#define DISP_TOP_MACE_REG_DD_MAIN_Y_LPF_MODE           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_y_lpf_mode)
// h001c, bit: 5
/* */
#define offset_of_disp_top_mace_reg_dd_main_c_lpf_mode (0x38)
#define mask_of_disp_top_mace_reg_dd_main_c_lpf_mode   (0x30)
#define shift_of_disp_top_mace_reg_dd_main_c_lpf_mode  (4)
#define DISP_TOP_MACE_REG_DD_MAIN_C_LPF_MODE           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_main_c_lpf_mode)
// h001d, bit: 0
/* */
#define offset_of_disp_top_mace_reg_dd_y_band1_h_coring_en (0x3a)
#define mask_of_disp_top_mace_reg_dd_y_band1_h_coring_en   (0x1)
#define shift_of_disp_top_mace_reg_dd_y_band1_h_coring_en  (0)
#define DISP_TOP_MACE_REG_DD_Y_BAND1_H_CORING_EN \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_y_band1_h_coring_en)
#define REG_DISP_TOP_MACE_1D_L (DISP_TOP_MACE_REG_DD_Y_BAND1_H_CORING_EN)
// h001d, bit: 1
/* */
#define offset_of_disp_top_mace_reg_dd_y_band2_h_coring_en (0x3a)
#define mask_of_disp_top_mace_reg_dd_y_band2_h_coring_en   (0x2)
#define shift_of_disp_top_mace_reg_dd_y_band2_h_coring_en  (1)
#define DISP_TOP_MACE_REG_DD_Y_BAND2_H_CORING_EN \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_y_band2_h_coring_en)
// h001d, bit: 2
/* */
#define offset_of_disp_top_mace_reg_dd_h_coring_y_dither_en (0x3a)
#define mask_of_disp_top_mace_reg_dd_h_coring_y_dither_en   (0x4)
#define shift_of_disp_top_mace_reg_dd_h_coring_y_dither_en  (2)
#define DISP_TOP_MACE_REG_DD_H_CORING_Y_DITHER_EN \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_h_coring_y_dither_en)
// h001d, bit: 3
/* */
#define offset_of_disp_top_mace_reg_dd_pc_mode (0x3a)
#define mask_of_disp_top_mace_reg_dd_pc_mode   (0x8)
#define shift_of_disp_top_mace_reg_dd_pc_mode  (3)
#define DISP_TOP_MACE_REG_DD_PC_MODE           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_pc_mode)
// h001d, bit: 6
/* */
#define offset_of_disp_top_mace_reg_dd_y_table_step (0x3a)
#define mask_of_disp_top_mace_reg_dd_y_table_step   (0x70)
#define shift_of_disp_top_mace_reg_dd_y_table_step  (4)
#define DISP_TOP_MACE_REG_DD_Y_TABLE_STEP           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_y_table_step)
// h001d, bit: 7
/* */
#define offset_of_disp_top_mace_reg_dd_high_pass_en (0x3a)
#define mask_of_disp_top_mace_reg_dd_high_pass_en   (0x80)
#define shift_of_disp_top_mace_reg_dd_high_pass_en  (7)
#define DISP_TOP_MACE_REG_DD_HIGH_PASS_EN           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_high_pass_en)
// h001d, bit: 8
/* */
#define offset_of_disp_top_mace_reg_dd_c_band1_h_coring_en (0x3a)
#define mask_of_disp_top_mace_reg_dd_c_band1_h_coring_en   (0x100)
#define shift_of_disp_top_mace_reg_dd_c_band1_h_coring_en  (8)
#define DISP_TOP_MACE_REG_DD_C_BAND1_H_CORING_EN \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_c_band1_h_coring_en)
// h001d, bit: 9
/* */
#define offset_of_disp_top_mace_reg_dd_c_band2_h_coring_en (0x3a)
#define mask_of_disp_top_mace_reg_dd_c_band2_h_coring_en   (0x200)
#define shift_of_disp_top_mace_reg_dd_c_band2_h_coring_en  (9)
#define DISP_TOP_MACE_REG_DD_C_BAND2_H_CORING_EN \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_c_band2_h_coring_en)
// h001d, bit: 10
/* */
#define offset_of_disp_top_mace_reg_dd_h_coring_c_dither_en (0x3a)
#define mask_of_disp_top_mace_reg_dd_h_coring_c_dither_en   (0x400)
#define shift_of_disp_top_mace_reg_dd_h_coring_c_dither_en  (10)
#define DISP_TOP_MACE_REG_DD_H_CORING_C_DITHER_EN \
    (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_h_coring_c_dither_en)
// h001d, bit: 14
/* */
#define offset_of_disp_top_mace_reg_dd_c_table_step (0x3a)
#define mask_of_disp_top_mace_reg_dd_c_table_step   (0x7000)
#define shift_of_disp_top_mace_reg_dd_c_table_step  (12)
#define DISP_TOP_MACE_REG_DD_C_TABLE_STEP           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_c_table_step)
// bigger than 16 bit case allh001e
#define offset_of_disp_top_mace_reg_dd_coring_table (0x3c)
#define mask_of_disp_top_mace_reg_dd_coring_table   (0xffffffff)
#define shift_of_disp_top_mace_reg_dd_coring_table  (0)
#define DISP_TOP_MACE_REG_DD_CORING_TABLE           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_coring_table)
// h001e, bit: 15
/* */
#define offset_of_disp_top_mace_reg_dd_coring_table_0 (0x3c)
#define mask_of_disp_top_mace_reg_dd_coring_table_0   (0xffff)
#define shift_of_disp_top_mace_reg_dd_coring_table_0  (0)
#define DISP_TOP_MACE_REG_DD_CORING_TABLE_0           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_coring_table_0)
#define REG_DISP_TOP_MACE_1E_L                        (DISP_TOP_MACE_REG_DD_CORING_TABLE_0)
// h001f, bit: 15
/* */
#define offset_of_disp_top_mace_reg_dd_coring_table_1 (0x3e)
#define mask_of_disp_top_mace_reg_dd_coring_table_1   (0xffff)
#define shift_of_disp_top_mace_reg_dd_coring_table_1  (0)
#define DISP_TOP_MACE_REG_DD_CORING_TABLE_1           (REG_DISP_TOP_MACE_BASE + offset_of_disp_top_mace_reg_dd_coring_table_1)
#define REG_DISP_TOP_MACE_1F_L                        (DISP_TOP_MACE_REG_DD_CORING_TABLE_1)
#define REG_DISP_TOP_MACE_20_L                        (REG_DISP_TOP_MACE_BASE + 0x40)
#define REG_DISP_TOP_MACE_21_L                        (REG_DISP_TOP_MACE_BASE + 0x42)
#define REG_DISP_TOP_MACE_22_L                        (REG_DISP_TOP_MACE_BASE + 0x44)
#define REG_DISP_TOP_MACE_23_L                        (REG_DISP_TOP_MACE_BASE + 0x46)
#define REG_DISP_TOP_MACE_24_L                        (REG_DISP_TOP_MACE_BASE + 0x48)
#define REG_DISP_TOP_MACE_25_L                        (REG_DISP_TOP_MACE_BASE + 0x4a)
#define REG_DISP_TOP_MACE_26_L                        (REG_DISP_TOP_MACE_BASE + 0x4c)
#define REG_DISP_TOP_MACE_27_L                        (REG_DISP_TOP_MACE_BASE + 0x4e)
#define REG_DISP_TOP_MACE_28_L                        (REG_DISP_TOP_MACE_BASE + 0x50)
#define REG_DISP_TOP_MACE_29_L                        (REG_DISP_TOP_MACE_BASE + 0x52)
#define REG_DISP_TOP_MACE_2A_L                        (REG_DISP_TOP_MACE_BASE + 0x54)
#define REG_DISP_TOP_MACE_2B_L                        (REG_DISP_TOP_MACE_BASE + 0x56)
#define REG_DISP_TOP_MACE_2C_L                        (REG_DISP_TOP_MACE_BASE + 0x58)
#define REG_DISP_TOP_MACE_2D_L                        (REG_DISP_TOP_MACE_BASE + 0x5a)
#define REG_DISP_TOP_MACE_2E_L                        (REG_DISP_TOP_MACE_BASE + 0x5c)
#define REG_DISP_TOP_MACE_2F_L                        (REG_DISP_TOP_MACE_BASE + 0x5e)
#define REG_DISP_TOP_MACE_30_L                        (REG_DISP_TOP_MACE_BASE + 0x60)
#define REG_DISP_TOP_MACE_31_L                        (REG_DISP_TOP_MACE_BASE + 0x62)
#define REG_DISP_TOP_MACE_32_L                        (REG_DISP_TOP_MACE_BASE + 0x64)
#define REG_DISP_TOP_MACE_33_L                        (REG_DISP_TOP_MACE_BASE + 0x66)
#define REG_DISP_TOP_MACE_34_L                        (REG_DISP_TOP_MACE_BASE + 0x68)
#define REG_DISP_TOP_MACE_35_L                        (REG_DISP_TOP_MACE_BASE + 0x6a)
#define REG_DISP_TOP_MACE_36_L                        (REG_DISP_TOP_MACE_BASE + 0x6c)
#define REG_DISP_TOP_MACE_37_L                        (REG_DISP_TOP_MACE_BASE + 0x6e)
#define REG_DISP_TOP_MACE_38_L                        (REG_DISP_TOP_MACE_BASE + 0x70)
#define REG_DISP_TOP_MACE_39_L                        (REG_DISP_TOP_MACE_BASE + 0x72)
#define REG_DISP_TOP_MACE_3A_L                        (REG_DISP_TOP_MACE_BASE + 0x74)
#define REG_DISP_TOP_MACE_3B_L                        (REG_DISP_TOP_MACE_BASE + 0x76)
#define REG_DISP_TOP_MACE_3C_L                        (REG_DISP_TOP_MACE_BASE + 0x78)
#define REG_DISP_TOP_MACE_3D_L                        (REG_DISP_TOP_MACE_BASE + 0x7a)
#define REG_DISP_TOP_MACE_3E_L                        (REG_DISP_TOP_MACE_BASE + 0x7c)
#define REG_DISP_TOP_MACE_3F_L                        (REG_DISP_TOP_MACE_BASE + 0x7e)
#define REG_DISP_TOP_MACE_40_L                        (REG_DISP_TOP_MACE_BASE + 0x80)
#define REG_DISP_TOP_MACE_41_L                        (REG_DISP_TOP_MACE_BASE + 0x82)
#define REG_DISP_TOP_MACE_42_L                        (REG_DISP_TOP_MACE_BASE + 0x84)
#define REG_DISP_TOP_MACE_43_L                        (REG_DISP_TOP_MACE_BASE + 0x86)
#define REG_DISP_TOP_MACE_44_L                        (REG_DISP_TOP_MACE_BASE + 0x88)
#define REG_DISP_TOP_MACE_45_L                        (REG_DISP_TOP_MACE_BASE + 0x8a)
#define REG_DISP_TOP_MACE_46_L                        (REG_DISP_TOP_MACE_BASE + 0x8c)
#define REG_DISP_TOP_MACE_47_L                        (REG_DISP_TOP_MACE_BASE + 0x8e)
#define REG_DISP_TOP_MACE_48_L                        (REG_DISP_TOP_MACE_BASE + 0x90)
#define REG_DISP_TOP_MACE_49_L                        (REG_DISP_TOP_MACE_BASE + 0x92)
#define REG_DISP_TOP_MACE_4A_L                        (REG_DISP_TOP_MACE_BASE + 0x94)
#define REG_DISP_TOP_MACE_4B_L                        (REG_DISP_TOP_MACE_BASE + 0x96)
#define REG_DISP_TOP_MACE_4C_L                        (REG_DISP_TOP_MACE_BASE + 0x98)
#define REG_DISP_TOP_MACE_4D_L                        (REG_DISP_TOP_MACE_BASE + 0x9a)
#define REG_DISP_TOP_MACE_4E_L                        (REG_DISP_TOP_MACE_BASE + 0x9c)
#define REG_DISP_TOP_MACE_4F_L                        (REG_DISP_TOP_MACE_BASE + 0x9e)
#define REG_DISP_TOP_MACE_50_L                        (REG_DISP_TOP_MACE_BASE + 0xa0)
#define REG_DISP_TOP_MACE_51_L                        (REG_DISP_TOP_MACE_BASE + 0xa2)
#define REG_DISP_TOP_MACE_52_L                        (REG_DISP_TOP_MACE_BASE + 0xa4)
#define REG_DISP_TOP_MACE_53_L                        (REG_DISP_TOP_MACE_BASE + 0xa6)
#define REG_DISP_TOP_MACE_54_L                        (REG_DISP_TOP_MACE_BASE + 0xa8)
#define REG_DISP_TOP_MACE_55_L                        (REG_DISP_TOP_MACE_BASE + 0xaa)
#define REG_DISP_TOP_MACE_56_L                        (REG_DISP_TOP_MACE_BASE + 0xac)
#define REG_DISP_TOP_MACE_57_L                        (REG_DISP_TOP_MACE_BASE + 0xae)
#define REG_DISP_TOP_MACE_58_L                        (REG_DISP_TOP_MACE_BASE + 0xb0)
#define REG_DISP_TOP_MACE_59_L                        (REG_DISP_TOP_MACE_BASE + 0xb2)
#define REG_DISP_TOP_MACE_5A_L                        (REG_DISP_TOP_MACE_BASE + 0xb4)
#define REG_DISP_TOP_MACE_5B_L                        (REG_DISP_TOP_MACE_BASE + 0xb6)
#define REG_DISP_TOP_MACE_5C_L                        (REG_DISP_TOP_MACE_BASE + 0xb8)
#define REG_DISP_TOP_MACE_5D_L                        (REG_DISP_TOP_MACE_BASE + 0xba)
#define REG_DISP_TOP_MACE_5E_L                        (REG_DISP_TOP_MACE_BASE + 0xbc)
#define REG_DISP_TOP_MACE_5F_L                        (REG_DISP_TOP_MACE_BASE + 0xbe)
#define REG_DISP_TOP_MACE_60_L                        (REG_DISP_TOP_MACE_BASE + 0xc0)
#define REG_DISP_TOP_MACE_61_L                        (REG_DISP_TOP_MACE_BASE + 0xc2)
#define REG_DISP_TOP_MACE_62_L                        (REG_DISP_TOP_MACE_BASE + 0xc4)
#define REG_DISP_TOP_MACE_63_L                        (REG_DISP_TOP_MACE_BASE + 0xc6)
#define REG_DISP_TOP_MACE_64_L                        (REG_DISP_TOP_MACE_BASE + 0xc8)
#define REG_DISP_TOP_MACE_65_L                        (REG_DISP_TOP_MACE_BASE + 0xca)
#define REG_DISP_TOP_MACE_66_L                        (REG_DISP_TOP_MACE_BASE + 0xcc)
#define REG_DISP_TOP_MACE_67_L                        (REG_DISP_TOP_MACE_BASE + 0xce)
#define REG_DISP_TOP_MACE_68_L                        (REG_DISP_TOP_MACE_BASE + 0xd0)
#define REG_DISP_TOP_MACE_69_L                        (REG_DISP_TOP_MACE_BASE + 0xd2)
#define REG_DISP_TOP_MACE_6A_L                        (REG_DISP_TOP_MACE_BASE + 0xd4)
#define REG_DISP_TOP_MACE_6B_L                        (REG_DISP_TOP_MACE_BASE + 0xd6)
#define REG_DISP_TOP_MACE_6C_L                        (REG_DISP_TOP_MACE_BASE + 0xd8)
#define REG_DISP_TOP_MACE_6D_L                        (REG_DISP_TOP_MACE_BASE + 0xda)
#define REG_DISP_TOP_MACE_6E_L                        (REG_DISP_TOP_MACE_BASE + 0xdc)
#define REG_DISP_TOP_MACE_6F_L                        (REG_DISP_TOP_MACE_BASE + 0xde)
#define REG_DISP_TOP_MACE_70_L                        (REG_DISP_TOP_MACE_BASE + 0xe0)
#define REG_DISP_TOP_MACE_71_L                        (REG_DISP_TOP_MACE_BASE + 0xe2)
#define REG_DISP_TOP_MACE_72_L                        (REG_DISP_TOP_MACE_BASE + 0xe4)
#define REG_DISP_TOP_MACE_73_L                        (REG_DISP_TOP_MACE_BASE + 0xe6)
#define REG_DISP_TOP_MACE_74_L                        (REG_DISP_TOP_MACE_BASE + 0xe8)
#define REG_DISP_TOP_MACE_75_L                        (REG_DISP_TOP_MACE_BASE + 0xea)
#define REG_DISP_TOP_MACE_76_L                        (REG_DISP_TOP_MACE_BASE + 0xec)
#define REG_DISP_TOP_MACE_77_L                        (REG_DISP_TOP_MACE_BASE + 0xee)
#define REG_DISP_TOP_MACE_78_L                        (REG_DISP_TOP_MACE_BASE + 0xf0)
#define REG_DISP_TOP_MACE_79_L                        (REG_DISP_TOP_MACE_BASE + 0xf2)
#define REG_DISP_TOP_MACE_7A_L                        (REG_DISP_TOP_MACE_BASE + 0xf4)
#define REG_DISP_TOP_MACE_7B_L                        (REG_DISP_TOP_MACE_BASE + 0xf6)
#define REG_DISP_TOP_MACE_7C_L                        (REG_DISP_TOP_MACE_BASE + 0xf8)
#define REG_DISP_TOP_MACE_7D_L                        (REG_DISP_TOP_MACE_BASE + 0xfa)
#define REG_DISP_TOP_MACE_7E_L                        (REG_DISP_TOP_MACE_BASE + 0xfc)
#define REG_DISP_TOP_MACE_7F_L                        (REG_DISP_TOP_MACE_BASE + 0xfe)
// h0000, bit: 0
/* Enable Gamma*/
#define offset_of_disp_top_gamma0_reg_gamma_en (0x0)
#define mask_of_disp_top_gamma0_reg_gamma_en   (0x1)
#define shift_of_disp_top_gamma0_reg_gamma_en  (0)
#define DISP_TOP_GAMMA0_REG_GAMMA_EN           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_gamma_en)
#define REG_DISP_TOP_GAMMA0_00_L               (DISP_TOP_GAMMA0_REG_GAMMA_EN)
// h0001, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_00 (0x2)
#define mask_of_disp_top_gamma0_reg_tbl_r_00   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_00  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_00           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_00)
#define REG_DISP_TOP_GAMMA0_01_L               (DISP_TOP_GAMMA0_REG_TBL_R_00)
// h0001, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_01 (0x2)
#define mask_of_disp_top_gamma0_reg_tbl_r_01   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_01  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_01           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_01)
// h0002, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_02 (0x4)
#define mask_of_disp_top_gamma0_reg_tbl_r_02   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_02  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_02           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_02)
#define REG_DISP_TOP_GAMMA0_02_L               (DISP_TOP_GAMMA0_REG_TBL_R_02)
// h0002, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_03 (0x4)
#define mask_of_disp_top_gamma0_reg_tbl_r_03   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_03  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_03           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_03)
// h0003, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_04 (0x6)
#define mask_of_disp_top_gamma0_reg_tbl_r_04   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_04  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_04           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_04)
#define REG_DISP_TOP_GAMMA0_03_L               (DISP_TOP_GAMMA0_REG_TBL_R_04)
// h0003, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_05 (0x6)
#define mask_of_disp_top_gamma0_reg_tbl_r_05   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_05  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_05           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_05)
// h0004, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_06 (0x8)
#define mask_of_disp_top_gamma0_reg_tbl_r_06   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_06  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_06           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_06)
#define REG_DISP_TOP_GAMMA0_04_L               (DISP_TOP_GAMMA0_REG_TBL_R_06)
// h0004, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_07 (0x8)
#define mask_of_disp_top_gamma0_reg_tbl_r_07   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_07  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_07           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_07)
// h0005, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_08 (0xa)
#define mask_of_disp_top_gamma0_reg_tbl_r_08   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_08  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_08           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_08)
#define REG_DISP_TOP_GAMMA0_05_L               (DISP_TOP_GAMMA0_REG_TBL_R_08)
// h0005, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_09 (0xa)
#define mask_of_disp_top_gamma0_reg_tbl_r_09   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_09  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_09           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_09)
// h0006, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_10 (0xc)
#define mask_of_disp_top_gamma0_reg_tbl_r_10   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_10  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_10           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_10)
#define REG_DISP_TOP_GAMMA0_06_L               (DISP_TOP_GAMMA0_REG_TBL_R_10)
// h0006, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_11 (0xc)
#define mask_of_disp_top_gamma0_reg_tbl_r_11   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_11  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_11           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_11)
// h0007, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_12 (0xe)
#define mask_of_disp_top_gamma0_reg_tbl_r_12   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_12  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_12           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_12)
#define REG_DISP_TOP_GAMMA0_07_L               (DISP_TOP_GAMMA0_REG_TBL_R_12)
// h0007, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_13 (0xe)
#define mask_of_disp_top_gamma0_reg_tbl_r_13   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_13  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_13           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_13)
// h0008, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_14 (0x10)
#define mask_of_disp_top_gamma0_reg_tbl_r_14   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_14  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_14           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_14)
#define REG_DISP_TOP_GAMMA0_08_L               (DISP_TOP_GAMMA0_REG_TBL_R_14)
// h0008, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_15 (0x10)
#define mask_of_disp_top_gamma0_reg_tbl_r_15   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_15  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_15           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_15)
// h0009, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_16 (0x12)
#define mask_of_disp_top_gamma0_reg_tbl_r_16   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_16  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_16           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_16)
#define REG_DISP_TOP_GAMMA0_09_L               (DISP_TOP_GAMMA0_REG_TBL_R_16)
// h0009, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_17 (0x12)
#define mask_of_disp_top_gamma0_reg_tbl_r_17   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_17  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_17           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_17)
// h000a, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_18 (0x14)
#define mask_of_disp_top_gamma0_reg_tbl_r_18   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_18  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_18           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_18)
#define REG_DISP_TOP_GAMMA0_0A_L               (DISP_TOP_GAMMA0_REG_TBL_R_18)
// h000a, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_19 (0x14)
#define mask_of_disp_top_gamma0_reg_tbl_r_19   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_19  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_19           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_19)
// h000b, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_20 (0x16)
#define mask_of_disp_top_gamma0_reg_tbl_r_20   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_20  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_20           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_20)
#define REG_DISP_TOP_GAMMA0_0B_L               (DISP_TOP_GAMMA0_REG_TBL_R_20)
// h000b, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_21 (0x16)
#define mask_of_disp_top_gamma0_reg_tbl_r_21   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_21  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_21           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_21)
// h000c, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_22 (0x18)
#define mask_of_disp_top_gamma0_reg_tbl_r_22   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_22  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_22           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_22)
#define REG_DISP_TOP_GAMMA0_0C_L               (DISP_TOP_GAMMA0_REG_TBL_R_22)
// h000c, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_23 (0x18)
#define mask_of_disp_top_gamma0_reg_tbl_r_23   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_23  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_23           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_23)
// h000d, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_24 (0x1a)
#define mask_of_disp_top_gamma0_reg_tbl_r_24   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_24  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_24           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_24)
#define REG_DISP_TOP_GAMMA0_0D_L               (DISP_TOP_GAMMA0_REG_TBL_R_24)
// h000d, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_25 (0x1a)
#define mask_of_disp_top_gamma0_reg_tbl_r_25   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_25  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_25           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_25)
// h000e, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_26 (0x1c)
#define mask_of_disp_top_gamma0_reg_tbl_r_26   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_26  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_26           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_26)
#define REG_DISP_TOP_GAMMA0_0E_L               (DISP_TOP_GAMMA0_REG_TBL_R_26)
// h000e, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_27 (0x1c)
#define mask_of_disp_top_gamma0_reg_tbl_r_27   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_27  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_27           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_27)
// h000f, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_28 (0x1e)
#define mask_of_disp_top_gamma0_reg_tbl_r_28   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_28  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_28           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_28)
#define REG_DISP_TOP_GAMMA0_0F_L               (DISP_TOP_GAMMA0_REG_TBL_R_28)
// h000f, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_29 (0x1e)
#define mask_of_disp_top_gamma0_reg_tbl_r_29   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_29  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_29           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_29)
// h0010, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_30 (0x20)
#define mask_of_disp_top_gamma0_reg_tbl_r_30   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_30  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_30           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_30)
#define REG_DISP_TOP_GAMMA0_10_L               (DISP_TOP_GAMMA0_REG_TBL_R_30)
// h0010, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_31 (0x20)
#define mask_of_disp_top_gamma0_reg_tbl_r_31   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_r_31  (8)
#define DISP_TOP_GAMMA0_REG_TBL_R_31           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_31)
// h0011, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma0_reg_tbl_r_32 (0x22)
#define mask_of_disp_top_gamma0_reg_tbl_r_32   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_r_32  (0)
#define DISP_TOP_GAMMA0_REG_TBL_R_32           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_r_32)
#define REG_DISP_TOP_GAMMA0_11_L               (DISP_TOP_GAMMA0_REG_TBL_R_32)
// h0012, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_00 (0x24)
#define mask_of_disp_top_gamma0_reg_tbl_g_00   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_00  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_00           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_00)
#define REG_DISP_TOP_GAMMA0_12_L               (DISP_TOP_GAMMA0_REG_TBL_G_00)
// h0012, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_01 (0x24)
#define mask_of_disp_top_gamma0_reg_tbl_g_01   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_01  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_01           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_01)
// h0013, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_02 (0x26)
#define mask_of_disp_top_gamma0_reg_tbl_g_02   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_02  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_02           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_02)
#define REG_DISP_TOP_GAMMA0_13_L               (DISP_TOP_GAMMA0_REG_TBL_G_02)
// h0013, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_03 (0x26)
#define mask_of_disp_top_gamma0_reg_tbl_g_03   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_03  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_03           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_03)
// h0014, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_04 (0x28)
#define mask_of_disp_top_gamma0_reg_tbl_g_04   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_04  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_04           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_04)
#define REG_DISP_TOP_GAMMA0_14_L               (DISP_TOP_GAMMA0_REG_TBL_G_04)
// h0014, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_05 (0x28)
#define mask_of_disp_top_gamma0_reg_tbl_g_05   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_05  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_05           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_05)
// h0015, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_06 (0x2a)
#define mask_of_disp_top_gamma0_reg_tbl_g_06   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_06  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_06           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_06)
#define REG_DISP_TOP_GAMMA0_15_L               (DISP_TOP_GAMMA0_REG_TBL_G_06)
// h0015, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_07 (0x2a)
#define mask_of_disp_top_gamma0_reg_tbl_g_07   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_07  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_07           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_07)
// h0016, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_08 (0x2c)
#define mask_of_disp_top_gamma0_reg_tbl_g_08   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_08  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_08           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_08)
#define REG_DISP_TOP_GAMMA0_16_L               (DISP_TOP_GAMMA0_REG_TBL_G_08)
// h0016, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_09 (0x2c)
#define mask_of_disp_top_gamma0_reg_tbl_g_09   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_09  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_09           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_09)
// h0017, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_10 (0x2e)
#define mask_of_disp_top_gamma0_reg_tbl_g_10   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_10  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_10           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_10)
#define REG_DISP_TOP_GAMMA0_17_L               (DISP_TOP_GAMMA0_REG_TBL_G_10)
// h0017, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_11 (0x2e)
#define mask_of_disp_top_gamma0_reg_tbl_g_11   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_11  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_11           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_11)
// h0018, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_12 (0x30)
#define mask_of_disp_top_gamma0_reg_tbl_g_12   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_12  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_12           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_12)
#define REG_DISP_TOP_GAMMA0_18_L               (DISP_TOP_GAMMA0_REG_TBL_G_12)
// h0018, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_13 (0x30)
#define mask_of_disp_top_gamma0_reg_tbl_g_13   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_13  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_13           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_13)
// h0019, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_14 (0x32)
#define mask_of_disp_top_gamma0_reg_tbl_g_14   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_14  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_14           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_14)
#define REG_DISP_TOP_GAMMA0_19_L               (DISP_TOP_GAMMA0_REG_TBL_G_14)
// h0019, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_15 (0x32)
#define mask_of_disp_top_gamma0_reg_tbl_g_15   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_15  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_15           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_15)
// h001a, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_16 (0x34)
#define mask_of_disp_top_gamma0_reg_tbl_g_16   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_16  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_16           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_16)
#define REG_DISP_TOP_GAMMA0_1A_L               (DISP_TOP_GAMMA0_REG_TBL_G_16)
// h001a, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_17 (0x34)
#define mask_of_disp_top_gamma0_reg_tbl_g_17   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_17  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_17           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_17)
// h001b, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_18 (0x36)
#define mask_of_disp_top_gamma0_reg_tbl_g_18   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_18  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_18           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_18)
#define REG_DISP_TOP_GAMMA0_1B_L               (DISP_TOP_GAMMA0_REG_TBL_G_18)
// h001b, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_19 (0x36)
#define mask_of_disp_top_gamma0_reg_tbl_g_19   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_19  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_19           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_19)
// h001c, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_20 (0x38)
#define mask_of_disp_top_gamma0_reg_tbl_g_20   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_20  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_20           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_20)
#define REG_DISP_TOP_GAMMA0_1C_L               (DISP_TOP_GAMMA0_REG_TBL_G_20)
// h001c, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_21 (0x38)
#define mask_of_disp_top_gamma0_reg_tbl_g_21   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_21  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_21           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_21)
// h001d, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_22 (0x3a)
#define mask_of_disp_top_gamma0_reg_tbl_g_22   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_22  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_22           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_22)
#define REG_DISP_TOP_GAMMA0_1D_L               (DISP_TOP_GAMMA0_REG_TBL_G_22)
// h001d, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_23 (0x3a)
#define mask_of_disp_top_gamma0_reg_tbl_g_23   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_23  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_23           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_23)
// h001e, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_24 (0x3c)
#define mask_of_disp_top_gamma0_reg_tbl_g_24   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_24  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_24           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_24)
#define REG_DISP_TOP_GAMMA0_1E_L               (DISP_TOP_GAMMA0_REG_TBL_G_24)
// h001e, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_25 (0x3c)
#define mask_of_disp_top_gamma0_reg_tbl_g_25   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_25  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_25           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_25)
// h001f, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_26 (0x3e)
#define mask_of_disp_top_gamma0_reg_tbl_g_26   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_26  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_26           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_26)
#define REG_DISP_TOP_GAMMA0_1F_L               (DISP_TOP_GAMMA0_REG_TBL_G_26)
// h001f, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_27 (0x3e)
#define mask_of_disp_top_gamma0_reg_tbl_g_27   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_27  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_27           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_27)
// h0020, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_28 (0x40)
#define mask_of_disp_top_gamma0_reg_tbl_g_28   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_28  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_28           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_28)
#define REG_DISP_TOP_GAMMA0_20_L               (DISP_TOP_GAMMA0_REG_TBL_G_28)
// h0020, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_29 (0x40)
#define mask_of_disp_top_gamma0_reg_tbl_g_29   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_29  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_29           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_29)
// h0021, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_30 (0x42)
#define mask_of_disp_top_gamma0_reg_tbl_g_30   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_30  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_30           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_30)
#define REG_DISP_TOP_GAMMA0_21_L               (DISP_TOP_GAMMA0_REG_TBL_G_30)
// h0021, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_31 (0x42)
#define mask_of_disp_top_gamma0_reg_tbl_g_31   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_g_31  (8)
#define DISP_TOP_GAMMA0_REG_TBL_G_31           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_31)
// h0022, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma0_reg_tbl_g_32 (0x44)
#define mask_of_disp_top_gamma0_reg_tbl_g_32   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_g_32  (0)
#define DISP_TOP_GAMMA0_REG_TBL_G_32           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_g_32)
#define REG_DISP_TOP_GAMMA0_22_L               (DISP_TOP_GAMMA0_REG_TBL_G_32)
// h0023, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_00 (0x46)
#define mask_of_disp_top_gamma0_reg_tbl_b_00   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_00  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_00           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_00)
#define REG_DISP_TOP_GAMMA0_23_L               (DISP_TOP_GAMMA0_REG_TBL_B_00)
// h0023, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_01 (0x46)
#define mask_of_disp_top_gamma0_reg_tbl_b_01   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_01  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_01           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_01)
// h0024, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_02 (0x48)
#define mask_of_disp_top_gamma0_reg_tbl_b_02   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_02  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_02           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_02)
#define REG_DISP_TOP_GAMMA0_24_L               (DISP_TOP_GAMMA0_REG_TBL_B_02)
// h0024, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_03 (0x48)
#define mask_of_disp_top_gamma0_reg_tbl_b_03   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_03  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_03           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_03)
// h0025, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_04 (0x4a)
#define mask_of_disp_top_gamma0_reg_tbl_b_04   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_04  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_04           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_04)
#define REG_DISP_TOP_GAMMA0_25_L               (DISP_TOP_GAMMA0_REG_TBL_B_04)
// h0025, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_05 (0x4a)
#define mask_of_disp_top_gamma0_reg_tbl_b_05   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_05  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_05           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_05)
// h0026, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_06 (0x4c)
#define mask_of_disp_top_gamma0_reg_tbl_b_06   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_06  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_06           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_06)
#define REG_DISP_TOP_GAMMA0_26_L               (DISP_TOP_GAMMA0_REG_TBL_B_06)
// h0026, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_07 (0x4c)
#define mask_of_disp_top_gamma0_reg_tbl_b_07   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_07  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_07           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_07)
// h0027, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_08 (0x4e)
#define mask_of_disp_top_gamma0_reg_tbl_b_08   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_08  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_08           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_08)
#define REG_DISP_TOP_GAMMA0_27_L               (DISP_TOP_GAMMA0_REG_TBL_B_08)
// h0027, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_09 (0x4e)
#define mask_of_disp_top_gamma0_reg_tbl_b_09   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_09  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_09           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_09)
// h0028, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_10 (0x50)
#define mask_of_disp_top_gamma0_reg_tbl_b_10   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_10  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_10           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_10)
#define REG_DISP_TOP_GAMMA0_28_L               (DISP_TOP_GAMMA0_REG_TBL_B_10)
// h0028, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_11 (0x50)
#define mask_of_disp_top_gamma0_reg_tbl_b_11   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_11  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_11           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_11)
// h0029, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_12 (0x52)
#define mask_of_disp_top_gamma0_reg_tbl_b_12   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_12  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_12           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_12)
#define REG_DISP_TOP_GAMMA0_29_L               (DISP_TOP_GAMMA0_REG_TBL_B_12)
// h0029, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_13 (0x52)
#define mask_of_disp_top_gamma0_reg_tbl_b_13   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_13  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_13           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_13)
// h002a, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_14 (0x54)
#define mask_of_disp_top_gamma0_reg_tbl_b_14   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_14  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_14           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_14)
#define REG_DISP_TOP_GAMMA0_2A_L               (DISP_TOP_GAMMA0_REG_TBL_B_14)
// h002a, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_15 (0x54)
#define mask_of_disp_top_gamma0_reg_tbl_b_15   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_15  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_15           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_15)
// h002b, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_16 (0x56)
#define mask_of_disp_top_gamma0_reg_tbl_b_16   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_16  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_16           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_16)
#define REG_DISP_TOP_GAMMA0_2B_L               (DISP_TOP_GAMMA0_REG_TBL_B_16)
// h002b, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_17 (0x56)
#define mask_of_disp_top_gamma0_reg_tbl_b_17   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_17  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_17           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_17)
// h002c, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_18 (0x58)
#define mask_of_disp_top_gamma0_reg_tbl_b_18   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_18  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_18           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_18)
#define REG_DISP_TOP_GAMMA0_2C_L               (DISP_TOP_GAMMA0_REG_TBL_B_18)
// h002c, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_19 (0x58)
#define mask_of_disp_top_gamma0_reg_tbl_b_19   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_19  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_19           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_19)
// h002d, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_20 (0x5a)
#define mask_of_disp_top_gamma0_reg_tbl_b_20   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_20  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_20           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_20)
#define REG_DISP_TOP_GAMMA0_2D_L               (DISP_TOP_GAMMA0_REG_TBL_B_20)
// h002d, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_21 (0x5a)
#define mask_of_disp_top_gamma0_reg_tbl_b_21   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_21  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_21           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_21)
// h002e, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_22 (0x5c)
#define mask_of_disp_top_gamma0_reg_tbl_b_22   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_22  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_22           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_22)
#define REG_DISP_TOP_GAMMA0_2E_L               (DISP_TOP_GAMMA0_REG_TBL_B_22)
// h002e, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_23 (0x5c)
#define mask_of_disp_top_gamma0_reg_tbl_b_23   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_23  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_23           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_23)
// h002f, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_24 (0x5e)
#define mask_of_disp_top_gamma0_reg_tbl_b_24   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_24  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_24           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_24)
#define REG_DISP_TOP_GAMMA0_2F_L               (DISP_TOP_GAMMA0_REG_TBL_B_24)
// h002f, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_25 (0x5e)
#define mask_of_disp_top_gamma0_reg_tbl_b_25   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_25  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_25           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_25)
// h0030, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_26 (0x60)
#define mask_of_disp_top_gamma0_reg_tbl_b_26   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_26  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_26           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_26)
#define REG_DISP_TOP_GAMMA0_30_L               (DISP_TOP_GAMMA0_REG_TBL_B_26)
// h0030, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_27 (0x60)
#define mask_of_disp_top_gamma0_reg_tbl_b_27   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_27  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_27           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_27)
// h0031, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_28 (0x62)
#define mask_of_disp_top_gamma0_reg_tbl_b_28   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_28  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_28           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_28)
#define REG_DISP_TOP_GAMMA0_31_L               (DISP_TOP_GAMMA0_REG_TBL_B_28)
// h0031, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_29 (0x62)
#define mask_of_disp_top_gamma0_reg_tbl_b_29   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_29  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_29           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_29)
// h0032, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_30 (0x64)
#define mask_of_disp_top_gamma0_reg_tbl_b_30   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_30  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_30           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_30)
#define REG_DISP_TOP_GAMMA0_32_L               (DISP_TOP_GAMMA0_REG_TBL_B_30)
// h0032, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_31 (0x64)
#define mask_of_disp_top_gamma0_reg_tbl_b_31   (0xff00)
#define shift_of_disp_top_gamma0_reg_tbl_b_31  (8)
#define DISP_TOP_GAMMA0_REG_TBL_B_31           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_31)
// h0033, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma0_reg_tbl_b_32 (0x66)
#define mask_of_disp_top_gamma0_reg_tbl_b_32   (0xff)
#define shift_of_disp_top_gamma0_reg_tbl_b_32  (0)
#define DISP_TOP_GAMMA0_REG_TBL_B_32           (REG_DISP_TOP_GAMMA0_BASE + offset_of_disp_top_gamma0_reg_tbl_b_32)
#define REG_DISP_TOP_GAMMA0_33_L               (DISP_TOP_GAMMA0_REG_TBL_B_32)
#define REG_DISP_TOP_GAMMA0_34_L               (REG_DISP_TOP_GAMMA0_BASE + 0x68)
#define REG_DISP_TOP_GAMMA0_35_L               (REG_DISP_TOP_GAMMA0_BASE + 0x6a)
#define REG_DISP_TOP_GAMMA0_36_L               (REG_DISP_TOP_GAMMA0_BASE + 0x6c)
#define REG_DISP_TOP_GAMMA0_37_L               (REG_DISP_TOP_GAMMA0_BASE + 0x6e)
#define REG_DISP_TOP_GAMMA0_38_L               (REG_DISP_TOP_GAMMA0_BASE + 0x70)
#define REG_DISP_TOP_GAMMA0_39_L               (REG_DISP_TOP_GAMMA0_BASE + 0x72)
#define REG_DISP_TOP_GAMMA0_3A_L               (REG_DISP_TOP_GAMMA0_BASE + 0x74)
#define REG_DISP_TOP_GAMMA0_3B_L               (REG_DISP_TOP_GAMMA0_BASE + 0x76)
#define REG_DISP_TOP_GAMMA0_3C_L               (REG_DISP_TOP_GAMMA0_BASE + 0x78)
#define REG_DISP_TOP_GAMMA0_3D_L               (REG_DISP_TOP_GAMMA0_BASE + 0x7a)
#define REG_DISP_TOP_GAMMA0_3E_L               (REG_DISP_TOP_GAMMA0_BASE + 0x7c)
#define REG_DISP_TOP_GAMMA0_3F_L               (REG_DISP_TOP_GAMMA0_BASE + 0x7e)
#define REG_DISP_TOP_GAMMA0_40_L               (REG_DISP_TOP_GAMMA0_BASE + 0x80)
#define REG_DISP_TOP_GAMMA0_41_L               (REG_DISP_TOP_GAMMA0_BASE + 0x82)
#define REG_DISP_TOP_GAMMA0_42_L               (REG_DISP_TOP_GAMMA0_BASE + 0x84)
#define REG_DISP_TOP_GAMMA0_43_L               (REG_DISP_TOP_GAMMA0_BASE + 0x86)
#define REG_DISP_TOP_GAMMA0_44_L               (REG_DISP_TOP_GAMMA0_BASE + 0x88)
#define REG_DISP_TOP_GAMMA0_45_L               (REG_DISP_TOP_GAMMA0_BASE + 0x8a)
#define REG_DISP_TOP_GAMMA0_46_L               (REG_DISP_TOP_GAMMA0_BASE + 0x8c)
#define REG_DISP_TOP_GAMMA0_47_L               (REG_DISP_TOP_GAMMA0_BASE + 0x8e)
#define REG_DISP_TOP_GAMMA0_48_L               (REG_DISP_TOP_GAMMA0_BASE + 0x90)
#define REG_DISP_TOP_GAMMA0_49_L               (REG_DISP_TOP_GAMMA0_BASE + 0x92)
#define REG_DISP_TOP_GAMMA0_4A_L               (REG_DISP_TOP_GAMMA0_BASE + 0x94)
#define REG_DISP_TOP_GAMMA0_4B_L               (REG_DISP_TOP_GAMMA0_BASE + 0x96)
#define REG_DISP_TOP_GAMMA0_4C_L               (REG_DISP_TOP_GAMMA0_BASE + 0x98)
#define REG_DISP_TOP_GAMMA0_4D_L               (REG_DISP_TOP_GAMMA0_BASE + 0x9a)
#define REG_DISP_TOP_GAMMA0_4E_L               (REG_DISP_TOP_GAMMA0_BASE + 0x9c)
#define REG_DISP_TOP_GAMMA0_4F_L               (REG_DISP_TOP_GAMMA0_BASE + 0x9e)
#define REG_DISP_TOP_GAMMA0_50_L               (REG_DISP_TOP_GAMMA0_BASE + 0xa0)
#define REG_DISP_TOP_GAMMA0_51_L               (REG_DISP_TOP_GAMMA0_BASE + 0xa2)
#define REG_DISP_TOP_GAMMA0_52_L               (REG_DISP_TOP_GAMMA0_BASE + 0xa4)
#define REG_DISP_TOP_GAMMA0_53_L               (REG_DISP_TOP_GAMMA0_BASE + 0xa6)
#define REG_DISP_TOP_GAMMA0_54_L               (REG_DISP_TOP_GAMMA0_BASE + 0xa8)
#define REG_DISP_TOP_GAMMA0_55_L               (REG_DISP_TOP_GAMMA0_BASE + 0xaa)
#define REG_DISP_TOP_GAMMA0_56_L               (REG_DISP_TOP_GAMMA0_BASE + 0xac)
#define REG_DISP_TOP_GAMMA0_57_L               (REG_DISP_TOP_GAMMA0_BASE + 0xae)
#define REG_DISP_TOP_GAMMA0_58_L               (REG_DISP_TOP_GAMMA0_BASE + 0xb0)
#define REG_DISP_TOP_GAMMA0_59_L               (REG_DISP_TOP_GAMMA0_BASE + 0xb2)
#define REG_DISP_TOP_GAMMA0_5A_L               (REG_DISP_TOP_GAMMA0_BASE + 0xb4)
#define REG_DISP_TOP_GAMMA0_5B_L               (REG_DISP_TOP_GAMMA0_BASE + 0xb6)
#define REG_DISP_TOP_GAMMA0_5C_L               (REG_DISP_TOP_GAMMA0_BASE + 0xb8)
#define REG_DISP_TOP_GAMMA0_5D_L               (REG_DISP_TOP_GAMMA0_BASE + 0xba)
#define REG_DISP_TOP_GAMMA0_5E_L               (REG_DISP_TOP_GAMMA0_BASE + 0xbc)
#define REG_DISP_TOP_GAMMA0_5F_L               (REG_DISP_TOP_GAMMA0_BASE + 0xbe)
#define REG_DISP_TOP_GAMMA0_60_L               (REG_DISP_TOP_GAMMA0_BASE + 0xc0)
#define REG_DISP_TOP_GAMMA0_61_L               (REG_DISP_TOP_GAMMA0_BASE + 0xc2)
#define REG_DISP_TOP_GAMMA0_62_L               (REG_DISP_TOP_GAMMA0_BASE + 0xc4)
#define REG_DISP_TOP_GAMMA0_63_L               (REG_DISP_TOP_GAMMA0_BASE + 0xc6)
#define REG_DISP_TOP_GAMMA0_64_L               (REG_DISP_TOP_GAMMA0_BASE + 0xc8)
#define REG_DISP_TOP_GAMMA0_65_L               (REG_DISP_TOP_GAMMA0_BASE + 0xca)
#define REG_DISP_TOP_GAMMA0_66_L               (REG_DISP_TOP_GAMMA0_BASE + 0xcc)
#define REG_DISP_TOP_GAMMA0_67_L               (REG_DISP_TOP_GAMMA0_BASE + 0xce)
#define REG_DISP_TOP_GAMMA0_68_L               (REG_DISP_TOP_GAMMA0_BASE + 0xd0)
#define REG_DISP_TOP_GAMMA0_69_L               (REG_DISP_TOP_GAMMA0_BASE + 0xd2)
#define REG_DISP_TOP_GAMMA0_6A_L               (REG_DISP_TOP_GAMMA0_BASE + 0xd4)
#define REG_DISP_TOP_GAMMA0_6B_L               (REG_DISP_TOP_GAMMA0_BASE + 0xd6)
#define REG_DISP_TOP_GAMMA0_6C_L               (REG_DISP_TOP_GAMMA0_BASE + 0xd8)
#define REG_DISP_TOP_GAMMA0_6D_L               (REG_DISP_TOP_GAMMA0_BASE + 0xda)
#define REG_DISP_TOP_GAMMA0_6E_L               (REG_DISP_TOP_GAMMA0_BASE + 0xdc)
#define REG_DISP_TOP_GAMMA0_6F_L               (REG_DISP_TOP_GAMMA0_BASE + 0xde)
#define REG_DISP_TOP_GAMMA0_70_L               (REG_DISP_TOP_GAMMA0_BASE + 0xe0)
#define REG_DISP_TOP_GAMMA0_71_L               (REG_DISP_TOP_GAMMA0_BASE + 0xe2)
#define REG_DISP_TOP_GAMMA0_72_L               (REG_DISP_TOP_GAMMA0_BASE + 0xe4)
#define REG_DISP_TOP_GAMMA0_73_L               (REG_DISP_TOP_GAMMA0_BASE + 0xe6)
#define REG_DISP_TOP_GAMMA0_74_L               (REG_DISP_TOP_GAMMA0_BASE + 0xe8)
#define REG_DISP_TOP_GAMMA0_75_L               (REG_DISP_TOP_GAMMA0_BASE + 0xea)
#define REG_DISP_TOP_GAMMA0_76_L               (REG_DISP_TOP_GAMMA0_BASE + 0xec)
#define REG_DISP_TOP_GAMMA0_77_L               (REG_DISP_TOP_GAMMA0_BASE + 0xee)
#define REG_DISP_TOP_GAMMA0_78_L               (REG_DISP_TOP_GAMMA0_BASE + 0xf0)
#define REG_DISP_TOP_GAMMA0_79_L               (REG_DISP_TOP_GAMMA0_BASE + 0xf2)
#define REG_DISP_TOP_GAMMA0_7A_L               (REG_DISP_TOP_GAMMA0_BASE + 0xf4)
#define REG_DISP_TOP_GAMMA0_7B_L               (REG_DISP_TOP_GAMMA0_BASE + 0xf6)
#define REG_DISP_TOP_GAMMA0_7C_L               (REG_DISP_TOP_GAMMA0_BASE + 0xf8)
#define REG_DISP_TOP_GAMMA0_7D_L               (REG_DISP_TOP_GAMMA0_BASE + 0xfa)
#define REG_DISP_TOP_GAMMA0_7E_L               (REG_DISP_TOP_GAMMA0_BASE + 0xfc)
#define REG_DISP_TOP_GAMMA0_7F_L               (REG_DISP_TOP_GAMMA0_BASE + 0xfe)
#define REG_TVENC_00_L                         (REG_TVENC_BASE + 0x0)
#define REG_TVENC_01_L                         (REG_TVENC_BASE + 0x2)
#define REG_TVENC_02_L                         (REG_TVENC_BASE + 0x4)
#define REG_TVENC_03_L                         (REG_TVENC_BASE + 0x6)
#define REG_TVENC_04_L                         (REG_TVENC_BASE + 0x8)
#define REG_TVENC_05_L                         (REG_TVENC_BASE + 0xa)
#define REG_TVENC_06_L                         (REG_TVENC_BASE + 0xc)
#define REG_TVENC_07_L                         (REG_TVENC_BASE + 0xe)
#define REG_TVENC_08_L                         (REG_TVENC_BASE + 0x10)
#define REG_TVENC_09_L                         (REG_TVENC_BASE + 0x12)
#define REG_TVENC_0A_L                         (REG_TVENC_BASE + 0x14)
#define REG_TVENC_0B_L                         (REG_TVENC_BASE + 0x16)
#define REG_TVENC_0C_L                         (REG_TVENC_BASE + 0x18)
#define REG_TVENC_0D_L                         (REG_TVENC_BASE + 0x1a)
#define REG_TVENC_0E_L                         (REG_TVENC_BASE + 0x1c)
#define REG_TVENC_0F_L                         (REG_TVENC_BASE + 0x1e)
#define REG_TVENC_10_L                         (REG_TVENC_BASE + 0x20)
#define REG_TVENC_11_L                         (REG_TVENC_BASE + 0x22)
#define REG_TVENC_12_L                         (REG_TVENC_BASE + 0x24)
#define REG_TVENC_13_L                         (REG_TVENC_BASE + 0x26)
#define REG_TVENC_14_L                         (REG_TVENC_BASE + 0x28)
#define REG_TVENC_15_L                         (REG_TVENC_BASE + 0x2a)
#define REG_TVENC_16_L                         (REG_TVENC_BASE + 0x2c)
#define REG_TVENC_17_L                         (REG_TVENC_BASE + 0x2e)
#define REG_TVENC_18_L                         (REG_TVENC_BASE + 0x30)
#define REG_TVENC_19_L                         (REG_TVENC_BASE + 0x32)
#define REG_TVENC_1A_L                         (REG_TVENC_BASE + 0x34)
#define REG_TVENC_1B_L                         (REG_TVENC_BASE + 0x36)
#define REG_TVENC_1C_L                         (REG_TVENC_BASE + 0x38)
#define REG_TVENC_1D_L                         (REG_TVENC_BASE + 0x3a)
#define REG_TVENC_1E_L                         (REG_TVENC_BASE + 0x3c)
#define REG_TVENC_1F_L                         (REG_TVENC_BASE + 0x3e)
#define REG_TVENC_20_L                         (REG_TVENC_BASE + 0x40)
#define REG_TVENC_21_L                         (REG_TVENC_BASE + 0x42)
#define REG_TVENC_22_L                         (REG_TVENC_BASE + 0x44)
#define REG_TVENC_23_L                         (REG_TVENC_BASE + 0x46)
#define REG_TVENC_24_L                         (REG_TVENC_BASE + 0x48)
#define REG_TVENC_25_L                         (REG_TVENC_BASE + 0x4a)
#define REG_TVENC_26_L                         (REG_TVENC_BASE + 0x4c)
#define REG_TVENC_27_L                         (REG_TVENC_BASE + 0x4e)
#define REG_TVENC_28_L                         (REG_TVENC_BASE + 0x50)
#define REG_TVENC_29_L                         (REG_TVENC_BASE + 0x52)
#define REG_TVENC_2A_L                         (REG_TVENC_BASE + 0x54)
#define REG_TVENC_2B_L                         (REG_TVENC_BASE + 0x56)
#define REG_TVENC_2C_L                         (REG_TVENC_BASE + 0x58)
#define REG_TVENC_2D_L                         (REG_TVENC_BASE + 0x5a)
#define REG_TVENC_2E_L                         (REG_TVENC_BASE + 0x5c)
#define REG_TVENC_2F_L                         (REG_TVENC_BASE + 0x5e)
#define REG_TVENC_30_L                         (REG_TVENC_BASE + 0x60)
#define REG_TVENC_31_L                         (REG_TVENC_BASE + 0x62)
#define REG_TVENC_32_L                         (REG_TVENC_BASE + 0x64)
#define REG_TVENC_33_L                         (REG_TVENC_BASE + 0x66)
#define REG_TVENC_34_L                         (REG_TVENC_BASE + 0x68)
#define REG_TVENC_35_L                         (REG_TVENC_BASE + 0x6a)
#define REG_TVENC_36_L                         (REG_TVENC_BASE + 0x6c)
#define REG_TVENC_37_L                         (REG_TVENC_BASE + 0x6e)
#define REG_TVENC_38_L                         (REG_TVENC_BASE + 0x70)
#define REG_TVENC_39_L                         (REG_TVENC_BASE + 0x72)
#define REG_TVENC_3A_L                         (REG_TVENC_BASE + 0x74)
#define REG_TVENC_3B_L                         (REG_TVENC_BASE + 0x76)
// h003c, bit: 2
/* 0: pixel clock is same as DAC clk (54MHz)
1: pixel clock is half of DAC clk (27M)*/
#define offset_of_tvenc_reg_tve_dac_clk_div2_en (0x78)
#define mask_of_tvenc_reg_tve_dac_clk_div2_en   (0x4)
#define shift_of_tvenc_reg_tve_dac_clk_div2_en  (2)
#define TVENC_REG_TVE_DAC_CLK_DIV2_EN           (REG_TVENC_BASE + offset_of_tvenc_reg_tve_dac_clk_div2_en)
#define REG_TVENC_3C_L                          (TVENC_REG_TVE_DAC_CLK_DIV2_EN)
// h003c, bit: 3
/* 0:gated all clocks of TVE,
1: Turned on all clocks of TVE*/
#define offset_of_tvenc_reg_tve_clk_en (0x78)
#define mask_of_tvenc_reg_tve_clk_en   (0x8)
#define shift_of_tvenc_reg_tve_clk_en  (3)
#define TVENC_REG_TVE_CLK_EN           (REG_TVENC_BASE + offset_of_tvenc_reg_tve_clk_en)
#define REG_TVENC_3D_L                 (REG_TVENC_BASE + 0x7a)
// h003e, bit: 7
/* Background color of Y*/
#define offset_of_tvenc_reg_bg_y_color (0x7c)
#define mask_of_tvenc_reg_bg_y_color   (0xff)
#define shift_of_tvenc_reg_bg_y_color  (0)
#define TVENC_REG_BG_Y_COLOR           (REG_TVENC_BASE + offset_of_tvenc_reg_bg_y_color)
#define REG_TVENC_3E_L                 (TVENC_REG_BG_Y_COLOR)
// h003e, bit: 15
/* Background color of U*/
#define offset_of_tvenc_reg_bg_u_color (0x7c)
#define mask_of_tvenc_reg_bg_u_color   (0xff00)
#define shift_of_tvenc_reg_bg_u_color  (8)
#define TVENC_REG_BG_U_COLOR           (REG_TVENC_BASE + offset_of_tvenc_reg_bg_u_color)
// h003f, bit: 7
/* Background color of V*/
#define offset_of_tvenc_reg_bg_v_color (0x7e)
#define mask_of_tvenc_reg_bg_v_color   (0xff)
#define shift_of_tvenc_reg_bg_v_color  (0)
#define TVENC_REG_BG_V_COLOR           (REG_TVENC_BASE + offset_of_tvenc_reg_bg_v_color)
#define REG_TVENC_3F_L                 (TVENC_REG_BG_V_COLOR)
// h003f, bit: 8
/* Switch CbU/CrV position*/
#define offset_of_tvenc_reg_uv_inv_en (0x7e)
#define mask_of_tvenc_reg_uv_inv_en   (0x100)
#define shift_of_tvenc_reg_uv_inv_en  (8)
#define TVENC_REG_UV_INV_EN           (REG_TVENC_BASE + offset_of_tvenc_reg_uv_inv_en)
// h0040, bit: 0
/* Enable TV encoder*/
#define offset_of_tvenc_reg_tvif_en (0x80)
#define mask_of_tvenc_reg_tvif_en   (0x1)
#define shift_of_tvenc_reg_tvif_en  (0)
#define TVENC_REG_TVIF_EN           (REG_TVENC_BASE + offset_of_tvenc_reg_tvif_en)
#define REG_TVENC_40_L              (TVENC_REG_TVIF_EN)
// h0040, bit: 1
/* Enable RGB2YUV convertor*/
#define offset_of_tvenc_reg_tve_r2y_en (0x80)
#define mask_of_tvenc_reg_tve_r2y_en   (0x2)
#define shift_of_tvenc_reg_tve_r2y_en  (1)
#define TVENC_REG_TVE_R2Y_EN           (REG_TVENC_BASE + offset_of_tvenc_reg_tve_r2y_en)
// h0040, bit: 2
/* Change the position of field*/
#define offset_of_tvenc_reg_tve_position_en (0x80)
#define mask_of_tvenc_reg_tve_position_en   (0x4)
#define shift_of_tvenc_reg_tve_position_en  (2)
#define TVENC_REG_TVE_POSITION_EN           (REG_TVENC_BASE + offset_of_tvenc_reg_tve_position_en)
// h0040, bit: 4
/* 00: average, 01:cb0, cr0, 10:cb1, cr1, 11: No UV*/
#define offset_of_tvenc_reg_uv_422_mode (0x80)
#define mask_of_tvenc_reg_uv_422_mode   (0x18)
#define shift_of_tvenc_reg_uv_422_mode  (3)
#define TVENC_REG_UV_422_MODE           (REG_TVENC_BASE + offset_of_tvenc_reg_uv_422_mode)
// h0040, bit: 5
/* 0:NTSC, 1:PAL*/
#define offset_of_tvenc_reg_tve_pal_mode (0x80)
#define mask_of_tvenc_reg_tve_pal_mode   (0x20)
#define shift_of_tvenc_reg_tve_pal_mode  (5)
#define TVENC_REG_TVE_PAL_MODE           (REG_TVENC_BASE + offset_of_tvenc_reg_tve_pal_mode)
// h0040, bit: 6
/* 0:Keep constant data to DAC Y
1: Sent out data to DAC Y*/
#define offset_of_tvenc_reg_tve_dac_yout_en (0x80)
#define mask_of_tvenc_reg_tve_dac_yout_en   (0x40)
#define shift_of_tvenc_reg_tve_dac_yout_en  (6)
#define TVENC_REG_TVE_DAC_YOUT_EN           (REG_TVENC_BASE + offset_of_tvenc_reg_tve_dac_yout_en)
// h0040, bit: 7
/* 0:Keep constant data to DAC C
1: Sent out data to DAC C*/
#define offset_of_tvenc_reg_tve_dac_cout_en (0x80)
#define mask_of_tvenc_reg_tve_dac_cout_en   (0x80)
#define shift_of_tvenc_reg_tve_dac_cout_en  (7)
#define TVENC_REG_TVE_DAC_COUT_EN           (REG_TVENC_BASE + offset_of_tvenc_reg_tve_dac_cout_en)
// h0041, bit: 6
/* Pixel offset of source image, 2 pixel/unit*/
#define offset_of_tvenc_reg_src_x_offset (0x82)
#define mask_of_tvenc_reg_src_x_offset   (0x7e)
#define shift_of_tvenc_reg_src_x_offset  (1)
#define TVENC_REG_SRC_X_OFFSET           (REG_TVENC_BASE + offset_of_tvenc_reg_src_x_offset)
#define REG_TVENC_41_L                   (TVENC_REG_SRC_X_OFFSET)
// h0041, bit: 15
/* Line offset of source image*/
#define offset_of_tvenc_reg_src_y_offset (0x82)
#define mask_of_tvenc_reg_src_y_offset   (0xff00)
#define shift_of_tvenc_reg_src_y_offset  (8)
#define TVENC_REG_SRC_Y_OFFSET           (REG_TVENC_BASE + offset_of_tvenc_reg_src_y_offset)
// h0042, bit: 9
/* Clipped X width*/
#define offset_of_tvenc_reg_src_x_width (0x84)
#define mask_of_tvenc_reg_src_x_width   (0x3ff)
#define shift_of_tvenc_reg_src_x_width  (0)
#define TVENC_REG_SRC_X_WIDTH           (REG_TVENC_BASE + offset_of_tvenc_reg_src_x_width)
#define REG_TVENC_42_L                  (TVENC_REG_SRC_X_WIDTH)
// h0043, bit: 9
/* Clipped Y height*/
#define offset_of_tvenc_reg_src_y_height (0x86)
#define mask_of_tvenc_reg_src_y_height   (0x3ff)
#define shift_of_tvenc_reg_src_y_height  (0)
#define TVENC_REG_SRC_Y_HEIGHT           (REG_TVENC_BASE + offset_of_tvenc_reg_src_y_height)
#define REG_TVENC_43_L                   (TVENC_REG_SRC_Y_HEIGHT)
// h0044, bit: 6
/* Pixel offset on TV, 2 pixel/unit*/
#define offset_of_tvenc_reg_tve_x_offset (0x88)
#define mask_of_tvenc_reg_tve_x_offset   (0x7e)
#define shift_of_tvenc_reg_tve_x_offset  (1)
#define TVENC_REG_TVE_X_OFFSET           (REG_TVENC_BASE + offset_of_tvenc_reg_tve_x_offset)
#define REG_TVENC_44_L                   (TVENC_REG_TVE_X_OFFSET)
// h0044, bit: 11
/* Line offset of TV, count by field (-8~+7)*/
#define offset_of_tvenc_reg_tve_y_offset (0x88)
#define mask_of_tvenc_reg_tve_y_offset   (0xf00)
#define shift_of_tvenc_reg_tve_y_offset  (8)
#define TVENC_REG_TVE_Y_OFFSET           (REG_TVENC_BASE + offset_of_tvenc_reg_tve_y_offset)
#define REG_TVENC_45_L                   (REG_TVENC_BASE + 0x8a)
#define REG_TVENC_46_L                   (REG_TVENC_BASE + 0x8c)
#define REG_TVENC_47_L                   (REG_TVENC_BASE + 0x8e)
#define REG_TVENC_48_L                   (REG_TVENC_BASE + 0x90)
#define REG_TVENC_49_L                   (REG_TVENC_BASE + 0x92)
#define REG_TVENC_4A_L                   (REG_TVENC_BASE + 0x94)
#define REG_TVENC_4B_L                   (REG_TVENC_BASE + 0x96)
#define REG_TVENC_4C_L                   (REG_TVENC_BASE + 0x98)
#define REG_TVENC_4D_L                   (REG_TVENC_BASE + 0x9a)
#define REG_TVENC_4E_L                   (REG_TVENC_BASE + 0x9c)
#define REG_TVENC_4F_L                   (REG_TVENC_BASE + 0x9e)
#define REG_TVENC_50_L                   (REG_TVENC_BASE + 0xa0)
#define REG_TVENC_51_L                   (REG_TVENC_BASE + 0xa2)
#define REG_TVENC_52_L                   (REG_TVENC_BASE + 0xa4)
#define REG_TVENC_53_L                   (REG_TVENC_BASE + 0xa6)
#define REG_TVENC_54_L                   (REG_TVENC_BASE + 0xa8)
#define REG_TVENC_55_L                   (REG_TVENC_BASE + 0xaa)
#define REG_TVENC_56_L                   (REG_TVENC_BASE + 0xac)
#define REG_TVENC_57_L                   (REG_TVENC_BASE + 0xae)
#define REG_TVENC_58_L                   (REG_TVENC_BASE + 0xb0)
#define REG_TVENC_59_L                   (REG_TVENC_BASE + 0xb2)
#define REG_TVENC_5A_L                   (REG_TVENC_BASE + 0xb4)
#define REG_TVENC_5B_L                   (REG_TVENC_BASE + 0xb6)
#define REG_TVENC_5C_L                   (REG_TVENC_BASE + 0xb8)
#define REG_TVENC_5D_L                   (REG_TVENC_BASE + 0xba)
#define REG_TVENC_5E_L                   (REG_TVENC_BASE + 0xbc)
#define REG_TVENC_5F_L                   (REG_TVENC_BASE + 0xbe)
#define REG_TVENC_60_L                   (REG_TVENC_BASE + 0xc0)
#define REG_TVENC_61_L                   (REG_TVENC_BASE + 0xc2)
#define REG_TVENC_62_L                   (REG_TVENC_BASE + 0xc4)
#define REG_TVENC_63_L                   (REG_TVENC_BASE + 0xc6)
#define REG_TVENC_64_L                   (REG_TVENC_BASE + 0xc8)
#define REG_TVENC_65_L                   (REG_TVENC_BASE + 0xca)
#define REG_TVENC_66_L                   (REG_TVENC_BASE + 0xcc)
#define REG_TVENC_67_L                   (REG_TVENC_BASE + 0xce)
#define REG_TVENC_68_L                   (REG_TVENC_BASE + 0xd0)
#define REG_TVENC_69_L                   (REG_TVENC_BASE + 0xd2)
#define REG_TVENC_6A_L                   (REG_TVENC_BASE + 0xd4)
#define REG_TVENC_6B_L                   (REG_TVENC_BASE + 0xd6)
#define REG_TVENC_6C_L                   (REG_TVENC_BASE + 0xd8)
#define REG_TVENC_6D_L                   (REG_TVENC_BASE + 0xda)
#define REG_TVENC_6E_L                   (REG_TVENC_BASE + 0xdc)
#define REG_TVENC_6F_L                   (REG_TVENC_BASE + 0xde)
#define REG_TVENC_70_L                   (REG_TVENC_BASE + 0xe0)
#define REG_TVENC_71_L                   (REG_TVENC_BASE + 0xe2)
#define REG_TVENC_72_L                   (REG_TVENC_BASE + 0xe4)
#define REG_TVENC_73_L                   (REG_TVENC_BASE + 0xe6)
#define REG_TVENC_74_L                   (REG_TVENC_BASE + 0xe8)
#define REG_TVENC_75_L                   (REG_TVENC_BASE + 0xea)
#define REG_TVENC_76_L                   (REG_TVENC_BASE + 0xec)
#define REG_TVENC_77_L                   (REG_TVENC_BASE + 0xee)
#define REG_TVENC_78_L                   (REG_TVENC_BASE + 0xf0)
#define REG_TVENC_79_L                   (REG_TVENC_BASE + 0xf2)
#define REG_TVENC_7A_L                   (REG_TVENC_BASE + 0xf4)
#define REG_TVENC_7B_L                   (REG_TVENC_BASE + 0xf6)
#define REG_TVENC_7C_L                   (REG_TVENC_BASE + 0xf8)
#define REG_TVENC_7D_L                   (REG_TVENC_BASE + 0xfa)
#define REG_TVENC_7E_L                   (REG_TVENC_BASE + 0xfc)
#define REG_TVENC_7F_L                   (REG_TVENC_BASE + 0xfe)
// h0000, bit: 3
/* Reserved for HW ECO*/
#define offset_of_disp_top1_reg_sc_top_hw_reserve (0x0)
#define mask_of_disp_top1_reg_sc_top_hw_reserve   (0xf)
#define shift_of_disp_top1_reg_sc_top_hw_reserve  (0)
#define DISP_TOP1_REG_SC_TOP_HW_RESERVE           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_sc_top_hw_reserve)
#define REG_DISP_TOP1_00_L                        (DISP_TOP1_REG_SC_TOP_HW_RESERVE)
// h0000, bit: 7
/* Select source of test_bus*/
#define offset_of_disp_top1_reg_test_sel (0x0)
#define mask_of_disp_top1_reg_test_sel   (0xf0)
#define shift_of_disp_top1_reg_test_sel  (4)
#define DISP_TOP1_REG_TEST_SEL           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_test_sel)
// h0000, bit: 15
/* SW reset
[0] sw reset IP1
[2] sw reset register1
[3] sw reset interrupt1*/
#define offset_of_disp_top1_reg_sw_rst (0x0)
#define mask_of_disp_top1_reg_sw_rst   (0xff00)
#define shift_of_disp_top1_reg_sw_rst  (8)
#define DISP_TOP1_REG_SW_RST           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_sw_rst)
#define REG_DISP_TOP1_01_L             (REG_DISP_TOP1_BASE + 0x2)
// h0002, bit: 15
/* Status of interrupt, write 1 to clear*/
#define offset_of_disp_top1_reg_intr_status_grp_a (0x4)
#define mask_of_disp_top1_reg_intr_status_grp_a   (0xffff)
#define shift_of_disp_top1_reg_intr_status_grp_a  (0)
#define DISP_TOP1_REG_INTR_STATUS_GRP_A           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_intr_status_grp_a)
#define REG_DISP_TOP1_02_L                        (DISP_TOP1_REG_INTR_STATUS_GRP_A)
// h0003, bit: 15
/* Enable interrupt*/
#define offset_of_disp_top1_reg_intr_mask_grp_a (0x6)
#define mask_of_disp_top1_reg_intr_mask_grp_a   (0xffff)
#define shift_of_disp_top1_reg_intr_mask_grp_a  (0)
#define DISP_TOP1_REG_INTR_MASK_GRP_A           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_intr_mask_grp_a)
#define REG_DISP_TOP1_03_L                      (DISP_TOP1_REG_INTR_MASK_GRP_A)
// h0004, bit: 15
/* Original status of interrupt source*/
#define offset_of_disp_top1_reg_intr_raw_status_grp_a (0x8)
#define mask_of_disp_top1_reg_intr_raw_status_grp_a   (0xffff)
#define shift_of_disp_top1_reg_intr_raw_status_grp_a  (0)
#define DISP_TOP1_REG_INTR_RAW_STATUS_GRP_A           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_intr_raw_status_grp_a)
#define REG_DISP_TOP1_04_L                            (DISP_TOP1_REG_INTR_RAW_STATUS_GRP_A)
// h0005, bit: 15
/* force interrupt*/
#define offset_of_disp_top1_reg_intr_force_grp_a (0xa)
#define mask_of_disp_top1_reg_intr_force_grp_a   (0xffff)
#define shift_of_disp_top1_reg_intr_force_grp_a  (0)
#define DISP_TOP1_REG_INTR_FORCE_GRP_A           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_intr_force_grp_a)
#define REG_DISP_TOP1_05_L                       (DISP_TOP1_REG_INTR_FORCE_GRP_A)
#define REG_DISP_TOP1_06_L                       (REG_DISP_TOP1_BASE + 0xc)
// h0007, bit: 0
/* Select source of mace
0: from scaling patgen
1: from external video source*/
#define offset_of_disp_top1_reg_mace_src_sel (0xe)
#define mask_of_disp_top1_reg_mace_src_sel   (0x1)
#define shift_of_disp_top1_reg_mace_src_sel  (0)
#define DISP_TOP1_REG_MACE_SRC_SEL           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_mace_src_sel)
#define REG_DISP_TOP1_07_L                   (DISP_TOP1_REG_MACE_SRC_SEL)
// h0007, bit: 4
/* Select scaling patgen mode
3'h0: 1-pix gray ramp
3'h1: 16-pix gray ramp
3'h2: 32-pix gray ramp
3'h3: 64-pix gray ramp
3'h4: 16-pix gray stick
3'h5: 16-pix colorbar
3'h6: 32-pix colorbar
3'h7: 64-pix colorbar*/
#define offset_of_disp_top1_reg_patgen_mode (0xe)
#define mask_of_disp_top1_reg_patgen_mode   (0x1e)
#define shift_of_disp_top1_reg_patgen_mode  (1)
#define DISP_TOP1_REG_PATGEN_MODE           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_patgen_mode)
// h0007, bit: 8
/* Force window 0 no signal*/
#define offset_of_disp_top1_reg_force_w0_no_signal (0xe)
#define mask_of_disp_top1_reg_force_w0_no_signal   (0x100)
#define shift_of_disp_top1_reg_force_w0_no_signal  (8)
#define DISP_TOP1_REG_FORCE_W0_NO_SIGNAL           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_force_w0_no_signal)
// h0007, bit: 15
/* Force all windows no signal*/
#define offset_of_disp_top1_reg_force_all_no_signal (0xe)
#define mask_of_disp_top1_reg_force_all_no_signal   (0x8000)
#define shift_of_disp_top1_reg_force_all_no_signal  (15)
#define DISP_TOP1_REG_FORCE_ALL_NO_SIGNAL           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_force_all_no_signal)
// bigger than 16 bit case allh0008
#define offset_of_disp_top1_reg_bist_fail_status (0x10)
#define mask_of_disp_top1_reg_bist_fail_status   (0xffffffff)
#define shift_of_disp_top1_reg_bist_fail_status  (0)
#define DISP_TOP1_REG_BIST_FAIL_STATUS           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_bist_fail_status)
// h0008, bit: 15
/* Status of BIST fail*/
#define offset_of_disp_top1_reg_bist_fail_status_0 (0x10)
#define mask_of_disp_top1_reg_bist_fail_status_0   (0xffff)
#define shift_of_disp_top1_reg_bist_fail_status_0  (0)
#define DISP_TOP1_REG_BIST_FAIL_STATUS_0           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_bist_fail_status_0)
#define REG_DISP_TOP1_08_L                         (DISP_TOP1_REG_BIST_FAIL_STATUS_0)
// h0009, bit: 15
/* Status of BIST fail*/
#define offset_of_disp_top1_reg_bist_fail_status_1 (0x12)
#define mask_of_disp_top1_reg_bist_fail_status_1   (0xffff)
#define shift_of_disp_top1_reg_bist_fail_status_1  (0)
#define DISP_TOP1_REG_BIST_FAIL_STATUS_1           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_bist_fail_status_1)
#define REG_DISP_TOP1_09_L                         (DISP_TOP1_REG_BIST_FAIL_STATUS_1)
#define REG_DISP_TOP1_0A_L                         (REG_DISP_TOP1_BASE + 0x14)
#define REG_DISP_TOP1_0B_L                         (REG_DISP_TOP1_BASE + 0x16)
#define REG_DISP_TOP1_0C_L                         (REG_DISP_TOP1_BASE + 0x18)
#define REG_DISP_TOP1_0D_L                         (REG_DISP_TOP1_BASE + 0x1a)
#define REG_DISP_TOP1_0E_L                         (REG_DISP_TOP1_BASE + 0x1c)
#define REG_DISP_TOP1_0F_L                         (REG_DISP_TOP1_BASE + 0x1e)
// bigger than 16 bit case allh0010
#define offset_of_disp_top1_reg_syn_set (0x20)
#define mask_of_disp_top1_reg_syn_set   (0xffffff)
#define shift_of_disp_top1_reg_syn_set  (0)
#define DISP_TOP1_REG_SYN_SET           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_syn_set)
// h0010, bit: 15
/* Set of synthesizer, same value with disp_top0*/
#define offset_of_disp_top1_reg_syn_set_0 (0x20)
#define mask_of_disp_top1_reg_syn_set_0   (0xffff)
#define shift_of_disp_top1_reg_syn_set_0  (0)
#define DISP_TOP1_REG_SYN_SET_0           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_syn_set_0)
#define REG_DISP_TOP1_10_L                (DISP_TOP1_REG_SYN_SET_0)
// h0011, bit: 7
/* Set of synthesizer, same value with disp_top0*/
#define offset_of_disp_top1_reg_syn_set_1 (0x22)
#define mask_of_disp_top1_reg_syn_set_1   (0xff)
#define shift_of_disp_top1_reg_syn_set_1  (0)
#define DISP_TOP1_REG_SYN_SET_1           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_syn_set_1)
#define REG_DISP_TOP1_11_L                (DISP_TOP1_REG_SYN_SET_1)
#define REG_DISP_TOP1_12_L                (REG_DISP_TOP1_BASE + 0x24)
#define REG_DISP_TOP1_13_L                (REG_DISP_TOP1_BASE + 0x26)
#define REG_DISP_TOP1_14_L                (REG_DISP_TOP1_BASE + 0x28)
// h0015, bit: 0
/* Enable Frame PLL*/
#define offset_of_disp_top1_reg_frame_pll_en (0x2a)
#define mask_of_disp_top1_reg_frame_pll_en   (0x1)
#define shift_of_disp_top1_reg_frame_pll_en  (0)
#define DISP_TOP1_REG_FRAME_PLL_EN           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_frame_pll_en)
#define REG_DISP_TOP1_15_L                   (DISP_TOP1_REG_FRAME_PLL_EN)
// h0015, bit: 1
/* select disppll set src, lower priority than reg_fpll_ovs_sel
reg_fpll_ovs_sel = 1, disppll select fpll
reg_fpll_ovs_sel = 1, reg_fpll1_set_sel = 1, disppll select fpll1
otherwise 0.*/
#define offset_of_disp_top1_reg_fpll1_set_sel (0x2a)
#define mask_of_disp_top1_reg_fpll1_set_sel   (0x2)
#define shift_of_disp_top1_reg_fpll1_set_sel  (1)
#define DISP_TOP1_REG_FPLL1_SET_SEL           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_fpll1_set_sel)
// h0015, bit: 7
/* Reset Frame PLL*/
#define offset_of_disp_top1_reg_frame_pll_rst (0x2a)
#define mask_of_disp_top1_reg_frame_pll_rst   (0x80)
#define shift_of_disp_top1_reg_frame_pll_rst  (7)
#define DISP_TOP1_REG_FRAME_PLL_RST           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_frame_pll_rst)
#define REG_DISP_TOP1_16_L                    (REG_DISP_TOP1_BASE + 0x2c)
// h0017, bit: 14
/* Status of FPLL lost lock, Write 1 to clear*/
#define offset_of_disp_top1_reg_fpll_unlocked (0x2e)
#define mask_of_disp_top1_reg_fpll_unlocked   (0x4000)
#define shift_of_disp_top1_reg_fpll_unlocked  (14)
#define DISP_TOP1_REG_FPLL_UNLOCKED           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_fpll_unlocked)
#define REG_DISP_TOP1_17_L                    (DISP_TOP1_REG_FPLL_UNLOCKED)
// h0017, bit: 15
/* Status of FPLL lock*/
#define offset_of_disp_top1_reg_fpll_locked (0x2e)
#define mask_of_disp_top1_reg_fpll_locked   (0x8000)
#define shift_of_disp_top1_reg_fpll_locked  (15)
#define DISP_TOP1_REG_FPLL_LOCKED           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_fpll_locked)
// h0018, bit: 15
/* Phase error*/
#define offset_of_disp_top1_reg_raw_phase_err_rd (0x30)
#define mask_of_disp_top1_reg_raw_phase_err_rd   (0xffff)
#define shift_of_disp_top1_reg_raw_phase_err_rd  (0)
#define DISP_TOP1_REG_RAW_PHASE_ERR_RD           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_raw_phase_err_rd)
#define REG_DISP_TOP1_18_L                       (DISP_TOP1_REG_RAW_PHASE_ERR_RD)
// h0019, bit: 15
/* Frequency error*/
#define offset_of_disp_top1_reg_raw_freq_err_rd (0x32)
#define mask_of_disp_top1_reg_raw_freq_err_rd   (0xffff)
#define shift_of_disp_top1_reg_raw_freq_err_rd  (0)
#define DISP_TOP1_REG_RAW_FREQ_ERR_RD           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_raw_freq_err_rd)
#define REG_DISP_TOP1_19_L                      (DISP_TOP1_REG_RAW_FREQ_ERR_RD)
// h001a, bit: 11
/* Ratio of one clock, format 4.8*/
#define offset_of_disp_top1_reg_fpll_step_gain (0x34)
#define mask_of_disp_top1_reg_fpll_step_gain   (0xfff)
#define shift_of_disp_top1_reg_fpll_step_gain  (0)
#define DISP_TOP1_REG_FPLL_STEP_GAIN           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_fpll_step_gain)
#define REG_DISP_TOP1_1A_L                     (DISP_TOP1_REG_FPLL_STEP_GAIN)
// h001a, bit: 14
/* Counter of input frame is overflow*/
#define offset_of_disp_top1_reg_fin_freq_overflow (0x34)
#define mask_of_disp_top1_reg_fin_freq_overflow   (0x4000)
#define shift_of_disp_top1_reg_fin_freq_overflow  (14)
#define DISP_TOP1_REG_FIN_FREQ_OVERFLOW           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_fin_freq_overflow)
// h001a, bit: 15
/* Counter of output frame is overflow*/
#define offset_of_disp_top1_reg_fout_freq_overflow (0x34)
#define mask_of_disp_top1_reg_fout_freq_overflow   (0x8000)
#define shift_of_disp_top1_reg_fout_freq_overflow  (15)
#define DISP_TOP1_REG_FOUT_FREQ_OVERFLOW           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_fout_freq_overflow)
// h001b, bit: 3
/* Gain of phase,
0x7: 2x
0x8: 1x
0x9: ½ x*/
#define offset_of_disp_top1_reg_fpll_phase_gain (0x36)
#define mask_of_disp_top1_reg_fpll_phase_gain   (0xf)
#define shift_of_disp_top1_reg_fpll_phase_gain  (0)
#define DISP_TOP1_REG_FPLL_PHASE_GAIN           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_fpll_phase_gain)
#define REG_DISP_TOP1_1B_L                      (DISP_TOP1_REG_FPLL_PHASE_GAIN)
// h001b, bit: 7
/* Gain of frequency,
0x7: 2x
0x8: 1x
0x9: ½ x*/
#define offset_of_disp_top1_reg_fpll_freq_gain (0x36)
#define mask_of_disp_top1_reg_fpll_freq_gain   (0xf0)
#define shift_of_disp_top1_reg_fpll_freq_gain  (4)
#define DISP_TOP1_REG_FPLL_FREQ_GAIN           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_fpll_freq_gain)
// h001b, bit: 15
/* Threshold({reg_fpll_phase_lock_thd,2'b11}) to judge lock or not.*/
#define offset_of_disp_top1_reg_fpll_phase_lock_thd (0x36)
#define mask_of_disp_top1_reg_fpll_phase_lock_thd   (0xff00)
#define shift_of_disp_top1_reg_fpll_phase_lock_thd  (8)
#define DISP_TOP1_REG_FPLL_PHASE_LOCK_THD           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_fpll_phase_lock_thd)
// bigger than 16 bit case allh001c
#define offset_of_disp_top1_reg_fpll_abs_limit (0x38)
#define mask_of_disp_top1_reg_fpll_abs_limit   (0xfffff)
#define shift_of_disp_top1_reg_fpll_abs_limit  (0)
#define DISP_TOP1_REG_FPLL_ABS_LIMIT           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_fpll_abs_limit)
// h001c, bit: 15
/* Limit of frame PLL step*/
#define offset_of_disp_top1_reg_fpll_abs_limit_0 (0x38)
#define mask_of_disp_top1_reg_fpll_abs_limit_0   (0xffff)
#define shift_of_disp_top1_reg_fpll_abs_limit_0  (0)
#define DISP_TOP1_REG_FPLL_ABS_LIMIT_0           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_fpll_abs_limit_0)
#define REG_DISP_TOP1_1C_L                       (DISP_TOP1_REG_FPLL_ABS_LIMIT_0)
// h001d, bit: 3
/* Limit of frame PLL step*/
#define offset_of_disp_top1_reg_fpll_abs_limit_1 (0x3a)
#define mask_of_disp_top1_reg_fpll_abs_limit_1   (0xf)
#define shift_of_disp_top1_reg_fpll_abs_limit_1  (0)
#define DISP_TOP1_REG_FPLL_ABS_LIMIT_1           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_fpll_abs_limit_1)
#define REG_DISP_TOP1_1D_L                       (DISP_TOP1_REG_FPLL_ABS_LIMIT_1)
#define REG_DISP_TOP1_1E_L                       (REG_DISP_TOP1_BASE + 0x3c)
#define REG_DISP_TOP1_1F_L                       (REG_DISP_TOP1_BASE + 0x3e)
// h0020, bit: 3
/* hdmi clk freq / odclk freq = ?
4'h0 : 1x, 4'h1: 2x, ….. 4'hf : 16x*/
#define offset_of_disp_top1_reg_hdmi_to_odclk_rate (0x40)
#define mask_of_disp_top1_reg_hdmi_to_odclk_rate   (0xf)
#define shift_of_disp_top1_reg_hdmi_to_odclk_rate  (0)
#define DISP_TOP1_REG_HDMI_TO_ODCLK_RATE           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_hdmi_to_odclk_rate)
#define REG_DISP_TOP1_20_L                         (DISP_TOP1_REG_HDMI_TO_ODCLK_RATE)
// h0020, bit: 12
/* 1'b0: separate mop window, 1'b1:4 mop windows merge to path1*/
#define offset_of_disp_top1_reg_mop_win_merge (0x40)
#define mask_of_disp_top1_reg_mop_win_merge   (0x1000)
#define shift_of_disp_top1_reg_mop_win_merge  (12)
#define DISP_TOP1_REG_MOP_WIN_MERGE           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_mop_win_merge)
// h0020, bit: 13
/* OP2 -> 1'b0: osdb no swap(back). 1'b1:osdb swap to front*/
#define offset_of_disp_top1_reg_osdb_swap_en (0x40)
#define mask_of_disp_top1_reg_osdb_swap_en   (0x2000)
#define shift_of_disp_top1_reg_osdb_swap_en  (13)
#define DISP_TOP1_REG_OSDB_SWAP_EN           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_osdb_swap_en)
// h0020, bit: 15
/* [0]: 1'b0: mopg, 1'b1: moprot0
[1]: 1'b0: mops, 1'b1: moprot1*/
#define offset_of_disp_top1_reg_miu_moprot_mux (0x40)
#define mask_of_disp_top1_reg_miu_moprot_mux   (0xc000)
#define shift_of_disp_top1_reg_miu_moprot_mux  (14)
#define DISP_TOP1_REG_MIU_MOPROT_MUX           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_miu_moprot_mux)
#define REG_DISP_TOP1_21_L                     (REG_DISP_TOP1_BASE + 0x42)
#define REG_DISP_TOP1_22_L                     (REG_DISP_TOP1_BASE + 0x44)
#define REG_DISP_TOP1_23_L                     (REG_DISP_TOP1_BASE + 0x46)
#define REG_DISP_TOP1_24_L                     (REG_DISP_TOP1_BASE + 0x48)
#define REG_DISP_TOP1_25_L                     (REG_DISP_TOP1_BASE + 0x4a)
#define REG_DISP_TOP1_26_L                     (REG_DISP_TOP1_BASE + 0x4c)
#define REG_DISP_TOP1_27_L                     (REG_DISP_TOP1_BASE + 0x4e)
#define REG_DISP_TOP1_28_L                     (REG_DISP_TOP1_BASE + 0x50)
#define REG_DISP_TOP1_29_L                     (REG_DISP_TOP1_BASE + 0x52)
#define REG_DISP_TOP1_2A_L                     (REG_DISP_TOP1_BASE + 0x54)
#define REG_DISP_TOP1_2B_L                     (REG_DISP_TOP1_BASE + 0x56)
#define REG_DISP_TOP1_2C_L                     (REG_DISP_TOP1_BASE + 0x58)
#define REG_DISP_TOP1_2D_L                     (REG_DISP_TOP1_BASE + 0x5a)
#define REG_DISP_TOP1_2E_L                     (REG_DISP_TOP1_BASE + 0x5c)
#define REG_DISP_TOP1_2F_L                     (REG_DISP_TOP1_BASE + 0x5e)
#define REG_DISP_TOP1_30_L                     (REG_DISP_TOP1_BASE + 0x60)
#define REG_DISP_TOP1_31_L                     (REG_DISP_TOP1_BASE + 0x62)
#define REG_DISP_TOP1_32_L                     (REG_DISP_TOP1_BASE + 0x64)
#define REG_DISP_TOP1_33_L                     (REG_DISP_TOP1_BASE + 0x66)
#define REG_DISP_TOP1_34_L                     (REG_DISP_TOP1_BASE + 0x68)
#define REG_DISP_TOP1_35_L                     (REG_DISP_TOP1_BASE + 0x6a)
#define REG_DISP_TOP1_36_L                     (REG_DISP_TOP1_BASE + 0x6c)
#define REG_DISP_TOP1_37_L                     (REG_DISP_TOP1_BASE + 0x6e)
#define REG_DISP_TOP1_38_L                     (REG_DISP_TOP1_BASE + 0x70)
#define REG_DISP_TOP1_39_L                     (REG_DISP_TOP1_BASE + 0x72)
#define REG_DISP_TOP1_3A_L                     (REG_DISP_TOP1_BASE + 0x74)
#define REG_DISP_TOP1_3B_L                     (REG_DISP_TOP1_BASE + 0x76)
#define REG_DISP_TOP1_3C_L                     (REG_DISP_TOP1_BASE + 0x78)
#define REG_DISP_TOP1_3D_L                     (REG_DISP_TOP1_BASE + 0x7a)
#define REG_DISP_TOP1_3E_L                     (REG_DISP_TOP1_BASE + 0x7c)
#define REG_DISP_TOP1_3F_L                     (REG_DISP_TOP1_BASE + 0x7e)
// h0040, bit: 15
/* Status of CMDQ interrupt, write 1 to clear*/
#define offset_of_disp_top1_reg_cmdq_intr_status_grp_a (0x80)
#define mask_of_disp_top1_reg_cmdq_intr_status_grp_a   (0xffff)
#define shift_of_disp_top1_reg_cmdq_intr_status_grp_a  (0)
#define DISP_TOP1_REG_CMDQ_INTR_STATUS_GRP_A           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_cmdq_intr_status_grp_a)
#define REG_DISP_TOP1_40_L                             (DISP_TOP1_REG_CMDQ_INTR_STATUS_GRP_A)
// h0041, bit: 15
/* Enable CMDQ interrupt*/
#define offset_of_disp_top1_reg_cmdq_intr_mask_grp_a (0x82)
#define mask_of_disp_top1_reg_cmdq_intr_mask_grp_a   (0xffff)
#define shift_of_disp_top1_reg_cmdq_intr_mask_grp_a  (0)
#define DISP_TOP1_REG_CMDQ_INTR_MASK_GRP_A           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_cmdq_intr_mask_grp_a)
#define REG_DISP_TOP1_41_L                           (DISP_TOP1_REG_CMDQ_INTR_MASK_GRP_A)
// h0042, bit: 15
/* Original status of CMDQ interrupt source*/
#define offset_of_disp_top1_reg_cmdq_intr_raw_status_grp_a (0x84)
#define mask_of_disp_top1_reg_cmdq_intr_raw_status_grp_a   (0xffff)
#define shift_of_disp_top1_reg_cmdq_intr_raw_status_grp_a  (0)
#define DISP_TOP1_REG_CMDQ_INTR_RAW_STATUS_GRP_A \
    (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_cmdq_intr_raw_status_grp_a)
#define REG_DISP_TOP1_42_L (DISP_TOP1_REG_CMDQ_INTR_RAW_STATUS_GRP_A)
// h0043, bit: 15
/* force CMDQ interrupt*/
#define offset_of_disp_top1_reg_cmdq_intr_force_grp_a (0x86)
#define mask_of_disp_top1_reg_cmdq_intr_force_grp_a   (0xffff)
#define shift_of_disp_top1_reg_cmdq_intr_force_grp_a  (0)
#define DISP_TOP1_REG_CMDQ_INTR_FORCE_GRP_A           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_cmdq_intr_force_grp_a)
#define REG_DISP_TOP1_43_L                            (DISP_TOP1_REG_CMDQ_INTR_FORCE_GRP_A)
// h0044, bit: 15
/* debug hcnt*/
#define offset_of_disp_top1_reg_debug_hcnt (0x88)
#define mask_of_disp_top1_reg_debug_hcnt   (0xffff)
#define shift_of_disp_top1_reg_debug_hcnt  (0)
#define DISP_TOP1_REG_DEBUG_HCNT           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_debug_hcnt)
#define REG_DISP_TOP1_44_L                 (DISP_TOP1_REG_DEBUG_HCNT)
// h0045, bit: 15
/* debug vcnt*/
#define offset_of_disp_top1_reg_debug_vcnt (0x8a)
#define mask_of_disp_top1_reg_debug_vcnt   (0xffff)
#define shift_of_disp_top1_reg_debug_vcnt  (0)
#define DISP_TOP1_REG_DEBUG_VCNT           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_debug_vcnt)
#define REG_DISP_TOP1_45_L                 (DISP_TOP1_REG_DEBUG_VCNT)
// h0046, bit: 1
/* debug mode*/
#define offset_of_disp_top1_reg_debug_mode (0x8c)
#define mask_of_disp_top1_reg_debug_mode   (0x3)
#define shift_of_disp_top1_reg_debug_mode  (0)
#define DISP_TOP1_REG_DEBUG_MODE           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_debug_mode)
#define REG_DISP_TOP1_46_L                 (DISP_TOP1_REG_DEBUG_MODE)
#define REG_DISP_TOP1_47_L                 (REG_DISP_TOP1_BASE + 0x8e)
#define REG_DISP_TOP1_48_L                 (REG_DISP_TOP1_BASE + 0x90)
#define REG_DISP_TOP1_49_L                 (REG_DISP_TOP1_BASE + 0x92)
#define REG_DISP_TOP1_4A_L                 (REG_DISP_TOP1_BASE + 0x94)
#define REG_DISP_TOP1_4B_L                 (REG_DISP_TOP1_BASE + 0x96)
#define REG_DISP_TOP1_4C_L                 (REG_DISP_TOP1_BASE + 0x98)
#define REG_DISP_TOP1_4D_L                 (REG_DISP_TOP1_BASE + 0x9a)
#define REG_DISP_TOP1_4E_L                 (REG_DISP_TOP1_BASE + 0x9c)
#define REG_DISP_TOP1_4F_L                 (REG_DISP_TOP1_BASE + 0x9e)
// h0050, bit: 0
/* [0]reg_vip_bypass_en
[1] reg_disp_yc422*/
#define offset_of_disp_top1_reg_disp_yc422 (0xa0)
#define mask_of_disp_top1_reg_disp_yc422   (0x1)
#define shift_of_disp_top1_reg_disp_yc422  (0)
#define DISP_TOP1_REG_DISP_YC422           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_disp_yc422)
#define REG_DISP_TOP1_50_L                 (DISP_TOP1_REG_DISP_YC422)
// h0050, bit: 3
/* display 444 to 422 C filter*/
#define offset_of_disp_top1_reg_disp_c_filter (0xa0)
#define mask_of_disp_top1_reg_disp_c_filter   (0xe)
#define shift_of_disp_top1_reg_disp_c_filter  (1)
#define DISP_TOP1_REG_DISP_C_FILTER           (REG_DISP_TOP1_BASE + offset_of_disp_top1_reg_disp_c_filter)
#define REG_DISP_TOP1_51_L                    (REG_DISP_TOP1_BASE + 0xa2)
#define REG_DISP_TOP1_52_L                    (REG_DISP_TOP1_BASE + 0xa4)
#define REG_DISP_TOP1_53_L                    (REG_DISP_TOP1_BASE + 0xa6)
#define REG_DISP_TOP1_54_L                    (REG_DISP_TOP1_BASE + 0xa8)
#define REG_DISP_TOP1_55_L                    (REG_DISP_TOP1_BASE + 0xaa)
#define REG_DISP_TOP1_56_L                    (REG_DISP_TOP1_BASE + 0xac)
#define REG_DISP_TOP1_57_L                    (REG_DISP_TOP1_BASE + 0xae)
#define REG_DISP_TOP1_58_L                    (REG_DISP_TOP1_BASE + 0xb0)
#define REG_DISP_TOP1_59_L                    (REG_DISP_TOP1_BASE + 0xb2)
#define REG_DISP_TOP1_5A_L                    (REG_DISP_TOP1_BASE + 0xb4)
#define REG_DISP_TOP1_5B_L                    (REG_DISP_TOP1_BASE + 0xb6)
#define REG_DISP_TOP1_5C_L                    (REG_DISP_TOP1_BASE + 0xb8)
#define REG_DISP_TOP1_5D_L                    (REG_DISP_TOP1_BASE + 0xba)
#define REG_DISP_TOP1_5E_L                    (REG_DISP_TOP1_BASE + 0xbc)
#define REG_DISP_TOP1_5F_L                    (REG_DISP_TOP1_BASE + 0xbe)
#define REG_DISP_TOP1_60_L                    (REG_DISP_TOP1_BASE + 0xc0)
#define REG_DISP_TOP1_61_L                    (REG_DISP_TOP1_BASE + 0xc2)
#define REG_DISP_TOP1_62_L                    (REG_DISP_TOP1_BASE + 0xc4)
#define REG_DISP_TOP1_63_L                    (REG_DISP_TOP1_BASE + 0xc6)
#define REG_DISP_TOP1_64_L                    (REG_DISP_TOP1_BASE + 0xc8)
#define REG_DISP_TOP1_65_L                    (REG_DISP_TOP1_BASE + 0xca)
#define REG_DISP_TOP1_66_L                    (REG_DISP_TOP1_BASE + 0xcc)
#define REG_DISP_TOP1_67_L                    (REG_DISP_TOP1_BASE + 0xce)
#define REG_DISP_TOP1_68_L                    (REG_DISP_TOP1_BASE + 0xd0)
#define REG_DISP_TOP1_69_L                    (REG_DISP_TOP1_BASE + 0xd2)
#define REG_DISP_TOP1_6A_L                    (REG_DISP_TOP1_BASE + 0xd4)
#define REG_DISP_TOP1_6B_L                    (REG_DISP_TOP1_BASE + 0xd6)
#define REG_DISP_TOP1_6C_L                    (REG_DISP_TOP1_BASE + 0xd8)
#define REG_DISP_TOP1_6D_L                    (REG_DISP_TOP1_BASE + 0xda)
#define REG_DISP_TOP1_6E_L                    (REG_DISP_TOP1_BASE + 0xdc)
#define REG_DISP_TOP1_6F_L                    (REG_DISP_TOP1_BASE + 0xde)
#define REG_DISP_TOP1_70_L                    (REG_DISP_TOP1_BASE + 0xe0)
#define REG_DISP_TOP1_71_L                    (REG_DISP_TOP1_BASE + 0xe2)
#define REG_DISP_TOP1_72_L                    (REG_DISP_TOP1_BASE + 0xe4)
#define REG_DISP_TOP1_73_L                    (REG_DISP_TOP1_BASE + 0xe6)
#define REG_DISP_TOP1_74_L                    (REG_DISP_TOP1_BASE + 0xe8)
#define REG_DISP_TOP1_75_L                    (REG_DISP_TOP1_BASE + 0xea)
#define REG_DISP_TOP1_76_L                    (REG_DISP_TOP1_BASE + 0xec)
#define REG_DISP_TOP1_77_L                    (REG_DISP_TOP1_BASE + 0xee)
#define REG_DISP_TOP1_78_L                    (REG_DISP_TOP1_BASE + 0xf0)
#define REG_DISP_TOP1_79_L                    (REG_DISP_TOP1_BASE + 0xf2)
#define REG_DISP_TOP1_7A_L                    (REG_DISP_TOP1_BASE + 0xf4)
#define REG_DISP_TOP1_7B_L                    (REG_DISP_TOP1_BASE + 0xf6)
#define REG_DISP_TOP1_7C_L                    (REG_DISP_TOP1_BASE + 0xf8)
#define REG_DISP_TOP1_7D_L                    (REG_DISP_TOP1_BASE + 0xfa)
#define REG_DISP_TOP1_7E_L                    (REG_DISP_TOP1_BASE + 0xfc)
#define REG_DISP_TOP1_7F_L                    (REG_DISP_TOP1_BASE + 0xfe)
#define REG_DISP_TOP_OP21_00_L                (REG_DISP_TOP_OP21_BASE + 0x0)
#define REG_DISP_TOP_OP21_01_L                (REG_DISP_TOP_OP21_BASE + 0x2)
#define REG_DISP_TOP_OP21_02_L                (REG_DISP_TOP_OP21_BASE + 0x4)
#define REG_DISP_TOP_OP21_03_L                (REG_DISP_TOP_OP21_BASE + 0x6)
#define REG_DISP_TOP_OP21_04_L                (REG_DISP_TOP_OP21_BASE + 0x8)
#define REG_DISP_TOP_OP21_05_L                (REG_DISP_TOP_OP21_BASE + 0xa)
#define REG_DISP_TOP_OP21_06_L                (REG_DISP_TOP_OP21_BASE + 0xc)
#define REG_DISP_TOP_OP21_07_L                (REG_DISP_TOP_OP21_BASE + 0xe)
#define REG_DISP_TOP_OP21_08_L                (REG_DISP_TOP_OP21_BASE + 0x10)
#define REG_DISP_TOP_OP21_09_L                (REG_DISP_TOP_OP21_BASE + 0x12)
#define REG_DISP_TOP_OP21_0A_L                (REG_DISP_TOP_OP21_BASE + 0x14)
#define REG_DISP_TOP_OP21_0B_L                (REG_DISP_TOP_OP21_BASE + 0x16)
#define REG_DISP_TOP_OP21_0C_L                (REG_DISP_TOP_OP21_BASE + 0x18)
#define REG_DISP_TOP_OP21_0D_L                (REG_DISP_TOP_OP21_BASE + 0x1a)
#define REG_DISP_TOP_OP21_0E_L                (REG_DISP_TOP_OP21_BASE + 0x1c)
#define REG_DISP_TOP_OP21_0F_L                (REG_DISP_TOP_OP21_BASE + 0x1e)
// h0010, bit: 0
/* Using external pulse to reset HCOUNT/VCOUNT // v1 usage*/
#define offset_of_disp_top_op21_reg_tgen_ext_frm_reset_en (0x20)
#define mask_of_disp_top_op21_reg_tgen_ext_frm_reset_en   (0x1)
#define shift_of_disp_top_op21_reg_tgen_ext_frm_reset_en  (0)
#define DISP_TOP_OP21_REG_TGEN_EXT_FRM_RESET_EN \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_ext_frm_reset_en)
#define REG_DISP_TOP_OP21_10_L (DISP_TOP_OP21_REG_TGEN_EXT_FRM_RESET_EN)
// h0010, bit: 1
/* 0: reset immediatlly  // v1 usage
1: reset at line end*/
#define offset_of_disp_top_op21_reg_tgen_ext_frm_reset_mode (0x20)
#define mask_of_disp_top_op21_reg_tgen_ext_frm_reset_mode   (0x2)
#define shift_of_disp_top_op21_reg_tgen_ext_frm_reset_mode  (1)
#define DISP_TOP_OP21_REG_TGEN_EXT_FRM_RESET_MODE \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_ext_frm_reset_mode)
// h0010, bit: 2
/* Using external pulse to reset HCOUNT  // v1 usage*/
#define offset_of_disp_top_op21_reg_tgen_ext_hs_en (0x20)
#define mask_of_disp_top_op21_reg_tgen_ext_hs_en   (0x4)
#define shift_of_disp_top_op21_reg_tgen_ext_hs_en  (2)
#define DISP_TOP_OP21_REG_TGEN_EXT_HS_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_ext_hs_en)
// h0010, bit: 7
/* Reference source of FPLL  // lcd usage
00: End of VFDE
01: Start of VFDE
10: End of VSYNC
11: Startof VSYNC*/
#define offset_of_disp_top_op21_reg_tgen_fpll_ref_sel (0x20)
#define mask_of_disp_top_op21_reg_tgen_fpll_ref_sel   (0xc0)
#define shift_of_disp_top_op21_reg_tgen_fpll_ref_sel  (6)
#define DISP_TOP_OP21_REG_TGEN_FPLL_REF_SEL           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_fpll_ref_sel)
// h0010, bit: 15
/* Reference delayed PIPE to FPLL  // lcd usage*/
#define offset_of_disp_top_op21_reg_tgen_fpll_dly (0x20)
#define mask_of_disp_top_op21_reg_tgen_fpll_dly   (0xff00)
#define shift_of_disp_top_op21_reg_tgen_fpll_dly  (8)
#define DISP_TOP_OP21_REG_TGEN_FPLL_DLY           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_fpll_dly)
// h0011, bit: 12
/* H_TOTAL, total pixel minus 1*/
#define offset_of_disp_top_op21_reg_tgen_h_total (0x22)
#define mask_of_disp_top_op21_reg_tgen_h_total   (0x1fff)
#define shift_of_disp_top_op21_reg_tgen_h_total  (0)
#define DISP_TOP_OP21_REG_TGEN_H_TOTAL           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_h_total)
#define REG_DISP_TOP_OP21_11_L                   (DISP_TOP_OP21_REG_TGEN_H_TOTAL)
// h0012, bit: 12
/* V_TOTAL, total lines minus 1*/
#define offset_of_disp_top_op21_reg_tgen_v_total (0x24)
#define mask_of_disp_top_op21_reg_tgen_v_total   (0x1fff)
#define shift_of_disp_top_op21_reg_tgen_v_total  (0)
#define DISP_TOP_OP21_REG_TGEN_V_TOTAL           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_v_total)
#define REG_DISP_TOP_OP21_12_L                   (DISP_TOP_OP21_REG_TGEN_V_TOTAL)
// h0013, bit: 12
/* HSYNC start (included)*/
#define offset_of_disp_top_op21_reg_tgen_hs_start (0x26)
#define mask_of_disp_top_op21_reg_tgen_hs_start   (0x1fff)
#define shift_of_disp_top_op21_reg_tgen_hs_start  (0)
#define DISP_TOP_OP21_REG_TGEN_HS_START           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_hs_start)
#define REG_DISP_TOP_OP21_13_L                    (DISP_TOP_OP21_REG_TGEN_HS_START)
// h0014, bit: 12
/* HSYNC end (included)*/
#define offset_of_disp_top_op21_reg_tgen_hs_end (0x28)
#define mask_of_disp_top_op21_reg_tgen_hs_end   (0x1fff)
#define shift_of_disp_top_op21_reg_tgen_hs_end  (0)
#define DISP_TOP_OP21_REG_TGEN_HS_END           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_hs_end)
#define REG_DISP_TOP_OP21_14_L                  (DISP_TOP_OP21_REG_TGEN_HS_END)
// h0015, bit: 12
/* VSYNC start (included)*/
#define offset_of_disp_top_op21_reg_tgen_vs_start (0x2a)
#define mask_of_disp_top_op21_reg_tgen_vs_start   (0x1fff)
#define shift_of_disp_top_op21_reg_tgen_vs_start  (0)
#define DISP_TOP_OP21_REG_TGEN_VS_START           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_vs_start)
#define REG_DISP_TOP_OP21_15_L                    (DISP_TOP_OP21_REG_TGEN_VS_START)
// h0016, bit: 12
/* VSYNC end (included)*/
#define offset_of_disp_top_op21_reg_tgen_vs_end (0x2c)
#define mask_of_disp_top_op21_reg_tgen_vs_end   (0x1fff)
#define shift_of_disp_top_op21_reg_tgen_vs_end  (0)
#define DISP_TOP_OP21_REG_TGEN_VS_END           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_vs_end)
#define REG_DISP_TOP_OP21_16_L                  (DISP_TOP_OP21_REG_TGEN_VS_END)
// h0017, bit: 12
/* H frame de start (included)*/
#define offset_of_disp_top_op21_reg_tgen_hfde_start (0x2e)
#define mask_of_disp_top_op21_reg_tgen_hfde_start   (0x1fff)
#define shift_of_disp_top_op21_reg_tgen_hfde_start  (0)
#define DISP_TOP_OP21_REG_TGEN_HFDE_START           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_hfde_start)
#define REG_DISP_TOP_OP21_17_L                      (DISP_TOP_OP21_REG_TGEN_HFDE_START)
// h0018, bit: 12
/* H frame de end (included)*/
#define offset_of_disp_top_op21_reg_tgen_hfde_end (0x30)
#define mask_of_disp_top_op21_reg_tgen_hfde_end   (0x1fff)
#define shift_of_disp_top_op21_reg_tgen_hfde_end  (0)
#define DISP_TOP_OP21_REG_TGEN_HFDE_END           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_hfde_end)
#define REG_DISP_TOP_OP21_18_L                    (DISP_TOP_OP21_REG_TGEN_HFDE_END)
// h0019, bit: 12
/* V frame de start (included)*/
#define offset_of_disp_top_op21_reg_tgen_vfde_start (0x32)
#define mask_of_disp_top_op21_reg_tgen_vfde_start   (0x1fff)
#define shift_of_disp_top_op21_reg_tgen_vfde_start  (0)
#define DISP_TOP_OP21_REG_TGEN_VFDE_START           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_vfde_start)
#define REG_DISP_TOP_OP21_19_L                      (DISP_TOP_OP21_REG_TGEN_VFDE_START)
// h001a, bit: 12
/* V frame de end (included)*/
#define offset_of_disp_top_op21_reg_tgen_vfde_end (0x34)
#define mask_of_disp_top_op21_reg_tgen_vfde_end   (0x1fff)
#define shift_of_disp_top_op21_reg_tgen_vfde_end  (0)
#define DISP_TOP_OP21_REG_TGEN_VFDE_END           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_vfde_end)
#define REG_DISP_TOP_OP21_1A_L                    (DISP_TOP_OP21_REG_TGEN_VFDE_END)
// h001b, bit: 7
/* Frame no signal color B channel*/
#define offset_of_disp_top_op21_reg_fcolor_b (0x36)
#define mask_of_disp_top_op21_reg_fcolor_b   (0xff)
#define shift_of_disp_top_op21_reg_fcolor_b  (0)
#define DISP_TOP_OP21_REG_FCOLOR_B           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_fcolor_b)
#define REG_DISP_TOP_OP21_1B_L               (DISP_TOP_OP21_REG_FCOLOR_B)
// h001b, bit: 15
/* Frame no signal color G channel*/
#define offset_of_disp_top_op21_reg_fcolor_g (0x36)
#define mask_of_disp_top_op21_reg_fcolor_g   (0xff00)
#define shift_of_disp_top_op21_reg_fcolor_g  (8)
#define DISP_TOP_OP21_REG_FCOLOR_G           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_fcolor_g)
// h001c, bit: 7
/* Frame no signal color R channel*/
#define offset_of_disp_top_op21_reg_fcolor_r (0x38)
#define mask_of_disp_top_op21_reg_fcolor_r   (0xff)
#define shift_of_disp_top_op21_reg_fcolor_r  (0)
#define DISP_TOP_OP21_REG_FCOLOR_R           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_fcolor_r)
#define REG_DISP_TOP_OP21_1C_L               (DISP_TOP_OP21_REG_FCOLOR_R)
// h001c, bit: 15
/* Forced to show frame color*/
#define offset_of_disp_top_op21_reg_fcolor_force (0x38)
#define mask_of_disp_top_op21_reg_fcolor_force   (0x8000)
#define shift_of_disp_top_op21_reg_fcolor_force  (15)
#define DISP_TOP_OP21_REG_FCOLOR_FORCE           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_fcolor_force)
// h001d, bit: 12
/* Window 0 H de start (included)*/
#define offset_of_disp_top_op21_reg_tgen_w0_hde_start (0x3a)
#define mask_of_disp_top_op21_reg_tgen_w0_hde_start   (0x1fff)
#define shift_of_disp_top_op21_reg_tgen_w0_hde_start  (0)
#define DISP_TOP_OP21_REG_TGEN_W0_HDE_START           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_w0_hde_start)
#define REG_DISP_TOP_OP21_1D_L                        (DISP_TOP_OP21_REG_TGEN_W0_HDE_START)
// h001e, bit: 12
/* Window 0 H de end (included)*/
#define offset_of_disp_top_op21_reg_tgen_w0_hde_end (0x3c)
#define mask_of_disp_top_op21_reg_tgen_w0_hde_end   (0x1fff)
#define shift_of_disp_top_op21_reg_tgen_w0_hde_end  (0)
#define DISP_TOP_OP21_REG_TGEN_W0_HDE_END           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_w0_hde_end)
#define REG_DISP_TOP_OP21_1E_L                      (DISP_TOP_OP21_REG_TGEN_W0_HDE_END)
// h001f, bit: 12
/* Window 0 V de start (included)*/
#define offset_of_disp_top_op21_reg_tgen_w0_vde_start (0x3e)
#define mask_of_disp_top_op21_reg_tgen_w0_vde_start   (0x1fff)
#define shift_of_disp_top_op21_reg_tgen_w0_vde_start  (0)
#define DISP_TOP_OP21_REG_TGEN_W0_VDE_START           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_w0_vde_start)
#define REG_DISP_TOP_OP21_1F_L                        (DISP_TOP_OP21_REG_TGEN_W0_VDE_START)
// h0020, bit: 12
/* Window 0 V de end (included)*/
#define offset_of_disp_top_op21_reg_tgen_w0_vde_end (0x40)
#define mask_of_disp_top_op21_reg_tgen_w0_vde_end   (0x1fff)
#define shift_of_disp_top_op21_reg_tgen_w0_vde_end  (0)
#define DISP_TOP_OP21_REG_TGEN_W0_VDE_END           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_w0_vde_end)
#define REG_DISP_TOP_OP21_20_L                      (DISP_TOP_OP21_REG_TGEN_W0_VDE_END)
// h0021, bit: 7
/* Window 0 no signal color B channel*/
#define offset_of_disp_top_op21_reg_w0_fcolor_b (0x42)
#define mask_of_disp_top_op21_reg_w0_fcolor_b   (0xff)
#define shift_of_disp_top_op21_reg_w0_fcolor_b  (0)
#define DISP_TOP_OP21_REG_W0_FCOLOR_B           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_w0_fcolor_b)
#define REG_DISP_TOP_OP21_21_L                  (DISP_TOP_OP21_REG_W0_FCOLOR_B)
// h0021, bit: 15
/* Window 0 no signal color G channel*/
#define offset_of_disp_top_op21_reg_w0_fcolor_g (0x42)
#define mask_of_disp_top_op21_reg_w0_fcolor_g   (0xff00)
#define shift_of_disp_top_op21_reg_w0_fcolor_g  (8)
#define DISP_TOP_OP21_REG_W0_FCOLOR_G           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_w0_fcolor_g)
// h0022, bit: 7
/* Window 0 no signal color R channel*/
#define offset_of_disp_top_op21_reg_w0_fcolor_r (0x44)
#define mask_of_disp_top_op21_reg_w0_fcolor_r   (0xff)
#define shift_of_disp_top_op21_reg_w0_fcolor_r  (0)
#define DISP_TOP_OP21_REG_W0_FCOLOR_R           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_w0_fcolor_r)
#define REG_DISP_TOP_OP21_22_L                  (DISP_TOP_OP21_REG_W0_FCOLOR_R)
// h0022, bit: 15
/* Window 0 forced to show no signal color*/
#define offset_of_disp_top_op21_reg_w0_fcolor_force (0x44)
#define mask_of_disp_top_op21_reg_w0_fcolor_force   (0x8000)
#define shift_of_disp_top_op21_reg_w0_fcolor_force  (15)
#define DISP_TOP_OP21_REG_W0_FCOLOR_FORCE           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_w0_fcolor_force)
#define REG_DISP_TOP_OP21_23_L                      (REG_DISP_TOP_OP21_BASE + 0x46)
#define REG_DISP_TOP_OP21_24_L                      (REG_DISP_TOP_OP21_BASE + 0x48)
#define REG_DISP_TOP_OP21_25_L                      (REG_DISP_TOP_OP21_BASE + 0x4a)
#define REG_DISP_TOP_OP21_26_L                      (REG_DISP_TOP_OP21_BASE + 0x4c)
#define REG_DISP_TOP_OP21_27_L                      (REG_DISP_TOP_OP21_BASE + 0x4e)
#define REG_DISP_TOP_OP21_28_L                      (REG_DISP_TOP_OP21_BASE + 0x50)
#define REG_DISP_TOP_OP21_29_L                      (REG_DISP_TOP_OP21_BASE + 0x52)
#define REG_DISP_TOP_OP21_2A_L                      (REG_DISP_TOP_OP21_BASE + 0x54)
#define REG_DISP_TOP_OP21_2B_L                      (REG_DISP_TOP_OP21_BASE + 0x56)
#define REG_DISP_TOP_OP21_2C_L                      (REG_DISP_TOP_OP21_BASE + 0x58)
#define REG_DISP_TOP_OP21_2D_L                      (REG_DISP_TOP_OP21_BASE + 0x5a)
// h002e, bit: 0
/* Reference the unit of delayed PIPE to FPLL // lcd usage*/
#define offset_of_disp_top_op21_reg_tgen_fpll_dly_unit (0x5c)
#define mask_of_disp_top_op21_reg_tgen_fpll_dly_unit   (0x1)
#define shift_of_disp_top_op21_reg_tgen_fpll_dly_unit  (0)
#define DISP_TOP_OP21_REG_TGEN_FPLL_DLY_UNIT           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tgen_fpll_dly_unit)
#define REG_DISP_TOP_OP21_2E_L                         (DISP_TOP_OP21_REG_TGEN_FPLL_DLY_UNIT)
// h002f, bit: 15
/* time stamp read register*/
#define offset_of_disp_top_op21_reg_time_stamp_dp (0x5e)
#define mask_of_disp_top_op21_reg_time_stamp_dp   (0xffff)
#define shift_of_disp_top_op21_reg_time_stamp_dp  (0)
#define DISP_TOP_OP21_REG_TIME_STAMP_DP           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_time_stamp_dp)
#define REG_DISP_TOP_OP21_2F_L                    (DISP_TOP_OP21_REG_TIME_STAMP_DP)
// h0030, bit: 0
/* Enable operation of  3X3 matrix for color management*/
#define offset_of_disp_top_op21_reg_cm3x3_en (0x60)
#define mask_of_disp_top_op21_reg_cm3x3_en   (0x1)
#define shift_of_disp_top_op21_reg_cm3x3_en  (0)
#define DISP_TOP_OP21_REG_CM3X3_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_en)
#define REG_DISP_TOP_OP21_30_L               (DISP_TOP_OP21_REG_CM3X3_EN)
// h0030, bit: 1
/* For data R
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op21_reg_cm3x3_in_range_1 (0x60)
#define mask_of_disp_top_op21_reg_cm3x3_in_range_1   (0x2)
#define shift_of_disp_top_op21_reg_cm3x3_in_range_1  (1)
#define DISP_TOP_OP21_REG_CM3X3_IN_RANGE_1           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_in_range_1)
// h0030, bit: 2
/* For data G
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op21_reg_cm3x3_in_range_2 (0x60)
#define mask_of_disp_top_op21_reg_cm3x3_in_range_2   (0x4)
#define shift_of_disp_top_op21_reg_cm3x3_in_range_2  (2)
#define DISP_TOP_OP21_REG_CM3X3_IN_RANGE_2           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_in_range_2)
// h0030, bit: 3
/* For data B
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op21_reg_cm3x3_in_range_3 (0x60)
#define mask_of_disp_top_op21_reg_cm3x3_in_range_3   (0x8)
#define shift_of_disp_top_op21_reg_cm3x3_in_range_3  (3)
#define DISP_TOP_OP21_REG_CM3X3_IN_RANGE_3           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_in_range_3)
// h0030, bit: 8
/* Enable brightness adjustment*/
#define offset_of_disp_top_op21_reg_bri_en (0x60)
#define mask_of_disp_top_op21_reg_bri_en   (0x100)
#define shift_of_disp_top_op21_reg_bri_en  (8)
#define DISP_TOP_OP21_REG_BRI_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_bri_en)
// h0030, bit: 9
/* Rounding with pseudo noise*/
#define offset_of_disp_top_op21_reg_bri_noise_round (0x60)
#define mask_of_disp_top_op21_reg_bri_noise_round   (0x200)
#define shift_of_disp_top_op21_reg_bri_noise_round  (9)
#define DISP_TOP_OP21_REG_BRI_NOISE_ROUND           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_bri_noise_round)
// h0031, bit: 12
/* Coefficient (1,1) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_coef11 (0x62)
#define mask_of_disp_top_op21_reg_cm3x3_coef11   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_coef11  (0)
#define DISP_TOP_OP21_REG_CM3X3_COEF11           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_coef11)
#define REG_DISP_TOP_OP21_31_L                   (DISP_TOP_OP21_REG_CM3X3_COEF11)
// h0032, bit: 12
/* Coefficient (1,2) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_coef12 (0x64)
#define mask_of_disp_top_op21_reg_cm3x3_coef12   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_coef12  (0)
#define DISP_TOP_OP21_REG_CM3X3_COEF12           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_coef12)
#define REG_DISP_TOP_OP21_32_L                   (DISP_TOP_OP21_REG_CM3X3_COEF12)
// h0033, bit: 12
/* Coefficient (1,3) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_coef13 (0x66)
#define mask_of_disp_top_op21_reg_cm3x3_coef13   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_coef13  (0)
#define DISP_TOP_OP21_REG_CM3X3_COEF13           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_coef13)
#define REG_DISP_TOP_OP21_33_L                   (DISP_TOP_OP21_REG_CM3X3_COEF13)
// h0034, bit: 12
/* Coefficient (2,1) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_coef21 (0x68)
#define mask_of_disp_top_op21_reg_cm3x3_coef21   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_coef21  (0)
#define DISP_TOP_OP21_REG_CM3X3_COEF21           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_coef21)
#define REG_DISP_TOP_OP21_34_L                   (DISP_TOP_OP21_REG_CM3X3_COEF21)
// h0035, bit: 12
/* Coefficient (2,2) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_coef22 (0x6a)
#define mask_of_disp_top_op21_reg_cm3x3_coef22   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_coef22  (0)
#define DISP_TOP_OP21_REG_CM3X3_COEF22           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_coef22)
#define REG_DISP_TOP_OP21_35_L                   (DISP_TOP_OP21_REG_CM3X3_COEF22)
// h0036, bit: 12
/* Coefficient (2,3) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_coef23 (0x6c)
#define mask_of_disp_top_op21_reg_cm3x3_coef23   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_coef23  (0)
#define DISP_TOP_OP21_REG_CM3X3_COEF23           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_coef23)
#define REG_DISP_TOP_OP21_36_L                   (DISP_TOP_OP21_REG_CM3X3_COEF23)
// h0037, bit: 12
/* Coefficient (3,1) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_coef31 (0x6e)
#define mask_of_disp_top_op21_reg_cm3x3_coef31   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_coef31  (0)
#define DISP_TOP_OP21_REG_CM3X3_COEF31           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_coef31)
#define REG_DISP_TOP_OP21_37_L                   (DISP_TOP_OP21_REG_CM3X3_COEF31)
// h0038, bit: 12
/* Coefficient (3,2) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_coef32 (0x70)
#define mask_of_disp_top_op21_reg_cm3x3_coef32   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_coef32  (0)
#define DISP_TOP_OP21_REG_CM3X3_COEF32           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_coef32)
#define REG_DISP_TOP_OP21_38_L                   (DISP_TOP_OP21_REG_CM3X3_COEF32)
// h0039, bit: 12
/* Coefficient (3,3) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_coef33 (0x72)
#define mask_of_disp_top_op21_reg_cm3x3_coef33   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_coef33  (0)
#define DISP_TOP_OP21_REG_CM3X3_COEF33           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_coef33)
#define REG_DISP_TOP_OP21_39_L                   (DISP_TOP_OP21_REG_CM3X3_COEF33)
// h003a, bit: 7
/* Offset of R*/
#define offset_of_disp_top_op21_reg_bri_r (0x74)
#define mask_of_disp_top_op21_reg_bri_r   (0xff)
#define shift_of_disp_top_op21_reg_bri_r  (0)
#define DISP_TOP_OP21_REG_BRI_R           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_bri_r)
#define REG_DISP_TOP_OP21_3A_L            (DISP_TOP_OP21_REG_BRI_R)
// h003a, bit: 15
/* Offset of G*/
#define offset_of_disp_top_op21_reg_bri_g (0x74)
#define mask_of_disp_top_op21_reg_bri_g   (0xff00)
#define shift_of_disp_top_op21_reg_bri_g  (8)
#define DISP_TOP_OP21_REG_BRI_G           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_bri_g)
// h003b, bit: 7
/* Offset of B*/
#define offset_of_disp_top_op21_reg_bri_b (0x76)
#define mask_of_disp_top_op21_reg_bri_b   (0xff)
#define shift_of_disp_top_op21_reg_bri_b  (0)
#define DISP_TOP_OP21_REG_BRI_B           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_bri_b)
#define REG_DISP_TOP_OP21_3B_L            (DISP_TOP_OP21_REG_BRI_B)
// h003c, bit: 0
/* Enable operation of  3X3 matrix for color management*/
#define offset_of_disp_top_op21_reg_cm3x3_2_en (0x78)
#define mask_of_disp_top_op21_reg_cm3x3_2_en   (0x1)
#define shift_of_disp_top_op21_reg_cm3x3_2_en  (0)
#define DISP_TOP_OP21_REG_CM3X3_2_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_2_en)
#define REG_DISP_TOP_OP21_3C_L                 (DISP_TOP_OP21_REG_CM3X3_2_EN)
// h003c, bit: 1
/* For data R
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op21_reg_cm3x3_2_in_range_1 (0x78)
#define mask_of_disp_top_op21_reg_cm3x3_2_in_range_1   (0x2)
#define shift_of_disp_top_op21_reg_cm3x3_2_in_range_1  (1)
#define DISP_TOP_OP21_REG_CM3X3_2_IN_RANGE_1           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_2_in_range_1)
// h003c, bit: 2
/* For data G
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op21_reg_cm3x3_2_in_range_2 (0x78)
#define mask_of_disp_top_op21_reg_cm3x3_2_in_range_2   (0x4)
#define shift_of_disp_top_op21_reg_cm3x3_2_in_range_2  (2)
#define DISP_TOP_OP21_REG_CM3X3_2_IN_RANGE_2           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_2_in_range_2)
// h003c, bit: 3
/* For data B
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op21_reg_cm3x3_2_in_range_3 (0x78)
#define mask_of_disp_top_op21_reg_cm3x3_2_in_range_3   (0x8)
#define shift_of_disp_top_op21_reg_cm3x3_2_in_range_3  (3)
#define DISP_TOP_OP21_REG_CM3X3_2_IN_RANGE_3           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_2_in_range_3)
// h003c, bit: 8
/* Enable brightness adjustment*/
#define offset_of_disp_top_op21_reg_bri_2_en (0x78)
#define mask_of_disp_top_op21_reg_bri_2_en   (0x100)
#define shift_of_disp_top_op21_reg_bri_2_en  (8)
#define DISP_TOP_OP21_REG_BRI_2_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_bri_2_en)
// h003c, bit: 9
/* Rounding with pseudo noise*/
#define offset_of_disp_top_op21_reg_bri_2_noise_round (0x78)
#define mask_of_disp_top_op21_reg_bri_2_noise_round   (0x200)
#define shift_of_disp_top_op21_reg_bri_2_noise_round  (9)
#define DISP_TOP_OP21_REG_BRI_2_NOISE_ROUND           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_bri_2_noise_round)
// h003d, bit: 12
/* Coefficient (1,1) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_2_coef11 (0x7a)
#define mask_of_disp_top_op21_reg_cm3x3_2_coef11   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_2_coef11  (0)
#define DISP_TOP_OP21_REG_CM3X3_2_COEF11           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_2_coef11)
#define REG_DISP_TOP_OP21_3D_L                     (DISP_TOP_OP21_REG_CM3X3_2_COEF11)
// h003e, bit: 12
/* Coefficient (1,2) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_2_coef12 (0x7c)
#define mask_of_disp_top_op21_reg_cm3x3_2_coef12   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_2_coef12  (0)
#define DISP_TOP_OP21_REG_CM3X3_2_COEF12           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_2_coef12)
#define REG_DISP_TOP_OP21_3E_L                     (DISP_TOP_OP21_REG_CM3X3_2_COEF12)
// h003f, bit: 12
/* Coefficient (1,3) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_2_coef13 (0x7e)
#define mask_of_disp_top_op21_reg_cm3x3_2_coef13   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_2_coef13  (0)
#define DISP_TOP_OP21_REG_CM3X3_2_COEF13           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_2_coef13)
#define REG_DISP_TOP_OP21_3F_L                     (DISP_TOP_OP21_REG_CM3X3_2_COEF13)
// h0040, bit: 12
/* Coefficient (2,1) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_2_coef21 (0x80)
#define mask_of_disp_top_op21_reg_cm3x3_2_coef21   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_2_coef21  (0)
#define DISP_TOP_OP21_REG_CM3X3_2_COEF21           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_2_coef21)
#define REG_DISP_TOP_OP21_40_L                     (DISP_TOP_OP21_REG_CM3X3_2_COEF21)
// h0041, bit: 12
/* Coefficient (2,2) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_2_coef22 (0x82)
#define mask_of_disp_top_op21_reg_cm3x3_2_coef22   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_2_coef22  (0)
#define DISP_TOP_OP21_REG_CM3X3_2_COEF22           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_2_coef22)
#define REG_DISP_TOP_OP21_41_L                     (DISP_TOP_OP21_REG_CM3X3_2_COEF22)
// h0042, bit: 12
/* Coefficient (2,3) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_2_coef23 (0x84)
#define mask_of_disp_top_op21_reg_cm3x3_2_coef23   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_2_coef23  (0)
#define DISP_TOP_OP21_REG_CM3X3_2_COEF23           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_2_coef23)
#define REG_DISP_TOP_OP21_42_L                     (DISP_TOP_OP21_REG_CM3X3_2_COEF23)
// h0043, bit: 12
/* Coefficient (3,1) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_2_coef31 (0x86)
#define mask_of_disp_top_op21_reg_cm3x3_2_coef31   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_2_coef31  (0)
#define DISP_TOP_OP21_REG_CM3X3_2_COEF31           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_2_coef31)
#define REG_DISP_TOP_OP21_43_L                     (DISP_TOP_OP21_REG_CM3X3_2_COEF31)
// h0044, bit: 12
/* Coefficient (3,2) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_2_coef32 (0x88)
#define mask_of_disp_top_op21_reg_cm3x3_2_coef32   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_2_coef32  (0)
#define DISP_TOP_OP21_REG_CM3X3_2_COEF32           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_2_coef32)
#define REG_DISP_TOP_OP21_44_L                     (DISP_TOP_OP21_REG_CM3X3_2_COEF32)
// h0045, bit: 12
/* Coefficient (3,3) of 3X3 matrix*/
#define offset_of_disp_top_op21_reg_cm3x3_2_coef33 (0x8a)
#define mask_of_disp_top_op21_reg_cm3x3_2_coef33   (0x1fff)
#define shift_of_disp_top_op21_reg_cm3x3_2_coef33  (0)
#define DISP_TOP_OP21_REG_CM3X3_2_COEF33           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_cm3x3_2_coef33)
#define REG_DISP_TOP_OP21_45_L                     (DISP_TOP_OP21_REG_CM3X3_2_COEF33)
// h0046, bit: 7
/* Offset of R*/
#define offset_of_disp_top_op21_reg_bri_2_r (0x8c)
#define mask_of_disp_top_op21_reg_bri_2_r   (0xff)
#define shift_of_disp_top_op21_reg_bri_2_r  (0)
#define DISP_TOP_OP21_REG_BRI_2_R           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_bri_2_r)
#define REG_DISP_TOP_OP21_46_L              (DISP_TOP_OP21_REG_BRI_2_R)
// h0046, bit: 15
/* Offset of G*/
#define offset_of_disp_top_op21_reg_bri_2_g (0x8c)
#define mask_of_disp_top_op21_reg_bri_2_g   (0xff00)
#define shift_of_disp_top_op21_reg_bri_2_g  (8)
#define DISP_TOP_OP21_REG_BRI_2_G           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_bri_2_g)
// h0047, bit: 7
/* Offset of B*/
#define offset_of_disp_top_op21_reg_bri_2_b (0x8e)
#define mask_of_disp_top_op21_reg_bri_2_b   (0xff)
#define shift_of_disp_top_op21_reg_bri_2_b  (0)
#define DISP_TOP_OP21_REG_BRI_2_B           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_bri_2_b)
#define REG_DISP_TOP_OP21_47_L              (DISP_TOP_OP21_REG_BRI_2_B)
// h0048, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram_thrd_0 (0x90)
#define mask_of_disp_top_op21_reg_histogram_thrd_0   (0xffff)
#define shift_of_disp_top_op21_reg_histogram_thrd_0  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM_THRD_0           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram_thrd_0)
#define REG_DISP_TOP_OP21_48_L                       (DISP_TOP_OP21_REG_HISTOGRAM_THRD_0)
// h0049, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram_thrd_1 (0x92)
#define mask_of_disp_top_op21_reg_histogram_thrd_1   (0xffff)
#define shift_of_disp_top_op21_reg_histogram_thrd_1  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM_THRD_1           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram_thrd_1)
#define REG_DISP_TOP_OP21_49_L                       (DISP_TOP_OP21_REG_HISTOGRAM_THRD_1)
// h004a, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram_thrd_2 (0x94)
#define mask_of_disp_top_op21_reg_histogram_thrd_2   (0xffff)
#define shift_of_disp_top_op21_reg_histogram_thrd_2  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM_THRD_2           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram_thrd_2)
#define REG_DISP_TOP_OP21_4A_L                       (DISP_TOP_OP21_REG_HISTOGRAM_THRD_2)
// h004b, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram_thrd_3 (0x96)
#define mask_of_disp_top_op21_reg_histogram_thrd_3   (0xffff)
#define shift_of_disp_top_op21_reg_histogram_thrd_3  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM_THRD_3           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram_thrd_3)
#define REG_DISP_TOP_OP21_4B_L                       (DISP_TOP_OP21_REG_HISTOGRAM_THRD_3)
// h004c, bit: 3
/* */
#define offset_of_disp_top_op21_reg_yavg_alpha (0x98)
#define mask_of_disp_top_op21_reg_yavg_alpha   (0xf)
#define shift_of_disp_top_op21_reg_yavg_alpha  (0)
#define DISP_TOP_OP21_REG_YAVG_ALPHA           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_yavg_alpha)
#define REG_DISP_TOP_OP21_4C_L                 (DISP_TOP_OP21_REG_YAVG_ALPHA)
// h004c, bit: 7
/* */
#define offset_of_disp_top_op21_reg_fstable (0x98)
#define mask_of_disp_top_op21_reg_fstable   (0xf0)
#define shift_of_disp_top_op21_reg_fstable  (4)
#define DISP_TOP_OP21_REG_FSTABLE           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_fstable)
// h004c, bit: 8
/* */
#define offset_of_disp_top_op21_reg_dcr_en (0x98)
#define mask_of_disp_top_op21_reg_dcr_en   (0x100)
#define shift_of_disp_top_op21_reg_dcr_en  (8)
#define DISP_TOP_OP21_REG_DCR_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_dcr_en)
// h004c, bit: 9
/* */
#define offset_of_disp_top_op21_reg_dlc_gain_lim_en (0x98)
#define mask_of_disp_top_op21_reg_dlc_gain_lim_en   (0x200)
#define shift_of_disp_top_op21_reg_dlc_gain_lim_en  (9)
#define DISP_TOP_OP21_REG_DLC_GAIN_LIM_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_dlc_gain_lim_en)
// h004c, bit: 10
/* */
#define offset_of_disp_top_op21_reg_ygain_hist_lim_en (0x98)
#define mask_of_disp_top_op21_reg_ygain_hist_lim_en   (0x400)
#define shift_of_disp_top_op21_reg_ygain_hist_lim_en  (10)
#define DISP_TOP_OP21_REG_YGAIN_HIST_LIM_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_ygain_hist_lim_en)
// h004c, bit: 11
/* */
#define offset_of_disp_top_op21_reg_yout_rgb_en (0x98)
#define mask_of_disp_top_op21_reg_yout_rgb_en   (0x800)
#define shift_of_disp_top_op21_reg_yout_rgb_en  (11)
#define DISP_TOP_OP21_REG_YOUT_RGB_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_yout_rgb_en)
// h004c, bit: 12
/* */
#define offset_of_disp_top_op21_reg_hist_121_en (0x98)
#define mask_of_disp_top_op21_reg_hist_121_en   (0x1000)
#define shift_of_disp_top_op21_reg_hist_121_en  (12)
#define DISP_TOP_OP21_REG_HIST_121_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_hist_121_en)
// h004c, bit: 13
/* */
#define offset_of_disp_top_op21_reg_hist_rgb_en (0x98)
#define mask_of_disp_top_op21_reg_hist_rgb_en   (0x2000)
#define shift_of_disp_top_op21_reg_hist_rgb_en  (13)
#define DISP_TOP_OP21_REG_HIST_RGB_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_hist_rgb_en)
// h004c, bit: 14
/* */
#define offset_of_disp_top_op21_reg_yavg_lim_en (0x98)
#define mask_of_disp_top_op21_reg_yavg_lim_en   (0x4000)
#define shift_of_disp_top_op21_reg_yavg_lim_en  (14)
#define DISP_TOP_OP21_REG_YAVG_LIM_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_yavg_lim_en)
// h004c, bit: 15
/* */
#define offset_of_disp_top_op21_reg_yavg_rgb_en (0x98)
#define mask_of_disp_top_op21_reg_yavg_rgb_en   (0x8000)
#define shift_of_disp_top_op21_reg_yavg_rgb_en  (15)
#define DISP_TOP_OP21_REG_YAVG_RGB_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_yavg_rgb_en)
// h004d, bit: 7
/* */
#define offset_of_disp_top_op21_reg_ygain (0x9a)
#define mask_of_disp_top_op21_reg_ygain   (0xff)
#define shift_of_disp_top_op21_reg_ygain  (0)
#define DISP_TOP_OP21_REG_YGAIN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_ygain)
#define REG_DISP_TOP_OP21_4D_L            (DISP_TOP_OP21_REG_YGAIN)
// h004d, bit: 15
/* */
#define offset_of_disp_top_op21_reg_ygain_step (0x9a)
#define mask_of_disp_top_op21_reg_ygain_step   (0xff00)
#define shift_of_disp_top_op21_reg_ygain_step  (8)
#define DISP_TOP_OP21_REG_YGAIN_STEP           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_ygain_step)
// h004e, bit: 7
/* */
#define offset_of_disp_top_op21_reg_ygain_step_max (0x9c)
#define mask_of_disp_top_op21_reg_ygain_step_max   (0xff)
#define shift_of_disp_top_op21_reg_ygain_step_max  (0)
#define DISP_TOP_OP21_REG_YGAIN_STEP_MAX           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_ygain_step_max)
#define REG_DISP_TOP_OP21_4E_L                     (DISP_TOP_OP21_REG_YGAIN_STEP_MAX)
// h004e, bit: 15
/* */
#define offset_of_disp_top_op21_reg_ygain_step_min (0x9c)
#define mask_of_disp_top_op21_reg_ygain_step_min   (0xff00)
#define shift_of_disp_top_op21_reg_ygain_step_min  (8)
#define DISP_TOP_OP21_REG_YGAIN_STEP_MIN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_ygain_step_min)
// h004f, bit: 11
/* */
#define offset_of_disp_top_op21_reg_ygain_offset (0x9e)
#define mask_of_disp_top_op21_reg_ygain_offset   (0xfff)
#define shift_of_disp_top_op21_reg_ygain_offset  (0)
#define DISP_TOP_OP21_REG_YGAIN_OFFSET           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_ygain_offset)
#define REG_DISP_TOP_OP21_4F_L                   (DISP_TOP_OP21_REG_YGAIN_OFFSET)
// h0050, bit: 11
/* */
#define offset_of_disp_top_op21_reg_dlc_offset (0xa0)
#define mask_of_disp_top_op21_reg_dlc_offset   (0xfff)
#define shift_of_disp_top_op21_reg_dlc_offset  (0)
#define DISP_TOP_OP21_REG_DLC_OFFSET           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_dlc_offset)
#define REG_DISP_TOP_OP21_50_L                 (DISP_TOP_OP21_REG_DLC_OFFSET)
// h0051, bit: 7
/* */
#define offset_of_disp_top_op21_reg_dlc_gain (0xa2)
#define mask_of_disp_top_op21_reg_dlc_gain   (0xff)
#define shift_of_disp_top_op21_reg_dlc_gain  (0)
#define DISP_TOP_OP21_REG_DLC_GAIN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_dlc_gain)
#define REG_DISP_TOP_OP21_51_L               (DISP_TOP_OP21_REG_DLC_GAIN)
// h0051, bit: 15
/* */
#define offset_of_disp_top_op21_reg_pwm_fdly (0xa2)
#define mask_of_disp_top_op21_reg_pwm_fdly   (0xff00)
#define shift_of_disp_top_op21_reg_pwm_fdly  (8)
#define DISP_TOP_OP21_REG_PWM_FDLY           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_pwm_fdly)
// h0052, bit: 15
/* */
#define offset_of_disp_top_op21_reg_pwm_period (0xa4)
#define mask_of_disp_top_op21_reg_pwm_period   (0xffff)
#define shift_of_disp_top_op21_reg_pwm_period  (0)
#define DISP_TOP_OP21_REG_PWM_PERIOD           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_pwm_period)
#define REG_DISP_TOP_OP21_52_L                 (DISP_TOP_OP21_REG_PWM_PERIOD)
// h0053, bit: 15
/* */
#define offset_of_disp_top_op21_reg_pwm_duty (0xa6)
#define mask_of_disp_top_op21_reg_pwm_duty   (0xffff)
#define shift_of_disp_top_op21_reg_pwm_duty  (0)
#define DISP_TOP_OP21_REG_PWM_DUTY           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_pwm_duty)
#define REG_DISP_TOP_OP21_53_L               (DISP_TOP_OP21_REG_PWM_DUTY)
// h0054, bit: 11
/* */
#define offset_of_disp_top_op21_reg_pwm_r_offset (0xa8)
#define mask_of_disp_top_op21_reg_pwm_r_offset   (0xfff)
#define shift_of_disp_top_op21_reg_pwm_r_offset  (0)
#define DISP_TOP_OP21_REG_PWM_R_OFFSET           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_pwm_r_offset)
#define REG_DISP_TOP_OP21_54_L                   (DISP_TOP_OP21_REG_PWM_R_OFFSET)
// h0055, bit: 11
/* */
#define offset_of_disp_top_op21_reg_dcr_offset (0xaa)
#define mask_of_disp_top_op21_reg_dcr_offset   (0xfff)
#define shift_of_disp_top_op21_reg_dcr_offset  (0)
#define DISP_TOP_OP21_REG_DCR_OFFSET           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_dcr_offset)
#define REG_DISP_TOP_OP21_55_L                 (DISP_TOP_OP21_REG_DCR_OFFSET)
// h0056, bit: 7
/* */
#define offset_of_disp_top_op21_reg_dcr_gain (0xac)
#define mask_of_disp_top_op21_reg_dcr_gain   (0xff)
#define shift_of_disp_top_op21_reg_dcr_gain  (0)
#define DISP_TOP_OP21_REG_DCR_GAIN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_dcr_gain)
#define REG_DISP_TOP_OP21_56_L               (DISP_TOP_OP21_REG_DCR_GAIN)
// h0056, bit: 9
/* */
#define offset_of_disp_top_op21_reg_pwm_table_en (0xac)
#define mask_of_disp_top_op21_reg_pwm_table_en   (0x200)
#define shift_of_disp_top_op21_reg_pwm_table_en  (9)
#define DISP_TOP_OP21_REG_PWM_TABLE_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_pwm_table_en)
// h0056, bit: 10
/* */
#define offset_of_disp_top_op21_reg_dlc_table_sel (0xac)
#define mask_of_disp_top_op21_reg_dlc_table_sel   (0x400)
#define shift_of_disp_top_op21_reg_dlc_table_sel  (10)
#define DISP_TOP_OP21_REG_DLC_TABLE_SEL           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_dlc_table_sel)
// h0056, bit: 11
/* */
#define offset_of_disp_top_op21_reg_dlc_en (0xac)
#define mask_of_disp_top_op21_reg_dlc_en   (0x800)
#define shift_of_disp_top_op21_reg_dlc_en  (11)
#define DISP_TOP_OP21_REG_DLC_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_dlc_en)
// h0056, bit: 13
/* */
#define offset_of_disp_top_op21_reg_pwm_rst_sel (0xac)
#define mask_of_disp_top_op21_reg_pwm_rst_sel   (0x3000)
#define shift_of_disp_top_op21_reg_pwm_rst_sel  (12)
#define DISP_TOP_OP21_REG_PWM_RST_SEL           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_pwm_rst_sel)
// h0056, bit: 14
/* */
#define offset_of_disp_top_op21_reg_pwm_inv (0xac)
#define mask_of_disp_top_op21_reg_pwm_inv   (0x4000)
#define shift_of_disp_top_op21_reg_pwm_inv  (14)
#define DISP_TOP_OP21_REG_PWM_INV           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_pwm_inv)
// h0056, bit: 15
/* */
#define offset_of_disp_top_op21_reg_pwm_htotal_en (0xac)
#define mask_of_disp_top_op21_reg_pwm_htotal_en   (0x8000)
#define shift_of_disp_top_op21_reg_pwm_htotal_en  (15)
#define DISP_TOP_OP21_REG_PWM_HTOTAL_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_pwm_htotal_en)
// h0057, bit: 7
/* */
#define offset_of_disp_top_op21_reg_dlc_table_din (0xae)
#define mask_of_disp_top_op21_reg_dlc_table_din   (0xff)
#define shift_of_disp_top_op21_reg_dlc_table_din  (0)
#define DISP_TOP_OP21_REG_DLC_TABLE_DIN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_dlc_table_din)
#define REG_DISP_TOP_OP21_57_L                    (DISP_TOP_OP21_REG_DLC_TABLE_DIN)
// h0057, bit: 15
/* */
#define offset_of_disp_top_op21_reg_pwm_table_din (0xae)
#define mask_of_disp_top_op21_reg_pwm_table_din   (0xff00)
#define shift_of_disp_top_op21_reg_pwm_table_din  (8)
#define DISP_TOP_OP21_REG_PWM_TABLE_DIN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_pwm_table_din)
// h0058, bit: 7
/* */
#define offset_of_disp_top_op21_reg_yavg_out (0xb0)
#define mask_of_disp_top_op21_reg_yavg_out   (0xff)
#define shift_of_disp_top_op21_reg_yavg_out  (0)
#define DISP_TOP_OP21_REG_YAVG_OUT           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_yavg_out)
#define REG_DISP_TOP_OP21_58_L               (DISP_TOP_OP21_REG_YAVG_OUT)
// h0058, bit: 15
/* */
#define offset_of_disp_top_op21_reg_yavg_pre_out (0xb0)
#define mask_of_disp_top_op21_reg_yavg_pre_out   (0xff00)
#define shift_of_disp_top_op21_reg_yavg_pre_out  (8)
#define DISP_TOP_OP21_REG_YAVG_PRE_OUT           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_yavg_pre_out)
// h0059, bit: 7
/* */
#define offset_of_disp_top_op21_reg_yavg_avg_out (0xb2)
#define mask_of_disp_top_op21_reg_yavg_avg_out   (0xff)
#define shift_of_disp_top_op21_reg_yavg_avg_out  (0)
#define DISP_TOP_OP21_REG_YAVG_AVG_OUT           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_yavg_avg_out)
#define REG_DISP_TOP_OP21_59_L                   (DISP_TOP_OP21_REG_YAVG_AVG_OUT)
// h0059, bit: 15
/* */
#define offset_of_disp_top_op21_reg_ygain_out (0xb2)
#define mask_of_disp_top_op21_reg_ygain_out   (0xff00)
#define shift_of_disp_top_op21_reg_ygain_out  (8)
#define DISP_TOP_OP21_REG_YGAIN_OUT           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_ygain_out)
// h005a, bit: 7
/* */
#define offset_of_disp_top_op21_reg_ygain_tmp_out (0xb4)
#define mask_of_disp_top_op21_reg_ygain_tmp_out   (0xff)
#define shift_of_disp_top_op21_reg_ygain_tmp_out  (0)
#define DISP_TOP_OP21_REG_YGAIN_TMP_OUT           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_ygain_tmp_out)
#define REG_DISP_TOP_OP21_5A_L                    (DISP_TOP_OP21_REG_YGAIN_TMP_OUT)
// h005a, bit: 15
/* */
#define offset_of_disp_top_op21_reg_ygain_hist_out (0xb4)
#define mask_of_disp_top_op21_reg_ygain_hist_out   (0xff00)
#define shift_of_disp_top_op21_reg_ygain_hist_out  (8)
#define DISP_TOP_OP21_REG_YGAIN_HIST_OUT           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_ygain_hist_out)
// h005b, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram0 (0xb6)
#define mask_of_disp_top_op21_reg_histogram0   (0xffff)
#define shift_of_disp_top_op21_reg_histogram0  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM0           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram0)
#define REG_DISP_TOP_OP21_5B_L                 (DISP_TOP_OP21_REG_HISTOGRAM0)
// h005c, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram1 (0xb8)
#define mask_of_disp_top_op21_reg_histogram1   (0xffff)
#define shift_of_disp_top_op21_reg_histogram1  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM1           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram1)
#define REG_DISP_TOP_OP21_5C_L                 (DISP_TOP_OP21_REG_HISTOGRAM1)
// h005d, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram2 (0xba)
#define mask_of_disp_top_op21_reg_histogram2   (0xffff)
#define shift_of_disp_top_op21_reg_histogram2  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM2           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram2)
#define REG_DISP_TOP_OP21_5D_L                 (DISP_TOP_OP21_REG_HISTOGRAM2)
// h005e, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram3 (0xbc)
#define mask_of_disp_top_op21_reg_histogram3   (0xffff)
#define shift_of_disp_top_op21_reg_histogram3  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM3           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram3)
#define REG_DISP_TOP_OP21_5E_L                 (DISP_TOP_OP21_REG_HISTOGRAM3)
// h005f, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram4 (0xbe)
#define mask_of_disp_top_op21_reg_histogram4   (0xffff)
#define shift_of_disp_top_op21_reg_histogram4  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM4           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram4)
#define REG_DISP_TOP_OP21_5F_L                 (DISP_TOP_OP21_REG_HISTOGRAM4)
// h0060, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram5 (0xc0)
#define mask_of_disp_top_op21_reg_histogram5   (0xffff)
#define shift_of_disp_top_op21_reg_histogram5  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM5           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram5)
#define REG_DISP_TOP_OP21_60_L                 (DISP_TOP_OP21_REG_HISTOGRAM5)
// h0061, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram6 (0xc2)
#define mask_of_disp_top_op21_reg_histogram6   (0xffff)
#define shift_of_disp_top_op21_reg_histogram6  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM6           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram6)
#define REG_DISP_TOP_OP21_61_L                 (DISP_TOP_OP21_REG_HISTOGRAM6)
// h0062, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram7 (0xc4)
#define mask_of_disp_top_op21_reg_histogram7   (0xffff)
#define shift_of_disp_top_op21_reg_histogram7  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM7           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram7)
#define REG_DISP_TOP_OP21_62_L                 (DISP_TOP_OP21_REG_HISTOGRAM7)
// h0063, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram8 (0xc6)
#define mask_of_disp_top_op21_reg_histogram8   (0xffff)
#define shift_of_disp_top_op21_reg_histogram8  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM8           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram8)
#define REG_DISP_TOP_OP21_63_L                 (DISP_TOP_OP21_REG_HISTOGRAM8)
// h0064, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram9 (0xc8)
#define mask_of_disp_top_op21_reg_histogram9   (0xffff)
#define shift_of_disp_top_op21_reg_histogram9  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM9           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram9)
#define REG_DISP_TOP_OP21_64_L                 (DISP_TOP_OP21_REG_HISTOGRAM9)
// h0065, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram10 (0xca)
#define mask_of_disp_top_op21_reg_histogram10   (0xffff)
#define shift_of_disp_top_op21_reg_histogram10  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM10           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram10)
#define REG_DISP_TOP_OP21_65_L                  (DISP_TOP_OP21_REG_HISTOGRAM10)
// h0066, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram11 (0xcc)
#define mask_of_disp_top_op21_reg_histogram11   (0xffff)
#define shift_of_disp_top_op21_reg_histogram11  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM11           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram11)
#define REG_DISP_TOP_OP21_66_L                  (DISP_TOP_OP21_REG_HISTOGRAM11)
// h0067, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram12 (0xce)
#define mask_of_disp_top_op21_reg_histogram12   (0xffff)
#define shift_of_disp_top_op21_reg_histogram12  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM12           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram12)
#define REG_DISP_TOP_OP21_67_L                  (DISP_TOP_OP21_REG_HISTOGRAM12)
// h0068, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram13 (0xd0)
#define mask_of_disp_top_op21_reg_histogram13   (0xffff)
#define shift_of_disp_top_op21_reg_histogram13  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM13           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram13)
#define REG_DISP_TOP_OP21_68_L                  (DISP_TOP_OP21_REG_HISTOGRAM13)
// h0069, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram14 (0xd2)
#define mask_of_disp_top_op21_reg_histogram14   (0xffff)
#define shift_of_disp_top_op21_reg_histogram14  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM14           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram14)
#define REG_DISP_TOP_OP21_69_L                  (DISP_TOP_OP21_REG_HISTOGRAM14)
// h006a, bit: 15
/* */
#define offset_of_disp_top_op21_reg_histogram15 (0xd4)
#define mask_of_disp_top_op21_reg_histogram15   (0xffff)
#define shift_of_disp_top_op21_reg_histogram15  (0)
#define DISP_TOP_OP21_REG_HISTOGRAM15           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_histogram15)
#define REG_DISP_TOP_OP21_6A_L                  (DISP_TOP_OP21_REG_HISTOGRAM15)
// h006b, bit: 11
/* */
#define offset_of_disp_top_op21_reg_hact (0xd6)
#define mask_of_disp_top_op21_reg_hact   (0xfff)
#define shift_of_disp_top_op21_reg_hact  (0)
#define DISP_TOP_OP21_REG_HACT           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_hact)
#define REG_DISP_TOP_OP21_6B_L           (DISP_TOP_OP21_REG_HACT)
// h006c, bit: 11
/* */
#define offset_of_disp_top_op21_reg_vact (0xd8)
#define mask_of_disp_top_op21_reg_vact   (0xfff)
#define shift_of_disp_top_op21_reg_vact  (0)
#define DISP_TOP_OP21_REG_VACT           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vact)
#define REG_DISP_TOP_OP21_6C_L           (DISP_TOP_OP21_REG_VACT)
// h006d, bit: 7
/* */
#define offset_of_disp_top_op21_reg_hblank (0xda)
#define mask_of_disp_top_op21_reg_hblank   (0xff)
#define shift_of_disp_top_op21_reg_hblank  (0)
#define DISP_TOP_OP21_REG_HBLANK           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_hblank)
#define REG_DISP_TOP_OP21_6D_L             (DISP_TOP_OP21_REG_HBLANK)
// h006d, bit: 15
/* */
#define offset_of_disp_top_op21_reg_ygain_tmp_min (0xda)
#define mask_of_disp_top_op21_reg_ygain_tmp_min   (0xff00)
#define shift_of_disp_top_op21_reg_ygain_tmp_min  (8)
#define DISP_TOP_OP21_REG_YGAIN_TMP_MIN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_ygain_tmp_min)
// h006e, bit: 7
/* */
#define offset_of_disp_top_op21_reg_pwm_period_r (0xdc)
#define mask_of_disp_top_op21_reg_pwm_period_r   (0xff)
#define shift_of_disp_top_op21_reg_pwm_period_r  (0)
#define DISP_TOP_OP21_REG_PWM_PERIOD_R           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_pwm_period_r)
#define REG_DISP_TOP_OP21_6E_L                   (DISP_TOP_OP21_REG_PWM_PERIOD_R)
// h006e, bit: 15
/* */
#define offset_of_disp_top_op21_reg_pwm_duty_r (0xdc)
#define mask_of_disp_top_op21_reg_pwm_duty_r   (0xff00)
#define shift_of_disp_top_op21_reg_pwm_duty_r  (8)
#define DISP_TOP_OP21_REG_PWM_DUTY_R           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_pwm_duty_r)
#define REG_DISP_TOP_OP21_6F_L                 (REG_DISP_TOP_OP21_BASE + 0xde)
// h0070, bit: 1
/* 3d dither MSB dither table select */
#define offset_of_disp_top_op21_reg_vip_3d_dither_msb_sel (0xe0)
#define mask_of_disp_top_op21_reg_vip_3d_dither_msb_sel   (0x3)
#define shift_of_disp_top_op21_reg_vip_3d_dither_msb_sel  (0)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_MSB_SEL \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_msb_sel)
#define REG_DISP_TOP_OP21_70_L (DISP_TOP_OP21_REG_VIP_3D_DITHER_MSB_SEL)
// h0070, bit: 3
/* 3d dither LSB dither table select */
#define offset_of_disp_top_op21_reg_vip_3d_dither_lsb_sel (0xe0)
#define mask_of_disp_top_op21_reg_vip_3d_dither_lsb_sel   (0xc)
#define shift_of_disp_top_op21_reg_vip_3d_dither_lsb_sel  (2)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_LSB_SEL \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_lsb_sel)
// h0070, bit: 4
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_lsb_en (0xe0)
#define mask_of_disp_top_op21_reg_vip_3d_dither_lsb_en   (0x10)
#define shift_of_disp_top_op21_reg_vip_3d_dither_lsb_en  (4)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_LSB_EN \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_lsb_en)
// h0070, bit: 5
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_mono_en (0xe0)
#define mask_of_disp_top_op21_reg_vip_3d_dither_mono_en   (0x20)
#define shift_of_disp_top_op21_reg_vip_3d_dither_mono_en  (5)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_MONO_EN \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_mono_en)
// h0070, bit: 6
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_obn8_en (0xe0)
#define mask_of_disp_top_op21_reg_vip_3d_dither_obn8_en   (0x40)
#define shift_of_disp_top_op21_reg_vip_3d_dither_obn8_en  (6)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_OBN8_EN \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_obn8_en)
// h0070, bit: 7
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_en (0xe0)
#define mask_of_disp_top_op21_reg_vip_3d_dither_en   (0x80)
#define shift_of_disp_top_op21_reg_vip_3d_dither_en  (7)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_en)
// h0070, bit: 9
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_lsb_vclr_no (0xe0)
#define mask_of_disp_top_op21_reg_vip_3d_dither_lsb_vclr_no   (0x300)
#define shift_of_disp_top_op21_reg_vip_3d_dither_lsb_vclr_no  (8)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_LSB_VCLR_NO \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_lsb_vclr_no)
// h0070, bit: 10
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_10_mod_en (0xe0)
#define mask_of_disp_top_op21_reg_vip_3d_dither_10_mod_en   (0x400)
#define shift_of_disp_top_op21_reg_vip_3d_dither_10_mod_en  (10)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_10_MOD_EN \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_10_mod_en)
// h0070, bit: 11
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_lsb_vclr_en (0xe0)
#define mask_of_disp_top_op21_reg_vip_3d_dither_lsb_vclr_en   (0x800)
#define shift_of_disp_top_op21_reg_vip_3d_dither_lsb_vclr_en  (11)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_LSB_VCLR_EN \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_lsb_vclr_en)
// h0070, bit: 13
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_vclr_no (0xe0)
#define mask_of_disp_top_op21_reg_vip_3d_dither_vclr_no   (0x3000)
#define shift_of_disp_top_op21_reg_vip_3d_dither_vclr_no  (12)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_VCLR_NO \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_vclr_no)
// h0070, bit: 14
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_vclr_en (0xe0)
#define mask_of_disp_top_op21_reg_vip_3d_dither_vclr_en   (0x4000)
#define shift_of_disp_top_op21_reg_vip_3d_dither_vclr_en  (14)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_VCLR_EN \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_vclr_en)
// h0070, bit: 15
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_on (0xe0)
#define mask_of_disp_top_op21_reg_vip_3d_dither_on   (0x8000)
#define shift_of_disp_top_op21_reg_vip_3d_dither_on  (15)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_ON           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_on)
// h0071, bit: 1
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_lsb_b_mask (0xe2)
#define mask_of_disp_top_op21_reg_vip_3d_dither_lsb_b_mask   (0x3)
#define shift_of_disp_top_op21_reg_vip_3d_dither_lsb_b_mask  (0)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_LSB_B_MASK \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_lsb_b_mask)
#define REG_DISP_TOP_OP21_71_L (DISP_TOP_OP21_REG_VIP_3D_DITHER_LSB_B_MASK)
// h0071, bit: 3
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_lsb_r_mask (0xe2)
#define mask_of_disp_top_op21_reg_vip_3d_dither_lsb_r_mask   (0xc)
#define shift_of_disp_top_op21_reg_vip_3d_dither_lsb_r_mask  (2)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_LSB_R_MASK \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_lsb_r_mask)
// h0071, bit: 5
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_msb_b_mask (0xe2)
#define mask_of_disp_top_op21_reg_vip_3d_dither_msb_b_mask   (0x30)
#define shift_of_disp_top_op21_reg_vip_3d_dither_msb_b_mask  (4)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_MSB_B_MASK \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_msb_b_mask)
// h0071, bit: 7
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_msb_r_mask (0xe2)
#define mask_of_disp_top_op21_reg_vip_3d_dither_msb_r_mask   (0xc0)
#define shift_of_disp_top_op21_reg_vip_3d_dither_msb_r_mask  (6)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_MSB_R_MASK \
    (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_msb_r_mask)
// h0071, bit: 15
/* */
#define offset_of_disp_top_op21_reg_vip_3d_dither_debug (0xe2)
#define mask_of_disp_top_op21_reg_vip_3d_dither_debug   (0xff00)
#define shift_of_disp_top_op21_reg_vip_3d_dither_debug  (8)
#define DISP_TOP_OP21_REG_VIP_3D_DITHER_DEBUG           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_vip_3d_dither_debug)
// h0072, bit: 7
/* */
#define offset_of_disp_top_op21_reg_h_dither_table0 (0xe4)
#define mask_of_disp_top_op21_reg_h_dither_table0   (0xff)
#define shift_of_disp_top_op21_reg_h_dither_table0  (0)
#define DISP_TOP_OP21_REG_H_DITHER_TABLE0           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_h_dither_table0)
#define REG_DISP_TOP_OP21_72_L                      (DISP_TOP_OP21_REG_H_DITHER_TABLE0)
// h0072, bit: 15
/* */
#define offset_of_disp_top_op21_reg_h_dither_table1 (0xe4)
#define mask_of_disp_top_op21_reg_h_dither_table1   (0xff00)
#define shift_of_disp_top_op21_reg_h_dither_table1  (8)
#define DISP_TOP_OP21_REG_H_DITHER_TABLE1           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_h_dither_table1)
// h0073, bit: 7
/* */
#define offset_of_disp_top_op21_reg_h_dither_table2 (0xe6)
#define mask_of_disp_top_op21_reg_h_dither_table2   (0xff)
#define shift_of_disp_top_op21_reg_h_dither_table2  (0)
#define DISP_TOP_OP21_REG_H_DITHER_TABLE2           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_h_dither_table2)
#define REG_DISP_TOP_OP21_73_L                      (DISP_TOP_OP21_REG_H_DITHER_TABLE2)
// h0073, bit: 15
/* */
#define offset_of_disp_top_op21_reg_h_dither_table3 (0xe6)
#define mask_of_disp_top_op21_reg_h_dither_table3   (0xff00)
#define shift_of_disp_top_op21_reg_h_dither_table3  (8)
#define DISP_TOP_OP21_REG_H_DITHER_TABLE3           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_h_dither_table3)
// h0074, bit: 7
/* */
#define offset_of_disp_top_op21_reg_v_dither_table0 (0xe8)
#define mask_of_disp_top_op21_reg_v_dither_table0   (0xff)
#define shift_of_disp_top_op21_reg_v_dither_table0  (0)
#define DISP_TOP_OP21_REG_V_DITHER_TABLE0           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_v_dither_table0)
#define REG_DISP_TOP_OP21_74_L                      (DISP_TOP_OP21_REG_V_DITHER_TABLE0)
// h0074, bit: 15
/* */
#define offset_of_disp_top_op21_reg_v_dither_table1 (0xe8)
#define mask_of_disp_top_op21_reg_v_dither_table1   (0xff00)
#define shift_of_disp_top_op21_reg_v_dither_table1  (8)
#define DISP_TOP_OP21_REG_V_DITHER_TABLE1           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_v_dither_table1)
// h0075, bit: 7
/* */
#define offset_of_disp_top_op21_reg_v_dither_table2 (0xea)
#define mask_of_disp_top_op21_reg_v_dither_table2   (0xff)
#define shift_of_disp_top_op21_reg_v_dither_table2  (0)
#define DISP_TOP_OP21_REG_V_DITHER_TABLE2           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_v_dither_table2)
#define REG_DISP_TOP_OP21_75_L                      (DISP_TOP_OP21_REG_V_DITHER_TABLE2)
// h0075, bit: 15
/* */
#define offset_of_disp_top_op21_reg_v_dither_table3 (0xea)
#define mask_of_disp_top_op21_reg_v_dither_table3   (0xff00)
#define shift_of_disp_top_op21_reg_v_dither_table3  (8)
#define DISP_TOP_OP21_REG_V_DITHER_TABLE3           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_v_dither_table3)
// h0076, bit: 0
/* */
#define offset_of_disp_top_op21_reg_dith_en (0xec)
#define mask_of_disp_top_op21_reg_dith_en   (0x1)
#define shift_of_disp_top_op21_reg_dith_en  (0)
#define DISP_TOP_OP21_REG_DITH_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_dith_en)
#define REG_DISP_TOP_OP21_76_L              (DISP_TOP_OP21_REG_DITH_EN)
// h0076, bit: 1
/* */
#define offset_of_disp_top_op21_reg_obn (0xec)
#define mask_of_disp_top_op21_reg_obn   (0x2)
#define shift_of_disp_top_op21_reg_obn  (1)
#define DISP_TOP_OP21_REG_OBN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_obn)
// h0076, bit: 2
/* */
#define offset_of_disp_top_op21_reg_t_rot (0xec)
#define mask_of_disp_top_op21_reg_t_rot   (0x4)
#define shift_of_disp_top_op21_reg_t_rot  (2)
#define DISP_TOP_OP21_REG_T_ROT           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_t_rot)
// h0076, bit: 3
/* */
#define offset_of_disp_top_op21_reg_s_rot (0xec)
#define mask_of_disp_top_op21_reg_s_rot   (0x8)
#define shift_of_disp_top_op21_reg_s_rot  (3)
#define DISP_TOP_OP21_REG_S_ROT           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_s_rot)
// h0076, bit: 5
/* */
#define offset_of_disp_top_op21_reg_g_xor (0xec)
#define mask_of_disp_top_op21_reg_g_xor   (0x30)
#define shift_of_disp_top_op21_reg_g_xor  (4)
#define DISP_TOP_OP21_REG_G_XOR           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_g_xor)
// h0076, bit: 7
/* */
#define offset_of_disp_top_op21_reg_b_xor (0xec)
#define mask_of_disp_top_op21_reg_b_xor   (0xc0)
#define shift_of_disp_top_op21_reg_b_xor  (6)
#define DISP_TOP_OP21_REG_B_XOR           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_b_xor)
// h0076, bit: 9
/* */
#define offset_of_disp_top_op21_reg_br (0xec)
#define mask_of_disp_top_op21_reg_br   (0x300)
#define shift_of_disp_top_op21_reg_br  (8)
#define DISP_TOP_OP21_REG_BR           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_br)
// h0076, bit: 11
/* */
#define offset_of_disp_top_op21_reg_bl (0xec)
#define mask_of_disp_top_op21_reg_bl   (0xc00)
#define shift_of_disp_top_op21_reg_bl  (10)
#define DISP_TOP_OP21_REG_BL           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_bl)
// h0076, bit: 13
/* */
#define offset_of_disp_top_op21_reg_tr (0xec)
#define mask_of_disp_top_op21_reg_tr   (0x3000)
#define shift_of_disp_top_op21_reg_tr  (12)
#define DISP_TOP_OP21_REG_TR           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tr)
// h0076, bit: 15
/* */
#define offset_of_disp_top_op21_reg_tl (0xec)
#define mask_of_disp_top_op21_reg_tl   (0xc000)
#define shift_of_disp_top_op21_reg_tl  (14)
#define DISP_TOP_OP21_REG_TL           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_tl)
// h0077, bit: 0
/* */
#define offset_of_disp_top_op21_reg_dither_minus (0xee)
#define mask_of_disp_top_op21_reg_dither_minus   (0x1)
#define shift_of_disp_top_op21_reg_dither_minus  (0)
#define DISP_TOP_OP21_REG_DITHER_MINUS           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_dither_minus)
#define REG_DISP_TOP_OP21_77_L                   (DISP_TOP_OP21_REG_DITHER_MINUS)
// h0077, bit: 1
/* */
#define offset_of_disp_top_op21_reg_noise_8to6 (0xee)
#define mask_of_disp_top_op21_reg_noise_8to6   (0x2)
#define shift_of_disp_top_op21_reg_noise_8to6  (1)
#define DISP_TOP_OP21_REG_NOISE_8TO6           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_noise_8to6)
// h0077, bit: 2
/* */
#define offset_of_disp_top_op21_reg_pseudo_en (0xee)
#define mask_of_disp_top_op21_reg_pseudo_en   (0x4)
#define shift_of_disp_top_op21_reg_pseudo_en  (2)
#define DISP_TOP_OP21_REG_PSEUDO_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_pseudo_en)
// h0077, bit: 3
/* */
#define offset_of_disp_top_op21_reg_auto_dither_en (0xee)
#define mask_of_disp_top_op21_reg_auto_dither_en   (0x8)
#define shift_of_disp_top_op21_reg_auto_dither_en  (3)
#define DISP_TOP_OP21_REG_AUTO_DITHER_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_auto_dither_en)
// h0077, bit: 4
/* */
#define offset_of_disp_top_op21_reg_reset_e_4_frame (0xee)
#define mask_of_disp_top_op21_reg_reset_e_4_frame   (0x10)
#define shift_of_disp_top_op21_reg_reset_e_4_frame  (4)
#define DISP_TOP_OP21_REG_RESET_E_4_FRAME           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_reset_e_4_frame)
#define REG_DISP_TOP_OP21_78_L                      (REG_DISP_TOP_OP21_BASE + 0xf0)
#define REG_DISP_TOP_OP21_79_L                      (REG_DISP_TOP_OP21_BASE + 0xf2)
#define REG_DISP_TOP_OP21_7A_L                      (REG_DISP_TOP_OP21_BASE + 0xf4)
#define REG_DISP_TOP_OP21_7B_L                      (REG_DISP_TOP_OP21_BASE + 0xf6)
#define REG_DISP_TOP_OP21_7C_L                      (REG_DISP_TOP_OP21_BASE + 0xf8)
#define REG_DISP_TOP_OP21_7D_L                      (REG_DISP_TOP_OP21_BASE + 0xfa)
// h007e, bit: 1
/* Select source of output swap for B channel
2'b00: 0
2'b01: B channel
2'b10: G channel
2'b11: R channel*/
#define offset_of_disp_top_op21_reg_output_swap_sel_b (0xfc)
#define mask_of_disp_top_op21_reg_output_swap_sel_b   (0x3)
#define shift_of_disp_top_op21_reg_output_swap_sel_b  (0)
#define DISP_TOP_OP21_REG_OUTPUT_SWAP_SEL_B           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_output_swap_sel_b)
#define REG_DISP_TOP_OP21_7E_L                        (DISP_TOP_OP21_REG_OUTPUT_SWAP_SEL_B)
// h007e, bit: 3
/* Select source of output swap for G channel
2'b00: 0
2'b01: B channel
2'b10: G channel
2'b11: R channel*/
#define offset_of_disp_top_op21_reg_output_swap_sel_g (0xfc)
#define mask_of_disp_top_op21_reg_output_swap_sel_g   (0xc)
#define shift_of_disp_top_op21_reg_output_swap_sel_g  (2)
#define DISP_TOP_OP21_REG_OUTPUT_SWAP_SEL_G           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_output_swap_sel_g)
// h007e, bit: 5
/* Select source of output swap for R channel
2'b00: 0
2'b01: B channel
2'b10: G channel
2'b11: R channel*/
#define offset_of_disp_top_op21_reg_output_swap_sel_r (0xfc)
#define mask_of_disp_top_op21_reg_output_swap_sel_r   (0x30)
#define shift_of_disp_top_op21_reg_output_swap_sel_r  (4)
#define DISP_TOP_OP21_REG_OUTPUT_SWAP_SEL_R           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_output_swap_sel_r)
// h007e, bit: 7
/* 2'b00:RGB888
2'b01:RGB666
2'b10:RGB565-1
2'b11:RGB565-2*/
#define offset_of_disp_top_op21_reg_rgb_mode (0xfc)
#define mask_of_disp_top_op21_reg_rgb_mode   (0xc0)
#define shift_of_disp_top_op21_reg_rgb_mode  (6)
#define DISP_TOP_OP21_REG_RGB_MODE           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_rgb_mode)
// h007e, bit: 8
/* MSB/LSB swap*/
#define offset_of_disp_top_op21_reg_rgb_ml_swap (0xfc)
#define mask_of_disp_top_op21_reg_rgb_ml_swap   (0x100)
#define shift_of_disp_top_op21_reg_rgb_ml_swap  (8)
#define DISP_TOP_OP21_REG_RGB_ML_SWAP           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_rgb_ml_swap)
// h007e, bit: 11
/* rgb_swap dither pseudo clear number*/
#define offset_of_disp_top_op21_reg_rgb_pseudo_vclr_no (0xfc)
#define mask_of_disp_top_op21_reg_rgb_pseudo_vclr_no   (0xc00)
#define shift_of_disp_top_op21_reg_rgb_pseudo_vclr_no  (10)
#define DISP_TOP_OP21_REG_RGB_PSEUDO_VCLR_NO           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_rgb_pseudo_vclr_no)
// h007e, bit: 13
/* rgb_swap dither pseudo clear enable*/
#define offset_of_disp_top_op21_reg_rgb_pseudo_vclr_en (0xfc)
#define mask_of_disp_top_op21_reg_rgb_pseudo_vclr_en   (0x2000)
#define shift_of_disp_top_op21_reg_rgb_pseudo_vclr_en  (13)
#define DISP_TOP_OP21_REG_RGB_PSEUDO_VCLR_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_rgb_pseudo_vclr_en)
// h007e, bit: 14
/* rgb_swap dither:
1'b0 : 666 mode, 1'b1 : 565 mode*/
#define offset_of_disp_top_op21_reg_rgb_dith_mode (0xfc)
#define mask_of_disp_top_op21_reg_rgb_dith_mode   (0x4000)
#define shift_of_disp_top_op21_reg_rgb_dith_mode  (14)
#define DISP_TOP_OP21_REG_RGB_DITH_MODE           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_rgb_dith_mode)
// h007e, bit: 15
/* rgb_swap dither enable*/
#define offset_of_disp_top_op21_reg_rgb_dith_en (0xfc)
#define mask_of_disp_top_op21_reg_rgb_dith_en   (0x8000)
#define shift_of_disp_top_op21_reg_rgb_dith_en  (15)
#define DISP_TOP_OP21_REG_RGB_DITH_EN           (REG_DISP_TOP_OP21_BASE + offset_of_disp_top_op21_reg_rgb_dith_en)
#define REG_DISP_TOP_OP21_7F_L                  (REG_DISP_TOP_OP21_BASE + 0xfe)
// h0000, bit: 0
/* Enable Gamma*/
#define offset_of_disp_top_gamma1_reg_gamma_en (0x0)
#define mask_of_disp_top_gamma1_reg_gamma_en   (0x1)
#define shift_of_disp_top_gamma1_reg_gamma_en  (0)
#define DISP_TOP_GAMMA1_REG_GAMMA_EN           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_gamma_en)
#define REG_DISP_TOP_GAMMA1_00_L               (DISP_TOP_GAMMA1_REG_GAMMA_EN)
// h0001, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_00 (0x2)
#define mask_of_disp_top_gamma1_reg_tbl_r_00   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_00  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_00           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_00)
#define REG_DISP_TOP_GAMMA1_01_L               (DISP_TOP_GAMMA1_REG_TBL_R_00)
// h0001, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_01 (0x2)
#define mask_of_disp_top_gamma1_reg_tbl_r_01   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_01  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_01           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_01)
// h0002, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_02 (0x4)
#define mask_of_disp_top_gamma1_reg_tbl_r_02   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_02  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_02           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_02)
#define REG_DISP_TOP_GAMMA1_02_L               (DISP_TOP_GAMMA1_REG_TBL_R_02)
// h0002, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_03 (0x4)
#define mask_of_disp_top_gamma1_reg_tbl_r_03   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_03  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_03           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_03)
// h0003, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_04 (0x6)
#define mask_of_disp_top_gamma1_reg_tbl_r_04   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_04  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_04           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_04)
#define REG_DISP_TOP_GAMMA1_03_L               (DISP_TOP_GAMMA1_REG_TBL_R_04)
// h0003, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_05 (0x6)
#define mask_of_disp_top_gamma1_reg_tbl_r_05   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_05  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_05           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_05)
// h0004, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_06 (0x8)
#define mask_of_disp_top_gamma1_reg_tbl_r_06   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_06  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_06           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_06)
#define REG_DISP_TOP_GAMMA1_04_L               (DISP_TOP_GAMMA1_REG_TBL_R_06)
// h0004, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_07 (0x8)
#define mask_of_disp_top_gamma1_reg_tbl_r_07   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_07  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_07           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_07)
// h0005, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_08 (0xa)
#define mask_of_disp_top_gamma1_reg_tbl_r_08   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_08  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_08           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_08)
#define REG_DISP_TOP_GAMMA1_05_L               (DISP_TOP_GAMMA1_REG_TBL_R_08)
// h0005, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_09 (0xa)
#define mask_of_disp_top_gamma1_reg_tbl_r_09   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_09  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_09           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_09)
// h0006, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_10 (0xc)
#define mask_of_disp_top_gamma1_reg_tbl_r_10   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_10  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_10           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_10)
#define REG_DISP_TOP_GAMMA1_06_L               (DISP_TOP_GAMMA1_REG_TBL_R_10)
// h0006, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_11 (0xc)
#define mask_of_disp_top_gamma1_reg_tbl_r_11   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_11  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_11           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_11)
// h0007, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_12 (0xe)
#define mask_of_disp_top_gamma1_reg_tbl_r_12   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_12  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_12           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_12)
#define REG_DISP_TOP_GAMMA1_07_L               (DISP_TOP_GAMMA1_REG_TBL_R_12)
// h0007, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_13 (0xe)
#define mask_of_disp_top_gamma1_reg_tbl_r_13   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_13  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_13           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_13)
// h0008, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_14 (0x10)
#define mask_of_disp_top_gamma1_reg_tbl_r_14   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_14  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_14           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_14)
#define REG_DISP_TOP_GAMMA1_08_L               (DISP_TOP_GAMMA1_REG_TBL_R_14)
// h0008, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_15 (0x10)
#define mask_of_disp_top_gamma1_reg_tbl_r_15   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_15  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_15           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_15)
// h0009, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_16 (0x12)
#define mask_of_disp_top_gamma1_reg_tbl_r_16   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_16  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_16           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_16)
#define REG_DISP_TOP_GAMMA1_09_L               (DISP_TOP_GAMMA1_REG_TBL_R_16)
// h0009, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_17 (0x12)
#define mask_of_disp_top_gamma1_reg_tbl_r_17   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_17  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_17           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_17)
// h000a, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_18 (0x14)
#define mask_of_disp_top_gamma1_reg_tbl_r_18   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_18  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_18           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_18)
#define REG_DISP_TOP_GAMMA1_0A_L               (DISP_TOP_GAMMA1_REG_TBL_R_18)
// h000a, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_19 (0x14)
#define mask_of_disp_top_gamma1_reg_tbl_r_19   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_19  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_19           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_19)
// h000b, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_20 (0x16)
#define mask_of_disp_top_gamma1_reg_tbl_r_20   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_20  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_20           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_20)
#define REG_DISP_TOP_GAMMA1_0B_L               (DISP_TOP_GAMMA1_REG_TBL_R_20)
// h000b, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_21 (0x16)
#define mask_of_disp_top_gamma1_reg_tbl_r_21   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_21  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_21           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_21)
// h000c, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_22 (0x18)
#define mask_of_disp_top_gamma1_reg_tbl_r_22   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_22  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_22           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_22)
#define REG_DISP_TOP_GAMMA1_0C_L               (DISP_TOP_GAMMA1_REG_TBL_R_22)
// h000c, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_23 (0x18)
#define mask_of_disp_top_gamma1_reg_tbl_r_23   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_23  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_23           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_23)
// h000d, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_24 (0x1a)
#define mask_of_disp_top_gamma1_reg_tbl_r_24   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_24  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_24           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_24)
#define REG_DISP_TOP_GAMMA1_0D_L               (DISP_TOP_GAMMA1_REG_TBL_R_24)
// h000d, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_25 (0x1a)
#define mask_of_disp_top_gamma1_reg_tbl_r_25   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_25  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_25           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_25)
// h000e, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_26 (0x1c)
#define mask_of_disp_top_gamma1_reg_tbl_r_26   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_26  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_26           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_26)
#define REG_DISP_TOP_GAMMA1_0E_L               (DISP_TOP_GAMMA1_REG_TBL_R_26)
// h000e, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_27 (0x1c)
#define mask_of_disp_top_gamma1_reg_tbl_r_27   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_27  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_27           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_27)
// h000f, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_28 (0x1e)
#define mask_of_disp_top_gamma1_reg_tbl_r_28   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_28  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_28           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_28)
#define REG_DISP_TOP_GAMMA1_0F_L               (DISP_TOP_GAMMA1_REG_TBL_R_28)
// h000f, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_29 (0x1e)
#define mask_of_disp_top_gamma1_reg_tbl_r_29   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_29  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_29           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_29)
// h0010, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_30 (0x20)
#define mask_of_disp_top_gamma1_reg_tbl_r_30   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_30  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_30           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_30)
#define REG_DISP_TOP_GAMMA1_10_L               (DISP_TOP_GAMMA1_REG_TBL_R_30)
// h0010, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_31 (0x20)
#define mask_of_disp_top_gamma1_reg_tbl_r_31   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_r_31  (8)
#define DISP_TOP_GAMMA1_REG_TBL_R_31           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_31)
// h0011, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma1_reg_tbl_r_32 (0x22)
#define mask_of_disp_top_gamma1_reg_tbl_r_32   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_r_32  (0)
#define DISP_TOP_GAMMA1_REG_TBL_R_32           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_r_32)
#define REG_DISP_TOP_GAMMA1_11_L               (DISP_TOP_GAMMA1_REG_TBL_R_32)
// h0012, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_00 (0x24)
#define mask_of_disp_top_gamma1_reg_tbl_g_00   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_00  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_00           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_00)
#define REG_DISP_TOP_GAMMA1_12_L               (DISP_TOP_GAMMA1_REG_TBL_G_00)
// h0012, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_01 (0x24)
#define mask_of_disp_top_gamma1_reg_tbl_g_01   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_01  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_01           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_01)
// h0013, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_02 (0x26)
#define mask_of_disp_top_gamma1_reg_tbl_g_02   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_02  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_02           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_02)
#define REG_DISP_TOP_GAMMA1_13_L               (DISP_TOP_GAMMA1_REG_TBL_G_02)
// h0013, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_03 (0x26)
#define mask_of_disp_top_gamma1_reg_tbl_g_03   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_03  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_03           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_03)
// h0014, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_04 (0x28)
#define mask_of_disp_top_gamma1_reg_tbl_g_04   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_04  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_04           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_04)
#define REG_DISP_TOP_GAMMA1_14_L               (DISP_TOP_GAMMA1_REG_TBL_G_04)
// h0014, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_05 (0x28)
#define mask_of_disp_top_gamma1_reg_tbl_g_05   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_05  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_05           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_05)
// h0015, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_06 (0x2a)
#define mask_of_disp_top_gamma1_reg_tbl_g_06   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_06  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_06           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_06)
#define REG_DISP_TOP_GAMMA1_15_L               (DISP_TOP_GAMMA1_REG_TBL_G_06)
// h0015, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_07 (0x2a)
#define mask_of_disp_top_gamma1_reg_tbl_g_07   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_07  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_07           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_07)
// h0016, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_08 (0x2c)
#define mask_of_disp_top_gamma1_reg_tbl_g_08   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_08  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_08           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_08)
#define REG_DISP_TOP_GAMMA1_16_L               (DISP_TOP_GAMMA1_REG_TBL_G_08)
// h0016, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_09 (0x2c)
#define mask_of_disp_top_gamma1_reg_tbl_g_09   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_09  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_09           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_09)
// h0017, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_10 (0x2e)
#define mask_of_disp_top_gamma1_reg_tbl_g_10   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_10  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_10           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_10)
#define REG_DISP_TOP_GAMMA1_17_L               (DISP_TOP_GAMMA1_REG_TBL_G_10)
// h0017, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_11 (0x2e)
#define mask_of_disp_top_gamma1_reg_tbl_g_11   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_11  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_11           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_11)
// h0018, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_12 (0x30)
#define mask_of_disp_top_gamma1_reg_tbl_g_12   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_12  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_12           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_12)
#define REG_DISP_TOP_GAMMA1_18_L               (DISP_TOP_GAMMA1_REG_TBL_G_12)
// h0018, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_13 (0x30)
#define mask_of_disp_top_gamma1_reg_tbl_g_13   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_13  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_13           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_13)
// h0019, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_14 (0x32)
#define mask_of_disp_top_gamma1_reg_tbl_g_14   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_14  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_14           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_14)
#define REG_DISP_TOP_GAMMA1_19_L               (DISP_TOP_GAMMA1_REG_TBL_G_14)
// h0019, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_15 (0x32)
#define mask_of_disp_top_gamma1_reg_tbl_g_15   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_15  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_15           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_15)
// h001a, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_16 (0x34)
#define mask_of_disp_top_gamma1_reg_tbl_g_16   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_16  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_16           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_16)
#define REG_DISP_TOP_GAMMA1_1A_L               (DISP_TOP_GAMMA1_REG_TBL_G_16)
// h001a, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_17 (0x34)
#define mask_of_disp_top_gamma1_reg_tbl_g_17   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_17  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_17           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_17)
// h001b, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_18 (0x36)
#define mask_of_disp_top_gamma1_reg_tbl_g_18   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_18  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_18           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_18)
#define REG_DISP_TOP_GAMMA1_1B_L               (DISP_TOP_GAMMA1_REG_TBL_G_18)
// h001b, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_19 (0x36)
#define mask_of_disp_top_gamma1_reg_tbl_g_19   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_19  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_19           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_19)
// h001c, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_20 (0x38)
#define mask_of_disp_top_gamma1_reg_tbl_g_20   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_20  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_20           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_20)
#define REG_DISP_TOP_GAMMA1_1C_L               (DISP_TOP_GAMMA1_REG_TBL_G_20)
// h001c, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_21 (0x38)
#define mask_of_disp_top_gamma1_reg_tbl_g_21   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_21  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_21           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_21)
// h001d, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_22 (0x3a)
#define mask_of_disp_top_gamma1_reg_tbl_g_22   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_22  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_22           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_22)
#define REG_DISP_TOP_GAMMA1_1D_L               (DISP_TOP_GAMMA1_REG_TBL_G_22)
// h001d, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_23 (0x3a)
#define mask_of_disp_top_gamma1_reg_tbl_g_23   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_23  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_23           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_23)
// h001e, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_24 (0x3c)
#define mask_of_disp_top_gamma1_reg_tbl_g_24   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_24  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_24           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_24)
#define REG_DISP_TOP_GAMMA1_1E_L               (DISP_TOP_GAMMA1_REG_TBL_G_24)
// h001e, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_25 (0x3c)
#define mask_of_disp_top_gamma1_reg_tbl_g_25   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_25  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_25           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_25)
// h001f, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_26 (0x3e)
#define mask_of_disp_top_gamma1_reg_tbl_g_26   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_26  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_26           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_26)
#define REG_DISP_TOP_GAMMA1_1F_L               (DISP_TOP_GAMMA1_REG_TBL_G_26)
// h001f, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_27 (0x3e)
#define mask_of_disp_top_gamma1_reg_tbl_g_27   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_27  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_27           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_27)
// h0020, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_28 (0x40)
#define mask_of_disp_top_gamma1_reg_tbl_g_28   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_28  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_28           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_28)
#define REG_DISP_TOP_GAMMA1_20_L               (DISP_TOP_GAMMA1_REG_TBL_G_28)
// h0020, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_29 (0x40)
#define mask_of_disp_top_gamma1_reg_tbl_g_29   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_29  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_29           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_29)
// h0021, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_30 (0x42)
#define mask_of_disp_top_gamma1_reg_tbl_g_30   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_30  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_30           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_30)
#define REG_DISP_TOP_GAMMA1_21_L               (DISP_TOP_GAMMA1_REG_TBL_G_30)
// h0021, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_31 (0x42)
#define mask_of_disp_top_gamma1_reg_tbl_g_31   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_g_31  (8)
#define DISP_TOP_GAMMA1_REG_TBL_G_31           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_31)
// h0022, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma1_reg_tbl_g_32 (0x44)
#define mask_of_disp_top_gamma1_reg_tbl_g_32   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_g_32  (0)
#define DISP_TOP_GAMMA1_REG_TBL_G_32           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_g_32)
#define REG_DISP_TOP_GAMMA1_22_L               (DISP_TOP_GAMMA1_REG_TBL_G_32)
// h0023, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_00 (0x46)
#define mask_of_disp_top_gamma1_reg_tbl_b_00   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_00  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_00           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_00)
#define REG_DISP_TOP_GAMMA1_23_L               (DISP_TOP_GAMMA1_REG_TBL_B_00)
// h0023, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_01 (0x46)
#define mask_of_disp_top_gamma1_reg_tbl_b_01   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_01  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_01           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_01)
// h0024, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_02 (0x48)
#define mask_of_disp_top_gamma1_reg_tbl_b_02   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_02  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_02           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_02)
#define REG_DISP_TOP_GAMMA1_24_L               (DISP_TOP_GAMMA1_REG_TBL_B_02)
// h0024, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_03 (0x48)
#define mask_of_disp_top_gamma1_reg_tbl_b_03   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_03  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_03           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_03)
// h0025, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_04 (0x4a)
#define mask_of_disp_top_gamma1_reg_tbl_b_04   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_04  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_04           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_04)
#define REG_DISP_TOP_GAMMA1_25_L               (DISP_TOP_GAMMA1_REG_TBL_B_04)
// h0025, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_05 (0x4a)
#define mask_of_disp_top_gamma1_reg_tbl_b_05   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_05  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_05           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_05)
// h0026, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_06 (0x4c)
#define mask_of_disp_top_gamma1_reg_tbl_b_06   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_06  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_06           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_06)
#define REG_DISP_TOP_GAMMA1_26_L               (DISP_TOP_GAMMA1_REG_TBL_B_06)
// h0026, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_07 (0x4c)
#define mask_of_disp_top_gamma1_reg_tbl_b_07   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_07  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_07           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_07)
// h0027, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_08 (0x4e)
#define mask_of_disp_top_gamma1_reg_tbl_b_08   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_08  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_08           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_08)
#define REG_DISP_TOP_GAMMA1_27_L               (DISP_TOP_GAMMA1_REG_TBL_B_08)
// h0027, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_09 (0x4e)
#define mask_of_disp_top_gamma1_reg_tbl_b_09   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_09  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_09           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_09)
// h0028, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_10 (0x50)
#define mask_of_disp_top_gamma1_reg_tbl_b_10   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_10  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_10           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_10)
#define REG_DISP_TOP_GAMMA1_28_L               (DISP_TOP_GAMMA1_REG_TBL_B_10)
// h0028, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_11 (0x50)
#define mask_of_disp_top_gamma1_reg_tbl_b_11   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_11  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_11           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_11)
// h0029, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_12 (0x52)
#define mask_of_disp_top_gamma1_reg_tbl_b_12   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_12  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_12           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_12)
#define REG_DISP_TOP_GAMMA1_29_L               (DISP_TOP_GAMMA1_REG_TBL_B_12)
// h0029, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_13 (0x52)
#define mask_of_disp_top_gamma1_reg_tbl_b_13   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_13  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_13           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_13)
// h002a, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_14 (0x54)
#define mask_of_disp_top_gamma1_reg_tbl_b_14   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_14  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_14           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_14)
#define REG_DISP_TOP_GAMMA1_2A_L               (DISP_TOP_GAMMA1_REG_TBL_B_14)
// h002a, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_15 (0x54)
#define mask_of_disp_top_gamma1_reg_tbl_b_15   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_15  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_15           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_15)
// h002b, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_16 (0x56)
#define mask_of_disp_top_gamma1_reg_tbl_b_16   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_16  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_16           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_16)
#define REG_DISP_TOP_GAMMA1_2B_L               (DISP_TOP_GAMMA1_REG_TBL_B_16)
// h002b, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_17 (0x56)
#define mask_of_disp_top_gamma1_reg_tbl_b_17   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_17  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_17           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_17)
// h002c, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_18 (0x58)
#define mask_of_disp_top_gamma1_reg_tbl_b_18   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_18  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_18           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_18)
#define REG_DISP_TOP_GAMMA1_2C_L               (DISP_TOP_GAMMA1_REG_TBL_B_18)
// h002c, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_19 (0x58)
#define mask_of_disp_top_gamma1_reg_tbl_b_19   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_19  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_19           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_19)
// h002d, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_20 (0x5a)
#define mask_of_disp_top_gamma1_reg_tbl_b_20   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_20  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_20           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_20)
#define REG_DISP_TOP_GAMMA1_2D_L               (DISP_TOP_GAMMA1_REG_TBL_B_20)
// h002d, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_21 (0x5a)
#define mask_of_disp_top_gamma1_reg_tbl_b_21   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_21  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_21           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_21)
// h002e, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_22 (0x5c)
#define mask_of_disp_top_gamma1_reg_tbl_b_22   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_22  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_22           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_22)
#define REG_DISP_TOP_GAMMA1_2E_L               (DISP_TOP_GAMMA1_REG_TBL_B_22)
// h002e, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_23 (0x5c)
#define mask_of_disp_top_gamma1_reg_tbl_b_23   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_23  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_23           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_23)
// h002f, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_24 (0x5e)
#define mask_of_disp_top_gamma1_reg_tbl_b_24   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_24  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_24           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_24)
#define REG_DISP_TOP_GAMMA1_2F_L               (DISP_TOP_GAMMA1_REG_TBL_B_24)
// h002f, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_25 (0x5e)
#define mask_of_disp_top_gamma1_reg_tbl_b_25   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_25  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_25           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_25)
// h0030, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_26 (0x60)
#define mask_of_disp_top_gamma1_reg_tbl_b_26   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_26  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_26           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_26)
#define REG_DISP_TOP_GAMMA1_30_L               (DISP_TOP_GAMMA1_REG_TBL_B_26)
// h0030, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_27 (0x60)
#define mask_of_disp_top_gamma1_reg_tbl_b_27   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_27  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_27           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_27)
// h0031, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_28 (0x62)
#define mask_of_disp_top_gamma1_reg_tbl_b_28   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_28  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_28           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_28)
#define REG_DISP_TOP_GAMMA1_31_L               (DISP_TOP_GAMMA1_REG_TBL_B_28)
// h0031, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_29 (0x62)
#define mask_of_disp_top_gamma1_reg_tbl_b_29   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_29  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_29           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_29)
// h0032, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_30 (0x64)
#define mask_of_disp_top_gamma1_reg_tbl_b_30   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_30  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_30           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_30)
#define REG_DISP_TOP_GAMMA1_32_L               (DISP_TOP_GAMMA1_REG_TBL_B_30)
// h0032, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_31 (0x64)
#define mask_of_disp_top_gamma1_reg_tbl_b_31   (0xff00)
#define shift_of_disp_top_gamma1_reg_tbl_b_31  (8)
#define DISP_TOP_GAMMA1_REG_TBL_B_31           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_31)
// h0033, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma1_reg_tbl_b_32 (0x66)
#define mask_of_disp_top_gamma1_reg_tbl_b_32   (0xff)
#define shift_of_disp_top_gamma1_reg_tbl_b_32  (0)
#define DISP_TOP_GAMMA1_REG_TBL_B_32           (REG_DISP_TOP_GAMMA1_BASE + offset_of_disp_top_gamma1_reg_tbl_b_32)
#define REG_DISP_TOP_GAMMA1_33_L               (DISP_TOP_GAMMA1_REG_TBL_B_32)
#define REG_DISP_TOP_GAMMA1_34_L               (REG_DISP_TOP_GAMMA1_BASE + 0x68)
#define REG_DISP_TOP_GAMMA1_35_L               (REG_DISP_TOP_GAMMA1_BASE + 0x6a)
#define REG_DISP_TOP_GAMMA1_36_L               (REG_DISP_TOP_GAMMA1_BASE + 0x6c)
#define REG_DISP_TOP_GAMMA1_37_L               (REG_DISP_TOP_GAMMA1_BASE + 0x6e)
#define REG_DISP_TOP_GAMMA1_38_L               (REG_DISP_TOP_GAMMA1_BASE + 0x70)
#define REG_DISP_TOP_GAMMA1_39_L               (REG_DISP_TOP_GAMMA1_BASE + 0x72)
#define REG_DISP_TOP_GAMMA1_3A_L               (REG_DISP_TOP_GAMMA1_BASE + 0x74)
#define REG_DISP_TOP_GAMMA1_3B_L               (REG_DISP_TOP_GAMMA1_BASE + 0x76)
#define REG_DISP_TOP_GAMMA1_3C_L               (REG_DISP_TOP_GAMMA1_BASE + 0x78)
#define REG_DISP_TOP_GAMMA1_3D_L               (REG_DISP_TOP_GAMMA1_BASE + 0x7a)
#define REG_DISP_TOP_GAMMA1_3E_L               (REG_DISP_TOP_GAMMA1_BASE + 0x7c)
#define REG_DISP_TOP_GAMMA1_3F_L               (REG_DISP_TOP_GAMMA1_BASE + 0x7e)
#define REG_DISP_TOP_GAMMA1_40_L               (REG_DISP_TOP_GAMMA1_BASE + 0x80)
#define REG_DISP_TOP_GAMMA1_41_L               (REG_DISP_TOP_GAMMA1_BASE + 0x82)
#define REG_DISP_TOP_GAMMA1_42_L               (REG_DISP_TOP_GAMMA1_BASE + 0x84)
#define REG_DISP_TOP_GAMMA1_43_L               (REG_DISP_TOP_GAMMA1_BASE + 0x86)
#define REG_DISP_TOP_GAMMA1_44_L               (REG_DISP_TOP_GAMMA1_BASE + 0x88)
#define REG_DISP_TOP_GAMMA1_45_L               (REG_DISP_TOP_GAMMA1_BASE + 0x8a)
#define REG_DISP_TOP_GAMMA1_46_L               (REG_DISP_TOP_GAMMA1_BASE + 0x8c)
#define REG_DISP_TOP_GAMMA1_47_L               (REG_DISP_TOP_GAMMA1_BASE + 0x8e)
#define REG_DISP_TOP_GAMMA1_48_L               (REG_DISP_TOP_GAMMA1_BASE + 0x90)
#define REG_DISP_TOP_GAMMA1_49_L               (REG_DISP_TOP_GAMMA1_BASE + 0x92)
#define REG_DISP_TOP_GAMMA1_4A_L               (REG_DISP_TOP_GAMMA1_BASE + 0x94)
#define REG_DISP_TOP_GAMMA1_4B_L               (REG_DISP_TOP_GAMMA1_BASE + 0x96)
#define REG_DISP_TOP_GAMMA1_4C_L               (REG_DISP_TOP_GAMMA1_BASE + 0x98)
#define REG_DISP_TOP_GAMMA1_4D_L               (REG_DISP_TOP_GAMMA1_BASE + 0x9a)
#define REG_DISP_TOP_GAMMA1_4E_L               (REG_DISP_TOP_GAMMA1_BASE + 0x9c)
#define REG_DISP_TOP_GAMMA1_4F_L               (REG_DISP_TOP_GAMMA1_BASE + 0x9e)
#define REG_DISP_TOP_GAMMA1_50_L               (REG_DISP_TOP_GAMMA1_BASE + 0xa0)
#define REG_DISP_TOP_GAMMA1_51_L               (REG_DISP_TOP_GAMMA1_BASE + 0xa2)
#define REG_DISP_TOP_GAMMA1_52_L               (REG_DISP_TOP_GAMMA1_BASE + 0xa4)
#define REG_DISP_TOP_GAMMA1_53_L               (REG_DISP_TOP_GAMMA1_BASE + 0xa6)
#define REG_DISP_TOP_GAMMA1_54_L               (REG_DISP_TOP_GAMMA1_BASE + 0xa8)
#define REG_DISP_TOP_GAMMA1_55_L               (REG_DISP_TOP_GAMMA1_BASE + 0xaa)
#define REG_DISP_TOP_GAMMA1_56_L               (REG_DISP_TOP_GAMMA1_BASE + 0xac)
#define REG_DISP_TOP_GAMMA1_57_L               (REG_DISP_TOP_GAMMA1_BASE + 0xae)
#define REG_DISP_TOP_GAMMA1_58_L               (REG_DISP_TOP_GAMMA1_BASE + 0xb0)
#define REG_DISP_TOP_GAMMA1_59_L               (REG_DISP_TOP_GAMMA1_BASE + 0xb2)
#define REG_DISP_TOP_GAMMA1_5A_L               (REG_DISP_TOP_GAMMA1_BASE + 0xb4)
#define REG_DISP_TOP_GAMMA1_5B_L               (REG_DISP_TOP_GAMMA1_BASE + 0xb6)
#define REG_DISP_TOP_GAMMA1_5C_L               (REG_DISP_TOP_GAMMA1_BASE + 0xb8)
#define REG_DISP_TOP_GAMMA1_5D_L               (REG_DISP_TOP_GAMMA1_BASE + 0xba)
#define REG_DISP_TOP_GAMMA1_5E_L               (REG_DISP_TOP_GAMMA1_BASE + 0xbc)
#define REG_DISP_TOP_GAMMA1_5F_L               (REG_DISP_TOP_GAMMA1_BASE + 0xbe)
#define REG_DISP_TOP_GAMMA1_60_L               (REG_DISP_TOP_GAMMA1_BASE + 0xc0)
#define REG_DISP_TOP_GAMMA1_61_L               (REG_DISP_TOP_GAMMA1_BASE + 0xc2)
#define REG_DISP_TOP_GAMMA1_62_L               (REG_DISP_TOP_GAMMA1_BASE + 0xc4)
#define REG_DISP_TOP_GAMMA1_63_L               (REG_DISP_TOP_GAMMA1_BASE + 0xc6)
#define REG_DISP_TOP_GAMMA1_64_L               (REG_DISP_TOP_GAMMA1_BASE + 0xc8)
#define REG_DISP_TOP_GAMMA1_65_L               (REG_DISP_TOP_GAMMA1_BASE + 0xca)
#define REG_DISP_TOP_GAMMA1_66_L               (REG_DISP_TOP_GAMMA1_BASE + 0xcc)
#define REG_DISP_TOP_GAMMA1_67_L               (REG_DISP_TOP_GAMMA1_BASE + 0xce)
#define REG_DISP_TOP_GAMMA1_68_L               (REG_DISP_TOP_GAMMA1_BASE + 0xd0)
#define REG_DISP_TOP_GAMMA1_69_L               (REG_DISP_TOP_GAMMA1_BASE + 0xd2)
#define REG_DISP_TOP_GAMMA1_6A_L               (REG_DISP_TOP_GAMMA1_BASE + 0xd4)
#define REG_DISP_TOP_GAMMA1_6B_L               (REG_DISP_TOP_GAMMA1_BASE + 0xd6)
#define REG_DISP_TOP_GAMMA1_6C_L               (REG_DISP_TOP_GAMMA1_BASE + 0xd8)
#define REG_DISP_TOP_GAMMA1_6D_L               (REG_DISP_TOP_GAMMA1_BASE + 0xda)
#define REG_DISP_TOP_GAMMA1_6E_L               (REG_DISP_TOP_GAMMA1_BASE + 0xdc)
#define REG_DISP_TOP_GAMMA1_6F_L               (REG_DISP_TOP_GAMMA1_BASE + 0xde)
#define REG_DISP_TOP_GAMMA1_70_L               (REG_DISP_TOP_GAMMA1_BASE + 0xe0)
#define REG_DISP_TOP_GAMMA1_71_L               (REG_DISP_TOP_GAMMA1_BASE + 0xe2)
#define REG_DISP_TOP_GAMMA1_72_L               (REG_DISP_TOP_GAMMA1_BASE + 0xe4)
#define REG_DISP_TOP_GAMMA1_73_L               (REG_DISP_TOP_GAMMA1_BASE + 0xe6)
#define REG_DISP_TOP_GAMMA1_74_L               (REG_DISP_TOP_GAMMA1_BASE + 0xe8)
#define REG_DISP_TOP_GAMMA1_75_L               (REG_DISP_TOP_GAMMA1_BASE + 0xea)
#define REG_DISP_TOP_GAMMA1_76_L               (REG_DISP_TOP_GAMMA1_BASE + 0xec)
#define REG_DISP_TOP_GAMMA1_77_L               (REG_DISP_TOP_GAMMA1_BASE + 0xee)
#define REG_DISP_TOP_GAMMA1_78_L               (REG_DISP_TOP_GAMMA1_BASE + 0xf0)
#define REG_DISP_TOP_GAMMA1_79_L               (REG_DISP_TOP_GAMMA1_BASE + 0xf2)
#define REG_DISP_TOP_GAMMA1_7A_L               (REG_DISP_TOP_GAMMA1_BASE + 0xf4)
#define REG_DISP_TOP_GAMMA1_7B_L               (REG_DISP_TOP_GAMMA1_BASE + 0xf6)
#define REG_DISP_TOP_GAMMA1_7C_L               (REG_DISP_TOP_GAMMA1_BASE + 0xf8)
#define REG_DISP_TOP_GAMMA1_7D_L               (REG_DISP_TOP_GAMMA1_BASE + 0xfa)
#define REG_DISP_TOP_GAMMA1_7E_L               (REG_DISP_TOP_GAMMA1_BASE + 0xfc)
#define REG_DISP_TOP_GAMMA1_7F_L               (REG_DISP_TOP_GAMMA1_BASE + 0xfe)
// h0000, bit: 3
/* Reserved for HW ECO*/
#define offset_of_disp_top2_reg_sc_top_hw_reserve (0x0)
#define mask_of_disp_top2_reg_sc_top_hw_reserve   (0xf)
#define shift_of_disp_top2_reg_sc_top_hw_reserve  (0)
#define DISP_TOP2_REG_SC_TOP_HW_RESERVE           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_sc_top_hw_reserve)
#define REG_DISP_TOP2_00_L                        (DISP_TOP2_REG_SC_TOP_HW_RESERVE)
// h0000, bit: 7
/* Select source of test_bus*/
#define offset_of_disp_top2_reg_test_sel (0x0)
#define mask_of_disp_top2_reg_test_sel   (0xf0)
#define shift_of_disp_top2_reg_test_sel  (4)
#define DISP_TOP2_REG_TEST_SEL           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_test_sel)
// h0000, bit: 15
/* SW reset
[0] sw reset IP2
[2] sw reset register2
[3] sw reset interrupt2*/
#define offset_of_disp_top2_reg_sw_rst (0x0)
#define mask_of_disp_top2_reg_sw_rst   (0xff00)
#define shift_of_disp_top2_reg_sw_rst  (8)
#define DISP_TOP2_REG_SW_RST           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_sw_rst)
#define REG_DISP_TOP2_01_L             (REG_DISP_TOP2_BASE + 0x2)
// h0002, bit: 15
/* Status of interrupt, write 1 to clear*/
#define offset_of_disp_top2_reg_intr_status_grp_a (0x4)
#define mask_of_disp_top2_reg_intr_status_grp_a   (0xffff)
#define shift_of_disp_top2_reg_intr_status_grp_a  (0)
#define DISP_TOP2_REG_INTR_STATUS_GRP_A           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_intr_status_grp_a)
#define REG_DISP_TOP2_02_L                        (DISP_TOP2_REG_INTR_STATUS_GRP_A)
// h0003, bit: 15
/* Enable interrupt*/
#define offset_of_disp_top2_reg_intr_mask_grp_a (0x6)
#define mask_of_disp_top2_reg_intr_mask_grp_a   (0xffff)
#define shift_of_disp_top2_reg_intr_mask_grp_a  (0)
#define DISP_TOP2_REG_INTR_MASK_GRP_A           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_intr_mask_grp_a)
#define REG_DISP_TOP2_03_L                      (DISP_TOP2_REG_INTR_MASK_GRP_A)
// h0004, bit: 15
/* Original status of interrupt source*/
#define offset_of_disp_top2_reg_intr_raw_status_grp_a (0x8)
#define mask_of_disp_top2_reg_intr_raw_status_grp_a   (0xffff)
#define shift_of_disp_top2_reg_intr_raw_status_grp_a  (0)
#define DISP_TOP2_REG_INTR_RAW_STATUS_GRP_A           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_intr_raw_status_grp_a)
#define REG_DISP_TOP2_04_L                            (DISP_TOP2_REG_INTR_RAW_STATUS_GRP_A)
// h0005, bit: 15
/* force interrupt*/
#define offset_of_disp_top2_reg_intr_force_grp_a (0xa)
#define mask_of_disp_top2_reg_intr_force_grp_a   (0xffff)
#define shift_of_disp_top2_reg_intr_force_grp_a  (0)
#define DISP_TOP2_REG_INTR_FORCE_GRP_A           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_intr_force_grp_a)
#define REG_DISP_TOP2_05_L                       (DISP_TOP2_REG_INTR_FORCE_GRP_A)
#define REG_DISP_TOP2_06_L                       (REG_DISP_TOP2_BASE + 0xc)
// h0007, bit: 0
/* Select source of mace
0: from scaling patgen
1: from external video source*/
#define offset_of_disp_top2_reg_mace_src_sel (0xe)
#define mask_of_disp_top2_reg_mace_src_sel   (0x1)
#define shift_of_disp_top2_reg_mace_src_sel  (0)
#define DISP_TOP2_REG_MACE_SRC_SEL           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_mace_src_sel)
#define REG_DISP_TOP2_07_L                   (DISP_TOP2_REG_MACE_SRC_SEL)
// h0007, bit: 4
/* Select scaling patgen mode
3'h0: 1-pix gray ramp
3'h1: 16-pix gray ramp
3'h2: 32-pix gray ramp
3'h3: 64-pix gray ramp
3'h4: 16-pix gray stick
3'h5: 16-pix colorbar
3'h6: 32-pix colorbar
3'h7: 64-pix colorbar*/
#define offset_of_disp_top2_reg_patgen_mode (0xe)
#define mask_of_disp_top2_reg_patgen_mode   (0x1e)
#define shift_of_disp_top2_reg_patgen_mode  (1)
#define DISP_TOP2_REG_PATGEN_MODE           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_patgen_mode)
// h0007, bit: 8
/* Force window 0 no signal*/
#define offset_of_disp_top2_reg_force_w0_no_signal (0xe)
#define mask_of_disp_top2_reg_force_w0_no_signal   (0x100)
#define shift_of_disp_top2_reg_force_w0_no_signal  (8)
#define DISP_TOP2_REG_FORCE_W0_NO_SIGNAL           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_force_w0_no_signal)
// h0007, bit: 15
/* Force all windows no signal*/
#define offset_of_disp_top2_reg_force_all_no_signal (0xe)
#define mask_of_disp_top2_reg_force_all_no_signal   (0x8000)
#define shift_of_disp_top2_reg_force_all_no_signal  (15)
#define DISP_TOP2_REG_FORCE_ALL_NO_SIGNAL           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_force_all_no_signal)
// bigger than 16 bit case allh0008
#define offset_of_disp_top2_reg_bist_fail_status (0x10)
#define mask_of_disp_top2_reg_bist_fail_status   (0xffffffff)
#define shift_of_disp_top2_reg_bist_fail_status  (0)
#define DISP_TOP2_REG_BIST_FAIL_STATUS           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_bist_fail_status)
// h0008, bit: 15
/* Status of BIST fail*/
#define offset_of_disp_top2_reg_bist_fail_status_0 (0x10)
#define mask_of_disp_top2_reg_bist_fail_status_0   (0xffff)
#define shift_of_disp_top2_reg_bist_fail_status_0  (0)
#define DISP_TOP2_REG_BIST_FAIL_STATUS_0           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_bist_fail_status_0)
#define REG_DISP_TOP2_08_L                         (DISP_TOP2_REG_BIST_FAIL_STATUS_0)
// h0009, bit: 15
/* Status of BIST fail*/
#define offset_of_disp_top2_reg_bist_fail_status_1 (0x12)
#define mask_of_disp_top2_reg_bist_fail_status_1   (0xffff)
#define shift_of_disp_top2_reg_bist_fail_status_1  (0)
#define DISP_TOP2_REG_BIST_FAIL_STATUS_1           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_bist_fail_status_1)
#define REG_DISP_TOP2_09_L                         (DISP_TOP2_REG_BIST_FAIL_STATUS_1)
#define REG_DISP_TOP2_0A_L                         (REG_DISP_TOP2_BASE + 0x14)
#define REG_DISP_TOP2_0B_L                         (REG_DISP_TOP2_BASE + 0x16)
#define REG_DISP_TOP2_0C_L                         (REG_DISP_TOP2_BASE + 0x18)
#define REG_DISP_TOP2_0D_L                         (REG_DISP_TOP2_BASE + 0x1a)
#define REG_DISP_TOP2_0E_L                         (REG_DISP_TOP2_BASE + 0x1c)
#define REG_DISP_TOP2_0F_L                         (REG_DISP_TOP2_BASE + 0x1e)
// bigger than 16 bit case allh0010
#define offset_of_disp_top2_reg_syn_set (0x20)
#define mask_of_disp_top2_reg_syn_set   (0xffffff)
#define shift_of_disp_top2_reg_syn_set  (0)
#define DISP_TOP2_REG_SYN_SET           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_syn_set)
// h0010, bit: 15
/* Set of synthesizer, same value with disp_top0*/
#define offset_of_disp_top2_reg_syn_set_0 (0x20)
#define mask_of_disp_top2_reg_syn_set_0   (0xffff)
#define shift_of_disp_top2_reg_syn_set_0  (0)
#define DISP_TOP2_REG_SYN_SET_0           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_syn_set_0)
#define REG_DISP_TOP2_10_L                (DISP_TOP2_REG_SYN_SET_0)
// h0011, bit: 7
/* Set of synthesizer, same value with disp_top0*/
#define offset_of_disp_top2_reg_syn_set_1 (0x22)
#define mask_of_disp_top2_reg_syn_set_1   (0xff)
#define shift_of_disp_top2_reg_syn_set_1  (0)
#define DISP_TOP2_REG_SYN_SET_1           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_syn_set_1)
#define REG_DISP_TOP2_11_L                (DISP_TOP2_REG_SYN_SET_1)
#define REG_DISP_TOP2_12_L                (REG_DISP_TOP2_BASE + 0x24)
#define REG_DISP_TOP2_13_L                (REG_DISP_TOP2_BASE + 0x26)
#define REG_DISP_TOP2_14_L                (REG_DISP_TOP2_BASE + 0x28)
// h0015, bit: 0
/* Enable Frame PLL*/
#define offset_of_disp_top2_reg_frame_pll_en (0x2a)
#define mask_of_disp_top2_reg_frame_pll_en   (0x1)
#define shift_of_disp_top2_reg_frame_pll_en  (0)
#define DISP_TOP2_REG_FRAME_PLL_EN           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_frame_pll_en)
#define REG_DISP_TOP2_15_L                   (DISP_TOP2_REG_FRAME_PLL_EN)
// h0015, bit: 1
/* select disppll set src, lower priority than reg_fpll_ovs_sel
reg_fpll_ovs_sel = 1, disppll select fpll
reg_fpll_ovs_sel = 1, reg_fpll1_set_sel = 1, disppll select fpll1
otherwise 0.*/
#define offset_of_disp_top2_reg_fpll1_set_sel (0x2a)
#define mask_of_disp_top2_reg_fpll1_set_sel   (0x2)
#define shift_of_disp_top2_reg_fpll1_set_sel  (1)
#define DISP_TOP2_REG_FPLL1_SET_SEL           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_fpll1_set_sel)
// h0015, bit: 7
/* Reset Frame PLL*/
#define offset_of_disp_top2_reg_frame_pll_rst (0x2a)
#define mask_of_disp_top2_reg_frame_pll_rst   (0x80)
#define shift_of_disp_top2_reg_frame_pll_rst  (7)
#define DISP_TOP2_REG_FRAME_PLL_RST           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_frame_pll_rst)
#define REG_DISP_TOP2_16_L                    (REG_DISP_TOP2_BASE + 0x2c)
// h0017, bit: 14
/* Status of FPLL lost lock, Write 1 to clear*/
#define offset_of_disp_top2_reg_fpll_unlocked (0x2e)
#define mask_of_disp_top2_reg_fpll_unlocked   (0x4000)
#define shift_of_disp_top2_reg_fpll_unlocked  (14)
#define DISP_TOP2_REG_FPLL_UNLOCKED           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_fpll_unlocked)
#define REG_DISP_TOP2_17_L                    (DISP_TOP2_REG_FPLL_UNLOCKED)
// h0017, bit: 15
/* Status of FPLL lock*/
#define offset_of_disp_top2_reg_fpll_locked (0x2e)
#define mask_of_disp_top2_reg_fpll_locked   (0x8000)
#define shift_of_disp_top2_reg_fpll_locked  (15)
#define DISP_TOP2_REG_FPLL_LOCKED           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_fpll_locked)
// h0018, bit: 15
/* Phase error*/
#define offset_of_disp_top2_reg_raw_phase_err_rd (0x30)
#define mask_of_disp_top2_reg_raw_phase_err_rd   (0xffff)
#define shift_of_disp_top2_reg_raw_phase_err_rd  (0)
#define DISP_TOP2_REG_RAW_PHASE_ERR_RD           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_raw_phase_err_rd)
#define REG_DISP_TOP2_18_L                       (DISP_TOP2_REG_RAW_PHASE_ERR_RD)
// h0019, bit: 15
/* Frequency error*/
#define offset_of_disp_top2_reg_raw_freq_err_rd (0x32)
#define mask_of_disp_top2_reg_raw_freq_err_rd   (0xffff)
#define shift_of_disp_top2_reg_raw_freq_err_rd  (0)
#define DISP_TOP2_REG_RAW_FREQ_ERR_RD           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_raw_freq_err_rd)
#define REG_DISP_TOP2_19_L                      (DISP_TOP2_REG_RAW_FREQ_ERR_RD)
// h001a, bit: 11
/* Ratio of one clock, format 4.8*/
#define offset_of_disp_top2_reg_fpll_step_gain (0x34)
#define mask_of_disp_top2_reg_fpll_step_gain   (0xfff)
#define shift_of_disp_top2_reg_fpll_step_gain  (0)
#define DISP_TOP2_REG_FPLL_STEP_GAIN           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_fpll_step_gain)
#define REG_DISP_TOP2_1A_L                     (DISP_TOP2_REG_FPLL_STEP_GAIN)
// h001a, bit: 14
/* Counter of input frame is overflow*/
#define offset_of_disp_top2_reg_fin_freq_overflow (0x34)
#define mask_of_disp_top2_reg_fin_freq_overflow   (0x4000)
#define shift_of_disp_top2_reg_fin_freq_overflow  (14)
#define DISP_TOP2_REG_FIN_FREQ_OVERFLOW           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_fin_freq_overflow)
// h001a, bit: 15
/* Counter of output frame is overflow*/
#define offset_of_disp_top2_reg_fout_freq_overflow (0x34)
#define mask_of_disp_top2_reg_fout_freq_overflow   (0x8000)
#define shift_of_disp_top2_reg_fout_freq_overflow  (15)
#define DISP_TOP2_REG_FOUT_FREQ_OVERFLOW           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_fout_freq_overflow)
// h001b, bit: 3
/* Gain of phase,
0x7: 2x
0x8: 1x
0x9: ½ x*/
#define offset_of_disp_top2_reg_fpll_phase_gain (0x36)
#define mask_of_disp_top2_reg_fpll_phase_gain   (0xf)
#define shift_of_disp_top2_reg_fpll_phase_gain  (0)
#define DISP_TOP2_REG_FPLL_PHASE_GAIN           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_fpll_phase_gain)
#define REG_DISP_TOP2_1B_L                      (DISP_TOP2_REG_FPLL_PHASE_GAIN)
// h001b, bit: 7
/* Gain of frequency,
0x7: 2x
0x8: 1x
0x9: ½ x*/
#define offset_of_disp_top2_reg_fpll_freq_gain (0x36)
#define mask_of_disp_top2_reg_fpll_freq_gain   (0xf0)
#define shift_of_disp_top2_reg_fpll_freq_gain  (4)
#define DISP_TOP2_REG_FPLL_FREQ_GAIN           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_fpll_freq_gain)
// h001b, bit: 15
/* Threshold({reg_fpll_phase_lock_thd,2'b11}) to judge lock or not.*/
#define offset_of_disp_top2_reg_fpll_phase_lock_thd (0x36)
#define mask_of_disp_top2_reg_fpll_phase_lock_thd   (0xff00)
#define shift_of_disp_top2_reg_fpll_phase_lock_thd  (8)
#define DISP_TOP2_REG_FPLL_PHASE_LOCK_THD           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_fpll_phase_lock_thd)
// bigger than 16 bit case allh001c
#define offset_of_disp_top2_reg_fpll_abs_limit (0x38)
#define mask_of_disp_top2_reg_fpll_abs_limit   (0xfffff)
#define shift_of_disp_top2_reg_fpll_abs_limit  (0)
#define DISP_TOP2_REG_FPLL_ABS_LIMIT           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_fpll_abs_limit)
// h001c, bit: 15
/* Limit of frame PLL step*/
#define offset_of_disp_top2_reg_fpll_abs_limit_0 (0x38)
#define mask_of_disp_top2_reg_fpll_abs_limit_0   (0xffff)
#define shift_of_disp_top2_reg_fpll_abs_limit_0  (0)
#define DISP_TOP2_REG_FPLL_ABS_LIMIT_0           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_fpll_abs_limit_0)
#define REG_DISP_TOP2_1C_L                       (DISP_TOP2_REG_FPLL_ABS_LIMIT_0)
// h001d, bit: 3
/* Limit of frame PLL step*/
#define offset_of_disp_top2_reg_fpll_abs_limit_1 (0x3a)
#define mask_of_disp_top2_reg_fpll_abs_limit_1   (0xf)
#define shift_of_disp_top2_reg_fpll_abs_limit_1  (0)
#define DISP_TOP2_REG_FPLL_ABS_LIMIT_1           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_fpll_abs_limit_1)
#define REG_DISP_TOP2_1D_L                       (DISP_TOP2_REG_FPLL_ABS_LIMIT_1)
#define REG_DISP_TOP2_1E_L                       (REG_DISP_TOP2_BASE + 0x3c)
#define REG_DISP_TOP2_1F_L                       (REG_DISP_TOP2_BASE + 0x3e)
// h0020, bit: 3
/* hdmi clk freq / odclk freq = ?
4'h0 : 1x, 4'h1: 2x, ….. 4'hf : 16x*/
#define offset_of_disp_top2_reg_hdmi_to_odclk_rate (0x40)
#define mask_of_disp_top2_reg_hdmi_to_odclk_rate   (0xf)
#define shift_of_disp_top2_reg_hdmi_to_odclk_rate  (0)
#define DISP_TOP2_REG_HDMI_TO_ODCLK_RATE           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_hdmi_to_odclk_rate)
#define REG_DISP_TOP2_20_L                         (DISP_TOP2_REG_HDMI_TO_ODCLK_RATE)
// h0020, bit: 12
/* 1'b0: separate mop window, 1'b1:4 mop windows merge to path1*/
#define offset_of_disp_top2_reg_mop_win_merge (0x40)
#define mask_of_disp_top2_reg_mop_win_merge   (0x1000)
#define shift_of_disp_top2_reg_mop_win_merge  (12)
#define DISP_TOP2_REG_MOP_WIN_MERGE           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_mop_win_merge)
// h0020, bit: 13
/* OP2 -> 1'b0: osdb no swap(back). 1'b1:osdb swap to front*/
#define offset_of_disp_top2_reg_osdb_swap_en (0x40)
#define mask_of_disp_top2_reg_osdb_swap_en   (0x2000)
#define shift_of_disp_top2_reg_osdb_swap_en  (13)
#define DISP_TOP2_REG_OSDB_SWAP_EN           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_osdb_swap_en)
// h0020, bit: 15
/* [0]: 1'b0: mopg, 1'b1: moprot0
[1]: 1'b0: mops, 1'b1: moprot1*/
#define offset_of_disp_top2_reg_miu_moprot_mux (0x40)
#define mask_of_disp_top2_reg_miu_moprot_mux   (0xc000)
#define shift_of_disp_top2_reg_miu_moprot_mux  (14)
#define DISP_TOP2_REG_MIU_MOPROT_MUX           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_miu_moprot_mux)
#define REG_DISP_TOP2_21_L                     (REG_DISP_TOP2_BASE + 0x42)
#define REG_DISP_TOP2_22_L                     (REG_DISP_TOP2_BASE + 0x44)
#define REG_DISP_TOP2_23_L                     (REG_DISP_TOP2_BASE + 0x46)
#define REG_DISP_TOP2_24_L                     (REG_DISP_TOP2_BASE + 0x48)
#define REG_DISP_TOP2_25_L                     (REG_DISP_TOP2_BASE + 0x4a)
#define REG_DISP_TOP2_26_L                     (REG_DISP_TOP2_BASE + 0x4c)
#define REG_DISP_TOP2_27_L                     (REG_DISP_TOP2_BASE + 0x4e)
#define REG_DISP_TOP2_28_L                     (REG_DISP_TOP2_BASE + 0x50)
#define REG_DISP_TOP2_29_L                     (REG_DISP_TOP2_BASE + 0x52)
#define REG_DISP_TOP2_2A_L                     (REG_DISP_TOP2_BASE + 0x54)
#define REG_DISP_TOP2_2B_L                     (REG_DISP_TOP2_BASE + 0x56)
#define REG_DISP_TOP2_2C_L                     (REG_DISP_TOP2_BASE + 0x58)
#define REG_DISP_TOP2_2D_L                     (REG_DISP_TOP2_BASE + 0x5a)
#define REG_DISP_TOP2_2E_L                     (REG_DISP_TOP2_BASE + 0x5c)
#define REG_DISP_TOP2_2F_L                     (REG_DISP_TOP2_BASE + 0x5e)
#define REG_DISP_TOP2_30_L                     (REG_DISP_TOP2_BASE + 0x60)
#define REG_DISP_TOP2_31_L                     (REG_DISP_TOP2_BASE + 0x62)
#define REG_DISP_TOP2_32_L                     (REG_DISP_TOP2_BASE + 0x64)
#define REG_DISP_TOP2_33_L                     (REG_DISP_TOP2_BASE + 0x66)
#define REG_DISP_TOP2_34_L                     (REG_DISP_TOP2_BASE + 0x68)
#define REG_DISP_TOP2_35_L                     (REG_DISP_TOP2_BASE + 0x6a)
#define REG_DISP_TOP2_36_L                     (REG_DISP_TOP2_BASE + 0x6c)
#define REG_DISP_TOP2_37_L                     (REG_DISP_TOP2_BASE + 0x6e)
#define REG_DISP_TOP2_38_L                     (REG_DISP_TOP2_BASE + 0x70)
#define REG_DISP_TOP2_39_L                     (REG_DISP_TOP2_BASE + 0x72)
#define REG_DISP_TOP2_3A_L                     (REG_DISP_TOP2_BASE + 0x74)
#define REG_DISP_TOP2_3B_L                     (REG_DISP_TOP2_BASE + 0x76)
#define REG_DISP_TOP2_3C_L                     (REG_DISP_TOP2_BASE + 0x78)
#define REG_DISP_TOP2_3D_L                     (REG_DISP_TOP2_BASE + 0x7a)
#define REG_DISP_TOP2_3E_L                     (REG_DISP_TOP2_BASE + 0x7c)
#define REG_DISP_TOP2_3F_L                     (REG_DISP_TOP2_BASE + 0x7e)
// h0040, bit: 15
/* Status of CMDQ interrupt, write 1 to clear*/
#define offset_of_disp_top2_reg_cmdq_intr_status_grp_a (0x80)
#define mask_of_disp_top2_reg_cmdq_intr_status_grp_a   (0xffff)
#define shift_of_disp_top2_reg_cmdq_intr_status_grp_a  (0)
#define DISP_TOP2_REG_CMDQ_INTR_STATUS_GRP_A           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_cmdq_intr_status_grp_a)
#define REG_DISP_TOP2_40_L                             (DISP_TOP2_REG_CMDQ_INTR_STATUS_GRP_A)
// h0041, bit: 15
/* Enable CMDQ interrupt*/
#define offset_of_disp_top2_reg_cmdq_intr_mask_grp_a (0x82)
#define mask_of_disp_top2_reg_cmdq_intr_mask_grp_a   (0xffff)
#define shift_of_disp_top2_reg_cmdq_intr_mask_grp_a  (0)
#define DISP_TOP2_REG_CMDQ_INTR_MASK_GRP_A           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_cmdq_intr_mask_grp_a)
#define REG_DISP_TOP2_41_L                           (DISP_TOP2_REG_CMDQ_INTR_MASK_GRP_A)
// h0042, bit: 15
/* Original status of CMDQ interrupt source*/
#define offset_of_disp_top2_reg_cmdq_intr_raw_status_grp_a (0x84)
#define mask_of_disp_top2_reg_cmdq_intr_raw_status_grp_a   (0xffff)
#define shift_of_disp_top2_reg_cmdq_intr_raw_status_grp_a  (0)
#define DISP_TOP2_REG_CMDQ_INTR_RAW_STATUS_GRP_A \
    (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_cmdq_intr_raw_status_grp_a)
#define REG_DISP_TOP2_42_L (DISP_TOP2_REG_CMDQ_INTR_RAW_STATUS_GRP_A)
// h0043, bit: 15
/* force CMDQ interrupt*/
#define offset_of_disp_top2_reg_cmdq_intr_force_grp_a (0x86)
#define mask_of_disp_top2_reg_cmdq_intr_force_grp_a   (0xffff)
#define shift_of_disp_top2_reg_cmdq_intr_force_grp_a  (0)
#define DISP_TOP2_REG_CMDQ_INTR_FORCE_GRP_A           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_cmdq_intr_force_grp_a)
#define REG_DISP_TOP2_43_L                            (DISP_TOP2_REG_CMDQ_INTR_FORCE_GRP_A)
// h0044, bit: 15
/* debug hcnt*/
#define offset_of_disp_top2_reg_debug_hcnt (0x88)
#define mask_of_disp_top2_reg_debug_hcnt   (0xffff)
#define shift_of_disp_top2_reg_debug_hcnt  (0)
#define DISP_TOP2_REG_DEBUG_HCNT           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_debug_hcnt)
#define REG_DISP_TOP2_44_L                 (DISP_TOP2_REG_DEBUG_HCNT)
// h0045, bit: 15
/* debug vcnt*/
#define offset_of_disp_top2_reg_debug_vcnt (0x8a)
#define mask_of_disp_top2_reg_debug_vcnt   (0xffff)
#define shift_of_disp_top2_reg_debug_vcnt  (0)
#define DISP_TOP2_REG_DEBUG_VCNT           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_debug_vcnt)
#define REG_DISP_TOP2_45_L                 (DISP_TOP2_REG_DEBUG_VCNT)
// h0046, bit: 1
/* debug mode*/
#define offset_of_disp_top2_reg_debug_mode (0x8c)
#define mask_of_disp_top2_reg_debug_mode   (0x3)
#define shift_of_disp_top2_reg_debug_mode  (0)
#define DISP_TOP2_REG_DEBUG_MODE           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_debug_mode)
#define REG_DISP_TOP2_46_L                 (DISP_TOP2_REG_DEBUG_MODE)
#define REG_DISP_TOP2_47_L                 (REG_DISP_TOP2_BASE + 0x8e)
#define REG_DISP_TOP2_48_L                 (REG_DISP_TOP2_BASE + 0x90)
#define REG_DISP_TOP2_49_L                 (REG_DISP_TOP2_BASE + 0x92)
#define REG_DISP_TOP2_4A_L                 (REG_DISP_TOP2_BASE + 0x94)
#define REG_DISP_TOP2_4B_L                 (REG_DISP_TOP2_BASE + 0x96)
#define REG_DISP_TOP2_4C_L                 (REG_DISP_TOP2_BASE + 0x98)
#define REG_DISP_TOP2_4D_L                 (REG_DISP_TOP2_BASE + 0x9a)
#define REG_DISP_TOP2_4E_L                 (REG_DISP_TOP2_BASE + 0x9c)
#define REG_DISP_TOP2_4F_L                 (REG_DISP_TOP2_BASE + 0x9e)
// h0050, bit: 0
/* [0]reg_vip_bypass_en
[1] reg_disp_yc422*/
#define offset_of_disp_top2_reg_disp_yc422 (0xa0)
#define mask_of_disp_top2_reg_disp_yc422   (0x1)
#define shift_of_disp_top2_reg_disp_yc422  (0)
#define DISP_TOP2_REG_DISP_YC422           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_disp_yc422)
#define REG_DISP_TOP2_50_L                 (DISP_TOP2_REG_DISP_YC422)
// h0050, bit: 3
/* display 444 to 422 C filter*/
#define offset_of_disp_top2_reg_disp_c_filter (0xa0)
#define mask_of_disp_top2_reg_disp_c_filter   (0xe)
#define shift_of_disp_top2_reg_disp_c_filter  (1)
#define DISP_TOP2_REG_DISP_C_FILTER           (REG_DISP_TOP2_BASE + offset_of_disp_top2_reg_disp_c_filter)
#define REG_DISP_TOP2_51_L                    (REG_DISP_TOP2_BASE + 0xa2)
#define REG_DISP_TOP2_52_L                    (REG_DISP_TOP2_BASE + 0xa4)
#define REG_DISP_TOP2_53_L                    (REG_DISP_TOP2_BASE + 0xa6)
#define REG_DISP_TOP2_54_L                    (REG_DISP_TOP2_BASE + 0xa8)
#define REG_DISP_TOP2_55_L                    (REG_DISP_TOP2_BASE + 0xaa)
#define REG_DISP_TOP2_56_L                    (REG_DISP_TOP2_BASE + 0xac)
#define REG_DISP_TOP2_57_L                    (REG_DISP_TOP2_BASE + 0xae)
#define REG_DISP_TOP2_58_L                    (REG_DISP_TOP2_BASE + 0xb0)
#define REG_DISP_TOP2_59_L                    (REG_DISP_TOP2_BASE + 0xb2)
#define REG_DISP_TOP2_5A_L                    (REG_DISP_TOP2_BASE + 0xb4)
#define REG_DISP_TOP2_5B_L                    (REG_DISP_TOP2_BASE + 0xb6)
#define REG_DISP_TOP2_5C_L                    (REG_DISP_TOP2_BASE + 0xb8)
#define REG_DISP_TOP2_5D_L                    (REG_DISP_TOP2_BASE + 0xba)
#define REG_DISP_TOP2_5E_L                    (REG_DISP_TOP2_BASE + 0xbc)
#define REG_DISP_TOP2_5F_L                    (REG_DISP_TOP2_BASE + 0xbe)
#define REG_DISP_TOP2_60_L                    (REG_DISP_TOP2_BASE + 0xc0)
#define REG_DISP_TOP2_61_L                    (REG_DISP_TOP2_BASE + 0xc2)
#define REG_DISP_TOP2_62_L                    (REG_DISP_TOP2_BASE + 0xc4)
#define REG_DISP_TOP2_63_L                    (REG_DISP_TOP2_BASE + 0xc6)
#define REG_DISP_TOP2_64_L                    (REG_DISP_TOP2_BASE + 0xc8)
#define REG_DISP_TOP2_65_L                    (REG_DISP_TOP2_BASE + 0xca)
#define REG_DISP_TOP2_66_L                    (REG_DISP_TOP2_BASE + 0xcc)
#define REG_DISP_TOP2_67_L                    (REG_DISP_TOP2_BASE + 0xce)
#define REG_DISP_TOP2_68_L                    (REG_DISP_TOP2_BASE + 0xd0)
#define REG_DISP_TOP2_69_L                    (REG_DISP_TOP2_BASE + 0xd2)
#define REG_DISP_TOP2_6A_L                    (REG_DISP_TOP2_BASE + 0xd4)
#define REG_DISP_TOP2_6B_L                    (REG_DISP_TOP2_BASE + 0xd6)
#define REG_DISP_TOP2_6C_L                    (REG_DISP_TOP2_BASE + 0xd8)
#define REG_DISP_TOP2_6D_L                    (REG_DISP_TOP2_BASE + 0xda)
#define REG_DISP_TOP2_6E_L                    (REG_DISP_TOP2_BASE + 0xdc)
#define REG_DISP_TOP2_6F_L                    (REG_DISP_TOP2_BASE + 0xde)
#define REG_DISP_TOP2_70_L                    (REG_DISP_TOP2_BASE + 0xe0)
#define REG_DISP_TOP2_71_L                    (REG_DISP_TOP2_BASE + 0xe2)
#define REG_DISP_TOP2_72_L                    (REG_DISP_TOP2_BASE + 0xe4)
#define REG_DISP_TOP2_73_L                    (REG_DISP_TOP2_BASE + 0xe6)
#define REG_DISP_TOP2_74_L                    (REG_DISP_TOP2_BASE + 0xe8)
#define REG_DISP_TOP2_75_L                    (REG_DISP_TOP2_BASE + 0xea)
#define REG_DISP_TOP2_76_L                    (REG_DISP_TOP2_BASE + 0xec)
#define REG_DISP_TOP2_77_L                    (REG_DISP_TOP2_BASE + 0xee)
#define REG_DISP_TOP2_78_L                    (REG_DISP_TOP2_BASE + 0xf0)
#define REG_DISP_TOP2_79_L                    (REG_DISP_TOP2_BASE + 0xf2)
#define REG_DISP_TOP2_7A_L                    (REG_DISP_TOP2_BASE + 0xf4)
#define REG_DISP_TOP2_7B_L                    (REG_DISP_TOP2_BASE + 0xf6)
#define REG_DISP_TOP2_7C_L                    (REG_DISP_TOP2_BASE + 0xf8)
#define REG_DISP_TOP2_7D_L                    (REG_DISP_TOP2_BASE + 0xfa)
#define REG_DISP_TOP2_7E_L                    (REG_DISP_TOP2_BASE + 0xfc)
#define REG_DISP_TOP2_7F_L                    (REG_DISP_TOP2_BASE + 0xfe)
#define REG_DISP_TOP_OP22_00_L                (REG_DISP_TOP_OP22_BASE + 0x0)
#define REG_DISP_TOP_OP22_01_L                (REG_DISP_TOP_OP22_BASE + 0x2)
#define REG_DISP_TOP_OP22_02_L                (REG_DISP_TOP_OP22_BASE + 0x4)
#define REG_DISP_TOP_OP22_03_L                (REG_DISP_TOP_OP22_BASE + 0x6)
#define REG_DISP_TOP_OP22_04_L                (REG_DISP_TOP_OP22_BASE + 0x8)
#define REG_DISP_TOP_OP22_05_L                (REG_DISP_TOP_OP22_BASE + 0xa)
#define REG_DISP_TOP_OP22_06_L                (REG_DISP_TOP_OP22_BASE + 0xc)
#define REG_DISP_TOP_OP22_07_L                (REG_DISP_TOP_OP22_BASE + 0xe)
#define REG_DISP_TOP_OP22_08_L                (REG_DISP_TOP_OP22_BASE + 0x10)
#define REG_DISP_TOP_OP22_09_L                (REG_DISP_TOP_OP22_BASE + 0x12)
#define REG_DISP_TOP_OP22_0A_L                (REG_DISP_TOP_OP22_BASE + 0x14)
#define REG_DISP_TOP_OP22_0B_L                (REG_DISP_TOP_OP22_BASE + 0x16)
#define REG_DISP_TOP_OP22_0C_L                (REG_DISP_TOP_OP22_BASE + 0x18)
#define REG_DISP_TOP_OP22_0D_L                (REG_DISP_TOP_OP22_BASE + 0x1a)
#define REG_DISP_TOP_OP22_0E_L                (REG_DISP_TOP_OP22_BASE + 0x1c)
#define REG_DISP_TOP_OP22_0F_L                (REG_DISP_TOP_OP22_BASE + 0x1e)
// h0010, bit: 0
/* Using external pulse to reset HCOUNT/VCOUNT // v2 usage*/
#define offset_of_disp_top_op22_reg_tgen_ext_frm_reset_en (0x20)
#define mask_of_disp_top_op22_reg_tgen_ext_frm_reset_en   (0x1)
#define shift_of_disp_top_op22_reg_tgen_ext_frm_reset_en  (0)
#define DISP_TOP_OP22_REG_TGEN_EXT_FRM_RESET_EN \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_ext_frm_reset_en)
#define REG_DISP_TOP_OP22_10_L (DISP_TOP_OP22_REG_TGEN_EXT_FRM_RESET_EN)
// h0010, bit: 1
/* 0: reset immediatlly  // v2 usage
1: reset at line end*/
#define offset_of_disp_top_op22_reg_tgen_ext_frm_reset_mode (0x20)
#define mask_of_disp_top_op22_reg_tgen_ext_frm_reset_mode   (0x2)
#define shift_of_disp_top_op22_reg_tgen_ext_frm_reset_mode  (1)
#define DISP_TOP_OP22_REG_TGEN_EXT_FRM_RESET_MODE \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_ext_frm_reset_mode)
// h0010, bit: 2
/* Using external pulse to reset HCOUNT  // v2 usage*/
#define offset_of_disp_top_op22_reg_tgen_ext_hs_en (0x20)
#define mask_of_disp_top_op22_reg_tgen_ext_hs_en   (0x4)
#define shift_of_disp_top_op22_reg_tgen_ext_hs_en  (2)
#define DISP_TOP_OP22_REG_TGEN_EXT_HS_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_ext_hs_en)
// h0010, bit: 7
/* Reference source of FPLL
00: End of VFDE
01: Start of VFDE
10: End of VSYNC
11: Startof VSYNC*/
#define offset_of_disp_top_op22_reg_tgen_fpll_ref_sel (0x20)
#define mask_of_disp_top_op22_reg_tgen_fpll_ref_sel   (0xc0)
#define shift_of_disp_top_op22_reg_tgen_fpll_ref_sel  (6)
#define DISP_TOP_OP22_REG_TGEN_FPLL_REF_SEL           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_fpll_ref_sel)
// h0010, bit: 15
/* Reference delayed PIPE to FPLL  */
#define offset_of_disp_top_op22_reg_tgen_fpll_dly (0x20)
#define mask_of_disp_top_op22_reg_tgen_fpll_dly   (0xff00)
#define shift_of_disp_top_op22_reg_tgen_fpll_dly  (8)
#define DISP_TOP_OP22_REG_TGEN_FPLL_DLY           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_fpll_dly)
// h0011, bit: 12
/* H_TOTAL, total pixel minus 1*/
#define offset_of_disp_top_op22_reg_tgen_h_total (0x22)
#define mask_of_disp_top_op22_reg_tgen_h_total   (0x1fff)
#define shift_of_disp_top_op22_reg_tgen_h_total  (0)
#define DISP_TOP_OP22_REG_TGEN_H_TOTAL           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_h_total)
#define REG_DISP_TOP_OP22_11_L                   (DISP_TOP_OP22_REG_TGEN_H_TOTAL)
// h0012, bit: 12
/* V_TOTAL, total lines minus 1*/
#define offset_of_disp_top_op22_reg_tgen_v_total (0x24)
#define mask_of_disp_top_op22_reg_tgen_v_total   (0x1fff)
#define shift_of_disp_top_op22_reg_tgen_v_total  (0)
#define DISP_TOP_OP22_REG_TGEN_V_TOTAL           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_v_total)
#define REG_DISP_TOP_OP22_12_L                   (DISP_TOP_OP22_REG_TGEN_V_TOTAL)
// h0013, bit: 12
/* HSYNC start (included)*/
#define offset_of_disp_top_op22_reg_tgen_hs_start (0x26)
#define mask_of_disp_top_op22_reg_tgen_hs_start   (0x1fff)
#define shift_of_disp_top_op22_reg_tgen_hs_start  (0)
#define DISP_TOP_OP22_REG_TGEN_HS_START           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_hs_start)
#define REG_DISP_TOP_OP22_13_L                    (DISP_TOP_OP22_REG_TGEN_HS_START)
// h0014, bit: 12
/* HSYNC end (included)*/
#define offset_of_disp_top_op22_reg_tgen_hs_end (0x28)
#define mask_of_disp_top_op22_reg_tgen_hs_end   (0x1fff)
#define shift_of_disp_top_op22_reg_tgen_hs_end  (0)
#define DISP_TOP_OP22_REG_TGEN_HS_END           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_hs_end)
#define REG_DISP_TOP_OP22_14_L                  (DISP_TOP_OP22_REG_TGEN_HS_END)
// h0015, bit: 12
/* VSYNC start (included)*/
#define offset_of_disp_top_op22_reg_tgen_vs_start (0x2a)
#define mask_of_disp_top_op22_reg_tgen_vs_start   (0x1fff)
#define shift_of_disp_top_op22_reg_tgen_vs_start  (0)
#define DISP_TOP_OP22_REG_TGEN_VS_START           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_vs_start)
#define REG_DISP_TOP_OP22_15_L                    (DISP_TOP_OP22_REG_TGEN_VS_START)
// h0016, bit: 12
/* VSYNC end (included)*/
#define offset_of_disp_top_op22_reg_tgen_vs_end (0x2c)
#define mask_of_disp_top_op22_reg_tgen_vs_end   (0x1fff)
#define shift_of_disp_top_op22_reg_tgen_vs_end  (0)
#define DISP_TOP_OP22_REG_TGEN_VS_END           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_vs_end)
#define REG_DISP_TOP_OP22_16_L                  (DISP_TOP_OP22_REG_TGEN_VS_END)
// h0017, bit: 12
/* H frame de start (included)*/
#define offset_of_disp_top_op22_reg_tgen_hfde_start (0x2e)
#define mask_of_disp_top_op22_reg_tgen_hfde_start   (0x1fff)
#define shift_of_disp_top_op22_reg_tgen_hfde_start  (0)
#define DISP_TOP_OP22_REG_TGEN_HFDE_START           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_hfde_start)
#define REG_DISP_TOP_OP22_17_L                      (DISP_TOP_OP22_REG_TGEN_HFDE_START)
// h0018, bit: 12
/* H frame de end (included)*/
#define offset_of_disp_top_op22_reg_tgen_hfde_end (0x30)
#define mask_of_disp_top_op22_reg_tgen_hfde_end   (0x1fff)
#define shift_of_disp_top_op22_reg_tgen_hfde_end  (0)
#define DISP_TOP_OP22_REG_TGEN_HFDE_END           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_hfde_end)
#define REG_DISP_TOP_OP22_18_L                    (DISP_TOP_OP22_REG_TGEN_HFDE_END)
// h0019, bit: 12
/* V frame de start (included)*/
#define offset_of_disp_top_op22_reg_tgen_vfde_start (0x32)
#define mask_of_disp_top_op22_reg_tgen_vfde_start   (0x1fff)
#define shift_of_disp_top_op22_reg_tgen_vfde_start  (0)
#define DISP_TOP_OP22_REG_TGEN_VFDE_START           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_vfde_start)
#define REG_DISP_TOP_OP22_19_L                      (DISP_TOP_OP22_REG_TGEN_VFDE_START)
// h001a, bit: 12
/* V frame de end (included)*/
#define offset_of_disp_top_op22_reg_tgen_vfde_end (0x34)
#define mask_of_disp_top_op22_reg_tgen_vfde_end   (0x1fff)
#define shift_of_disp_top_op22_reg_tgen_vfde_end  (0)
#define DISP_TOP_OP22_REG_TGEN_VFDE_END           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_vfde_end)
#define REG_DISP_TOP_OP22_1A_L                    (DISP_TOP_OP22_REG_TGEN_VFDE_END)
// h001b, bit: 7
/* Frame no signal color B channel*/
#define offset_of_disp_top_op22_reg_fcolor_b (0x36)
#define mask_of_disp_top_op22_reg_fcolor_b   (0xff)
#define shift_of_disp_top_op22_reg_fcolor_b  (0)
#define DISP_TOP_OP22_REG_FCOLOR_B           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_fcolor_b)
#define REG_DISP_TOP_OP22_1B_L               (DISP_TOP_OP22_REG_FCOLOR_B)
// h001b, bit: 15
/* Frame no signal color G channel*/
#define offset_of_disp_top_op22_reg_fcolor_g (0x36)
#define mask_of_disp_top_op22_reg_fcolor_g   (0xff00)
#define shift_of_disp_top_op22_reg_fcolor_g  (8)
#define DISP_TOP_OP22_REG_FCOLOR_G           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_fcolor_g)
// h001c, bit: 7
/* Frame no signal color R channel*/
#define offset_of_disp_top_op22_reg_fcolor_r (0x38)
#define mask_of_disp_top_op22_reg_fcolor_r   (0xff)
#define shift_of_disp_top_op22_reg_fcolor_r  (0)
#define DISP_TOP_OP22_REG_FCOLOR_R           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_fcolor_r)
#define REG_DISP_TOP_OP22_1C_L               (DISP_TOP_OP22_REG_FCOLOR_R)
// h001c, bit: 15
/* Forced to show frame color*/
#define offset_of_disp_top_op22_reg_fcolor_force (0x38)
#define mask_of_disp_top_op22_reg_fcolor_force   (0x8000)
#define shift_of_disp_top_op22_reg_fcolor_force  (15)
#define DISP_TOP_OP22_REG_FCOLOR_FORCE           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_fcolor_force)
// h001d, bit: 12
/* Window 0 H de start (included)*/
#define offset_of_disp_top_op22_reg_tgen_w0_hde_start (0x3a)
#define mask_of_disp_top_op22_reg_tgen_w0_hde_start   (0x1fff)
#define shift_of_disp_top_op22_reg_tgen_w0_hde_start  (0)
#define DISP_TOP_OP22_REG_TGEN_W0_HDE_START           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_w0_hde_start)
#define REG_DISP_TOP_OP22_1D_L                        (DISP_TOP_OP22_REG_TGEN_W0_HDE_START)
// h001e, bit: 12
/* Window 0 H de end (included)*/
#define offset_of_disp_top_op22_reg_tgen_w0_hde_end (0x3c)
#define mask_of_disp_top_op22_reg_tgen_w0_hde_end   (0x1fff)
#define shift_of_disp_top_op22_reg_tgen_w0_hde_end  (0)
#define DISP_TOP_OP22_REG_TGEN_W0_HDE_END           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_w0_hde_end)
#define REG_DISP_TOP_OP22_1E_L                      (DISP_TOP_OP22_REG_TGEN_W0_HDE_END)
// h001f, bit: 12
/* Window 0 V de start (included)*/
#define offset_of_disp_top_op22_reg_tgen_w0_vde_start (0x3e)
#define mask_of_disp_top_op22_reg_tgen_w0_vde_start   (0x1fff)
#define shift_of_disp_top_op22_reg_tgen_w0_vde_start  (0)
#define DISP_TOP_OP22_REG_TGEN_W0_VDE_START           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_w0_vde_start)
#define REG_DISP_TOP_OP22_1F_L                        (DISP_TOP_OP22_REG_TGEN_W0_VDE_START)
// h0020, bit: 12
/* Window 0 V de end (included)*/
#define offset_of_disp_top_op22_reg_tgen_w0_vde_end (0x40)
#define mask_of_disp_top_op22_reg_tgen_w0_vde_end   (0x1fff)
#define shift_of_disp_top_op22_reg_tgen_w0_vde_end  (0)
#define DISP_TOP_OP22_REG_TGEN_W0_VDE_END           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_w0_vde_end)
#define REG_DISP_TOP_OP22_20_L                      (DISP_TOP_OP22_REG_TGEN_W0_VDE_END)
// h0021, bit: 7
/* Window 0 no signal color B channel*/
#define offset_of_disp_top_op22_reg_w0_fcolor_b (0x42)
#define mask_of_disp_top_op22_reg_w0_fcolor_b   (0xff)
#define shift_of_disp_top_op22_reg_w0_fcolor_b  (0)
#define DISP_TOP_OP22_REG_W0_FCOLOR_B           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_w0_fcolor_b)
#define REG_DISP_TOP_OP22_21_L                  (DISP_TOP_OP22_REG_W0_FCOLOR_B)
// h0021, bit: 15
/* Window 0 no signal color G channel*/
#define offset_of_disp_top_op22_reg_w0_fcolor_g (0x42)
#define mask_of_disp_top_op22_reg_w0_fcolor_g   (0xff00)
#define shift_of_disp_top_op22_reg_w0_fcolor_g  (8)
#define DISP_TOP_OP22_REG_W0_FCOLOR_G           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_w0_fcolor_g)
// h0022, bit: 7
/* Window 0 no signal color R channel*/
#define offset_of_disp_top_op22_reg_w0_fcolor_r (0x44)
#define mask_of_disp_top_op22_reg_w0_fcolor_r   (0xff)
#define shift_of_disp_top_op22_reg_w0_fcolor_r  (0)
#define DISP_TOP_OP22_REG_W0_FCOLOR_R           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_w0_fcolor_r)
#define REG_DISP_TOP_OP22_22_L                  (DISP_TOP_OP22_REG_W0_FCOLOR_R)
// h0022, bit: 15
/* Window 0 forced to show no signal color*/
#define offset_of_disp_top_op22_reg_w0_fcolor_force (0x44)
#define mask_of_disp_top_op22_reg_w0_fcolor_force   (0x8000)
#define shift_of_disp_top_op22_reg_w0_fcolor_force  (15)
#define DISP_TOP_OP22_REG_W0_FCOLOR_FORCE           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_w0_fcolor_force)
#define REG_DISP_TOP_OP22_23_L                      (REG_DISP_TOP_OP22_BASE + 0x46)
#define REG_DISP_TOP_OP22_24_L                      (REG_DISP_TOP_OP22_BASE + 0x48)
#define REG_DISP_TOP_OP22_25_L                      (REG_DISP_TOP_OP22_BASE + 0x4a)
#define REG_DISP_TOP_OP22_26_L                      (REG_DISP_TOP_OP22_BASE + 0x4c)
#define REG_DISP_TOP_OP22_27_L                      (REG_DISP_TOP_OP22_BASE + 0x4e)
#define REG_DISP_TOP_OP22_28_L                      (REG_DISP_TOP_OP22_BASE + 0x50)
#define REG_DISP_TOP_OP22_29_L                      (REG_DISP_TOP_OP22_BASE + 0x52)
#define REG_DISP_TOP_OP22_2A_L                      (REG_DISP_TOP_OP22_BASE + 0x54)
#define REG_DISP_TOP_OP22_2B_L                      (REG_DISP_TOP_OP22_BASE + 0x56)
#define REG_DISP_TOP_OP22_2C_L                      (REG_DISP_TOP_OP22_BASE + 0x58)
#define REG_DISP_TOP_OP22_2D_L                      (REG_DISP_TOP_OP22_BASE + 0x5a)
// h002e, bit: 0
/* Reference the unit of delayed PIPE to FPLL // lcd usage*/
#define offset_of_disp_top_op22_reg_tgen_fpll_dly_unit (0x5c)
#define mask_of_disp_top_op22_reg_tgen_fpll_dly_unit   (0x1)
#define shift_of_disp_top_op22_reg_tgen_fpll_dly_unit  (0)
#define DISP_TOP_OP22_REG_TGEN_FPLL_DLY_UNIT           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tgen_fpll_dly_unit)
#define REG_DISP_TOP_OP22_2E_L                         (DISP_TOP_OP22_REG_TGEN_FPLL_DLY_UNIT)
// h002f, bit: 15
/* time stamp read register*/
#define offset_of_disp_top_op22_reg_time_stamp_dp (0x5e)
#define mask_of_disp_top_op22_reg_time_stamp_dp   (0xffff)
#define shift_of_disp_top_op22_reg_time_stamp_dp  (0)
#define DISP_TOP_OP22_REG_TIME_STAMP_DP           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_time_stamp_dp)
#define REG_DISP_TOP_OP22_2F_L                    (DISP_TOP_OP22_REG_TIME_STAMP_DP)
// h0030, bit: 0
/* Enable operation of  3X3 matrix for color management*/
#define offset_of_disp_top_op22_reg_cm3x3_en (0x60)
#define mask_of_disp_top_op22_reg_cm3x3_en   (0x1)
#define shift_of_disp_top_op22_reg_cm3x3_en  (0)
#define DISP_TOP_OP22_REG_CM3X3_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_en)
#define REG_DISP_TOP_OP22_30_L               (DISP_TOP_OP22_REG_CM3X3_EN)
// h0030, bit: 1
/* For data R
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op22_reg_cm3x3_in_range_1 (0x60)
#define mask_of_disp_top_op22_reg_cm3x3_in_range_1   (0x2)
#define shift_of_disp_top_op22_reg_cm3x3_in_range_1  (1)
#define DISP_TOP_OP22_REG_CM3X3_IN_RANGE_1           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_in_range_1)
// h0030, bit: 2
/* For data G
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op22_reg_cm3x3_in_range_2 (0x60)
#define mask_of_disp_top_op22_reg_cm3x3_in_range_2   (0x4)
#define shift_of_disp_top_op22_reg_cm3x3_in_range_2  (2)
#define DISP_TOP_OP22_REG_CM3X3_IN_RANGE_2           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_in_range_2)
// h0030, bit: 3
/* For data B
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op22_reg_cm3x3_in_range_3 (0x60)
#define mask_of_disp_top_op22_reg_cm3x3_in_range_3   (0x8)
#define shift_of_disp_top_op22_reg_cm3x3_in_range_3  (3)
#define DISP_TOP_OP22_REG_CM3X3_IN_RANGE_3           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_in_range_3)
// h0030, bit: 8
/* Enable brightness adjustment*/
#define offset_of_disp_top_op22_reg_bri_en (0x60)
#define mask_of_disp_top_op22_reg_bri_en   (0x100)
#define shift_of_disp_top_op22_reg_bri_en  (8)
#define DISP_TOP_OP22_REG_BRI_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_bri_en)
// h0030, bit: 9
/* Rounding with pseudo noise*/
#define offset_of_disp_top_op22_reg_bri_noise_round (0x60)
#define mask_of_disp_top_op22_reg_bri_noise_round   (0x200)
#define shift_of_disp_top_op22_reg_bri_noise_round  (9)
#define DISP_TOP_OP22_REG_BRI_NOISE_ROUND           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_bri_noise_round)
// h0031, bit: 12
/* Coefficient (1,1) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_coef11 (0x62)
#define mask_of_disp_top_op22_reg_cm3x3_coef11   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_coef11  (0)
#define DISP_TOP_OP22_REG_CM3X3_COEF11           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_coef11)
#define REG_DISP_TOP_OP22_31_L                   (DISP_TOP_OP22_REG_CM3X3_COEF11)
// h0032, bit: 12
/* Coefficient (1,2) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_coef12 (0x64)
#define mask_of_disp_top_op22_reg_cm3x3_coef12   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_coef12  (0)
#define DISP_TOP_OP22_REG_CM3X3_COEF12           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_coef12)
#define REG_DISP_TOP_OP22_32_L                   (DISP_TOP_OP22_REG_CM3X3_COEF12)
// h0033, bit: 12
/* Coefficient (1,3) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_coef13 (0x66)
#define mask_of_disp_top_op22_reg_cm3x3_coef13   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_coef13  (0)
#define DISP_TOP_OP22_REG_CM3X3_COEF13           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_coef13)
#define REG_DISP_TOP_OP22_33_L                   (DISP_TOP_OP22_REG_CM3X3_COEF13)
// h0034, bit: 12
/* Coefficient (2,1) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_coef21 (0x68)
#define mask_of_disp_top_op22_reg_cm3x3_coef21   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_coef21  (0)
#define DISP_TOP_OP22_REG_CM3X3_COEF21           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_coef21)
#define REG_DISP_TOP_OP22_34_L                   (DISP_TOP_OP22_REG_CM3X3_COEF21)
// h0035, bit: 12
/* Coefficient (2,2) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_coef22 (0x6a)
#define mask_of_disp_top_op22_reg_cm3x3_coef22   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_coef22  (0)
#define DISP_TOP_OP22_REG_CM3X3_COEF22           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_coef22)
#define REG_DISP_TOP_OP22_35_L                   (DISP_TOP_OP22_REG_CM3X3_COEF22)
// h0036, bit: 12
/* Coefficient (2,3) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_coef23 (0x6c)
#define mask_of_disp_top_op22_reg_cm3x3_coef23   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_coef23  (0)
#define DISP_TOP_OP22_REG_CM3X3_COEF23           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_coef23)
#define REG_DISP_TOP_OP22_36_L                   (DISP_TOP_OP22_REG_CM3X3_COEF23)
// h0037, bit: 12
/* Coefficient (3,1) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_coef31 (0x6e)
#define mask_of_disp_top_op22_reg_cm3x3_coef31   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_coef31  (0)
#define DISP_TOP_OP22_REG_CM3X3_COEF31           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_coef31)
#define REG_DISP_TOP_OP22_37_L                   (DISP_TOP_OP22_REG_CM3X3_COEF31)
// h0038, bit: 12
/* Coefficient (3,2) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_coef32 (0x70)
#define mask_of_disp_top_op22_reg_cm3x3_coef32   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_coef32  (0)
#define DISP_TOP_OP22_REG_CM3X3_COEF32           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_coef32)
#define REG_DISP_TOP_OP22_38_L                   (DISP_TOP_OP22_REG_CM3X3_COEF32)
// h0039, bit: 12
/* Coefficient (3,3) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_coef33 (0x72)
#define mask_of_disp_top_op22_reg_cm3x3_coef33   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_coef33  (0)
#define DISP_TOP_OP22_REG_CM3X3_COEF33           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_coef33)
#define REG_DISP_TOP_OP22_39_L                   (DISP_TOP_OP22_REG_CM3X3_COEF33)
// h003a, bit: 7
/* Offset of R*/
#define offset_of_disp_top_op22_reg_bri_r (0x74)
#define mask_of_disp_top_op22_reg_bri_r   (0xff)
#define shift_of_disp_top_op22_reg_bri_r  (0)
#define DISP_TOP_OP22_REG_BRI_R           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_bri_r)
#define REG_DISP_TOP_OP22_3A_L            (DISP_TOP_OP22_REG_BRI_R)
// h003a, bit: 15
/* Offset of G*/
#define offset_of_disp_top_op22_reg_bri_g (0x74)
#define mask_of_disp_top_op22_reg_bri_g   (0xff00)
#define shift_of_disp_top_op22_reg_bri_g  (8)
#define DISP_TOP_OP22_REG_BRI_G           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_bri_g)
// h003b, bit: 7
/* Offset of B*/
#define offset_of_disp_top_op22_reg_bri_b (0x76)
#define mask_of_disp_top_op22_reg_bri_b   (0xff)
#define shift_of_disp_top_op22_reg_bri_b  (0)
#define DISP_TOP_OP22_REG_BRI_B           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_bri_b)
#define REG_DISP_TOP_OP22_3B_L            (DISP_TOP_OP22_REG_BRI_B)
// h003c, bit: 0
/* Enable operation of  3X3 matrix for color management*/
#define offset_of_disp_top_op22_reg_cm3x3_2_en (0x78)
#define mask_of_disp_top_op22_reg_cm3x3_2_en   (0x1)
#define shift_of_disp_top_op22_reg_cm3x3_2_en  (0)
#define DISP_TOP_OP22_REG_CM3X3_2_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_2_en)
#define REG_DISP_TOP_OP22_3C_L                 (DISP_TOP_OP22_REG_CM3X3_2_EN)
// h003c, bit: 1
/* For data R
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op22_reg_cm3x3_2_in_range_1 (0x78)
#define mask_of_disp_top_op22_reg_cm3x3_2_in_range_1   (0x2)
#define shift_of_disp_top_op22_reg_cm3x3_2_in_range_1  (1)
#define DISP_TOP_OP22_REG_CM3X3_2_IN_RANGE_1           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_2_in_range_1)
// h003c, bit: 2
/* For data G
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op22_reg_cm3x3_2_in_range_2 (0x78)
#define mask_of_disp_top_op22_reg_cm3x3_2_in_range_2   (0x4)
#define shift_of_disp_top_op22_reg_cm3x3_2_in_range_2  (2)
#define DISP_TOP_OP22_REG_CM3X3_2_IN_RANGE_2           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_2_in_range_2)
// h003c, bit: 3
/* For data B
0: original data
1: inverse MSB*/
#define offset_of_disp_top_op22_reg_cm3x3_2_in_range_3 (0x78)
#define mask_of_disp_top_op22_reg_cm3x3_2_in_range_3   (0x8)
#define shift_of_disp_top_op22_reg_cm3x3_2_in_range_3  (3)
#define DISP_TOP_OP22_REG_CM3X3_2_IN_RANGE_3           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_2_in_range_3)
// h003c, bit: 8
/* Enable brightness adjustment*/
#define offset_of_disp_top_op22_reg_bri_2_en (0x78)
#define mask_of_disp_top_op22_reg_bri_2_en   (0x100)
#define shift_of_disp_top_op22_reg_bri_2_en  (8)
#define DISP_TOP_OP22_REG_BRI_2_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_bri_2_en)
// h003c, bit: 9
/* Rounding with pseudo noise*/
#define offset_of_disp_top_op22_reg_bri_2_noise_round (0x78)
#define mask_of_disp_top_op22_reg_bri_2_noise_round   (0x200)
#define shift_of_disp_top_op22_reg_bri_2_noise_round  (9)
#define DISP_TOP_OP22_REG_BRI_2_NOISE_ROUND           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_bri_2_noise_round)
// h003d, bit: 12
/* Coefficient (1,1) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_2_coef11 (0x7a)
#define mask_of_disp_top_op22_reg_cm3x3_2_coef11   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_2_coef11  (0)
#define DISP_TOP_OP22_REG_CM3X3_2_COEF11           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_2_coef11)
#define REG_DISP_TOP_OP22_3D_L                     (DISP_TOP_OP22_REG_CM3X3_2_COEF11)
// h003e, bit: 12
/* Coefficient (1,2) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_2_coef12 (0x7c)
#define mask_of_disp_top_op22_reg_cm3x3_2_coef12   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_2_coef12  (0)
#define DISP_TOP_OP22_REG_CM3X3_2_COEF12           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_2_coef12)
#define REG_DISP_TOP_OP22_3E_L                     (DISP_TOP_OP22_REG_CM3X3_2_COEF12)
// h003f, bit: 12
/* Coefficient (1,3) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_2_coef13 (0x7e)
#define mask_of_disp_top_op22_reg_cm3x3_2_coef13   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_2_coef13  (0)
#define DISP_TOP_OP22_REG_CM3X3_2_COEF13           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_2_coef13)
#define REG_DISP_TOP_OP22_3F_L                     (DISP_TOP_OP22_REG_CM3X3_2_COEF13)
// h0040, bit: 12
/* Coefficient (2,1) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_2_coef21 (0x80)
#define mask_of_disp_top_op22_reg_cm3x3_2_coef21   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_2_coef21  (0)
#define DISP_TOP_OP22_REG_CM3X3_2_COEF21           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_2_coef21)
#define REG_DISP_TOP_OP22_40_L                     (DISP_TOP_OP22_REG_CM3X3_2_COEF21)
// h0041, bit: 12
/* Coefficient (2,2) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_2_coef22 (0x82)
#define mask_of_disp_top_op22_reg_cm3x3_2_coef22   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_2_coef22  (0)
#define DISP_TOP_OP22_REG_CM3X3_2_COEF22           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_2_coef22)
#define REG_DISP_TOP_OP22_41_L                     (DISP_TOP_OP22_REG_CM3X3_2_COEF22)
// h0042, bit: 12
/* Coefficient (2,3) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_2_coef23 (0x84)
#define mask_of_disp_top_op22_reg_cm3x3_2_coef23   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_2_coef23  (0)
#define DISP_TOP_OP22_REG_CM3X3_2_COEF23           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_2_coef23)
#define REG_DISP_TOP_OP22_42_L                     (DISP_TOP_OP22_REG_CM3X3_2_COEF23)
// h0043, bit: 12
/* Coefficient (3,1) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_2_coef31 (0x86)
#define mask_of_disp_top_op22_reg_cm3x3_2_coef31   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_2_coef31  (0)
#define DISP_TOP_OP22_REG_CM3X3_2_COEF31           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_2_coef31)
#define REG_DISP_TOP_OP22_43_L                     (DISP_TOP_OP22_REG_CM3X3_2_COEF31)
// h0044, bit: 12
/* Coefficient (3,2) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_2_coef32 (0x88)
#define mask_of_disp_top_op22_reg_cm3x3_2_coef32   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_2_coef32  (0)
#define DISP_TOP_OP22_REG_CM3X3_2_COEF32           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_2_coef32)
#define REG_DISP_TOP_OP22_44_L                     (DISP_TOP_OP22_REG_CM3X3_2_COEF32)
// h0045, bit: 12
/* Coefficient (3,3) of 3X3 matrix*/
#define offset_of_disp_top_op22_reg_cm3x3_2_coef33 (0x8a)
#define mask_of_disp_top_op22_reg_cm3x3_2_coef33   (0x1fff)
#define shift_of_disp_top_op22_reg_cm3x3_2_coef33  (0)
#define DISP_TOP_OP22_REG_CM3X3_2_COEF33           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_cm3x3_2_coef33)
#define REG_DISP_TOP_OP22_45_L                     (DISP_TOP_OP22_REG_CM3X3_2_COEF33)
// h0046, bit: 7
/* Offset of R*/
#define offset_of_disp_top_op22_reg_bri_2_r (0x8c)
#define mask_of_disp_top_op22_reg_bri_2_r   (0xff)
#define shift_of_disp_top_op22_reg_bri_2_r  (0)
#define DISP_TOP_OP22_REG_BRI_2_R           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_bri_2_r)
#define REG_DISP_TOP_OP22_46_L              (DISP_TOP_OP22_REG_BRI_2_R)
// h0046, bit: 15
/* Offset of G*/
#define offset_of_disp_top_op22_reg_bri_2_g (0x8c)
#define mask_of_disp_top_op22_reg_bri_2_g   (0xff00)
#define shift_of_disp_top_op22_reg_bri_2_g  (8)
#define DISP_TOP_OP22_REG_BRI_2_G           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_bri_2_g)
// h0047, bit: 7
/* Offset of B*/
#define offset_of_disp_top_op22_reg_bri_2_b (0x8e)
#define mask_of_disp_top_op22_reg_bri_2_b   (0xff)
#define shift_of_disp_top_op22_reg_bri_2_b  (0)
#define DISP_TOP_OP22_REG_BRI_2_B           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_bri_2_b)
#define REG_DISP_TOP_OP22_47_L              (DISP_TOP_OP22_REG_BRI_2_B)
// h0048, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram_thrd_0 (0x90)
#define mask_of_disp_top_op22_reg_histogram_thrd_0   (0xffff)
#define shift_of_disp_top_op22_reg_histogram_thrd_0  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM_THRD_0           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram_thrd_0)
#define REG_DISP_TOP_OP22_48_L                       (DISP_TOP_OP22_REG_HISTOGRAM_THRD_0)
// h0049, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram_thrd_1 (0x92)
#define mask_of_disp_top_op22_reg_histogram_thrd_1   (0xffff)
#define shift_of_disp_top_op22_reg_histogram_thrd_1  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM_THRD_1           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram_thrd_1)
#define REG_DISP_TOP_OP22_49_L                       (DISP_TOP_OP22_REG_HISTOGRAM_THRD_1)
// h004a, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram_thrd_2 (0x94)
#define mask_of_disp_top_op22_reg_histogram_thrd_2   (0xffff)
#define shift_of_disp_top_op22_reg_histogram_thrd_2  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM_THRD_2           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram_thrd_2)
#define REG_DISP_TOP_OP22_4A_L                       (DISP_TOP_OP22_REG_HISTOGRAM_THRD_2)
// h004b, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram_thrd_3 (0x96)
#define mask_of_disp_top_op22_reg_histogram_thrd_3   (0xffff)
#define shift_of_disp_top_op22_reg_histogram_thrd_3  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM_THRD_3           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram_thrd_3)
#define REG_DISP_TOP_OP22_4B_L                       (DISP_TOP_OP22_REG_HISTOGRAM_THRD_3)
// h004c, bit: 3
/* */
#define offset_of_disp_top_op22_reg_yavg_alpha (0x98)
#define mask_of_disp_top_op22_reg_yavg_alpha   (0xf)
#define shift_of_disp_top_op22_reg_yavg_alpha  (0)
#define DISP_TOP_OP22_REG_YAVG_ALPHA           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_yavg_alpha)
#define REG_DISP_TOP_OP22_4C_L                 (DISP_TOP_OP22_REG_YAVG_ALPHA)
// h004c, bit: 7
/* */
#define offset_of_disp_top_op22_reg_fstable (0x98)
#define mask_of_disp_top_op22_reg_fstable   (0xf0)
#define shift_of_disp_top_op22_reg_fstable  (4)
#define DISP_TOP_OP22_REG_FSTABLE           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_fstable)
// h004c, bit: 8
/* */
#define offset_of_disp_top_op22_reg_dcr_en (0x98)
#define mask_of_disp_top_op22_reg_dcr_en   (0x100)
#define shift_of_disp_top_op22_reg_dcr_en  (8)
#define DISP_TOP_OP22_REG_DCR_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_dcr_en)
// h004c, bit: 9
/* */
#define offset_of_disp_top_op22_reg_dlc_gain_lim_en (0x98)
#define mask_of_disp_top_op22_reg_dlc_gain_lim_en   (0x200)
#define shift_of_disp_top_op22_reg_dlc_gain_lim_en  (9)
#define DISP_TOP_OP22_REG_DLC_GAIN_LIM_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_dlc_gain_lim_en)
// h004c, bit: 10
/* */
#define offset_of_disp_top_op22_reg_ygain_hist_lim_en (0x98)
#define mask_of_disp_top_op22_reg_ygain_hist_lim_en   (0x400)
#define shift_of_disp_top_op22_reg_ygain_hist_lim_en  (10)
#define DISP_TOP_OP22_REG_YGAIN_HIST_LIM_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_ygain_hist_lim_en)
// h004c, bit: 11
/* */
#define offset_of_disp_top_op22_reg_yout_rgb_en (0x98)
#define mask_of_disp_top_op22_reg_yout_rgb_en   (0x800)
#define shift_of_disp_top_op22_reg_yout_rgb_en  (11)
#define DISP_TOP_OP22_REG_YOUT_RGB_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_yout_rgb_en)
// h004c, bit: 12
/* */
#define offset_of_disp_top_op22_reg_hist_121_en (0x98)
#define mask_of_disp_top_op22_reg_hist_121_en   (0x1000)
#define shift_of_disp_top_op22_reg_hist_121_en  (12)
#define DISP_TOP_OP22_REG_HIST_121_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_hist_121_en)
// h004c, bit: 13
/* */
#define offset_of_disp_top_op22_reg_hist_rgb_en (0x98)
#define mask_of_disp_top_op22_reg_hist_rgb_en   (0x2000)
#define shift_of_disp_top_op22_reg_hist_rgb_en  (13)
#define DISP_TOP_OP22_REG_HIST_RGB_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_hist_rgb_en)
// h004c, bit: 14
/* */
#define offset_of_disp_top_op22_reg_yavg_lim_en (0x98)
#define mask_of_disp_top_op22_reg_yavg_lim_en   (0x4000)
#define shift_of_disp_top_op22_reg_yavg_lim_en  (14)
#define DISP_TOP_OP22_REG_YAVG_LIM_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_yavg_lim_en)
// h004c, bit: 15
/* */
#define offset_of_disp_top_op22_reg_yavg_rgb_en (0x98)
#define mask_of_disp_top_op22_reg_yavg_rgb_en   (0x8000)
#define shift_of_disp_top_op22_reg_yavg_rgb_en  (15)
#define DISP_TOP_OP22_REG_YAVG_RGB_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_yavg_rgb_en)
// h004d, bit: 7
/* */
#define offset_of_disp_top_op22_reg_ygain (0x9a)
#define mask_of_disp_top_op22_reg_ygain   (0xff)
#define shift_of_disp_top_op22_reg_ygain  (0)
#define DISP_TOP_OP22_REG_YGAIN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_ygain)
#define REG_DISP_TOP_OP22_4D_L            (DISP_TOP_OP22_REG_YGAIN)
// h004d, bit: 15
/* */
#define offset_of_disp_top_op22_reg_ygain_step (0x9a)
#define mask_of_disp_top_op22_reg_ygain_step   (0xff00)
#define shift_of_disp_top_op22_reg_ygain_step  (8)
#define DISP_TOP_OP22_REG_YGAIN_STEP           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_ygain_step)
// h004e, bit: 7
/* */
#define offset_of_disp_top_op22_reg_ygain_step_max (0x9c)
#define mask_of_disp_top_op22_reg_ygain_step_max   (0xff)
#define shift_of_disp_top_op22_reg_ygain_step_max  (0)
#define DISP_TOP_OP22_REG_YGAIN_STEP_MAX           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_ygain_step_max)
#define REG_DISP_TOP_OP22_4E_L                     (DISP_TOP_OP22_REG_YGAIN_STEP_MAX)
// h004e, bit: 15
/* */
#define offset_of_disp_top_op22_reg_ygain_step_min (0x9c)
#define mask_of_disp_top_op22_reg_ygain_step_min   (0xff00)
#define shift_of_disp_top_op22_reg_ygain_step_min  (8)
#define DISP_TOP_OP22_REG_YGAIN_STEP_MIN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_ygain_step_min)
// h004f, bit: 11
/* */
#define offset_of_disp_top_op22_reg_ygain_offset (0x9e)
#define mask_of_disp_top_op22_reg_ygain_offset   (0xfff)
#define shift_of_disp_top_op22_reg_ygain_offset  (0)
#define DISP_TOP_OP22_REG_YGAIN_OFFSET           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_ygain_offset)
#define REG_DISP_TOP_OP22_4F_L                   (DISP_TOP_OP22_REG_YGAIN_OFFSET)
// h0050, bit: 11
/* */
#define offset_of_disp_top_op22_reg_dlc_offset (0xa0)
#define mask_of_disp_top_op22_reg_dlc_offset   (0xfff)
#define shift_of_disp_top_op22_reg_dlc_offset  (0)
#define DISP_TOP_OP22_REG_DLC_OFFSET           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_dlc_offset)
#define REG_DISP_TOP_OP22_50_L                 (DISP_TOP_OP22_REG_DLC_OFFSET)
// h0051, bit: 7
/* */
#define offset_of_disp_top_op22_reg_dlc_gain (0xa2)
#define mask_of_disp_top_op22_reg_dlc_gain   (0xff)
#define shift_of_disp_top_op22_reg_dlc_gain  (0)
#define DISP_TOP_OP22_REG_DLC_GAIN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_dlc_gain)
#define REG_DISP_TOP_OP22_51_L               (DISP_TOP_OP22_REG_DLC_GAIN)
// h0051, bit: 15
/* */
#define offset_of_disp_top_op22_reg_pwm_fdly (0xa2)
#define mask_of_disp_top_op22_reg_pwm_fdly   (0xff00)
#define shift_of_disp_top_op22_reg_pwm_fdly  (8)
#define DISP_TOP_OP22_REG_PWM_FDLY           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_pwm_fdly)
// h0052, bit: 15
/* */
#define offset_of_disp_top_op22_reg_pwm_period (0xa4)
#define mask_of_disp_top_op22_reg_pwm_period   (0xffff)
#define shift_of_disp_top_op22_reg_pwm_period  (0)
#define DISP_TOP_OP22_REG_PWM_PERIOD           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_pwm_period)
#define REG_DISP_TOP_OP22_52_L                 (DISP_TOP_OP22_REG_PWM_PERIOD)
// h0053, bit: 15
/* */
#define offset_of_disp_top_op22_reg_pwm_duty (0xa6)
#define mask_of_disp_top_op22_reg_pwm_duty   (0xffff)
#define shift_of_disp_top_op22_reg_pwm_duty  (0)
#define DISP_TOP_OP22_REG_PWM_DUTY           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_pwm_duty)
#define REG_DISP_TOP_OP22_53_L               (DISP_TOP_OP22_REG_PWM_DUTY)
// h0054, bit: 11
/* */
#define offset_of_disp_top_op22_reg_pwm_r_offset (0xa8)
#define mask_of_disp_top_op22_reg_pwm_r_offset   (0xfff)
#define shift_of_disp_top_op22_reg_pwm_r_offset  (0)
#define DISP_TOP_OP22_REG_PWM_R_OFFSET           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_pwm_r_offset)
#define REG_DISP_TOP_OP22_54_L                   (DISP_TOP_OP22_REG_PWM_R_OFFSET)
// h0055, bit: 11
/* */
#define offset_of_disp_top_op22_reg_dcr_offset (0xaa)
#define mask_of_disp_top_op22_reg_dcr_offset   (0xfff)
#define shift_of_disp_top_op22_reg_dcr_offset  (0)
#define DISP_TOP_OP22_REG_DCR_OFFSET           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_dcr_offset)
#define REG_DISP_TOP_OP22_55_L                 (DISP_TOP_OP22_REG_DCR_OFFSET)
// h0056, bit: 7
/* */
#define offset_of_disp_top_op22_reg_dcr_gain (0xac)
#define mask_of_disp_top_op22_reg_dcr_gain   (0xff)
#define shift_of_disp_top_op22_reg_dcr_gain  (0)
#define DISP_TOP_OP22_REG_DCR_GAIN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_dcr_gain)
#define REG_DISP_TOP_OP22_56_L               (DISP_TOP_OP22_REG_DCR_GAIN)
// h0056, bit: 9
/* */
#define offset_of_disp_top_op22_reg_pwm_table_en (0xac)
#define mask_of_disp_top_op22_reg_pwm_table_en   (0x200)
#define shift_of_disp_top_op22_reg_pwm_table_en  (9)
#define DISP_TOP_OP22_REG_PWM_TABLE_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_pwm_table_en)
// h0056, bit: 10
/* */
#define offset_of_disp_top_op22_reg_dlc_table_sel (0xac)
#define mask_of_disp_top_op22_reg_dlc_table_sel   (0x400)
#define shift_of_disp_top_op22_reg_dlc_table_sel  (10)
#define DISP_TOP_OP22_REG_DLC_TABLE_SEL           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_dlc_table_sel)
// h0056, bit: 11
/* */
#define offset_of_disp_top_op22_reg_dlc_en (0xac)
#define mask_of_disp_top_op22_reg_dlc_en   (0x800)
#define shift_of_disp_top_op22_reg_dlc_en  (11)
#define DISP_TOP_OP22_REG_DLC_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_dlc_en)
// h0056, bit: 13
/* */
#define offset_of_disp_top_op22_reg_pwm_rst_sel (0xac)
#define mask_of_disp_top_op22_reg_pwm_rst_sel   (0x3000)
#define shift_of_disp_top_op22_reg_pwm_rst_sel  (12)
#define DISP_TOP_OP22_REG_PWM_RST_SEL           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_pwm_rst_sel)
// h0056, bit: 14
/* */
#define offset_of_disp_top_op22_reg_pwm_inv (0xac)
#define mask_of_disp_top_op22_reg_pwm_inv   (0x4000)
#define shift_of_disp_top_op22_reg_pwm_inv  (14)
#define DISP_TOP_OP22_REG_PWM_INV           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_pwm_inv)
// h0056, bit: 15
/* */
#define offset_of_disp_top_op22_reg_pwm_htotal_en (0xac)
#define mask_of_disp_top_op22_reg_pwm_htotal_en   (0x8000)
#define shift_of_disp_top_op22_reg_pwm_htotal_en  (15)
#define DISP_TOP_OP22_REG_PWM_HTOTAL_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_pwm_htotal_en)
// h0057, bit: 7
/* */
#define offset_of_disp_top_op22_reg_dlc_table_din (0xae)
#define mask_of_disp_top_op22_reg_dlc_table_din   (0xff)
#define shift_of_disp_top_op22_reg_dlc_table_din  (0)
#define DISP_TOP_OP22_REG_DLC_TABLE_DIN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_dlc_table_din)
#define REG_DISP_TOP_OP22_57_L                    (DISP_TOP_OP22_REG_DLC_TABLE_DIN)
// h0057, bit: 15
/* */
#define offset_of_disp_top_op22_reg_pwm_table_din (0xae)
#define mask_of_disp_top_op22_reg_pwm_table_din   (0xff00)
#define shift_of_disp_top_op22_reg_pwm_table_din  (8)
#define DISP_TOP_OP22_REG_PWM_TABLE_DIN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_pwm_table_din)
// h0058, bit: 7
/* */
#define offset_of_disp_top_op22_reg_yavg_out (0xb0)
#define mask_of_disp_top_op22_reg_yavg_out   (0xff)
#define shift_of_disp_top_op22_reg_yavg_out  (0)
#define DISP_TOP_OP22_REG_YAVG_OUT           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_yavg_out)
#define REG_DISP_TOP_OP22_58_L               (DISP_TOP_OP22_REG_YAVG_OUT)
// h0058, bit: 15
/* */
#define offset_of_disp_top_op22_reg_yavg_pre_out (0xb0)
#define mask_of_disp_top_op22_reg_yavg_pre_out   (0xff00)
#define shift_of_disp_top_op22_reg_yavg_pre_out  (8)
#define DISP_TOP_OP22_REG_YAVG_PRE_OUT           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_yavg_pre_out)
// h0059, bit: 7
/* */
#define offset_of_disp_top_op22_reg_yavg_avg_out (0xb2)
#define mask_of_disp_top_op22_reg_yavg_avg_out   (0xff)
#define shift_of_disp_top_op22_reg_yavg_avg_out  (0)
#define DISP_TOP_OP22_REG_YAVG_AVG_OUT           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_yavg_avg_out)
#define REG_DISP_TOP_OP22_59_L                   (DISP_TOP_OP22_REG_YAVG_AVG_OUT)
// h0059, bit: 15
/* */
#define offset_of_disp_top_op22_reg_ygain_out (0xb2)
#define mask_of_disp_top_op22_reg_ygain_out   (0xff00)
#define shift_of_disp_top_op22_reg_ygain_out  (8)
#define DISP_TOP_OP22_REG_YGAIN_OUT           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_ygain_out)
// h005a, bit: 7
/* */
#define offset_of_disp_top_op22_reg_ygain_tmp_out (0xb4)
#define mask_of_disp_top_op22_reg_ygain_tmp_out   (0xff)
#define shift_of_disp_top_op22_reg_ygain_tmp_out  (0)
#define DISP_TOP_OP22_REG_YGAIN_TMP_OUT           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_ygain_tmp_out)
#define REG_DISP_TOP_OP22_5A_L                    (DISP_TOP_OP22_REG_YGAIN_TMP_OUT)
// h005a, bit: 15
/* */
#define offset_of_disp_top_op22_reg_ygain_hist_out (0xb4)
#define mask_of_disp_top_op22_reg_ygain_hist_out   (0xff00)
#define shift_of_disp_top_op22_reg_ygain_hist_out  (8)
#define DISP_TOP_OP22_REG_YGAIN_HIST_OUT           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_ygain_hist_out)
// h005b, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram0 (0xb6)
#define mask_of_disp_top_op22_reg_histogram0   (0xffff)
#define shift_of_disp_top_op22_reg_histogram0  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM0           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram0)
#define REG_DISP_TOP_OP22_5B_L                 (DISP_TOP_OP22_REG_HISTOGRAM0)
// h005c, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram1 (0xb8)
#define mask_of_disp_top_op22_reg_histogram1   (0xffff)
#define shift_of_disp_top_op22_reg_histogram1  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM1           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram1)
#define REG_DISP_TOP_OP22_5C_L                 (DISP_TOP_OP22_REG_HISTOGRAM1)
// h005d, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram2 (0xba)
#define mask_of_disp_top_op22_reg_histogram2   (0xffff)
#define shift_of_disp_top_op22_reg_histogram2  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM2           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram2)
#define REG_DISP_TOP_OP22_5D_L                 (DISP_TOP_OP22_REG_HISTOGRAM2)
// h005e, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram3 (0xbc)
#define mask_of_disp_top_op22_reg_histogram3   (0xffff)
#define shift_of_disp_top_op22_reg_histogram3  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM3           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram3)
#define REG_DISP_TOP_OP22_5E_L                 (DISP_TOP_OP22_REG_HISTOGRAM3)
// h005f, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram4 (0xbe)
#define mask_of_disp_top_op22_reg_histogram4   (0xffff)
#define shift_of_disp_top_op22_reg_histogram4  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM4           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram4)
#define REG_DISP_TOP_OP22_5F_L                 (DISP_TOP_OP22_REG_HISTOGRAM4)
// h0060, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram5 (0xc0)
#define mask_of_disp_top_op22_reg_histogram5   (0xffff)
#define shift_of_disp_top_op22_reg_histogram5  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM5           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram5)
#define REG_DISP_TOP_OP22_60_L                 (DISP_TOP_OP22_REG_HISTOGRAM5)
// h0061, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram6 (0xc2)
#define mask_of_disp_top_op22_reg_histogram6   (0xffff)
#define shift_of_disp_top_op22_reg_histogram6  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM6           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram6)
#define REG_DISP_TOP_OP22_61_L                 (DISP_TOP_OP22_REG_HISTOGRAM6)
// h0062, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram7 (0xc4)
#define mask_of_disp_top_op22_reg_histogram7   (0xffff)
#define shift_of_disp_top_op22_reg_histogram7  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM7           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram7)
#define REG_DISP_TOP_OP22_62_L                 (DISP_TOP_OP22_REG_HISTOGRAM7)
// h0063, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram8 (0xc6)
#define mask_of_disp_top_op22_reg_histogram8   (0xffff)
#define shift_of_disp_top_op22_reg_histogram8  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM8           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram8)
#define REG_DISP_TOP_OP22_63_L                 (DISP_TOP_OP22_REG_HISTOGRAM8)
// h0064, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram9 (0xc8)
#define mask_of_disp_top_op22_reg_histogram9   (0xffff)
#define shift_of_disp_top_op22_reg_histogram9  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM9           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram9)
#define REG_DISP_TOP_OP22_64_L                 (DISP_TOP_OP22_REG_HISTOGRAM9)
// h0065, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram10 (0xca)
#define mask_of_disp_top_op22_reg_histogram10   (0xffff)
#define shift_of_disp_top_op22_reg_histogram10  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM10           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram10)
#define REG_DISP_TOP_OP22_65_L                  (DISP_TOP_OP22_REG_HISTOGRAM10)
// h0066, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram11 (0xcc)
#define mask_of_disp_top_op22_reg_histogram11   (0xffff)
#define shift_of_disp_top_op22_reg_histogram11  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM11           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram11)
#define REG_DISP_TOP_OP22_66_L                  (DISP_TOP_OP22_REG_HISTOGRAM11)
// h0067, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram12 (0xce)
#define mask_of_disp_top_op22_reg_histogram12   (0xffff)
#define shift_of_disp_top_op22_reg_histogram12  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM12           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram12)
#define REG_DISP_TOP_OP22_67_L                  (DISP_TOP_OP22_REG_HISTOGRAM12)
// h0068, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram13 (0xd0)
#define mask_of_disp_top_op22_reg_histogram13   (0xffff)
#define shift_of_disp_top_op22_reg_histogram13  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM13           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram13)
#define REG_DISP_TOP_OP22_68_L                  (DISP_TOP_OP22_REG_HISTOGRAM13)
// h0069, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram14 (0xd2)
#define mask_of_disp_top_op22_reg_histogram14   (0xffff)
#define shift_of_disp_top_op22_reg_histogram14  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM14           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram14)
#define REG_DISP_TOP_OP22_69_L                  (DISP_TOP_OP22_REG_HISTOGRAM14)
// h006a, bit: 15
/* */
#define offset_of_disp_top_op22_reg_histogram15 (0xd4)
#define mask_of_disp_top_op22_reg_histogram15   (0xffff)
#define shift_of_disp_top_op22_reg_histogram15  (0)
#define DISP_TOP_OP22_REG_HISTOGRAM15           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_histogram15)
#define REG_DISP_TOP_OP22_6A_L                  (DISP_TOP_OP22_REG_HISTOGRAM15)
// h006b, bit: 11
/* */
#define offset_of_disp_top_op22_reg_hact (0xd6)
#define mask_of_disp_top_op22_reg_hact   (0xfff)
#define shift_of_disp_top_op22_reg_hact  (0)
#define DISP_TOP_OP22_REG_HACT           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_hact)
#define REG_DISP_TOP_OP22_6B_L           (DISP_TOP_OP22_REG_HACT)
// h006c, bit: 11
/* */
#define offset_of_disp_top_op22_reg_vact (0xd8)
#define mask_of_disp_top_op22_reg_vact   (0xfff)
#define shift_of_disp_top_op22_reg_vact  (0)
#define DISP_TOP_OP22_REG_VACT           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vact)
#define REG_DISP_TOP_OP22_6C_L           (DISP_TOP_OP22_REG_VACT)
// h006d, bit: 7
/* */
#define offset_of_disp_top_op22_reg_hblank (0xda)
#define mask_of_disp_top_op22_reg_hblank   (0xff)
#define shift_of_disp_top_op22_reg_hblank  (0)
#define DISP_TOP_OP22_REG_HBLANK           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_hblank)
#define REG_DISP_TOP_OP22_6D_L             (DISP_TOP_OP22_REG_HBLANK)
// h006d, bit: 15
/* */
#define offset_of_disp_top_op22_reg_ygain_tmp_min (0xda)
#define mask_of_disp_top_op22_reg_ygain_tmp_min   (0xff00)
#define shift_of_disp_top_op22_reg_ygain_tmp_min  (8)
#define DISP_TOP_OP22_REG_YGAIN_TMP_MIN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_ygain_tmp_min)
// h006e, bit: 7
/* */
#define offset_of_disp_top_op22_reg_pwm_period_r (0xdc)
#define mask_of_disp_top_op22_reg_pwm_period_r   (0xff)
#define shift_of_disp_top_op22_reg_pwm_period_r  (0)
#define DISP_TOP_OP22_REG_PWM_PERIOD_R           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_pwm_period_r)
#define REG_DISP_TOP_OP22_6E_L                   (DISP_TOP_OP22_REG_PWM_PERIOD_R)
// h006e, bit: 15
/* */
#define offset_of_disp_top_op22_reg_pwm_duty_r (0xdc)
#define mask_of_disp_top_op22_reg_pwm_duty_r   (0xff00)
#define shift_of_disp_top_op22_reg_pwm_duty_r  (8)
#define DISP_TOP_OP22_REG_PWM_DUTY_R           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_pwm_duty_r)
#define REG_DISP_TOP_OP22_6F_L                 (REG_DISP_TOP_OP22_BASE + 0xde)
// h0070, bit: 1
/* 3d dither MSB dither table select */
#define offset_of_disp_top_op22_reg_vip_3d_dither_msb_sel (0xe0)
#define mask_of_disp_top_op22_reg_vip_3d_dither_msb_sel   (0x3)
#define shift_of_disp_top_op22_reg_vip_3d_dither_msb_sel  (0)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_MSB_SEL \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_msb_sel)
#define REG_DISP_TOP_OP22_70_L (DISP_TOP_OP22_REG_VIP_3D_DITHER_MSB_SEL)
// h0070, bit: 3
/* 3d dither LSB dither table select */
#define offset_of_disp_top_op22_reg_vip_3d_dither_lsb_sel (0xe0)
#define mask_of_disp_top_op22_reg_vip_3d_dither_lsb_sel   (0xc)
#define shift_of_disp_top_op22_reg_vip_3d_dither_lsb_sel  (2)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_LSB_SEL \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_lsb_sel)
// h0070, bit: 4
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_lsb_en (0xe0)
#define mask_of_disp_top_op22_reg_vip_3d_dither_lsb_en   (0x10)
#define shift_of_disp_top_op22_reg_vip_3d_dither_lsb_en  (4)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_LSB_EN \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_lsb_en)
// h0070, bit: 5
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_mono_en (0xe0)
#define mask_of_disp_top_op22_reg_vip_3d_dither_mono_en   (0x20)
#define shift_of_disp_top_op22_reg_vip_3d_dither_mono_en  (5)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_MONO_EN \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_mono_en)
// h0070, bit: 6
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_obn8_en (0xe0)
#define mask_of_disp_top_op22_reg_vip_3d_dither_obn8_en   (0x40)
#define shift_of_disp_top_op22_reg_vip_3d_dither_obn8_en  (6)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_OBN8_EN \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_obn8_en)
// h0070, bit: 7
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_en (0xe0)
#define mask_of_disp_top_op22_reg_vip_3d_dither_en   (0x80)
#define shift_of_disp_top_op22_reg_vip_3d_dither_en  (7)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_en)
// h0070, bit: 9
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_lsb_vclr_no (0xe0)
#define mask_of_disp_top_op22_reg_vip_3d_dither_lsb_vclr_no   (0x300)
#define shift_of_disp_top_op22_reg_vip_3d_dither_lsb_vclr_no  (8)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_LSB_VCLR_NO \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_lsb_vclr_no)
// h0070, bit: 10
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_10_mod_en (0xe0)
#define mask_of_disp_top_op22_reg_vip_3d_dither_10_mod_en   (0x400)
#define shift_of_disp_top_op22_reg_vip_3d_dither_10_mod_en  (10)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_10_MOD_EN \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_10_mod_en)
// h0070, bit: 11
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_lsb_vclr_en (0xe0)
#define mask_of_disp_top_op22_reg_vip_3d_dither_lsb_vclr_en   (0x800)
#define shift_of_disp_top_op22_reg_vip_3d_dither_lsb_vclr_en  (11)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_LSB_VCLR_EN \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_lsb_vclr_en)
// h0070, bit: 13
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_vclr_no (0xe0)
#define mask_of_disp_top_op22_reg_vip_3d_dither_vclr_no   (0x3000)
#define shift_of_disp_top_op22_reg_vip_3d_dither_vclr_no  (12)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_VCLR_NO \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_vclr_no)
// h0070, bit: 14
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_vclr_en (0xe0)
#define mask_of_disp_top_op22_reg_vip_3d_dither_vclr_en   (0x4000)
#define shift_of_disp_top_op22_reg_vip_3d_dither_vclr_en  (14)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_VCLR_EN \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_vclr_en)
// h0070, bit: 15
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_on (0xe0)
#define mask_of_disp_top_op22_reg_vip_3d_dither_on   (0x8000)
#define shift_of_disp_top_op22_reg_vip_3d_dither_on  (15)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_ON           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_on)
// h0071, bit: 1
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_lsb_b_mask (0xe2)
#define mask_of_disp_top_op22_reg_vip_3d_dither_lsb_b_mask   (0x3)
#define shift_of_disp_top_op22_reg_vip_3d_dither_lsb_b_mask  (0)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_LSB_B_MASK \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_lsb_b_mask)
#define REG_DISP_TOP_OP22_71_L (DISP_TOP_OP22_REG_VIP_3D_DITHER_LSB_B_MASK)
// h0071, bit: 3
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_lsb_r_mask (0xe2)
#define mask_of_disp_top_op22_reg_vip_3d_dither_lsb_r_mask   (0xc)
#define shift_of_disp_top_op22_reg_vip_3d_dither_lsb_r_mask  (2)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_LSB_R_MASK \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_lsb_r_mask)
// h0071, bit: 5
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_msb_b_mask (0xe2)
#define mask_of_disp_top_op22_reg_vip_3d_dither_msb_b_mask   (0x30)
#define shift_of_disp_top_op22_reg_vip_3d_dither_msb_b_mask  (4)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_MSB_B_MASK \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_msb_b_mask)
// h0071, bit: 7
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_msb_r_mask (0xe2)
#define mask_of_disp_top_op22_reg_vip_3d_dither_msb_r_mask   (0xc0)
#define shift_of_disp_top_op22_reg_vip_3d_dither_msb_r_mask  (6)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_MSB_R_MASK \
    (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_msb_r_mask)
// h0071, bit: 15
/* */
#define offset_of_disp_top_op22_reg_vip_3d_dither_debug (0xe2)
#define mask_of_disp_top_op22_reg_vip_3d_dither_debug   (0xff00)
#define shift_of_disp_top_op22_reg_vip_3d_dither_debug  (8)
#define DISP_TOP_OP22_REG_VIP_3D_DITHER_DEBUG           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_vip_3d_dither_debug)
// h0072, bit: 7
/* */
#define offset_of_disp_top_op22_reg_h_dither_table0 (0xe4)
#define mask_of_disp_top_op22_reg_h_dither_table0   (0xff)
#define shift_of_disp_top_op22_reg_h_dither_table0  (0)
#define DISP_TOP_OP22_REG_H_DITHER_TABLE0           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_h_dither_table0)
#define REG_DISP_TOP_OP22_72_L                      (DISP_TOP_OP22_REG_H_DITHER_TABLE0)
// h0072, bit: 15
/* */
#define offset_of_disp_top_op22_reg_h_dither_table1 (0xe4)
#define mask_of_disp_top_op22_reg_h_dither_table1   (0xff00)
#define shift_of_disp_top_op22_reg_h_dither_table1  (8)
#define DISP_TOP_OP22_REG_H_DITHER_TABLE1           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_h_dither_table1)
// h0073, bit: 7
/* */
#define offset_of_disp_top_op22_reg_h_dither_table2 (0xe6)
#define mask_of_disp_top_op22_reg_h_dither_table2   (0xff)
#define shift_of_disp_top_op22_reg_h_dither_table2  (0)
#define DISP_TOP_OP22_REG_H_DITHER_TABLE2           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_h_dither_table2)
#define REG_DISP_TOP_OP22_73_L                      (DISP_TOP_OP22_REG_H_DITHER_TABLE2)
// h0073, bit: 15
/* */
#define offset_of_disp_top_op22_reg_h_dither_table3 (0xe6)
#define mask_of_disp_top_op22_reg_h_dither_table3   (0xff00)
#define shift_of_disp_top_op22_reg_h_dither_table3  (8)
#define DISP_TOP_OP22_REG_H_DITHER_TABLE3           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_h_dither_table3)
// h0074, bit: 7
/* */
#define offset_of_disp_top_op22_reg_v_dither_table0 (0xe8)
#define mask_of_disp_top_op22_reg_v_dither_table0   (0xff)
#define shift_of_disp_top_op22_reg_v_dither_table0  (0)
#define DISP_TOP_OP22_REG_V_DITHER_TABLE0           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_v_dither_table0)
#define REG_DISP_TOP_OP22_74_L                      (DISP_TOP_OP22_REG_V_DITHER_TABLE0)
// h0074, bit: 15
/* */
#define offset_of_disp_top_op22_reg_v_dither_table1 (0xe8)
#define mask_of_disp_top_op22_reg_v_dither_table1   (0xff00)
#define shift_of_disp_top_op22_reg_v_dither_table1  (8)
#define DISP_TOP_OP22_REG_V_DITHER_TABLE1           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_v_dither_table1)
// h0075, bit: 7
/* */
#define offset_of_disp_top_op22_reg_v_dither_table2 (0xea)
#define mask_of_disp_top_op22_reg_v_dither_table2   (0xff)
#define shift_of_disp_top_op22_reg_v_dither_table2  (0)
#define DISP_TOP_OP22_REG_V_DITHER_TABLE2           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_v_dither_table2)
#define REG_DISP_TOP_OP22_75_L                      (DISP_TOP_OP22_REG_V_DITHER_TABLE2)
// h0075, bit: 15
/* */
#define offset_of_disp_top_op22_reg_v_dither_table3 (0xea)
#define mask_of_disp_top_op22_reg_v_dither_table3   (0xff00)
#define shift_of_disp_top_op22_reg_v_dither_table3  (8)
#define DISP_TOP_OP22_REG_V_DITHER_TABLE3           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_v_dither_table3)
// h0076, bit: 0
/* */
#define offset_of_disp_top_op22_reg_dith_en (0xec)
#define mask_of_disp_top_op22_reg_dith_en   (0x1)
#define shift_of_disp_top_op22_reg_dith_en  (0)
#define DISP_TOP_OP22_REG_DITH_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_dith_en)
#define REG_DISP_TOP_OP22_76_L              (DISP_TOP_OP22_REG_DITH_EN)
// h0076, bit: 1
/* */
#define offset_of_disp_top_op22_reg_obn (0xec)
#define mask_of_disp_top_op22_reg_obn   (0x2)
#define shift_of_disp_top_op22_reg_obn  (1)
#define DISP_TOP_OP22_REG_OBN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_obn)
// h0076, bit: 2
/* */
#define offset_of_disp_top_op22_reg_t_rot (0xec)
#define mask_of_disp_top_op22_reg_t_rot   (0x4)
#define shift_of_disp_top_op22_reg_t_rot  (2)
#define DISP_TOP_OP22_REG_T_ROT           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_t_rot)
// h0076, bit: 3
/* */
#define offset_of_disp_top_op22_reg_s_rot (0xec)
#define mask_of_disp_top_op22_reg_s_rot   (0x8)
#define shift_of_disp_top_op22_reg_s_rot  (3)
#define DISP_TOP_OP22_REG_S_ROT           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_s_rot)
// h0076, bit: 5
/* */
#define offset_of_disp_top_op22_reg_g_xor (0xec)
#define mask_of_disp_top_op22_reg_g_xor   (0x30)
#define shift_of_disp_top_op22_reg_g_xor  (4)
#define DISP_TOP_OP22_REG_G_XOR           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_g_xor)
// h0076, bit: 7
/* */
#define offset_of_disp_top_op22_reg_b_xor (0xec)
#define mask_of_disp_top_op22_reg_b_xor   (0xc0)
#define shift_of_disp_top_op22_reg_b_xor  (6)
#define DISP_TOP_OP22_REG_B_XOR           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_b_xor)
// h0076, bit: 9
/* */
#define offset_of_disp_top_op22_reg_br (0xec)
#define mask_of_disp_top_op22_reg_br   (0x300)
#define shift_of_disp_top_op22_reg_br  (8)
#define DISP_TOP_OP22_REG_BR           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_br)
// h0076, bit: 11
/* */
#define offset_of_disp_top_op22_reg_bl (0xec)
#define mask_of_disp_top_op22_reg_bl   (0xc00)
#define shift_of_disp_top_op22_reg_bl  (10)
#define DISP_TOP_OP22_REG_BL           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_bl)
// h0076, bit: 13
/* */
#define offset_of_disp_top_op22_reg_tr (0xec)
#define mask_of_disp_top_op22_reg_tr   (0x3000)
#define shift_of_disp_top_op22_reg_tr  (12)
#define DISP_TOP_OP22_REG_TR           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tr)
// h0076, bit: 15
/* */
#define offset_of_disp_top_op22_reg_tl (0xec)
#define mask_of_disp_top_op22_reg_tl   (0xc000)
#define shift_of_disp_top_op22_reg_tl  (14)
#define DISP_TOP_OP22_REG_TL           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_tl)
// h0077, bit: 0
/* */
#define offset_of_disp_top_op22_reg_dither_minus (0xee)
#define mask_of_disp_top_op22_reg_dither_minus   (0x1)
#define shift_of_disp_top_op22_reg_dither_minus  (0)
#define DISP_TOP_OP22_REG_DITHER_MINUS           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_dither_minus)
#define REG_DISP_TOP_OP22_77_L                   (DISP_TOP_OP22_REG_DITHER_MINUS)
// h0077, bit: 1
/* */
#define offset_of_disp_top_op22_reg_noise_8to6 (0xee)
#define mask_of_disp_top_op22_reg_noise_8to6   (0x2)
#define shift_of_disp_top_op22_reg_noise_8to6  (1)
#define DISP_TOP_OP22_REG_NOISE_8TO6           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_noise_8to6)
// h0077, bit: 2
/* */
#define offset_of_disp_top_op22_reg_pseudo_en (0xee)
#define mask_of_disp_top_op22_reg_pseudo_en   (0x4)
#define shift_of_disp_top_op22_reg_pseudo_en  (2)
#define DISP_TOP_OP22_REG_PSEUDO_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_pseudo_en)
// h0077, bit: 3
/* */
#define offset_of_disp_top_op22_reg_auto_dither_en (0xee)
#define mask_of_disp_top_op22_reg_auto_dither_en   (0x8)
#define shift_of_disp_top_op22_reg_auto_dither_en  (3)
#define DISP_TOP_OP22_REG_AUTO_DITHER_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_auto_dither_en)
// h0077, bit: 4
/* */
#define offset_of_disp_top_op22_reg_reset_e_4_frame (0xee)
#define mask_of_disp_top_op22_reg_reset_e_4_frame   (0x10)
#define shift_of_disp_top_op22_reg_reset_e_4_frame  (4)
#define DISP_TOP_OP22_REG_RESET_E_4_FRAME           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_reset_e_4_frame)
// h0077, bit: 5
/* */
#define offset_of_disp_top_op22_reg_dither_mode_565 (0xee)
#define mask_of_disp_top_op22_reg_dither_mode_565   (0x20)
#define shift_of_disp_top_op22_reg_dither_mode_565  (5)
#define DISP_TOP_OP22_REG_DITHER_MODE_565           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_dither_mode_565)
#define REG_DISP_TOP_OP22_78_L                      (REG_DISP_TOP_OP22_BASE + 0xf0)
#define REG_DISP_TOP_OP22_79_L                      (REG_DISP_TOP_OP22_BASE + 0xf2)
#define REG_DISP_TOP_OP22_7A_L                      (REG_DISP_TOP_OP22_BASE + 0xf4)
#define REG_DISP_TOP_OP22_7B_L                      (REG_DISP_TOP_OP22_BASE + 0xf6)
#define REG_DISP_TOP_OP22_7C_L                      (REG_DISP_TOP_OP22_BASE + 0xf8)
#define REG_DISP_TOP_OP22_7D_L                      (REG_DISP_TOP_OP22_BASE + 0xfa)
// h007e, bit: 1
/* Select source of output swap for B channel
2'b00: 0
2'b01: B channel
2'b10: G channel
2'b11: R channel*/
#define offset_of_disp_top_op22_reg_output_swap_sel_b (0xfc)
#define mask_of_disp_top_op22_reg_output_swap_sel_b   (0x3)
#define shift_of_disp_top_op22_reg_output_swap_sel_b  (0)
#define DISP_TOP_OP22_REG_OUTPUT_SWAP_SEL_B           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_output_swap_sel_b)
#define REG_DISP_TOP_OP22_7E_L                        (DISP_TOP_OP22_REG_OUTPUT_SWAP_SEL_B)
// h007e, bit: 3
/* Select source of output swap for G channel
2'b00: 0
2'b01: B channel
2'b10: G channel
2'b11: R channel*/
#define offset_of_disp_top_op22_reg_output_swap_sel_g (0xfc)
#define mask_of_disp_top_op22_reg_output_swap_sel_g   (0xc)
#define shift_of_disp_top_op22_reg_output_swap_sel_g  (2)
#define DISP_TOP_OP22_REG_OUTPUT_SWAP_SEL_G           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_output_swap_sel_g)
// h007e, bit: 5
/* Select source of output swap for R channel
2'b00: 0
2'b01: B channel
2'b10: G channel
2'b11: R channel*/
#define offset_of_disp_top_op22_reg_output_swap_sel_r (0xfc)
#define mask_of_disp_top_op22_reg_output_swap_sel_r   (0x30)
#define shift_of_disp_top_op22_reg_output_swap_sel_r  (4)
#define DISP_TOP_OP22_REG_OUTPUT_SWAP_SEL_R           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_output_swap_sel_r)
// h007e, bit: 7
/* 2'b00:RGB888
2'b01:RGB666
2'b10:RGB565-1
2'b11:RGB565-2*/
#define offset_of_disp_top_op22_reg_rgb_mode (0xfc)
#define mask_of_disp_top_op22_reg_rgb_mode   (0xc0)
#define shift_of_disp_top_op22_reg_rgb_mode  (6)
#define DISP_TOP_OP22_REG_RGB_MODE           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_rgb_mode)
// h007e, bit: 8
/* MSB/LSB swap*/
#define offset_of_disp_top_op22_reg_rgb_ml_swap (0xfc)
#define mask_of_disp_top_op22_reg_rgb_ml_swap   (0x100)
#define shift_of_disp_top_op22_reg_rgb_ml_swap  (8)
#define DISP_TOP_OP22_REG_RGB_ML_SWAP           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_rgb_ml_swap)
// h007e, bit: 11
/* rgb_swap dither pseudo clear number*/
#define offset_of_disp_top_op22_reg_rgb_pseudo_vclr_no (0xfc)
#define mask_of_disp_top_op22_reg_rgb_pseudo_vclr_no   (0xc00)
#define shift_of_disp_top_op22_reg_rgb_pseudo_vclr_no  (10)
#define DISP_TOP_OP22_REG_RGB_PSEUDO_VCLR_NO           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_rgb_pseudo_vclr_no)
// h007e, bit: 13
/* rgb_swap dither pseudo clear enable*/
#define offset_of_disp_top_op22_reg_rgb_pseudo_vclr_en (0xfc)
#define mask_of_disp_top_op22_reg_rgb_pseudo_vclr_en   (0x2000)
#define shift_of_disp_top_op22_reg_rgb_pseudo_vclr_en  (13)
#define DISP_TOP_OP22_REG_RGB_PSEUDO_VCLR_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_rgb_pseudo_vclr_en)
// h007e, bit: 14
/* rgb_swap dither:
1'b0 : 666 mode, 1'b1 : 565 mode*/
#define offset_of_disp_top_op22_reg_rgb_dith_mode (0xfc)
#define mask_of_disp_top_op22_reg_rgb_dith_mode   (0x4000)
#define shift_of_disp_top_op22_reg_rgb_dith_mode  (14)
#define DISP_TOP_OP22_REG_RGB_DITH_MODE           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_rgb_dith_mode)
// h007e, bit: 15
/* rgb_swap dither enable*/
#define offset_of_disp_top_op22_reg_rgb_dith_en (0xfc)
#define mask_of_disp_top_op22_reg_rgb_dith_en   (0x8000)
#define shift_of_disp_top_op22_reg_rgb_dith_en  (15)
#define DISP_TOP_OP22_REG_RGB_DITH_EN           (REG_DISP_TOP_OP22_BASE + offset_of_disp_top_op22_reg_rgb_dith_en)
#define REG_DISP_TOP_OP22_7F_L                  (REG_DISP_TOP_OP22_BASE + 0xfe)
// h0000, bit: 0
/* Enable Gamma*/
#define offset_of_disp_top_gamma2_reg_gamma_en (0x0)
#define mask_of_disp_top_gamma2_reg_gamma_en   (0x1)
#define shift_of_disp_top_gamma2_reg_gamma_en  (0)
#define DISP_TOP_GAMMA2_REG_GAMMA_EN           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_gamma_en)
#define REG_DISP_TOP_GAMMA2_00_L               (DISP_TOP_GAMMA2_REG_GAMMA_EN)
// h0001, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_00 (0x2)
#define mask_of_disp_top_gamma2_reg_tbl_r_00   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_00  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_00           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_00)
#define REG_DISP_TOP_GAMMA2_01_L               (DISP_TOP_GAMMA2_REG_TBL_R_00)
// h0001, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_01 (0x2)
#define mask_of_disp_top_gamma2_reg_tbl_r_01   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_01  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_01           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_01)
// h0002, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_02 (0x4)
#define mask_of_disp_top_gamma2_reg_tbl_r_02   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_02  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_02           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_02)
#define REG_DISP_TOP_GAMMA2_02_L               (DISP_TOP_GAMMA2_REG_TBL_R_02)
// h0002, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_03 (0x4)
#define mask_of_disp_top_gamma2_reg_tbl_r_03   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_03  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_03           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_03)
// h0003, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_04 (0x6)
#define mask_of_disp_top_gamma2_reg_tbl_r_04   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_04  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_04           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_04)
#define REG_DISP_TOP_GAMMA2_03_L               (DISP_TOP_GAMMA2_REG_TBL_R_04)
// h0003, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_05 (0x6)
#define mask_of_disp_top_gamma2_reg_tbl_r_05   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_05  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_05           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_05)
// h0004, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_06 (0x8)
#define mask_of_disp_top_gamma2_reg_tbl_r_06   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_06  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_06           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_06)
#define REG_DISP_TOP_GAMMA2_04_L               (DISP_TOP_GAMMA2_REG_TBL_R_06)
// h0004, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_07 (0x8)
#define mask_of_disp_top_gamma2_reg_tbl_r_07   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_07  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_07           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_07)
// h0005, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_08 (0xa)
#define mask_of_disp_top_gamma2_reg_tbl_r_08   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_08  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_08           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_08)
#define REG_DISP_TOP_GAMMA2_05_L               (DISP_TOP_GAMMA2_REG_TBL_R_08)
// h0005, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_09 (0xa)
#define mask_of_disp_top_gamma2_reg_tbl_r_09   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_09  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_09           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_09)
// h0006, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_10 (0xc)
#define mask_of_disp_top_gamma2_reg_tbl_r_10   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_10  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_10           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_10)
#define REG_DISP_TOP_GAMMA2_06_L               (DISP_TOP_GAMMA2_REG_TBL_R_10)
// h0006, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_11 (0xc)
#define mask_of_disp_top_gamma2_reg_tbl_r_11   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_11  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_11           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_11)
// h0007, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_12 (0xe)
#define mask_of_disp_top_gamma2_reg_tbl_r_12   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_12  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_12           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_12)
#define REG_DISP_TOP_GAMMA2_07_L               (DISP_TOP_GAMMA2_REG_TBL_R_12)
// h0007, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_13 (0xe)
#define mask_of_disp_top_gamma2_reg_tbl_r_13   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_13  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_13           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_13)
// h0008, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_14 (0x10)
#define mask_of_disp_top_gamma2_reg_tbl_r_14   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_14  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_14           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_14)
#define REG_DISP_TOP_GAMMA2_08_L               (DISP_TOP_GAMMA2_REG_TBL_R_14)
// h0008, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_15 (0x10)
#define mask_of_disp_top_gamma2_reg_tbl_r_15   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_15  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_15           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_15)
// h0009, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_16 (0x12)
#define mask_of_disp_top_gamma2_reg_tbl_r_16   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_16  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_16           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_16)
#define REG_DISP_TOP_GAMMA2_09_L               (DISP_TOP_GAMMA2_REG_TBL_R_16)
// h0009, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_17 (0x12)
#define mask_of_disp_top_gamma2_reg_tbl_r_17   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_17  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_17           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_17)
// h000a, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_18 (0x14)
#define mask_of_disp_top_gamma2_reg_tbl_r_18   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_18  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_18           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_18)
#define REG_DISP_TOP_GAMMA2_0A_L               (DISP_TOP_GAMMA2_REG_TBL_R_18)
// h000a, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_19 (0x14)
#define mask_of_disp_top_gamma2_reg_tbl_r_19   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_19  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_19           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_19)
// h000b, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_20 (0x16)
#define mask_of_disp_top_gamma2_reg_tbl_r_20   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_20  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_20           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_20)
#define REG_DISP_TOP_GAMMA2_0B_L               (DISP_TOP_GAMMA2_REG_TBL_R_20)
// h000b, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_21 (0x16)
#define mask_of_disp_top_gamma2_reg_tbl_r_21   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_21  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_21           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_21)
// h000c, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_22 (0x18)
#define mask_of_disp_top_gamma2_reg_tbl_r_22   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_22  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_22           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_22)
#define REG_DISP_TOP_GAMMA2_0C_L               (DISP_TOP_GAMMA2_REG_TBL_R_22)
// h000c, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_23 (0x18)
#define mask_of_disp_top_gamma2_reg_tbl_r_23   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_23  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_23           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_23)
// h000d, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_24 (0x1a)
#define mask_of_disp_top_gamma2_reg_tbl_r_24   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_24  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_24           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_24)
#define REG_DISP_TOP_GAMMA2_0D_L               (DISP_TOP_GAMMA2_REG_TBL_R_24)
// h000d, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_25 (0x1a)
#define mask_of_disp_top_gamma2_reg_tbl_r_25   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_25  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_25           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_25)
// h000e, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_26 (0x1c)
#define mask_of_disp_top_gamma2_reg_tbl_r_26   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_26  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_26           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_26)
#define REG_DISP_TOP_GAMMA2_0E_L               (DISP_TOP_GAMMA2_REG_TBL_R_26)
// h000e, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_27 (0x1c)
#define mask_of_disp_top_gamma2_reg_tbl_r_27   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_27  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_27           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_27)
// h000f, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_28 (0x1e)
#define mask_of_disp_top_gamma2_reg_tbl_r_28   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_28  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_28           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_28)
#define REG_DISP_TOP_GAMMA2_0F_L               (DISP_TOP_GAMMA2_REG_TBL_R_28)
// h000f, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_29 (0x1e)
#define mask_of_disp_top_gamma2_reg_tbl_r_29   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_29  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_29           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_29)
// h0010, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_30 (0x20)
#define mask_of_disp_top_gamma2_reg_tbl_r_30   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_30  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_30           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_30)
#define REG_DISP_TOP_GAMMA2_10_L               (DISP_TOP_GAMMA2_REG_TBL_R_30)
// h0010, bit: 15
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_31 (0x20)
#define mask_of_disp_top_gamma2_reg_tbl_r_31   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_r_31  (8)
#define DISP_TOP_GAMMA2_REG_TBL_R_31           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_31)
// h0011, bit: 7
/* Gamma table of R channel*/
#define offset_of_disp_top_gamma2_reg_tbl_r_32 (0x22)
#define mask_of_disp_top_gamma2_reg_tbl_r_32   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_r_32  (0)
#define DISP_TOP_GAMMA2_REG_TBL_R_32           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_r_32)
#define REG_DISP_TOP_GAMMA2_11_L               (DISP_TOP_GAMMA2_REG_TBL_R_32)
// h0012, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_00 (0x24)
#define mask_of_disp_top_gamma2_reg_tbl_g_00   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_00  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_00           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_00)
#define REG_DISP_TOP_GAMMA2_12_L               (DISP_TOP_GAMMA2_REG_TBL_G_00)
// h0012, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_01 (0x24)
#define mask_of_disp_top_gamma2_reg_tbl_g_01   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_01  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_01           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_01)
// h0013, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_02 (0x26)
#define mask_of_disp_top_gamma2_reg_tbl_g_02   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_02  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_02           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_02)
#define REG_DISP_TOP_GAMMA2_13_L               (DISP_TOP_GAMMA2_REG_TBL_G_02)
// h0013, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_03 (0x26)
#define mask_of_disp_top_gamma2_reg_tbl_g_03   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_03  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_03           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_03)
// h0014, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_04 (0x28)
#define mask_of_disp_top_gamma2_reg_tbl_g_04   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_04  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_04           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_04)
#define REG_DISP_TOP_GAMMA2_14_L               (DISP_TOP_GAMMA2_REG_TBL_G_04)
// h0014, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_05 (0x28)
#define mask_of_disp_top_gamma2_reg_tbl_g_05   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_05  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_05           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_05)
// h0015, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_06 (0x2a)
#define mask_of_disp_top_gamma2_reg_tbl_g_06   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_06  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_06           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_06)
#define REG_DISP_TOP_GAMMA2_15_L               (DISP_TOP_GAMMA2_REG_TBL_G_06)
// h0015, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_07 (0x2a)
#define mask_of_disp_top_gamma2_reg_tbl_g_07   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_07  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_07           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_07)
// h0016, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_08 (0x2c)
#define mask_of_disp_top_gamma2_reg_tbl_g_08   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_08  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_08           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_08)
#define REG_DISP_TOP_GAMMA2_16_L               (DISP_TOP_GAMMA2_REG_TBL_G_08)
// h0016, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_09 (0x2c)
#define mask_of_disp_top_gamma2_reg_tbl_g_09   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_09  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_09           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_09)
// h0017, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_10 (0x2e)
#define mask_of_disp_top_gamma2_reg_tbl_g_10   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_10  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_10           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_10)
#define REG_DISP_TOP_GAMMA2_17_L               (DISP_TOP_GAMMA2_REG_TBL_G_10)
// h0017, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_11 (0x2e)
#define mask_of_disp_top_gamma2_reg_tbl_g_11   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_11  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_11           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_11)
// h0018, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_12 (0x30)
#define mask_of_disp_top_gamma2_reg_tbl_g_12   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_12  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_12           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_12)
#define REG_DISP_TOP_GAMMA2_18_L               (DISP_TOP_GAMMA2_REG_TBL_G_12)
// h0018, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_13 (0x30)
#define mask_of_disp_top_gamma2_reg_tbl_g_13   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_13  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_13           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_13)
// h0019, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_14 (0x32)
#define mask_of_disp_top_gamma2_reg_tbl_g_14   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_14  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_14           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_14)
#define REG_DISP_TOP_GAMMA2_19_L               (DISP_TOP_GAMMA2_REG_TBL_G_14)
// h0019, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_15 (0x32)
#define mask_of_disp_top_gamma2_reg_tbl_g_15   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_15  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_15           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_15)
// h001a, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_16 (0x34)
#define mask_of_disp_top_gamma2_reg_tbl_g_16   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_16  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_16           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_16)
#define REG_DISP_TOP_GAMMA2_1A_L               (DISP_TOP_GAMMA2_REG_TBL_G_16)
// h001a, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_17 (0x34)
#define mask_of_disp_top_gamma2_reg_tbl_g_17   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_17  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_17           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_17)
// h001b, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_18 (0x36)
#define mask_of_disp_top_gamma2_reg_tbl_g_18   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_18  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_18           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_18)
#define REG_DISP_TOP_GAMMA2_1B_L               (DISP_TOP_GAMMA2_REG_TBL_G_18)
// h001b, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_19 (0x36)
#define mask_of_disp_top_gamma2_reg_tbl_g_19   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_19  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_19           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_19)
// h001c, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_20 (0x38)
#define mask_of_disp_top_gamma2_reg_tbl_g_20   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_20  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_20           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_20)
#define REG_DISP_TOP_GAMMA2_1C_L               (DISP_TOP_GAMMA2_REG_TBL_G_20)
// h001c, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_21 (0x38)
#define mask_of_disp_top_gamma2_reg_tbl_g_21   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_21  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_21           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_21)
// h001d, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_22 (0x3a)
#define mask_of_disp_top_gamma2_reg_tbl_g_22   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_22  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_22           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_22)
#define REG_DISP_TOP_GAMMA2_1D_L               (DISP_TOP_GAMMA2_REG_TBL_G_22)
// h001d, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_23 (0x3a)
#define mask_of_disp_top_gamma2_reg_tbl_g_23   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_23  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_23           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_23)
// h001e, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_24 (0x3c)
#define mask_of_disp_top_gamma2_reg_tbl_g_24   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_24  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_24           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_24)
#define REG_DISP_TOP_GAMMA2_1E_L               (DISP_TOP_GAMMA2_REG_TBL_G_24)
// h001e, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_25 (0x3c)
#define mask_of_disp_top_gamma2_reg_tbl_g_25   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_25  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_25           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_25)
// h001f, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_26 (0x3e)
#define mask_of_disp_top_gamma2_reg_tbl_g_26   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_26  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_26           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_26)
#define REG_DISP_TOP_GAMMA2_1F_L               (DISP_TOP_GAMMA2_REG_TBL_G_26)
// h001f, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_27 (0x3e)
#define mask_of_disp_top_gamma2_reg_tbl_g_27   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_27  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_27           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_27)
// h0020, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_28 (0x40)
#define mask_of_disp_top_gamma2_reg_tbl_g_28   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_28  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_28           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_28)
#define REG_DISP_TOP_GAMMA2_20_L               (DISP_TOP_GAMMA2_REG_TBL_G_28)
// h0020, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_29 (0x40)
#define mask_of_disp_top_gamma2_reg_tbl_g_29   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_29  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_29           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_29)
// h0021, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_30 (0x42)
#define mask_of_disp_top_gamma2_reg_tbl_g_30   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_30  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_30           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_30)
#define REG_DISP_TOP_GAMMA2_21_L               (DISP_TOP_GAMMA2_REG_TBL_G_30)
// h0021, bit: 15
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_31 (0x42)
#define mask_of_disp_top_gamma2_reg_tbl_g_31   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_g_31  (8)
#define DISP_TOP_GAMMA2_REG_TBL_G_31           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_31)
// h0022, bit: 7
/* Gamma table of G channel*/
#define offset_of_disp_top_gamma2_reg_tbl_g_32 (0x44)
#define mask_of_disp_top_gamma2_reg_tbl_g_32   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_g_32  (0)
#define DISP_TOP_GAMMA2_REG_TBL_G_32           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_g_32)
#define REG_DISP_TOP_GAMMA2_22_L               (DISP_TOP_GAMMA2_REG_TBL_G_32)
// h0023, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_00 (0x46)
#define mask_of_disp_top_gamma2_reg_tbl_b_00   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_00  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_00           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_00)
#define REG_DISP_TOP_GAMMA2_23_L               (DISP_TOP_GAMMA2_REG_TBL_B_00)
// h0023, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_01 (0x46)
#define mask_of_disp_top_gamma2_reg_tbl_b_01   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_01  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_01           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_01)
// h0024, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_02 (0x48)
#define mask_of_disp_top_gamma2_reg_tbl_b_02   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_02  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_02           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_02)
#define REG_DISP_TOP_GAMMA2_24_L               (DISP_TOP_GAMMA2_REG_TBL_B_02)
// h0024, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_03 (0x48)
#define mask_of_disp_top_gamma2_reg_tbl_b_03   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_03  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_03           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_03)
// h0025, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_04 (0x4a)
#define mask_of_disp_top_gamma2_reg_tbl_b_04   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_04  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_04           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_04)
#define REG_DISP_TOP_GAMMA2_25_L               (DISP_TOP_GAMMA2_REG_TBL_B_04)
// h0025, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_05 (0x4a)
#define mask_of_disp_top_gamma2_reg_tbl_b_05   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_05  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_05           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_05)
// h0026, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_06 (0x4c)
#define mask_of_disp_top_gamma2_reg_tbl_b_06   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_06  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_06           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_06)
#define REG_DISP_TOP_GAMMA2_26_L               (DISP_TOP_GAMMA2_REG_TBL_B_06)
// h0026, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_07 (0x4c)
#define mask_of_disp_top_gamma2_reg_tbl_b_07   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_07  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_07           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_07)
// h0027, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_08 (0x4e)
#define mask_of_disp_top_gamma2_reg_tbl_b_08   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_08  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_08           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_08)
#define REG_DISP_TOP_GAMMA2_27_L               (DISP_TOP_GAMMA2_REG_TBL_B_08)
// h0027, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_09 (0x4e)
#define mask_of_disp_top_gamma2_reg_tbl_b_09   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_09  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_09           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_09)
// h0028, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_10 (0x50)
#define mask_of_disp_top_gamma2_reg_tbl_b_10   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_10  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_10           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_10)
#define REG_DISP_TOP_GAMMA2_28_L               (DISP_TOP_GAMMA2_REG_TBL_B_10)
// h0028, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_11 (0x50)
#define mask_of_disp_top_gamma2_reg_tbl_b_11   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_11  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_11           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_11)
// h0029, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_12 (0x52)
#define mask_of_disp_top_gamma2_reg_tbl_b_12   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_12  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_12           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_12)
#define REG_DISP_TOP_GAMMA2_29_L               (DISP_TOP_GAMMA2_REG_TBL_B_12)
// h0029, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_13 (0x52)
#define mask_of_disp_top_gamma2_reg_tbl_b_13   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_13  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_13           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_13)
// h002a, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_14 (0x54)
#define mask_of_disp_top_gamma2_reg_tbl_b_14   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_14  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_14           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_14)
#define REG_DISP_TOP_GAMMA2_2A_L               (DISP_TOP_GAMMA2_REG_TBL_B_14)
// h002a, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_15 (0x54)
#define mask_of_disp_top_gamma2_reg_tbl_b_15   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_15  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_15           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_15)
// h002b, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_16 (0x56)
#define mask_of_disp_top_gamma2_reg_tbl_b_16   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_16  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_16           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_16)
#define REG_DISP_TOP_GAMMA2_2B_L               (DISP_TOP_GAMMA2_REG_TBL_B_16)
// h002b, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_17 (0x56)
#define mask_of_disp_top_gamma2_reg_tbl_b_17   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_17  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_17           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_17)
// h002c, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_18 (0x58)
#define mask_of_disp_top_gamma2_reg_tbl_b_18   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_18  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_18           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_18)
#define REG_DISP_TOP_GAMMA2_2C_L               (DISP_TOP_GAMMA2_REG_TBL_B_18)
// h002c, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_19 (0x58)
#define mask_of_disp_top_gamma2_reg_tbl_b_19   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_19  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_19           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_19)
// h002d, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_20 (0x5a)
#define mask_of_disp_top_gamma2_reg_tbl_b_20   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_20  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_20           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_20)
#define REG_DISP_TOP_GAMMA2_2D_L               (DISP_TOP_GAMMA2_REG_TBL_B_20)
// h002d, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_21 (0x5a)
#define mask_of_disp_top_gamma2_reg_tbl_b_21   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_21  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_21           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_21)
// h002e, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_22 (0x5c)
#define mask_of_disp_top_gamma2_reg_tbl_b_22   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_22  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_22           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_22)
#define REG_DISP_TOP_GAMMA2_2E_L               (DISP_TOP_GAMMA2_REG_TBL_B_22)
// h002e, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_23 (0x5c)
#define mask_of_disp_top_gamma2_reg_tbl_b_23   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_23  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_23           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_23)
// h002f, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_24 (0x5e)
#define mask_of_disp_top_gamma2_reg_tbl_b_24   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_24  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_24           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_24)
#define REG_DISP_TOP_GAMMA2_2F_L               (DISP_TOP_GAMMA2_REG_TBL_B_24)
// h002f, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_25 (0x5e)
#define mask_of_disp_top_gamma2_reg_tbl_b_25   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_25  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_25           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_25)
// h0030, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_26 (0x60)
#define mask_of_disp_top_gamma2_reg_tbl_b_26   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_26  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_26           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_26)
#define REG_DISP_TOP_GAMMA2_30_L               (DISP_TOP_GAMMA2_REG_TBL_B_26)
// h0030, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_27 (0x60)
#define mask_of_disp_top_gamma2_reg_tbl_b_27   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_27  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_27           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_27)
// h0031, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_28 (0x62)
#define mask_of_disp_top_gamma2_reg_tbl_b_28   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_28  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_28           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_28)
#define REG_DISP_TOP_GAMMA2_31_L               (DISP_TOP_GAMMA2_REG_TBL_B_28)
// h0031, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_29 (0x62)
#define mask_of_disp_top_gamma2_reg_tbl_b_29   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_29  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_29           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_29)
// h0032, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_30 (0x64)
#define mask_of_disp_top_gamma2_reg_tbl_b_30   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_30  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_30           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_30)
#define REG_DISP_TOP_GAMMA2_32_L               (DISP_TOP_GAMMA2_REG_TBL_B_30)
// h0032, bit: 15
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_31 (0x64)
#define mask_of_disp_top_gamma2_reg_tbl_b_31   (0xff00)
#define shift_of_disp_top_gamma2_reg_tbl_b_31  (8)
#define DISP_TOP_GAMMA2_REG_TBL_B_31           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_31)
// h0033, bit: 7
/* Gamma table of B channel*/
#define offset_of_disp_top_gamma2_reg_tbl_b_32 (0x66)
#define mask_of_disp_top_gamma2_reg_tbl_b_32   (0xff)
#define shift_of_disp_top_gamma2_reg_tbl_b_32  (0)
#define DISP_TOP_GAMMA2_REG_TBL_B_32           (REG_DISP_TOP_GAMMA2_BASE + offset_of_disp_top_gamma2_reg_tbl_b_32)
#define REG_DISP_TOP_GAMMA2_33_L               (DISP_TOP_GAMMA2_REG_TBL_B_32)
#define REG_DISP_TOP_GAMMA2_34_L               (REG_DISP_TOP_GAMMA2_BASE + 0x68)
#define REG_DISP_TOP_GAMMA2_35_L               (REG_DISP_TOP_GAMMA2_BASE + 0x6a)
#define REG_DISP_TOP_GAMMA2_36_L               (REG_DISP_TOP_GAMMA2_BASE + 0x6c)
#define REG_DISP_TOP_GAMMA2_37_L               (REG_DISP_TOP_GAMMA2_BASE + 0x6e)
#define REG_DISP_TOP_GAMMA2_38_L               (REG_DISP_TOP_GAMMA2_BASE + 0x70)
#define REG_DISP_TOP_GAMMA2_39_L               (REG_DISP_TOP_GAMMA2_BASE + 0x72)
#define REG_DISP_TOP_GAMMA2_3A_L               (REG_DISP_TOP_GAMMA2_BASE + 0x74)
#define REG_DISP_TOP_GAMMA2_3B_L               (REG_DISP_TOP_GAMMA2_BASE + 0x76)
#define REG_DISP_TOP_GAMMA2_3C_L               (REG_DISP_TOP_GAMMA2_BASE + 0x78)
#define REG_DISP_TOP_GAMMA2_3D_L               (REG_DISP_TOP_GAMMA2_BASE + 0x7a)
#define REG_DISP_TOP_GAMMA2_3E_L               (REG_DISP_TOP_GAMMA2_BASE + 0x7c)
#define REG_DISP_TOP_GAMMA2_3F_L               (REG_DISP_TOP_GAMMA2_BASE + 0x7e)
#define REG_DISP_TOP_GAMMA2_40_L               (REG_DISP_TOP_GAMMA2_BASE + 0x80)
#define REG_DISP_TOP_GAMMA2_41_L               (REG_DISP_TOP_GAMMA2_BASE + 0x82)
#define REG_DISP_TOP_GAMMA2_42_L               (REG_DISP_TOP_GAMMA2_BASE + 0x84)
#define REG_DISP_TOP_GAMMA2_43_L               (REG_DISP_TOP_GAMMA2_BASE + 0x86)
#define REG_DISP_TOP_GAMMA2_44_L               (REG_DISP_TOP_GAMMA2_BASE + 0x88)
#define REG_DISP_TOP_GAMMA2_45_L               (REG_DISP_TOP_GAMMA2_BASE + 0x8a)
#define REG_DISP_TOP_GAMMA2_46_L               (REG_DISP_TOP_GAMMA2_BASE + 0x8c)
#define REG_DISP_TOP_GAMMA2_47_L               (REG_DISP_TOP_GAMMA2_BASE + 0x8e)
#define REG_DISP_TOP_GAMMA2_48_L               (REG_DISP_TOP_GAMMA2_BASE + 0x90)
#define REG_DISP_TOP_GAMMA2_49_L               (REG_DISP_TOP_GAMMA2_BASE + 0x92)
#define REG_DISP_TOP_GAMMA2_4A_L               (REG_DISP_TOP_GAMMA2_BASE + 0x94)
#define REG_DISP_TOP_GAMMA2_4B_L               (REG_DISP_TOP_GAMMA2_BASE + 0x96)
#define REG_DISP_TOP_GAMMA2_4C_L               (REG_DISP_TOP_GAMMA2_BASE + 0x98)
#define REG_DISP_TOP_GAMMA2_4D_L               (REG_DISP_TOP_GAMMA2_BASE + 0x9a)
#define REG_DISP_TOP_GAMMA2_4E_L               (REG_DISP_TOP_GAMMA2_BASE + 0x9c)
#define REG_DISP_TOP_GAMMA2_4F_L               (REG_DISP_TOP_GAMMA2_BASE + 0x9e)
#define REG_DISP_TOP_GAMMA2_50_L               (REG_DISP_TOP_GAMMA2_BASE + 0xa0)
#define REG_DISP_TOP_GAMMA2_51_L               (REG_DISP_TOP_GAMMA2_BASE + 0xa2)
#define REG_DISP_TOP_GAMMA2_52_L               (REG_DISP_TOP_GAMMA2_BASE + 0xa4)
#define REG_DISP_TOP_GAMMA2_53_L               (REG_DISP_TOP_GAMMA2_BASE + 0xa6)
#define REG_DISP_TOP_GAMMA2_54_L               (REG_DISP_TOP_GAMMA2_BASE + 0xa8)
#define REG_DISP_TOP_GAMMA2_55_L               (REG_DISP_TOP_GAMMA2_BASE + 0xaa)
#define REG_DISP_TOP_GAMMA2_56_L               (REG_DISP_TOP_GAMMA2_BASE + 0xac)
#define REG_DISP_TOP_GAMMA2_57_L               (REG_DISP_TOP_GAMMA2_BASE + 0xae)
#define REG_DISP_TOP_GAMMA2_58_L               (REG_DISP_TOP_GAMMA2_BASE + 0xb0)
#define REG_DISP_TOP_GAMMA2_59_L               (REG_DISP_TOP_GAMMA2_BASE + 0xb2)
#define REG_DISP_TOP_GAMMA2_5A_L               (REG_DISP_TOP_GAMMA2_BASE + 0xb4)
#define REG_DISP_TOP_GAMMA2_5B_L               (REG_DISP_TOP_GAMMA2_BASE + 0xb6)
#define REG_DISP_TOP_GAMMA2_5C_L               (REG_DISP_TOP_GAMMA2_BASE + 0xb8)
#define REG_DISP_TOP_GAMMA2_5D_L               (REG_DISP_TOP_GAMMA2_BASE + 0xba)
#define REG_DISP_TOP_GAMMA2_5E_L               (REG_DISP_TOP_GAMMA2_BASE + 0xbc)
#define REG_DISP_TOP_GAMMA2_5F_L               (REG_DISP_TOP_GAMMA2_BASE + 0xbe)
#define REG_DISP_TOP_GAMMA2_60_L               (REG_DISP_TOP_GAMMA2_BASE + 0xc0)
#define REG_DISP_TOP_GAMMA2_61_L               (REG_DISP_TOP_GAMMA2_BASE + 0xc2)
#define REG_DISP_TOP_GAMMA2_62_L               (REG_DISP_TOP_GAMMA2_BASE + 0xc4)
#define REG_DISP_TOP_GAMMA2_63_L               (REG_DISP_TOP_GAMMA2_BASE + 0xc6)
#define REG_DISP_TOP_GAMMA2_64_L               (REG_DISP_TOP_GAMMA2_BASE + 0xc8)
#define REG_DISP_TOP_GAMMA2_65_L               (REG_DISP_TOP_GAMMA2_BASE + 0xca)
#define REG_DISP_TOP_GAMMA2_66_L               (REG_DISP_TOP_GAMMA2_BASE + 0xcc)
#define REG_DISP_TOP_GAMMA2_67_L               (REG_DISP_TOP_GAMMA2_BASE + 0xce)
#define REG_DISP_TOP_GAMMA2_68_L               (REG_DISP_TOP_GAMMA2_BASE + 0xd0)
#define REG_DISP_TOP_GAMMA2_69_L               (REG_DISP_TOP_GAMMA2_BASE + 0xd2)
#define REG_DISP_TOP_GAMMA2_6A_L               (REG_DISP_TOP_GAMMA2_BASE + 0xd4)
#define REG_DISP_TOP_GAMMA2_6B_L               (REG_DISP_TOP_GAMMA2_BASE + 0xd6)
#define REG_DISP_TOP_GAMMA2_6C_L               (REG_DISP_TOP_GAMMA2_BASE + 0xd8)
#define REG_DISP_TOP_GAMMA2_6D_L               (REG_DISP_TOP_GAMMA2_BASE + 0xda)
#define REG_DISP_TOP_GAMMA2_6E_L               (REG_DISP_TOP_GAMMA2_BASE + 0xdc)
#define REG_DISP_TOP_GAMMA2_6F_L               (REG_DISP_TOP_GAMMA2_BASE + 0xde)
#define REG_DISP_TOP_GAMMA2_70_L               (REG_DISP_TOP_GAMMA2_BASE + 0xe0)
#define REG_DISP_TOP_GAMMA2_71_L               (REG_DISP_TOP_GAMMA2_BASE + 0xe2)
#define REG_DISP_TOP_GAMMA2_72_L               (REG_DISP_TOP_GAMMA2_BASE + 0xe4)
#define REG_DISP_TOP_GAMMA2_73_L               (REG_DISP_TOP_GAMMA2_BASE + 0xe6)
#define REG_DISP_TOP_GAMMA2_74_L               (REG_DISP_TOP_GAMMA2_BASE + 0xe8)
#define REG_DISP_TOP_GAMMA2_75_L               (REG_DISP_TOP_GAMMA2_BASE + 0xea)
#define REG_DISP_TOP_GAMMA2_76_L               (REG_DISP_TOP_GAMMA2_BASE + 0xec)
#define REG_DISP_TOP_GAMMA2_77_L               (REG_DISP_TOP_GAMMA2_BASE + 0xee)
#define REG_DISP_TOP_GAMMA2_78_L               (REG_DISP_TOP_GAMMA2_BASE + 0xf0)
#define REG_DISP_TOP_GAMMA2_79_L               (REG_DISP_TOP_GAMMA2_BASE + 0xf2)
#define REG_DISP_TOP_GAMMA2_7A_L               (REG_DISP_TOP_GAMMA2_BASE + 0xf4)
#define REG_DISP_TOP_GAMMA2_7B_L               (REG_DISP_TOP_GAMMA2_BASE + 0xf6)
#define REG_DISP_TOP_GAMMA2_7C_L               (REG_DISP_TOP_GAMMA2_BASE + 0xf8)
#define REG_DISP_TOP_GAMMA2_7D_L               (REG_DISP_TOP_GAMMA2_BASE + 0xfa)
#define REG_DISP_TOP_GAMMA2_7E_L               (REG_DISP_TOP_GAMMA2_BASE + 0xfc)
#define REG_DISP_TOP_GAMMA2_7F_L               (REG_DISP_TOP_GAMMA2_BASE + 0xfe)
// h0000, bit: 3
/* clk_dac_atop_p clock setting
[0]: disable clock
[1]: invert clock
[3:2]: no select mode*/
#define offset_of_dac_atop_reg_ckg_dac_atop (0x0)
#define mask_of_dac_atop_reg_ckg_dac_atop   (0xf)
#define shift_of_dac_atop_reg_ckg_dac_atop  (0)
#define DAC_ATOP_REG_CKG_DAC_ATOP           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_ckg_dac_atop)
#define REG_DAC_ATOP_00_L                   (DAC_ATOP_REG_CKG_DAC_ATOP)
// h0000, bit: 7
/* clk_cvbs_atop_p clock setting
[0]: disable clock
[1]: invert clock
[3:2]: no select mode*/
#define offset_of_dac_atop_reg_ckg_cvbs_atop (0x0)
#define mask_of_dac_atop_reg_ckg_cvbs_atop   (0xf0)
#define shift_of_dac_atop_reg_ckg_cvbs_atop  (4)
#define DAC_ATOP_REG_CKG_CVBS_ATOP           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_ckg_cvbs_atop)
// h0001, bit: 2
/* write 1 to reset
[0]: fpll scal synth sw rst
[1]: dac_atop dig sw rst
[2]: dac_atop riu sw rst*/
#define offset_of_dac_atop_reg_dac_atop_sw_rst (0x2)
#define mask_of_dac_atop_reg_dac_atop_sw_rst   (0x7)
#define shift_of_dac_atop_reg_dac_atop_sw_rst  (0)
#define DAC_ATOP_REG_DAC_ATOP_SW_RST           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_atop_sw_rst)
#define REG_DAC_ATOP_01_L                      (DAC_ATOP_REG_DAC_ATOP_SW_RST)
// h0002, bit: 7
/* test of synthesizer*/
#define offset_of_dac_atop_reg_dac_syn_test (0x4)
#define mask_of_dac_atop_reg_dac_syn_test   (0xff)
#define shift_of_dac_atop_reg_dac_syn_test  (0)
#define DAC_ATOP_REG_DAC_SYN_TEST           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_syn_test)
#define REG_DAC_ATOP_02_L                   (DAC_ATOP_REG_DAC_SYN_TEST)
// bigger than 16 bit case allh0003
#define offset_of_dac_atop_reg_dac_fpll_set_rd (0x6)
#define mask_of_dac_atop_reg_dac_fpll_set_rd   (0xffffff)
#define shift_of_dac_atop_reg_dac_fpll_set_rd  (0)
#define DAC_ATOP_REG_DAC_FPLL_SET_RD           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_fpll_set_rd)
// h0003, bit: 15
/* read set value of FPLL (dac synthesizer)*/
#define offset_of_dac_atop_reg_dac_fpll_set_rd_0 (0x6)
#define mask_of_dac_atop_reg_dac_fpll_set_rd_0   (0xffff)
#define shift_of_dac_atop_reg_dac_fpll_set_rd_0  (0)
#define DAC_ATOP_REG_DAC_FPLL_SET_RD_0           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_fpll_set_rd_0)
#define REG_DAC_ATOP_03_L                        (DAC_ATOP_REG_DAC_FPLL_SET_RD_0)
// h0004, bit: 7
/* read set value of FPLL (dac synthesizer)*/
#define offset_of_dac_atop_reg_dac_fpll_set_rd_1 (0x8)
#define mask_of_dac_atop_reg_dac_fpll_set_rd_1   (0xff)
#define shift_of_dac_atop_reg_dac_fpll_set_rd_1  (0)
#define DAC_ATOP_REG_DAC_FPLL_SET_RD_1           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_fpll_set_rd_1)
#define REG_DAC_ATOP_04_L                        (DAC_ATOP_REG_DAC_FPLL_SET_RD_1)
// h0005, bit: 0
/* 0: sel lsb for 2'b0
1: sel lsb for rgb[7:6]*/
#define offset_of_dac_atop_reg_dac_rgb_lsb_sel (0xa)
#define mask_of_dac_atop_reg_dac_rgb_lsb_sel   (0x1)
#define shift_of_dac_atop_reg_dac_rgb_lsb_sel  (0)
#define DAC_ATOP_REG_DAC_RGB_LSB_SEL           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_rgb_lsb_sel)
#define REG_DAC_ATOP_05_L                      (DAC_ATOP_REG_DAC_RGB_LSB_SEL)
// h0005, bit: 4
/* 0: select syn_set source from fpll
1: select syn_set source from reg*/
#define offset_of_dac_atop_reg_dac_syn_set_sel (0xa)
#define mask_of_dac_atop_reg_dac_syn_set_sel   (0x10)
#define shift_of_dac_atop_reg_dac_syn_set_sel  (4)
#define DAC_ATOP_REG_DAC_SYN_SET_SEL           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_syn_set_sel)
// h0006, bit: 3
/* select dac_atop testout*/
#define offset_of_dac_atop_reg_dac_atop_testbus_sel (0xc)
#define mask_of_dac_atop_reg_dac_atop_testbus_sel   (0xf)
#define shift_of_dac_atop_reg_dac_atop_testbus_sel  (0)
#define DAC_ATOP_REG_DAC_ATOP_TESTBUS_SEL           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_atop_testbus_sel)
#define REG_DAC_ATOP_06_L                           (DAC_ATOP_REG_DAC_ATOP_TESTBUS_SEL)
// h0007, bit: 0
/* 0: sel gpio ctrl from top
1: sel gpio ctrl from reg_dac_atop*/
#define offset_of_dac_atop_reg_dac_gpio_sel (0xe)
#define mask_of_dac_atop_reg_dac_gpio_sel   (0x1)
#define shift_of_dac_atop_reg_dac_gpio_sel  (0)
#define DAC_ATOP_REG_DAC_GPIO_SEL           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_gpio_sel)
#define REG_DAC_ATOP_07_L                   (DAC_ATOP_REG_DAC_GPIO_SEL)
// h0008, bit: 15
/* dummy*/
#define offset_of_dac_atop_reg_dummy (0x10)
#define mask_of_dac_atop_reg_dummy   (0xffff)
#define shift_of_dac_atop_reg_dummy  (0)
#define DAC_ATOP_REG_DUMMY           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dummy)
#define REG_DAC_ATOP_08_L            (DAC_ATOP_REG_DUMMY)
// h0009, bit: 1
/* 00: sc in
01: enable dig ramp data to idac
10: enable register data to idac
11: enable testbus in data to idac*/
#define offset_of_dac_atop_reg_dac_din_sel (0x12)
#define mask_of_dac_atop_reg_dac_din_sel   (0x3)
#define shift_of_dac_atop_reg_dac_din_sel  (0)
#define DAC_ATOP_REG_DAC_DIN_SEL           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_din_sel)
#define REG_DAC_ATOP_09_L                  (DAC_ATOP_REG_DAC_DIN_SEL)
// h0009, bit: 5
/* 00: sc in
01: enable dig ramp data to cvbs
10: enable register data to cvbs
11: enable testbus in data to cvbs*/
#define offset_of_dac_atop_reg_cvbs_din_sel (0x12)
#define mask_of_dac_atop_reg_cvbs_din_sel   (0x30)
#define shift_of_dac_atop_reg_cvbs_din_sel  (4)
#define DAC_ATOP_REG_CVBS_DIN_SEL           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_cvbs_din_sel)
// h000a, bit: 15
/* reserved*/
#define offset_of_dac_atop_reg_reserved_0a (0x14)
#define mask_of_dac_atop_reg_reserved_0a   (0xffff)
#define shift_of_dac_atop_reg_reserved_0a  (0)
#define DAC_ATOP_REG_RESERVED_0A           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_reserved_0a)
#define REG_DAC_ATOP_0A_L                  (DAC_ATOP_REG_RESERVED_0A)
// h000b, bit: 0
/* 0: normal out, 1: inverse out*/
#define offset_of_dac_atop_reg_hs_pol (0x16)
#define mask_of_dac_atop_reg_hs_pol   (0x1)
#define shift_of_dac_atop_reg_hs_pol  (0)
#define DAC_ATOP_REG_HS_POL           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_hs_pol)
#define REG_DAC_ATOP_0B_L             (DAC_ATOP_REG_HS_POL)
// h000b, bit: 1
/* 0: normal out, 1: inverse out*/
#define offset_of_dac_atop_reg_vs_pol (0x16)
#define mask_of_dac_atop_reg_vs_pol   (0x2)
#define shift_of_dac_atop_reg_vs_pol  (1)
#define DAC_ATOP_REG_VS_POL           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_vs_pol)
// h000c, bit: 0
/* 1: hs, vs delay 1t out*/
#define offset_of_dac_atop_reg_hsvs_delay (0x18)
#define mask_of_dac_atop_reg_hsvs_delay   (0x1)
#define shift_of_dac_atop_reg_hsvs_delay  (0)
#define DAC_ATOP_REG_HSVS_DELAY           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_hsvs_delay)
#define REG_DAC_ATOP_0C_L                 (DAC_ATOP_REG_HSVS_DELAY)
// h000d, bit: 1
/* select dac channel b
00: sel [9:0]
01: sel [19:10]
10: sel [29:20]*/
#define offset_of_dac_atop_reg_dac_b_sel (0x1a)
#define mask_of_dac_atop_reg_dac_b_sel   (0x3)
#define shift_of_dac_atop_reg_dac_b_sel  (0)
#define DAC_ATOP_REG_DAC_B_SEL           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_b_sel)
#define REG_DAC_ATOP_0D_L                (DAC_ATOP_REG_DAC_B_SEL)
// h000d, bit: 3
/* select dac channel g
00: sel [9:0]
01: sel [19:10]
10: sel [29:20]*/
#define offset_of_dac_atop_reg_dac_g_sel (0x1a)
#define mask_of_dac_atop_reg_dac_g_sel   (0xc)
#define shift_of_dac_atop_reg_dac_g_sel  (2)
#define DAC_ATOP_REG_DAC_G_SEL           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_g_sel)
// h000d, bit: 5
/* select dac channel r
00: sel [9:0]
01: sel [19:10]
10: sel [29:20]*/
#define offset_of_dac_atop_reg_dac_r_sel (0x1a)
#define mask_of_dac_atop_reg_dac_r_sel   (0x30)
#define shift_of_dac_atop_reg_dac_r_sel  (4)
#define DAC_ATOP_REG_DAC_R_SEL           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_r_sel)
// bigger than 16 bit case allh000e
#define offset_of_dac_atop_reg_dac_syn_set (0x1c)
#define mask_of_dac_atop_reg_dac_syn_set   (0xffffff)
#define shift_of_dac_atop_reg_dac_syn_set  (0)
#define DAC_ATOP_REG_DAC_SYN_SET           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_syn_set)
// h000e, bit: 15
/* synthesizer set value, should be enable by h05 [4]*/
#define offset_of_dac_atop_reg_dac_syn_set_0 (0x1c)
#define mask_of_dac_atop_reg_dac_syn_set_0   (0xffff)
#define shift_of_dac_atop_reg_dac_syn_set_0  (0)
#define DAC_ATOP_REG_DAC_SYN_SET_0           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_syn_set_0)
#define REG_DAC_ATOP_0E_L                    (DAC_ATOP_REG_DAC_SYN_SET_0)
// h000f, bit: 7
/* synthesizer set value, should be enable by h05 [4]*/
#define offset_of_dac_atop_reg_dac_syn_set_1 (0x1e)
#define mask_of_dac_atop_reg_dac_syn_set_1   (0xff)
#define shift_of_dac_atop_reg_dac_syn_set_1  (0)
#define DAC_ATOP_REG_DAC_SYN_SET_1           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dac_syn_set_1)
#define REG_DAC_ATOP_0F_L                    (DAC_ATOP_REG_DAC_SYN_SET_1)
// h0010, bit: 0
/* input enable for PADA_IDAC_OUT_B*/
#define offset_of_dac_atop_reg_gpio_en_pad_out_b (0x20)
#define mask_of_dac_atop_reg_gpio_en_pad_out_b   (0x1)
#define shift_of_dac_atop_reg_gpio_en_pad_out_b  (0)
#define DAC_ATOP_REG_GPIO_EN_PAD_OUT_B           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_en_pad_out_b)
#define REG_DAC_ATOP_10_L                        (DAC_ATOP_REG_GPIO_EN_PAD_OUT_B)
// h0010, bit: 1
/* input enable for PADA_IDAC_OUT_G*/
#define offset_of_dac_atop_reg_gpio_en_pad_out_g (0x20)
#define mask_of_dac_atop_reg_gpio_en_pad_out_g   (0x2)
#define shift_of_dac_atop_reg_gpio_en_pad_out_g  (1)
#define DAC_ATOP_REG_GPIO_EN_PAD_OUT_G           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_en_pad_out_g)
// h0010, bit: 2
/* input enable for PADA_IDAC_OUT_R*/
#define offset_of_dac_atop_reg_gpio_en_pad_out_r (0x20)
#define mask_of_dac_atop_reg_gpio_en_pad_out_r   (0x4)
#define shift_of_dac_atop_reg_gpio_en_pad_out_r  (2)
#define DAC_ATOP_REG_GPIO_EN_PAD_OUT_R           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_en_pad_out_r)
// h0010, bit: 3
/* input enable for PADA_IDAC_OUT_C*/
#define offset_of_dac_atop_reg_gpio_en_pad_out_c (0x20)
#define mask_of_dac_atop_reg_gpio_en_pad_out_c   (0x8)
#define shift_of_dac_atop_reg_gpio_en_pad_out_c  (3)
#define DAC_ATOP_REG_GPIO_EN_PAD_OUT_C           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_en_pad_out_c)
// h0011, bit: 0
/* output signal from digital for PADA_IDAC_OUT_B*/
#define offset_of_dac_atop_reg_gpio_i_pad_out_b (0x22)
#define mask_of_dac_atop_reg_gpio_i_pad_out_b   (0x1)
#define shift_of_dac_atop_reg_gpio_i_pad_out_b  (0)
#define DAC_ATOP_REG_GPIO_I_PAD_OUT_B           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_i_pad_out_b)
#define REG_DAC_ATOP_11_L                       (DAC_ATOP_REG_GPIO_I_PAD_OUT_B)
// h0011, bit: 1
/* output signal from digital for PADA_IDAC_OUT_G*/
#define offset_of_dac_atop_reg_gpio_i_pad_out_g (0x22)
#define mask_of_dac_atop_reg_gpio_i_pad_out_g   (0x2)
#define shift_of_dac_atop_reg_gpio_i_pad_out_g  (1)
#define DAC_ATOP_REG_GPIO_I_PAD_OUT_G           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_i_pad_out_g)
// h0011, bit: 2
/* output signal from digital for PADA_IDAC_OUT_R*/
#define offset_of_dac_atop_reg_gpio_i_pad_out_r (0x22)
#define mask_of_dac_atop_reg_gpio_i_pad_out_r   (0x4)
#define shift_of_dac_atop_reg_gpio_i_pad_out_r  (2)
#define DAC_ATOP_REG_GPIO_I_PAD_OUT_R           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_i_pad_out_r)
// h0011, bit: 3
/* output signal from digital for PADA_IDAC_OUT_C*/
#define offset_of_dac_atop_reg_gpio_i_pad_out_c (0x22)
#define mask_of_dac_atop_reg_gpio_i_pad_out_c   (0x8)
#define shift_of_dac_atop_reg_gpio_i_pad_out_c  (3)
#define DAC_ATOP_REG_GPIO_I_PAD_OUT_C           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_i_pad_out_c)
// h0012, bit: 0
/* output enable for PADA_IDAC_OUT_B*/
#define offset_of_dac_atop_reg_gpio_oen_pad_out_b (0x24)
#define mask_of_dac_atop_reg_gpio_oen_pad_out_b   (0x1)
#define shift_of_dac_atop_reg_gpio_oen_pad_out_b  (0)
#define DAC_ATOP_REG_GPIO_OEN_PAD_OUT_B           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_oen_pad_out_b)
#define REG_DAC_ATOP_12_L                         (DAC_ATOP_REG_GPIO_OEN_PAD_OUT_B)
// h0012, bit: 1
/* output enable for PADA_IDAC_OUT_G*/
#define offset_of_dac_atop_reg_gpio_oen_pad_out_g (0x24)
#define mask_of_dac_atop_reg_gpio_oen_pad_out_g   (0x2)
#define shift_of_dac_atop_reg_gpio_oen_pad_out_g  (1)
#define DAC_ATOP_REG_GPIO_OEN_PAD_OUT_G           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_oen_pad_out_g)
// h0012, bit: 2
/* output enable for PADA_IDAC_OUT_R*/
#define offset_of_dac_atop_reg_gpio_oen_pad_out_r (0x24)
#define mask_of_dac_atop_reg_gpio_oen_pad_out_r   (0x4)
#define shift_of_dac_atop_reg_gpio_oen_pad_out_r  (2)
#define DAC_ATOP_REG_GPIO_OEN_PAD_OUT_R           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_oen_pad_out_r)
// h0012, bit: 3
/* output enable for PADA_IDAC_OUT_C*/
#define offset_of_dac_atop_reg_gpio_oen_pad_out_c (0x24)
#define mask_of_dac_atop_reg_gpio_oen_pad_out_c   (0x8)
#define shift_of_dac_atop_reg_gpio_oen_pad_out_c  (3)
#define DAC_ATOP_REG_GPIO_OEN_PAD_OUT_C           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_oen_pad_out_c)
// h0013, bit: 0
/* comparator output to digital for DAC_B*/
#define offset_of_dac_atop_reg_dato_dac_cmp_out_b (0x26)
#define mask_of_dac_atop_reg_dato_dac_cmp_out_b   (0x1)
#define shift_of_dac_atop_reg_dato_dac_cmp_out_b  (0)
#define DAC_ATOP_REG_DATO_DAC_CMP_OUT_B           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dato_dac_cmp_out_b)
#define REG_DAC_ATOP_13_L                         (DAC_ATOP_REG_DATO_DAC_CMP_OUT_B)
// h0013, bit: 1
/* comparator output to digital for DAC_G*/
#define offset_of_dac_atop_reg_dato_dac_cmp_out_g (0x26)
#define mask_of_dac_atop_reg_dato_dac_cmp_out_g   (0x2)
#define shift_of_dac_atop_reg_dato_dac_cmp_out_g  (1)
#define DAC_ATOP_REG_DATO_DAC_CMP_OUT_G           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dato_dac_cmp_out_g)
// h0013, bit: 2
/* comparator output to digital for DAC_R*/
#define offset_of_dac_atop_reg_dato_dac_cmp_out_r (0x26)
#define mask_of_dac_atop_reg_dato_dac_cmp_out_r   (0x4)
#define shift_of_dac_atop_reg_dato_dac_cmp_out_r  (2)
#define DAC_ATOP_REG_DATO_DAC_CMP_OUT_R           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dato_dac_cmp_out_r)
// h0013, bit: 3
/* comparator output to digital for DAC_C*/
#define offset_of_dac_atop_reg_dato_dac_cmp_out_c (0x26)
#define mask_of_dac_atop_reg_dato_dac_cmp_out_c   (0x8)
#define shift_of_dac_atop_reg_dato_dac_cmp_out_c  (3)
#define DAC_ATOP_REG_DATO_DAC_CMP_OUT_C           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_dato_dac_cmp_out_c)
// h0014, bit: 0
/* enable plug detection for DAC_B*/
#define offset_of_dac_atop_reg_en_hd_dac_b_det (0x28)
#define mask_of_dac_atop_reg_en_hd_dac_b_det   (0x1)
#define shift_of_dac_atop_reg_en_hd_dac_b_det  (0)
#define DAC_ATOP_REG_EN_HD_DAC_B_DET           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_en_hd_dac_b_det)
#define REG_DAC_ATOP_14_L                      (DAC_ATOP_REG_EN_HD_DAC_B_DET)
// h0014, bit: 1
/* enable plug detection for DAC_G*/
#define offset_of_dac_atop_reg_en_hd_dac_g_det (0x28)
#define mask_of_dac_atop_reg_en_hd_dac_g_det   (0x2)
#define shift_of_dac_atop_reg_en_hd_dac_g_det  (1)
#define DAC_ATOP_REG_EN_HD_DAC_G_DET           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_en_hd_dac_g_det)
// h0014, bit: 2
/* enable plug detection for DAC_R*/
#define offset_of_dac_atop_reg_en_hd_dac_r_det (0x28)
#define mask_of_dac_atop_reg_en_hd_dac_r_det   (0x4)
#define shift_of_dac_atop_reg_en_hd_dac_r_det  (2)
#define DAC_ATOP_REG_EN_HD_DAC_R_DET           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_en_hd_dac_r_det)
// h0014, bit: 3
/* enable plug detection for DAC_C*/
#define offset_of_dac_atop_reg_en_hd_dac_c_det (0x28)
#define mask_of_dac_atop_reg_en_hd_dac_c_det   (0x8)
#define shift_of_dac_atop_reg_en_hd_dac_c_det  (3)
#define DAC_ATOP_REG_EN_HD_DAC_C_DET           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_en_hd_dac_c_det)
// h0015, bit: 0
/* enable idac_tx for IDAC_B*/
#define offset_of_dac_atop_reg_en_idac_b (0x2a)
#define mask_of_dac_atop_reg_en_idac_b   (0x1)
#define shift_of_dac_atop_reg_en_idac_b  (0)
#define DAC_ATOP_REG_EN_IDAC_B           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_en_idac_b)
#define REG_DAC_ATOP_15_L                (DAC_ATOP_REG_EN_IDAC_B)
// h0015, bit: 1
/* enable idac_tx for IDAC_G*/
#define offset_of_dac_atop_reg_en_idac_g (0x2a)
#define mask_of_dac_atop_reg_en_idac_g   (0x2)
#define shift_of_dac_atop_reg_en_idac_g  (1)
#define DAC_ATOP_REG_EN_IDAC_G           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_en_idac_g)
// h0015, bit: 2
/* enable idac_tx for IDAC_R*/
#define offset_of_dac_atop_reg_en_idac_r (0x2a)
#define mask_of_dac_atop_reg_en_idac_r   (0x4)
#define shift_of_dac_atop_reg_en_idac_r  (2)
#define DAC_ATOP_REG_EN_IDAC_R           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_en_idac_r)
// h0015, bit: 3
/* enable idac_tx for IDAC_C*/
#define offset_of_dac_atop_reg_en_idac_c (0x2a)
#define mask_of_dac_atop_reg_en_idac_c   (0x8)
#define shift_of_dac_atop_reg_en_idac_c  (3)
#define DAC_ATOP_REG_EN_IDAC_C           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_en_idac_c)
// h0016, bit: 0
/* enable for idac_ref*/
#define offset_of_dac_atop_reg_en_idac_ref (0x2c)
#define mask_of_dac_atop_reg_en_idac_ref   (0x1)
#define shift_of_dac_atop_reg_en_idac_ref  (0)
#define DAC_ATOP_REG_EN_IDAC_REF           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_en_idac_ref)
#define REG_DAC_ATOP_16_L                  (DAC_ATOP_REG_EN_IDAC_REF)
// h0017, bit: 9
/* manual set output level for IDAC_B*/
#define offset_of_dac_atop_reg_gcr_idac_level_b (0x2e)
#define mask_of_dac_atop_reg_gcr_idac_level_b   (0x3ff)
#define shift_of_dac_atop_reg_gcr_idac_level_b  (0)
#define DAC_ATOP_REG_GCR_IDAC_LEVEL_B           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_idac_level_b)
#define REG_DAC_ATOP_17_L                       (DAC_ATOP_REG_GCR_IDAC_LEVEL_B)
// h0018, bit: 9
/* manual set output level for IDAC_G*/
#define offset_of_dac_atop_reg_gcr_idac_level_g (0x30)
#define mask_of_dac_atop_reg_gcr_idac_level_g   (0x3ff)
#define shift_of_dac_atop_reg_gcr_idac_level_g  (0)
#define DAC_ATOP_REG_GCR_IDAC_LEVEL_G           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_idac_level_g)
#define REG_DAC_ATOP_18_L                       (DAC_ATOP_REG_GCR_IDAC_LEVEL_G)
// h0019, bit: 9
/* manual set output level for IDAC_R*/
#define offset_of_dac_atop_reg_gcr_idac_level_r (0x32)
#define mask_of_dac_atop_reg_gcr_idac_level_r   (0x3ff)
#define shift_of_dac_atop_reg_gcr_idac_level_r  (0)
#define DAC_ATOP_REG_GCR_IDAC_LEVEL_R           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_idac_level_r)
#define REG_DAC_ATOP_19_L                       (DAC_ATOP_REG_GCR_IDAC_LEVEL_R)
// h001a, bit: 6
/* trim bits for IDAC_B*/
#define offset_of_dac_atop_reg_gcr_idac_trim_b (0x34)
#define mask_of_dac_atop_reg_gcr_idac_trim_b   (0x7f)
#define shift_of_dac_atop_reg_gcr_idac_trim_b  (0)
#define DAC_ATOP_REG_GCR_IDAC_TRIM_B           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_idac_trim_b)
#define REG_DAC_ATOP_1A_L                      (DAC_ATOP_REG_GCR_IDAC_TRIM_B)
// h001b, bit: 6
/* trim bits for IDAC_G*/
#define offset_of_dac_atop_reg_gcr_idac_trim_g (0x36)
#define mask_of_dac_atop_reg_gcr_idac_trim_g   (0x7f)
#define shift_of_dac_atop_reg_gcr_idac_trim_g  (0)
#define DAC_ATOP_REG_GCR_IDAC_TRIM_G           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_idac_trim_g)
#define REG_DAC_ATOP_1B_L                      (DAC_ATOP_REG_GCR_IDAC_TRIM_G)
// h001c, bit: 6
/* trim bits for IDAC_R*/
#define offset_of_dac_atop_reg_gcr_idac_trim_r (0x38)
#define mask_of_dac_atop_reg_gcr_idac_trim_r   (0x7f)
#define shift_of_dac_atop_reg_gcr_idac_trim_r  (0)
#define DAC_ATOP_REG_GCR_IDAC_TRIM_R           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_idac_trim_r)
#define REG_DAC_ATOP_1C_L                      (DAC_ATOP_REG_GCR_IDAC_TRIM_R)
// h001d, bit: 0
/* manual set half-current mode*/
#define offset_of_dac_atop_reg_gcr_ihalf_rgb (0x3a)
#define mask_of_dac_atop_reg_gcr_ihalf_rgb   (0x1)
#define shift_of_dac_atop_reg_gcr_ihalf_rgb  (0)
#define DAC_ATOP_REG_GCR_IHALF_RGB           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_ihalf_rgb)
#define REG_DAC_ATOP_1D_L                    (DAC_ATOP_REG_GCR_IHALF_RGB)
// h001d, bit: 1
/* manual set quartor-current mode*/
#define offset_of_dac_atop_reg_gcr_iquart_hd (0x3a)
#define mask_of_dac_atop_reg_gcr_iquart_hd   (0x2)
#define shift_of_dac_atop_reg_gcr_iquart_hd  (1)
#define DAC_ATOP_REG_GCR_IQUART_HD           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_iquart_hd)
// h001d, bit: 4
/* manual set half-current mode*/
#define offset_of_dac_atop_reg_gcr_ihalf_cvbs (0x3a)
#define mask_of_dac_atop_reg_gcr_ihalf_cvbs   (0x10)
#define shift_of_dac_atop_reg_gcr_ihalf_cvbs  (4)
#define DAC_ATOP_REG_GCR_IHALF_CVBS           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_ihalf_cvbs)
// h001e, bit: 2
/* manual set detect level for IDAC_B/G/R*/
#define offset_of_dac_atop_reg_gcr_lev_plugdet_rgb (0x3c)
#define mask_of_dac_atop_reg_gcr_lev_plugdet_rgb   (0x7)
#define shift_of_dac_atop_reg_gcr_lev_plugdet_rgb  (0)
#define DAC_ATOP_REG_GCR_LEV_PLUGDET_RGB           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_lev_plugdet_rgb)
#define REG_DAC_ATOP_1E_L                          (DAC_ATOP_REG_GCR_LEV_PLUGDET_RGB)
// h001e, bit: 6
/* manual set detect level for IDAC_C*/
#define offset_of_dac_atop_reg_gcr_lev_plugdet_cvbs (0x3c)
#define mask_of_dac_atop_reg_gcr_lev_plugdet_cvbs   (0x70)
#define shift_of_dac_atop_reg_gcr_lev_plugdet_cvbs  (4)
#define DAC_ATOP_REG_GCR_LEV_PLUGDET_CVBS           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_lev_plugdet_cvbs)
// h001f, bit: 0
/* power down for internal ldo*/
#define offset_of_dac_atop_reg_pd_idac_ldo (0x3e)
#define mask_of_dac_atop_reg_pd_idac_ldo   (0x1)
#define shift_of_dac_atop_reg_pd_idac_ldo  (0)
#define DAC_ATOP_REG_PD_IDAC_LDO           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_pd_idac_ldo)
#define REG_DAC_ATOP_1F_L                  (DAC_ATOP_REG_PD_IDAC_LDO)
// h0020, bit: 15
/* test mode for IDAC_B
[0]: select CLK falling edge to DFF
[1]: reserved
[2]: select data input from register
[3]: select QB(not Q) from data latch
[4]: force output zero
[6:5]: data delay
[8:7]: clock delay (default = 01)
[15:9]: dummy*/
#define offset_of_dac_atop_reg_test_idac_b (0x40)
#define mask_of_dac_atop_reg_test_idac_b   (0xffff)
#define shift_of_dac_atop_reg_test_idac_b  (0)
#define DAC_ATOP_REG_TEST_IDAC_B           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_test_idac_b)
#define REG_DAC_ATOP_20_L                  (DAC_ATOP_REG_TEST_IDAC_B)
// h0021, bit: 15
/* test mode for IDAC_G
[0]: select CLK falling edge to DFF
[1]: reserved
[2]: select data input from register
[3]: select QB(not Q) from data latch
[4]: force output zero
[6:5]: data delay
[8:7]: clock delay (default = 01)
[15:9]: dummy*/
#define offset_of_dac_atop_reg_test_idac_g (0x42)
#define mask_of_dac_atop_reg_test_idac_g   (0xffff)
#define shift_of_dac_atop_reg_test_idac_g  (0)
#define DAC_ATOP_REG_TEST_IDAC_G           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_test_idac_g)
#define REG_DAC_ATOP_21_L                  (DAC_ATOP_REG_TEST_IDAC_G)
// h0022, bit: 15
/* test mode for IDAC_R
[0]: select CLK falling edge to DFF
[1]: reserved
[2]: select data input from register
[3]: select QB(not Q) from data latch
[4]: force output zero
[6:5]: data delay
[8:7]: clock delay (default = 01)
[15:9]: dummy*/
#define offset_of_dac_atop_reg_test_idac_r (0x44)
#define mask_of_dac_atop_reg_test_idac_r   (0xffff)
#define shift_of_dac_atop_reg_test_idac_r  (0)
#define DAC_ATOP_REG_TEST_IDAC_R           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_test_idac_r)
#define REG_DAC_ATOP_22_L                  (DAC_ATOP_REG_TEST_IDAC_R)
// bigger than 16 bit case allh0023
#define offset_of_dac_atop_reg_test_idac_ref (0x46)
#define mask_of_dac_atop_reg_test_idac_ref   (0xffffffff)
#define shift_of_dac_atop_reg_test_idac_ref  (0)
#define DAC_ATOP_REG_TEST_IDAC_REF           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_test_idac_ref)
// h0023, bit: 15
/* test mode for idac_ref*/
#define offset_of_dac_atop_reg_test_idac_ref_0 (0x46)
#define mask_of_dac_atop_reg_test_idac_ref_0   (0xffff)
#define shift_of_dac_atop_reg_test_idac_ref_0  (0)
#define DAC_ATOP_REG_TEST_IDAC_REF_0           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_test_idac_ref_0)
#define REG_DAC_ATOP_23_L                      (DAC_ATOP_REG_TEST_IDAC_REF_0)
// h0024, bit: 15
/* test mode for idac_ref*/
#define offset_of_dac_atop_reg_test_idac_ref_1 (0x48)
#define mask_of_dac_atop_reg_test_idac_ref_1   (0xffff)
#define shift_of_dac_atop_reg_test_idac_ref_1  (0)
#define DAC_ATOP_REG_TEST_IDAC_REF_1           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_test_idac_ref_1)
#define REG_DAC_ATOP_24_L                      (DAC_ATOP_REG_TEST_IDAC_REF_1)
// h0025, bit: 9
/* idac atop din B*/
#define offset_of_dac_atop_reg_idac_atop_din_b (0x4a)
#define mask_of_dac_atop_reg_idac_atop_din_b   (0x3ff)
#define shift_of_dac_atop_reg_idac_atop_din_b  (0)
#define DAC_ATOP_REG_IDAC_ATOP_DIN_B           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_idac_atop_din_b)
#define REG_DAC_ATOP_25_L                      (DAC_ATOP_REG_IDAC_ATOP_DIN_B)
// h0026, bit: 9
/* idac atop din G*/
#define offset_of_dac_atop_reg_idac_atop_din_g (0x4c)
#define mask_of_dac_atop_reg_idac_atop_din_g   (0x3ff)
#define shift_of_dac_atop_reg_idac_atop_din_g  (0)
#define DAC_ATOP_REG_IDAC_ATOP_DIN_G           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_idac_atop_din_g)
#define REG_DAC_ATOP_26_L                      (DAC_ATOP_REG_IDAC_ATOP_DIN_G)
// h0027, bit: 9
/* idac atop din R*/
#define offset_of_dac_atop_reg_idac_atop_din_r (0x4e)
#define mask_of_dac_atop_reg_idac_atop_din_r   (0x3ff)
#define shift_of_dac_atop_reg_idac_atop_din_r  (0)
#define DAC_ATOP_REG_IDAC_ATOP_DIN_R           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_idac_atop_din_r)
#define REG_DAC_ATOP_27_L                      (DAC_ATOP_REG_IDAC_ATOP_DIN_R)
// h0028, bit: 0
/* input signal to digital for PADA_IDAC_OUT_B in gpio mode*/
#define offset_of_dac_atop_reg_gpio_c_pad_out_b (0x50)
#define mask_of_dac_atop_reg_gpio_c_pad_out_b   (0x1)
#define shift_of_dac_atop_reg_gpio_c_pad_out_b  (0)
#define DAC_ATOP_REG_GPIO_C_PAD_OUT_B           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_c_pad_out_b)
#define REG_DAC_ATOP_28_L                       (DAC_ATOP_REG_GPIO_C_PAD_OUT_B)
// h0028, bit: 1
/* input signal to digital for PADA_IDAC_OUT_G in gpio mode*/
#define offset_of_dac_atop_reg_gpio_c_pad_out_g (0x50)
#define mask_of_dac_atop_reg_gpio_c_pad_out_g   (0x2)
#define shift_of_dac_atop_reg_gpio_c_pad_out_g  (1)
#define DAC_ATOP_REG_GPIO_C_PAD_OUT_G           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_c_pad_out_g)
// h0028, bit: 2
/* input signal to digital for PADA_IDAC_OUT_R in gpio mode*/
#define offset_of_dac_atop_reg_gpio_c_pad_out_r (0x50)
#define mask_of_dac_atop_reg_gpio_c_pad_out_r   (0x4)
#define shift_of_dac_atop_reg_gpio_c_pad_out_r  (2)
#define DAC_ATOP_REG_GPIO_C_PAD_OUT_R           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_c_pad_out_r)
// h0028, bit: 3
/* input signal to digital for PADA_IDAC_OUT_C in gpio mode*/
#define offset_of_dac_atop_reg_gpio_c_pad_out_c (0x50)
#define mask_of_dac_atop_reg_gpio_c_pad_out_c   (0x8)
#define shift_of_dac_atop_reg_gpio_c_pad_out_c  (3)
#define DAC_ATOP_REG_GPIO_C_PAD_OUT_C           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gpio_c_pad_out_c)
// h0029, bit: 0
/* manual set CVBS mode*/
#define offset_of_dac_atop_reg_gcr_mode_rgb (0x52)
#define mask_of_dac_atop_reg_gcr_mode_rgb   (0x1)
#define shift_of_dac_atop_reg_gcr_mode_rgb  (0)
#define DAC_ATOP_REG_GCR_MODE_RGB           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_mode_rgb)
#define REG_DAC_ATOP_29_L                   (DAC_ATOP_REG_GCR_MODE_RGB)
// h0029, bit: 1
/* manual set CVBS mode*/
#define offset_of_dac_atop_reg_gcr_mode_cvbs (0x52)
#define mask_of_dac_atop_reg_gcr_mode_cvbs   (0x2)
#define shift_of_dac_atop_reg_gcr_mode_cvbs  (1)
#define DAC_ATOP_REG_GCR_MODE_CVBS           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_mode_cvbs)
// h002a, bit: 2
/* mux for plug detector*/
#define offset_of_dac_atop_reg_gcr_dac_cmp_mux (0x54)
#define mask_of_dac_atop_reg_gcr_dac_cmp_mux   (0x7)
#define shift_of_dac_atop_reg_gcr_dac_cmp_mux  (0)
#define DAC_ATOP_REG_GCR_DAC_CMP_MUX           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_dac_cmp_mux)
#define REG_DAC_ATOP_2A_L                      (DAC_ATOP_REG_GCR_DAC_CMP_MUX)
// h002b, bit: 9
/* manual set output level for IDAC_C*/
#define offset_of_dac_atop_reg_gcr_idac_level_c (0x56)
#define mask_of_dac_atop_reg_gcr_idac_level_c   (0x3ff)
#define shift_of_dac_atop_reg_gcr_idac_level_c  (0)
#define DAC_ATOP_REG_GCR_IDAC_LEVEL_C           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_idac_level_c)
#define REG_DAC_ATOP_2B_L                       (DAC_ATOP_REG_GCR_IDAC_LEVEL_C)
// h002c, bit: 6
/* trim bits for IDAC_C*/
#define offset_of_dac_atop_reg_gcr_idac_trim_c (0x58)
#define mask_of_dac_atop_reg_gcr_idac_trim_c   (0x7f)
#define shift_of_dac_atop_reg_gcr_idac_trim_c  (0)
#define DAC_ATOP_REG_GCR_IDAC_TRIM_C           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_gcr_idac_trim_c)
#define REG_DAC_ATOP_2C_L                      (DAC_ATOP_REG_GCR_IDAC_TRIM_C)
// h002d, bit: 15
/* test mode for IDAC_C
[0]: select CLK falling edge to DFF
[1]: reserved
[2]: select data input from register
[3]: select QB(not Q) from data latch
[4]: force output zero
[6:5]: data delay
[8:7]: clock delay (default = 01)
[15:9]: dummy*/
#define offset_of_dac_atop_reg_test_idac_c (0x5a)
#define mask_of_dac_atop_reg_test_idac_c   (0xffff)
#define shift_of_dac_atop_reg_test_idac_c  (0)
#define DAC_ATOP_REG_TEST_IDAC_C           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_test_idac_c)
#define REG_DAC_ATOP_2D_L                  (DAC_ATOP_REG_TEST_IDAC_C)
// h002e, bit: 9
/* idac atop din C*/
#define offset_of_dac_atop_reg_idac_atop_din_c (0x5c)
#define mask_of_dac_atop_reg_idac_atop_din_c   (0x3ff)
#define shift_of_dac_atop_reg_idac_atop_din_c  (0)
#define DAC_ATOP_REG_IDAC_ATOP_DIN_C           (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_idac_atop_din_c)
#define REG_DAC_ATOP_2E_L                      (DAC_ATOP_REG_IDAC_ATOP_DIN_C)
#define REG_DAC_ATOP_2F_L                      (REG_DAC_ATOP_BASE + 0x5e)
// h0030, bit: 0
/* EMMC_DIG_CLK1X is bypassed to EMMC_PLL_CLK1X_SLEW1~4 when EMMC_CLK1X_SKEW_SEL = 1*/
#define offset_of_dac_atop_reg_sdiopll_clk1x_skew_sel (0x60)
#define mask_of_dac_atop_reg_sdiopll_clk1x_skew_sel (0x1)
#define shift_of_dac_atop_reg_sdiopll_clk1x_skew_sel (0)
#define DAC_ATOP_REG_SDIOPLL_CLK1X_SKEW_SEL (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_clk1x_skew_sel)
#define REG_DAC_ATOP_30_L (DAC_ATOP_REG_SDIOPLL_CLK1X_SKEW_SEL)
// h0031, bit: 3
/* EMMC_PLL_CLK1X_SKEW1 phase select*/
#define offset_of_dac_atop_reg_sdiopll_clkph_skew1 (0x62)
#define mask_of_dac_atop_reg_sdiopll_clkph_skew1 (0xf)
#define shift_of_dac_atop_reg_sdiopll_clkph_skew1 (0)
#define DAC_ATOP_REG_SDIOPLL_CLKPH_SKEW1 (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_clkph_skew1)
#define REG_DAC_ATOP_31_L (DAC_ATOP_REG_SDIOPLL_CLKPH_SKEW1)
// h0031, bit: 7
/* EMMC_PLL_CLK1X_SKEW2 phase select*/
#define offset_of_dac_atop_reg_sdiopll_clkph_skew2 (0x62)
#define mask_of_dac_atop_reg_sdiopll_clkph_skew2 (0xf0)
#define shift_of_dac_atop_reg_sdiopll_clkph_skew2 (4)
#define DAC_ATOP_REG_SDIOPLL_CLKPH_SKEW2 (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_clkph_skew2)
// h0031, bit: 11
/* EMMC_PLL_CLK1X_SKEW3 phase select*/
#define offset_of_dac_atop_reg_sdiopll_clkph_skew3 (0x62)
#define mask_of_dac_atop_reg_sdiopll_clkph_skew3 (0xf00)
#define shift_of_dac_atop_reg_sdiopll_clkph_skew3 (8)
#define DAC_ATOP_REG_SDIOPLL_CLKPH_SKEW3 (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_clkph_skew3)
// h0031, bit: 15
/* EMMC_PLL_CLK1X_SKEW4 phase select*/
#define offset_of_dac_atop_reg_sdiopll_clkph_skew4 (0x62)
#define mask_of_dac_atop_reg_sdiopll_clkph_skew4 (0xf000)
#define shift_of_dac_atop_reg_sdiopll_clkph_skew4 (12)
#define DAC_ATOP_REG_SDIOPLL_CLKPH_SKEW4 (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_clkph_skew4)
// h0032, bit: 2
/* PLL charge pump current setting register*/
#define offset_of_dac_atop_reg_sdiopll_ictrl (0x64)
#define mask_of_dac_atop_reg_sdiopll_ictrl (0x1f)
#define shift_of_dac_atop_reg_sdiopll_ictrl (0)
#define DAC_ATOP_REG_SDIOPLL_ICTRL (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_ictrl)
#define REG_DAC_ATOP_32_L (DAC_ATOP_REG_SDIOPLL_ICTRL)
// h0033, bit: 1
/* PLL input divider register: (prediv_first)
00: div by 1
01: div by 2
10: div by 4
11: div by 8*/
#define offset_of_dac_atop_reg_sdiopll_input_div_first (0x66)
#define mask_of_dac_atop_reg_sdiopll_input_div_first (0x3)
#define shift_of_dac_atop_reg_sdiopll_input_div_first (0)
#define DAC_ATOP_REG_SDIOPLL_INPUT_DIV_FIRST (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_input_div_first)
#define REG_DAC_ATOP_33_L (DAC_ATOP_REG_SDIOPLL_INPUT_DIV_FIRST)
// h0034, bit: 1
/* PLL loop divider register: (fbdiv_first)
00: div by 1
01: div by 2
10: div by 4
11: div by 8*/
#define offset_of_dac_atop_reg_sdiopll_loop_div_first (0x68)
#define mask_of_dac_atop_reg_sdiopll_loop_div_first (0x3)
#define shift_of_dac_atop_reg_sdiopll_loop_div_first (0)
#define DAC_ATOP_REG_SDIOPLL_LOOP_DIV_FIRST (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_loop_div_first)
#define REG_DAC_ATOP_34_L (DAC_ATOP_REG_SDIOPLL_LOOP_DIV_FIRST)
// h0035, bit: 7
/* PLL loop divider register: (fbdiv_second)
0~2: don’t use
3~15: div by n
16~255: not support*/
#define offset_of_dac_atop_reg_sdiopll_loop_div_second (0x6a)
#define mask_of_dac_atop_reg_sdiopll_loop_div_second (0xff)
#define shift_of_dac_atop_reg_sdiopll_loop_div_second (0)
#define DAC_ATOP_REG_SDIOPLL_LOOP_DIV_SECOND (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_loop_div_second)
#define REG_DAC_ATOP_35_L (DAC_ATOP_REG_SDIOPLL_LOOP_DIV_SECOND)
// h0036, bit: 0
/* PLL power down enable*/
#define offset_of_dac_atop_reg_sdiopll_pd (0x6c)
#define mask_of_dac_atop_reg_sdiopll_pd (0x1)
#define shift_of_dac_atop_reg_sdiopll_pd (0)
#define DAC_ATOP_REG_SDIOPLL_PD (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_pd)
#define REG_DAC_ATOP_36_L (DAC_ATOP_REG_SDIOPLL_PD)
// h0037, bit: 2
/* PLL post divider register:
00x: VCO div by 2
010: VCO div by 4
011: VCO div by 6 (EMMC_PLL_TEST[10] = 1'b1)
100: VCO div by 8
101: VCO div by 10 (EMMC_PLL_TEST[10] = 1'b1)
11x: VCO div by 16 (EMMC_PLL_TEST[10] = 1'b1)*/
#define offset_of_dac_atop_reg_sdiopll_pdiv (0x6e)
#define mask_of_dac_atop_reg_sdiopll_pdiv (0x7)
#define shift_of_dac_atop_reg_sdiopll_pdiv (0)
#define DAC_ATOP_REG_SDIOPLL_PDIV (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_pdiv)
#define REG_DAC_ATOP_37_L (DAC_ATOP_REG_SDIOPLL_PDIV)
// bigger than 16 bit case allh0038
#define offset_of_dac_atop_reg_sdiopll_test (0x70)
#define mask_of_dac_atop_reg_sdiopll_test (0xffffffff)
#define shift_of_dac_atop_reg_sdiopll_test (0)
#define DAC_ATOP_REG_SDIOPLL_TEST (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_test)
// h0038, bit: 15
/* PLL test register*/
#define offset_of_dac_atop_reg_sdiopll_test_0 (0x70)
#define mask_of_dac_atop_reg_sdiopll_test_0 (0xffff)
#define shift_of_dac_atop_reg_sdiopll_test_0 (0)
#define DAC_ATOP_REG_SDIOPLL_TEST_0 (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_test_0)
#define REG_DAC_ATOP_38_L (DAC_ATOP_REG_SDIOPLL_TEST_0)
// h0039, bit: 4
/* PLL test register*/
#define offset_of_dac_atop_reg_sdiopll_test_1 (0x72)
#define mask_of_dac_atop_reg_sdiopll_test_1 (0xffff)
#define shift_of_dac_atop_reg_sdiopll_test_1 (0)
#define DAC_ATOP_REG_SDIOPLL_TEST_1 (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_test_1)
#define REG_DAC_ATOP_39_L (DAC_ATOP_REG_SDIOPLL_TEST_1)
// h003a, bit: 0
/* PLL lock detect output*/
#define offset_of_dac_atop_reg_sdiopll_lock (0x74)
#define mask_of_dac_atop_reg_sdiopll_lock (0x1)
#define shift_of_dac_atop_reg_sdiopll_lock (0)
#define DAC_ATOP_REG_SDIOPLL_LOCK (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_lock)
#define REG_DAC_ATOP_3A_L (DAC_ATOP_REG_SDIOPLL_LOCK)
#define offset_of_dac_atop_reg_sdiopll_dll_sel (0x76)
#define mask_of_dac_atop_reg_sdiopll_dll_sel (0x1)
#define shift_of_dac_atop_reg_sdiopll_dll_sel (0)
#define DAC_ATOP_REG_SDIOPLL_DLL_SEL (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_dll_sel)
#define REG_DAC_ATOP_3B_L (DAC_ATOP_REG_SDIOPLL_DLL_SEL)
#define offset_of_dac_atop_reg_sdiopll_en_test_clock (0x76)
#define mask_of_dac_atop_reg_sdiopll_en_test_clock (0x2)
#define shift_of_dac_atop_reg_sdiopll_en_test_clock (1)
#define DAC_ATOP_REG_SDIOPLL_EN_TEST_CLOCK (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_en_test_clock)
#define offset_of_dac_atop_reg_sdiopll_en_vco (0x76)
#define mask_of_dac_atop_reg_sdiopll_en_vco (0x4)
#define shift_of_dac_atop_reg_sdiopll_en_vco (2)
#define DAC_ATOP_REG_SDIOPLL_EN_VCO (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_en_vco)
#define offset_of_dac_atop_reg_sdiopll_lo_freq_en (0x76)
#define mask_of_dac_atop_reg_sdiopll_lo_freq_en (0x8)
#define shift_of_dac_atop_reg_sdiopll_lo_freq_en (3)
#define DAC_ATOP_REG_SDIOPLL_LO_FREQ_EN (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_lo_freq_en)
#define offset_of_dac_atop_reg_sdiopll_input_div (0x76)
#define mask_of_dac_atop_reg_sdiopll_input_div (0x30)
#define shift_of_dac_atop_reg_sdiopll_input_div (4)
#define DAC_ATOP_REG_SDIOPLL_INPUT_DIV (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_input_div)
#define offset_of_dac_atop_reg_sdiopll_input_sel (0x76)
#define mask_of_dac_atop_reg_sdiopll_input_sel (0xc0)
#define shift_of_dac_atop_reg_sdiopll_input_sel (6)
#define DAC_ATOP_REG_SDIOPLL_INPUT_SEL (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_input_sel)
#define offset_of_dac_atop_reg_sdiopll_reset (0x78)
#define mask_of_dac_atop_reg_sdiopll_reset (0x1)
#define shift_of_dac_atop_reg_sdiopll_reset (0)
#define DAC_ATOP_REG_SDIOPLL_RESET (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_reset)
#define REG_DAC_ATOP_3C_L (DAC_ATOP_REG_SDIOPLL_RESET)
#define offset_of_dac_atop_reg_sdiopll_test_sel (0x7a)
#define mask_of_dac_atop_reg_sdiopll_test_sel (0x3)
#define shift_of_dac_atop_reg_sdiopll_test_sel (0)
#define DAC_ATOP_REG_SDIOPLL_TEST_SEL (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_test_sel)
#define REG_DAC_ATOP_3D_L (DAC_ATOP_REG_SDIOPLL_TEST_SEL)
#define offset_of_dac_atop_reg_sdiopll_ibias (0x7a)
#define mask_of_dac_atop_reg_sdiopll_ibias (0xc)
#define shift_of_dac_atop_reg_sdiopll_ibias (2)
#define DAC_ATOP_REG_SDIOPLL_IBIAS (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_ibias)
#define offset_of_dac_atop_reg_sdiopll_testclk_sel (0x7a)
#define mask_of_dac_atop_reg_sdiopll_testclk_sel (0x30)
#define shift_of_dac_atop_reg_sdiopll_testclk_sel (4)
#define DAC_ATOP_REG_SDIOPLL_TESTCLK_SEL (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_testclk_sel)
#define offset_of_dac_atop_reg_sdiopll_en_d2s (0x7a)
#define mask_of_dac_atop_reg_sdiopll_en_d2s (0xf00)
#define shift_of_dac_atop_reg_sdiopll_en_d2s (8)
#define DAC_ATOP_REG_SDIOPLL_EN_D2S (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_en_d2s)
#define offset_of_dac_atop_reg_sdiopll_loop_div (0x7c)
#define mask_of_dac_atop_reg_sdiopll_loop_div (0xff)
#define shift_of_dac_atop_reg_sdiopll_loop_div (0)
#define DAC_ATOP_REG_SDIOPLL_LOOP_DIV (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_loop_div)
#define REG_DAC_ATOP_3E_L (DAC_ATOP_REG_SDIOPLL_LOOP_DIV)
#define offset_of_dac_atop_reg_sdiopll_test_skew (0x7c)
#define mask_of_dac_atop_reg_sdiopll_test_skew (0xf00)
#define shift_of_dac_atop_reg_sdiopll_test_skew (8)
#define DAC_ATOP_REG_SDIOPLL_TEST_SKEW (REG_DAC_ATOP_BASE + offset_of_dac_atop_reg_sdiopll_test_skew)
#define REG_DAC_ATOP_3F_L                   (REG_DAC_ATOP_BASE + 0x7e)
#define REG_DAC_ATOP_40_L                   (REG_DAC_ATOP_BASE + 0x80)
#define REG_DAC_ATOP_41_L                   (REG_DAC_ATOP_BASE + 0x82)
#define REG_DAC_ATOP_42_L                   (REG_DAC_ATOP_BASE + 0x84)
#define REG_DAC_ATOP_43_L                   (REG_DAC_ATOP_BASE + 0x86)
#define REG_DAC_ATOP_44_L                   (REG_DAC_ATOP_BASE + 0x88)
#define REG_DAC_ATOP_45_L                   (REG_DAC_ATOP_BASE + 0x8a)
#define REG_DAC_ATOP_46_L                   (REG_DAC_ATOP_BASE + 0x8c)
#define REG_DAC_ATOP_47_L                   (REG_DAC_ATOP_BASE + 0x8e)
#define REG_DAC_ATOP_48_L                   (REG_DAC_ATOP_BASE + 0x90)
#define REG_DAC_ATOP_49_L                   (REG_DAC_ATOP_BASE + 0x92)
#define REG_DAC_ATOP_4A_L                   (REG_DAC_ATOP_BASE + 0x94)
#define REG_DAC_ATOP_4B_L                   (REG_DAC_ATOP_BASE + 0x96)
#define REG_DAC_ATOP_4C_L                   (REG_DAC_ATOP_BASE + 0x98)
#define REG_DAC_ATOP_4D_L                   (REG_DAC_ATOP_BASE + 0x9a)
#define REG_DAC_ATOP_4E_L                   (REG_DAC_ATOP_BASE + 0x9c)
#define REG_DAC_ATOP_4F_L                   (REG_DAC_ATOP_BASE + 0x9e)
#define REG_DAC_ATOP_50_L                   (REG_DAC_ATOP_BASE + 0xa0)
#define REG_DAC_ATOP_51_L                   (REG_DAC_ATOP_BASE + 0xa2)
#define REG_DAC_ATOP_52_L                   (REG_DAC_ATOP_BASE + 0xa4)
#define REG_DAC_ATOP_53_L                   (REG_DAC_ATOP_BASE + 0xa6)
#define REG_DAC_ATOP_54_L                   (REG_DAC_ATOP_BASE + 0xa8)
#define REG_DAC_ATOP_55_L                   (REG_DAC_ATOP_BASE + 0xaa)
#define REG_DAC_ATOP_56_L                   (REG_DAC_ATOP_BASE + 0xac)
#define REG_DAC_ATOP_57_L                   (REG_DAC_ATOP_BASE + 0xae)
#define REG_DAC_ATOP_58_L                   (REG_DAC_ATOP_BASE + 0xb0)
#define REG_DAC_ATOP_59_L                   (REG_DAC_ATOP_BASE + 0xb2)
#define REG_DAC_ATOP_5A_L                   (REG_DAC_ATOP_BASE + 0xb4)
#define REG_DAC_ATOP_5B_L                   (REG_DAC_ATOP_BASE + 0xb6)
#define REG_DAC_ATOP_5C_L                   (REG_DAC_ATOP_BASE + 0xb8)
#define REG_DAC_ATOP_5D_L                   (REG_DAC_ATOP_BASE + 0xba)
#define REG_DAC_ATOP_5E_L                   (REG_DAC_ATOP_BASE + 0xbc)
#define REG_DAC_ATOP_5F_L                   (REG_DAC_ATOP_BASE + 0xbe)
#define REG_DAC_ATOP_60_L                   (REG_DAC_ATOP_BASE + 0xc0)
#define REG_DAC_ATOP_61_L                   (REG_DAC_ATOP_BASE + 0xc2)
#define REG_DAC_ATOP_62_L                   (REG_DAC_ATOP_BASE + 0xc4)
#define REG_DAC_ATOP_63_L                   (REG_DAC_ATOP_BASE + 0xc6)
#define REG_DAC_ATOP_64_L                   (REG_DAC_ATOP_BASE + 0xc8)
#define REG_DAC_ATOP_65_L                   (REG_DAC_ATOP_BASE + 0xca)
#define REG_DAC_ATOP_66_L                   (REG_DAC_ATOP_BASE + 0xcc)
#define REG_DAC_ATOP_67_L                   (REG_DAC_ATOP_BASE + 0xce)
#define REG_DAC_ATOP_68_L                   (REG_DAC_ATOP_BASE + 0xd0)
#define REG_DAC_ATOP_69_L                   (REG_DAC_ATOP_BASE + 0xd2)
#define REG_DAC_ATOP_6A_L                   (REG_DAC_ATOP_BASE + 0xd4)
#define REG_DAC_ATOP_6B_L                   (REG_DAC_ATOP_BASE + 0xd6)
#define REG_DAC_ATOP_6C_L                   (REG_DAC_ATOP_BASE + 0xd8)
#define REG_DAC_ATOP_6D_L                   (REG_DAC_ATOP_BASE + 0xda)
#define REG_DAC_ATOP_6E_L                   (REG_DAC_ATOP_BASE + 0xdc)
#define REG_DAC_ATOP_6F_L                   (REG_DAC_ATOP_BASE + 0xde)
#define REG_DAC_ATOP_70_L                   (REG_DAC_ATOP_BASE + 0xe0)
#define REG_DAC_ATOP_71_L                   (REG_DAC_ATOP_BASE + 0xe2)
#define REG_DAC_ATOP_72_L                   (REG_DAC_ATOP_BASE + 0xe4)
#define REG_DAC_ATOP_73_L                   (REG_DAC_ATOP_BASE + 0xe6)
#define REG_DAC_ATOP_74_L                   (REG_DAC_ATOP_BASE + 0xe8)
#define REG_DAC_ATOP_75_L                   (REG_DAC_ATOP_BASE + 0xea)
#define REG_DAC_ATOP_76_L                   (REG_DAC_ATOP_BASE + 0xec)
#define REG_DAC_ATOP_77_L                   (REG_DAC_ATOP_BASE + 0xee)
#define REG_DAC_ATOP_78_L                   (REG_DAC_ATOP_BASE + 0xf0)
#define REG_DAC_ATOP_79_L                   (REG_DAC_ATOP_BASE + 0xf2)
#define REG_DAC_ATOP_7A_L                   (REG_DAC_ATOP_BASE + 0xf4)
#define REG_DAC_ATOP_7B_L                   (REG_DAC_ATOP_BASE + 0xf6)
#define REG_DAC_ATOP_7C_L                   (REG_DAC_ATOP_BASE + 0xf8)
#define REG_DAC_ATOP_7D_L                   (REG_DAC_ATOP_BASE + 0xfa)
#define REG_DAC_ATOP_7E_L                   (REG_DAC_ATOP_BASE + 0xfc)
#define REG_DAC_ATOP_7F_L                   (REG_DAC_ATOP_BASE + 0xfe)
#define REG_ACE2_00_L                       (REG_ACE2_BASE + 0x0)
#define REG_ACE2_01_L                       (REG_ACE2_BASE + 0x2)
#define REG_ACE2_02_L                       (REG_ACE2_BASE + 0x4)
#define REG_ACE2_03_L                       (REG_ACE2_BASE + 0x6)
#define REG_ACE2_04_L                       (REG_ACE2_BASE + 0x8)
#define REG_ACE2_05_L                       (REG_ACE2_BASE + 0xa)
#define REG_ACE2_06_L                       (REG_ACE2_BASE + 0xc)
#define REG_ACE2_07_L                       (REG_ACE2_BASE + 0xe)
#define REG_ACE2_08_L                       (REG_ACE2_BASE + 0x10)
#define REG_ACE2_09_L                       (REG_ACE2_BASE + 0x12)
#define REG_ACE2_0A_L                       (REG_ACE2_BASE + 0x14)
#define REG_ACE2_0B_L                       (REG_ACE2_BASE + 0x16)
#define REG_ACE2_0C_L                       (REG_ACE2_BASE + 0x18)
#define REG_ACE2_0D_L                       (REG_ACE2_BASE + 0x1a)
#define REG_ACE2_0E_L                       (REG_ACE2_BASE + 0x1c)
#define REG_ACE2_0F_L                       (REG_ACE2_BASE + 0x1e)
// h0010, bit: 3
/* IBC coring threshold*/
#define offset_of_ace2_reg_ibc_coring_thrd (0x20)
#define mask_of_ace2_reg_ibc_coring_thrd   (0xf)
#define shift_of_ace2_reg_ibc_coring_thrd  (0)
#define ACE2_REG_IBC_CORING_THRD           (REG_ACE2_BASE + offset_of_ace2_reg_ibc_coring_thrd)
#define REG_ACE2_10_L                      (ACE2_REG_IBC_CORING_THRD)
// h0010, bit: 4
/* IBC dither bit enable*/
#define offset_of_ace2_reg_ibc_dither_en (0x20)
#define mask_of_ace2_reg_ibc_dither_en   (0x10)
#define shift_of_ace2_reg_ibc_dither_en  (4)
#define ACE2_REG_IBC_DITHER_EN           (REG_ACE2_BASE + offset_of_ace2_reg_ibc_dither_en)
// h0010, bit: 5
/* IBC Y adjust LPF enable*/
#define offset_of_ace2_reg_ibc_y_adjust_lpf_en (0x20)
#define mask_of_ace2_reg_ibc_y_adjust_lpf_en   (0x20)
#define shift_of_ace2_reg_ibc_y_adjust_lpf_en  (5)
#define ACE2_REG_IBC_Y_ADJUST_LPF_EN           (REG_ACE2_BASE + offset_of_ace2_reg_ibc_y_adjust_lpf_en)
// h0010, bit: 7
/* Main window IBC enable*/
#define offset_of_ace2_reg_main_ibc_en (0x20)
#define mask_of_ace2_reg_main_ibc_en   (0x80)
#define shift_of_ace2_reg_main_ibc_en  (7)
#define ACE2_REG_MAIN_IBC_EN           (REG_ACE2_BASE + offset_of_ace2_reg_main_ibc_en)
// h0011, bit: 5
/* Main window IBC Y adjustment of color0*/
#define offset_of_ace2_reg_main_ycolor0_adj (0x22)
#define mask_of_ace2_reg_main_ycolor0_adj   (0x3f)
#define shift_of_ace2_reg_main_ycolor0_adj  (0)
#define ACE2_REG_MAIN_YCOLOR0_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor0_adj)
#define REG_ACE2_11_L                       (ACE2_REG_MAIN_YCOLOR0_ADJ)
// h0011, bit: 13
/* Main window IBC Y adjustment of color1*/
#define offset_of_ace2_reg_main_ycolor1_adj (0x22)
#define mask_of_ace2_reg_main_ycolor1_adj   (0x3f00)
#define shift_of_ace2_reg_main_ycolor1_adj  (8)
#define ACE2_REG_MAIN_YCOLOR1_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor1_adj)
// h0012, bit: 5
/* Main window IBC Y adjustment of color2*/
#define offset_of_ace2_reg_main_ycolor2_adj (0x24)
#define mask_of_ace2_reg_main_ycolor2_adj   (0x3f)
#define shift_of_ace2_reg_main_ycolor2_adj  (0)
#define ACE2_REG_MAIN_YCOLOR2_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor2_adj)
#define REG_ACE2_12_L                       (ACE2_REG_MAIN_YCOLOR2_ADJ)
// h0012, bit: 13
/* Main window IBC Y adjustment of color3*/
#define offset_of_ace2_reg_main_ycolor3_adj (0x24)
#define mask_of_ace2_reg_main_ycolor3_adj   (0x3f00)
#define shift_of_ace2_reg_main_ycolor3_adj  (8)
#define ACE2_REG_MAIN_YCOLOR3_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor3_adj)
// h0013, bit: 5
/* Main window IBC Y adjustment of color4*/
#define offset_of_ace2_reg_main_ycolor4_adj (0x26)
#define mask_of_ace2_reg_main_ycolor4_adj   (0x3f)
#define shift_of_ace2_reg_main_ycolor4_adj  (0)
#define ACE2_REG_MAIN_YCOLOR4_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor4_adj)
#define REG_ACE2_13_L                       (ACE2_REG_MAIN_YCOLOR4_ADJ)
// h0013, bit: 13
/* Main window IBC Y adjustment of color5*/
#define offset_of_ace2_reg_main_ycolor5_adj (0x26)
#define mask_of_ace2_reg_main_ycolor5_adj   (0x3f00)
#define shift_of_ace2_reg_main_ycolor5_adj  (8)
#define ACE2_REG_MAIN_YCOLOR5_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor5_adj)
// h0014, bit: 5
/* Main window IBC Y adjustment of color6*/
#define offset_of_ace2_reg_main_ycolor6_adj (0x28)
#define mask_of_ace2_reg_main_ycolor6_adj   (0x3f)
#define shift_of_ace2_reg_main_ycolor6_adj  (0)
#define ACE2_REG_MAIN_YCOLOR6_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor6_adj)
#define REG_ACE2_14_L                       (ACE2_REG_MAIN_YCOLOR6_ADJ)
// h0014, bit: 13
/* Main window IBC Y adjustment of color7*/
#define offset_of_ace2_reg_main_ycolor7_adj (0x28)
#define mask_of_ace2_reg_main_ycolor7_adj   (0x3f00)
#define shift_of_ace2_reg_main_ycolor7_adj  (8)
#define ACE2_REG_MAIN_YCOLOR7_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor7_adj)
// h0015, bit: 5
/* Main window IBC Y adjustment of color8*/
#define offset_of_ace2_reg_main_ycolor8_adj (0x2a)
#define mask_of_ace2_reg_main_ycolor8_adj   (0x3f)
#define shift_of_ace2_reg_main_ycolor8_adj  (0)
#define ACE2_REG_MAIN_YCOLOR8_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor8_adj)
#define REG_ACE2_15_L                       (ACE2_REG_MAIN_YCOLOR8_ADJ)
// h0015, bit: 13
/* Main window IBC Y adjustment of color9*/
#define offset_of_ace2_reg_main_ycolor9_adj (0x2a)
#define mask_of_ace2_reg_main_ycolor9_adj   (0x3f00)
#define shift_of_ace2_reg_main_ycolor9_adj  (8)
#define ACE2_REG_MAIN_YCOLOR9_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor9_adj)
// h0016, bit: 5
/* Main window IBC Y adjustment of color10*/
#define offset_of_ace2_reg_main_ycolor10_adj (0x2c)
#define mask_of_ace2_reg_main_ycolor10_adj   (0x3f)
#define shift_of_ace2_reg_main_ycolor10_adj  (0)
#define ACE2_REG_MAIN_YCOLOR10_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor10_adj)
#define REG_ACE2_16_L                        (ACE2_REG_MAIN_YCOLOR10_ADJ)
// h0016, bit: 13
/* Main window IBC Y adjustment of color11*/
#define offset_of_ace2_reg_main_ycolor11_adj (0x2c)
#define mask_of_ace2_reg_main_ycolor11_adj   (0x3f00)
#define shift_of_ace2_reg_main_ycolor11_adj  (8)
#define ACE2_REG_MAIN_YCOLOR11_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor11_adj)
// h0017, bit: 5
/* Main window IBC Y adjustment of color12*/
#define offset_of_ace2_reg_main_ycolor12_adj (0x2e)
#define mask_of_ace2_reg_main_ycolor12_adj   (0x3f)
#define shift_of_ace2_reg_main_ycolor12_adj  (0)
#define ACE2_REG_MAIN_YCOLOR12_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor12_adj)
#define REG_ACE2_17_L                        (ACE2_REG_MAIN_YCOLOR12_ADJ)
// h0017, bit: 13
/* Main window IBC Y adjustment of color13*/
#define offset_of_ace2_reg_main_ycolor13_adj (0x2e)
#define mask_of_ace2_reg_main_ycolor13_adj   (0x3f00)
#define shift_of_ace2_reg_main_ycolor13_adj  (8)
#define ACE2_REG_MAIN_YCOLOR13_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor13_adj)
// h0018, bit: 5
/* Main window IBC Y adjustment of color14*/
#define offset_of_ace2_reg_main_ycolor14_adj (0x30)
#define mask_of_ace2_reg_main_ycolor14_adj   (0x3f)
#define shift_of_ace2_reg_main_ycolor14_adj  (0)
#define ACE2_REG_MAIN_YCOLOR14_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor14_adj)
#define REG_ACE2_18_L                        (ACE2_REG_MAIN_YCOLOR14_ADJ)
// h0018, bit: 13
/* Main window IBC Y adjustment of color15*/
#define offset_of_ace2_reg_main_ycolor15_adj (0x30)
#define mask_of_ace2_reg_main_ycolor15_adj   (0x3f00)
#define shift_of_ace2_reg_main_ycolor15_adj  (8)
#define ACE2_REG_MAIN_YCOLOR15_ADJ           (REG_ACE2_BASE + offset_of_ace2_reg_main_ycolor15_adj)
#define REG_ACE2_19_L                        (REG_ACE2_BASE + 0x32)
#define REG_ACE2_1A_L                        (REG_ACE2_BASE + 0x34)
#define REG_ACE2_1B_L                        (REG_ACE2_BASE + 0x36)
#define REG_ACE2_1C_L                        (REG_ACE2_BASE + 0x38)
#define REG_ACE2_1D_L                        (REG_ACE2_BASE + 0x3a)
#define REG_ACE2_1E_L                        (REG_ACE2_BASE + 0x3c)
#define REG_ACE2_1F_L                        (REG_ACE2_BASE + 0x3e)
#define REG_ACE2_20_L                        (REG_ACE2_BASE + 0x40)
// h0021, bit: 11
/* IBC c wieght min limlit*/
#define offset_of_ace2_reg_weight_c_min_limit (0x42)
#define mask_of_ace2_reg_weight_c_min_limit   (0xf00)
#define shift_of_ace2_reg_weight_c_min_limit  (8)
#define ACE2_REG_WEIGHT_C_MIN_LIMIT           (REG_ACE2_BASE + offset_of_ace2_reg_weight_c_min_limit)
#define REG_ACE2_21_L                         (ACE2_REG_WEIGHT_C_MIN_LIMIT)
// h0021, bit: 15
/* IBC y wieght min limlit*/
#define offset_of_ace2_reg_weight_y_min_limit (0x42)
#define mask_of_ace2_reg_weight_y_min_limit   (0xf000)
#define shift_of_ace2_reg_weight_y_min_limit  (12)
#define ACE2_REG_WEIGHT_Y_MIN_LIMIT           (REG_ACE2_BASE + offset_of_ace2_reg_weight_y_min_limit)
#define REG_ACE2_22_L                         (REG_ACE2_BASE + 0x44)
#define REG_ACE2_23_L                         (REG_ACE2_BASE + 0x46)
// h0024, bit: 5
/* IHC dither bit enable*/
#define offset_of_ace2_reg_ihc_dither_en (0x48)
#define mask_of_ace2_reg_ihc_dither_en   (0x20)
#define shift_of_ace2_reg_ihc_dither_en  (5)
#define ACE2_REG_IHC_DITHER_EN           (REG_ACE2_BASE + offset_of_ace2_reg_ihc_dither_en)
#define REG_ACE2_24_L                    (ACE2_REG_IHC_DITHER_EN)
// h0024, bit: 7
/* Main window IHC enable*/
#define offset_of_ace2_reg_main_ihc_en (0x48)
#define mask_of_ace2_reg_main_ihc_en   (0x80)
#define shift_of_ace2_reg_main_ihc_en  (7)
#define ACE2_REG_MAIN_IHC_EN           (REG_ACE2_BASE + offset_of_ace2_reg_main_ihc_en)
// h0024, bit: 15
/* reserved*/
#define offset_of_ace2_reg_ihc_reserved_2 (0x48)
#define mask_of_ace2_reg_ihc_reserved_2   (0xfe00)
#define shift_of_ace2_reg_ihc_reserved_2  (9)
#define ACE2_REG_IHC_RESERVED_2           (REG_ACE2_BASE + offset_of_ace2_reg_ihc_reserved_2)
// h0025, bit: 6
/* Main window IHC hue adjustment of color0*/
#define offset_of_ace2_reg_main_hue_user_color0 (0x4a)
#define mask_of_ace2_reg_main_hue_user_color0   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color0  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color0)
#define REG_ACE2_25_L                           (ACE2_REG_MAIN_HUE_USER_COLOR0)
// h0025, bit: 14
/* Main window IHC hue adjustment of color1 */
#define offset_of_ace2_reg_main_hue_user_color1 (0x4a)
#define mask_of_ace2_reg_main_hue_user_color1   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color1  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color1)
// h0026, bit: 6
/* Main window IHC hue adjustment of color2 */
#define offset_of_ace2_reg_main_hue_user_color2 (0x4c)
#define mask_of_ace2_reg_main_hue_user_color2   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color2  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color2)
#define REG_ACE2_26_L                           (ACE2_REG_MAIN_HUE_USER_COLOR2)
// h0026, bit: 14
/* Main window IHC hue adjustment of color3 */
#define offset_of_ace2_reg_main_hue_user_color3 (0x4c)
#define mask_of_ace2_reg_main_hue_user_color3   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color3  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR3           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color3)
// h0027, bit: 6
/* Main window IHC hue adjustment of color4 */
#define offset_of_ace2_reg_main_hue_user_color4 (0x4e)
#define mask_of_ace2_reg_main_hue_user_color4   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color4  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR4           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color4)
#define REG_ACE2_27_L                           (ACE2_REG_MAIN_HUE_USER_COLOR4)
// h0027, bit: 14
/* Main window IHC hue adjustment of color5 */
#define offset_of_ace2_reg_main_hue_user_color5 (0x4e)
#define mask_of_ace2_reg_main_hue_user_color5   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color5  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR5           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color5)
// h0028, bit: 6
/* Main window IHC hue adjustment of color6 */
#define offset_of_ace2_reg_main_hue_user_color6 (0x50)
#define mask_of_ace2_reg_main_hue_user_color6   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color6  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR6           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color6)
#define REG_ACE2_28_L                           (ACE2_REG_MAIN_HUE_USER_COLOR6)
// h0028, bit: 14
/* Main window IHC hue adjustment of color7*/
#define offset_of_ace2_reg_main_hue_user_color7 (0x50)
#define mask_of_ace2_reg_main_hue_user_color7   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color7  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR7           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color7)
// h0029, bit: 6
/* Main window IHC hue adjustment of color8*/
#define offset_of_ace2_reg_main_hue_user_color8 (0x52)
#define mask_of_ace2_reg_main_hue_user_color8   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color8  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR8           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color8)
#define REG_ACE2_29_L                           (ACE2_REG_MAIN_HUE_USER_COLOR8)
// h0029, bit: 14
/* Main window IHC hue adjustment of color9*/
#define offset_of_ace2_reg_main_hue_user_color9 (0x52)
#define mask_of_ace2_reg_main_hue_user_color9   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color9  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR9           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color9)
// h002a, bit: 6
/* Main window IHC hue adjustment of color10 */
#define offset_of_ace2_reg_main_hue_user_color10 (0x54)
#define mask_of_ace2_reg_main_hue_user_color10   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color10  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR10           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color10)
#define REG_ACE2_2A_L                            (ACE2_REG_MAIN_HUE_USER_COLOR10)
// h002a, bit: 14
/* Main window IHC hue adjustment of color11 */
#define offset_of_ace2_reg_main_hue_user_color11 (0x54)
#define mask_of_ace2_reg_main_hue_user_color11   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color11  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR11           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color11)
// h002b, bit: 6
/* Main window IHC hue adjustment of color12 */
#define offset_of_ace2_reg_main_hue_user_color12 (0x56)
#define mask_of_ace2_reg_main_hue_user_color12   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color12  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR12           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color12)
#define REG_ACE2_2B_L                            (ACE2_REG_MAIN_HUE_USER_COLOR12)
// h002b, bit: 14
/* Main window IHC hue adjustment of color13 */
#define offset_of_ace2_reg_main_hue_user_color13 (0x56)
#define mask_of_ace2_reg_main_hue_user_color13   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color13  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR13           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color13)
// h002c, bit: 6
/* Main window IHC hue adjustment of color14 */
#define offset_of_ace2_reg_main_hue_user_color14 (0x58)
#define mask_of_ace2_reg_main_hue_user_color14   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color14  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR14           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color14)
#define REG_ACE2_2C_L                            (ACE2_REG_MAIN_HUE_USER_COLOR14)
// h002c, bit: 14
/* Main window IHC hue adjustment of color15 */
#define offset_of_ace2_reg_main_hue_user_color15 (0x58)
#define mask_of_ace2_reg_main_hue_user_color15   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color15  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR15           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color15)
#define REG_ACE2_2D_L                            (REG_ACE2_BASE + 0x5a)
#define REG_ACE2_2E_L                            (REG_ACE2_BASE + 0x5c)
#define REG_ACE2_2F_L                            (REG_ACE2_BASE + 0x5e)
#define REG_ACE2_30_L                            (REG_ACE2_BASE + 0x60)
#define REG_ACE2_31_L                            (REG_ACE2_BASE + 0x62)
#define REG_ACE2_32_L                            (REG_ACE2_BASE + 0x64)
#define REG_ACE2_33_L                            (REG_ACE2_BASE + 0x66)
#define REG_ACE2_34_L                            (REG_ACE2_BASE + 0x68)
#define REG_ACE2_35_L                            (REG_ACE2_BASE + 0x6a)
// h0036, bit: 7
/* Main window IHC , ICC  adaptive Y in section 0*/
#define offset_of_ace2_reg_main_ihc_icc_y_0 (0x6c)
#define mask_of_ace2_reg_main_ihc_icc_y_0   (0xff)
#define shift_of_ace2_reg_main_ihc_icc_y_0  (0)
#define ACE2_REG_MAIN_IHC_ICC_Y_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_ihc_icc_y_0)
#define REG_ACE2_36_L                       (ACE2_REG_MAIN_IHC_ICC_Y_0)
// h0036, bit: 15
/* Main window IHC , ICC  adaptive Y in section 1*/
#define offset_of_ace2_reg_main_ihc_icc_y_1 (0x6c)
#define mask_of_ace2_reg_main_ihc_icc_y_1   (0xff00)
#define shift_of_ace2_reg_main_ihc_icc_y_1  (8)
#define ACE2_REG_MAIN_IHC_ICC_Y_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_ihc_icc_y_1)
// h0037, bit: 7
/* Main window IHC , ICC  adaptive Y in section 2*/
#define offset_of_ace2_reg_main_ihc_icc_y_2 (0x6e)
#define mask_of_ace2_reg_main_ihc_icc_y_2   (0xff)
#define shift_of_ace2_reg_main_ihc_icc_y_2  (0)
#define ACE2_REG_MAIN_IHC_ICC_Y_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_ihc_icc_y_2)
#define REG_ACE2_37_L                       (ACE2_REG_MAIN_IHC_ICC_Y_2)
// h0037, bit: 15
/* Main window IHC , ICC  adaptive Y in section 3*/
#define offset_of_ace2_reg_main_ihc_icc_y_3 (0x6e)
#define mask_of_ace2_reg_main_ihc_icc_y_3   (0xff00)
#define shift_of_ace2_reg_main_ihc_icc_y_3  (8)
#define ACE2_REG_MAIN_IHC_ICC_Y_3           (REG_ACE2_BASE + offset_of_ace2_reg_main_ihc_icc_y_3)
// h0038, bit: 6
/* Main window IHC hue adjustment of color0 in section 0 */
#define offset_of_ace2_reg_main_hue_user_color0_0 (0x70)
#define mask_of_ace2_reg_main_hue_user_color0_0   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color0_0  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR0_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color0_0)
#define REG_ACE2_38_L                             (ACE2_REG_MAIN_HUE_USER_COLOR0_0)
// h0038, bit: 14
/* Main window IHC hue adjustment of color1 in section 0 */
#define offset_of_ace2_reg_main_hue_user_color1_0 (0x70)
#define mask_of_ace2_reg_main_hue_user_color1_0   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color1_0  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR1_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color1_0)
// h0039, bit: 6
/* Main window IHC hue adjustment of color2 in section 0 */
#define offset_of_ace2_reg_main_hue_user_color2_0 (0x72)
#define mask_of_ace2_reg_main_hue_user_color2_0   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color2_0  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR2_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color2_0)
#define REG_ACE2_39_L                             (ACE2_REG_MAIN_HUE_USER_COLOR2_0)
// h0039, bit: 14
/* Main window IHC hue adjustment of color3 in section 0 */
#define offset_of_ace2_reg_main_hue_user_color3_0 (0x72)
#define mask_of_ace2_reg_main_hue_user_color3_0   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color3_0  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR3_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color3_0)
// h003a, bit: 6
/* Main window IHC hue adjustment of color4 in section 0 */
#define offset_of_ace2_reg_main_hue_user_color4_0 (0x74)
#define mask_of_ace2_reg_main_hue_user_color4_0   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color4_0  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR4_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color4_0)
#define REG_ACE2_3A_L                             (ACE2_REG_MAIN_HUE_USER_COLOR4_0)
// h003a, bit: 14
/* Main window IHC hue adjustment of color5 in section 0 */
#define offset_of_ace2_reg_main_hue_user_color5_0 (0x74)
#define mask_of_ace2_reg_main_hue_user_color5_0   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color5_0  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR5_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color5_0)
// h003b, bit: 6
/* Main window IHC hue adjustment of color6 in section 0 */
#define offset_of_ace2_reg_main_hue_user_color6_0 (0x76)
#define mask_of_ace2_reg_main_hue_user_color6_0   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color6_0  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR6_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color6_0)
#define REG_ACE2_3B_L                             (ACE2_REG_MAIN_HUE_USER_COLOR6_0)
// h003b, bit: 14
/* Main window IHC hue adjustment of color7 in section 0*/
#define offset_of_ace2_reg_main_hue_user_color7_0 (0x76)
#define mask_of_ace2_reg_main_hue_user_color7_0   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color7_0  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR7_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color7_0)
// h003c, bit: 6
/* Main window IHC hue adjustment of color8 in section 0 */
#define offset_of_ace2_reg_main_hue_user_color8_0 (0x78)
#define mask_of_ace2_reg_main_hue_user_color8_0   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color8_0  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR8_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color8_0)
#define REG_ACE2_3C_L                             (ACE2_REG_MAIN_HUE_USER_COLOR8_0)
// h003c, bit: 14
/* Main window IHC hue adjustment of color9 in section 0*/
#define offset_of_ace2_reg_main_hue_user_color9_0 (0x78)
#define mask_of_ace2_reg_main_hue_user_color9_0   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color9_0  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR9_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color9_0)
// h003d, bit: 6
/* Main window IHC hue adjustment of color10 in section 0*/
#define offset_of_ace2_reg_main_hue_user_color10_0 (0x7a)
#define mask_of_ace2_reg_main_hue_user_color10_0   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color10_0  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR10_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color10_0)
#define REG_ACE2_3D_L                              (ACE2_REG_MAIN_HUE_USER_COLOR10_0)
// h003d, bit: 14
/* Main window IHC hue adjustment of color11 in section 0*/
#define offset_of_ace2_reg_main_hue_user_color11_0 (0x7a)
#define mask_of_ace2_reg_main_hue_user_color11_0   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color11_0  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR11_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color11_0)
// h003e, bit: 6
/* Main window IHC hue adjustment of color12 in section 0 */
#define offset_of_ace2_reg_main_hue_user_color12_0 (0x7c)
#define mask_of_ace2_reg_main_hue_user_color12_0   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color12_0  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR12_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color12_0)
#define REG_ACE2_3E_L                              (ACE2_REG_MAIN_HUE_USER_COLOR12_0)
// h003e, bit: 14
/* Main window IHC hue adjustment of color13 in section 0 */
#define offset_of_ace2_reg_main_hue_user_color13_0 (0x7c)
#define mask_of_ace2_reg_main_hue_user_color13_0   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color13_0  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR13_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color13_0)
// h003f, bit: 6
/* Main window IHC hue adjustment of color14 in section 0 */
#define offset_of_ace2_reg_main_hue_user_color14_0 (0x7e)
#define mask_of_ace2_reg_main_hue_user_color14_0   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color14_0  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR14_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color14_0)
#define REG_ACE2_3F_L                              (ACE2_REG_MAIN_HUE_USER_COLOR14_0)
// h003f, bit: 14
/* Main window IHC hue adjustment of color15 in section 0  */
#define offset_of_ace2_reg_main_hue_user_color15_0 (0x7e)
#define mask_of_ace2_reg_main_hue_user_color15_0   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color15_0  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR15_0           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color15_0)
// h0040, bit: 6
/* Main window IHC hue adjustment of color0 in section 1 */
#define offset_of_ace2_reg_main_hue_user_color0_1 (0x80)
#define mask_of_ace2_reg_main_hue_user_color0_1   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color0_1  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR0_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color0_1)
#define REG_ACE2_40_L                             (ACE2_REG_MAIN_HUE_USER_COLOR0_1)
// h0040, bit: 14
/* Main window IHC hue adjustment of color1 in section 1 */
#define offset_of_ace2_reg_main_hue_user_color1_1 (0x80)
#define mask_of_ace2_reg_main_hue_user_color1_1   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color1_1  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR1_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color1_1)
// h0041, bit: 6
/* Main window IHC hue adjustment of color2 in section 1 */
#define offset_of_ace2_reg_main_hue_user_color2_1 (0x82)
#define mask_of_ace2_reg_main_hue_user_color2_1   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color2_1  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR2_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color2_1)
#define REG_ACE2_41_L                             (ACE2_REG_MAIN_HUE_USER_COLOR2_1)
// h0041, bit: 14
/* Main window IHC hue adjustment of color3 in section 1 */
#define offset_of_ace2_reg_main_hue_user_color3_1 (0x82)
#define mask_of_ace2_reg_main_hue_user_color3_1   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color3_1  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR3_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color3_1)
// h0042, bit: 6
/* Main window IHC hue adjustment of color4 in section 1 */
#define offset_of_ace2_reg_main_hue_user_color4_1 (0x84)
#define mask_of_ace2_reg_main_hue_user_color4_1   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color4_1  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR4_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color4_1)
#define REG_ACE2_42_L                             (ACE2_REG_MAIN_HUE_USER_COLOR4_1)
// h0042, bit: 14
/* Main window IHC hue adjustment of color5 in section 1 */
#define offset_of_ace2_reg_main_hue_user_color5_1 (0x84)
#define mask_of_ace2_reg_main_hue_user_color5_1   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color5_1  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR5_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color5_1)
// h0043, bit: 6
/* Main window IHC hue adjustment of color6 in section 1 */
#define offset_of_ace2_reg_main_hue_user_color6_1 (0x86)
#define mask_of_ace2_reg_main_hue_user_color6_1   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color6_1  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR6_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color6_1)
#define REG_ACE2_43_L                             (ACE2_REG_MAIN_HUE_USER_COLOR6_1)
// h0043, bit: 14
/* Main window IHC hue adjustment of color7 in section 1*/
#define offset_of_ace2_reg_main_hue_user_color7_1 (0x86)
#define mask_of_ace2_reg_main_hue_user_color7_1   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color7_1  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR7_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color7_1)
// h0044, bit: 6
/* Main window IHC hue adjustment of color8 in section 1 */
#define offset_of_ace2_reg_main_hue_user_color8_1 (0x88)
#define mask_of_ace2_reg_main_hue_user_color8_1   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color8_1  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR8_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color8_1)
#define REG_ACE2_44_L                             (ACE2_REG_MAIN_HUE_USER_COLOR8_1)
// h0044, bit: 14
/* Main window IHC hue adjustment of color9 in section 1*/
#define offset_of_ace2_reg_main_hue_user_color9_1 (0x88)
#define mask_of_ace2_reg_main_hue_user_color9_1   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color9_1  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR9_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color9_1)
// h0045, bit: 6
/* Main window IHC hue adjustment of color10 in section 1*/
#define offset_of_ace2_reg_main_hue_user_color10_1 (0x8a)
#define mask_of_ace2_reg_main_hue_user_color10_1   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color10_1  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR10_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color10_1)
#define REG_ACE2_45_L                              (ACE2_REG_MAIN_HUE_USER_COLOR10_1)
// h0045, bit: 14
/* Main window IHC hue adjustment of color11 in section 1*/
#define offset_of_ace2_reg_main_hue_user_color11_1 (0x8a)
#define mask_of_ace2_reg_main_hue_user_color11_1   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color11_1  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR11_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color11_1)
// h0046, bit: 6
/* Main window IHC hue adjustment of color12 in section 1 */
#define offset_of_ace2_reg_main_hue_user_color12_1 (0x8c)
#define mask_of_ace2_reg_main_hue_user_color12_1   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color12_1  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR12_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color12_1)
#define REG_ACE2_46_L                              (ACE2_REG_MAIN_HUE_USER_COLOR12_1)
// h0046, bit: 14
/* Main window IHC hue adjustment of color13 in section 1 */
#define offset_of_ace2_reg_main_hue_user_color13_1 (0x8c)
#define mask_of_ace2_reg_main_hue_user_color13_1   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color13_1  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR13_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color13_1)
// h0047, bit: 6
/* Main window IHC hue adjustment of color14 in section 1 */
#define offset_of_ace2_reg_main_hue_user_color14_1 (0x8e)
#define mask_of_ace2_reg_main_hue_user_color14_1   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color14_1  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR14_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color14_1)
#define REG_ACE2_47_L                              (ACE2_REG_MAIN_HUE_USER_COLOR14_1)
// h0047, bit: 14
/* Main window IHC hue adjustment of color15 in section 1  */
#define offset_of_ace2_reg_main_hue_user_color15_1 (0x8e)
#define mask_of_ace2_reg_main_hue_user_color15_1   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color15_1  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR15_1           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color15_1)
// h0048, bit: 6
/* Main window IHC hue adjustment of color0 in section 2 */
#define offset_of_ace2_reg_main_hue_user_color0_2 (0x90)
#define mask_of_ace2_reg_main_hue_user_color0_2   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color0_2  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR0_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color0_2)
#define REG_ACE2_48_L                             (ACE2_REG_MAIN_HUE_USER_COLOR0_2)
// h0048, bit: 14
/* Main window IHC hue adjustment of color1 in section 2 */
#define offset_of_ace2_reg_main_hue_user_color1_2 (0x90)
#define mask_of_ace2_reg_main_hue_user_color1_2   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color1_2  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR1_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color1_2)
// h0049, bit: 6
/* Main window IHC hue adjustment of color2 in section 2 */
#define offset_of_ace2_reg_main_hue_user_color2_2 (0x92)
#define mask_of_ace2_reg_main_hue_user_color2_2   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color2_2  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR2_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color2_2)
#define REG_ACE2_49_L                             (ACE2_REG_MAIN_HUE_USER_COLOR2_2)
// h0049, bit: 14
/* Main window IHC hue adjustment of color3 in section 2 */
#define offset_of_ace2_reg_main_hue_user_color3_2 (0x92)
#define mask_of_ace2_reg_main_hue_user_color3_2   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color3_2  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR3_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color3_2)
// h004a, bit: 6
/* Main window IHC hue adjustment of color4 in section 2 */
#define offset_of_ace2_reg_main_hue_user_color4_2 (0x94)
#define mask_of_ace2_reg_main_hue_user_color4_2   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color4_2  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR4_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color4_2)
#define REG_ACE2_4A_L                             (ACE2_REG_MAIN_HUE_USER_COLOR4_2)
// h004a, bit: 14
/* Main window IHC hue adjustment of color5 in section 2 */
#define offset_of_ace2_reg_main_hue_user_color5_2 (0x94)
#define mask_of_ace2_reg_main_hue_user_color5_2   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color5_2  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR5_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color5_2)
// h004b, bit: 6
/* Main window IHC hue adjustment of color6 in section 2 */
#define offset_of_ace2_reg_main_hue_user_color6_2 (0x96)
#define mask_of_ace2_reg_main_hue_user_color6_2   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color6_2  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR6_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color6_2)
#define REG_ACE2_4B_L                             (ACE2_REG_MAIN_HUE_USER_COLOR6_2)
// h004b, bit: 14
/* Main window IHC hue adjustment of color7 in section 2*/
#define offset_of_ace2_reg_main_hue_user_color7_2 (0x96)
#define mask_of_ace2_reg_main_hue_user_color7_2   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color7_2  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR7_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color7_2)
// h004c, bit: 6
/* Main window IHC hue adjustment of color8 in section 2 */
#define offset_of_ace2_reg_main_hue_user_color8_2 (0x98)
#define mask_of_ace2_reg_main_hue_user_color8_2   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color8_2  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR8_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color8_2)
#define REG_ACE2_4C_L                             (ACE2_REG_MAIN_HUE_USER_COLOR8_2)
// h004c, bit: 14
/* Main window IHC hue adjustment of color9 in section 2*/
#define offset_of_ace2_reg_main_hue_user_color9_2 (0x98)
#define mask_of_ace2_reg_main_hue_user_color9_2   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color9_2  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR9_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color9_2)
// h004d, bit: 6
/* Main window IHC hue adjustment of color10 in section 2*/
#define offset_of_ace2_reg_main_hue_user_color10_2 (0x9a)
#define mask_of_ace2_reg_main_hue_user_color10_2   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color10_2  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR10_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color10_2)
#define REG_ACE2_4D_L                              (ACE2_REG_MAIN_HUE_USER_COLOR10_2)
// h004d, bit: 14
/* Main window IHC hue adjustment of color11 in section 2*/
#define offset_of_ace2_reg_main_hue_user_color11_2 (0x9a)
#define mask_of_ace2_reg_main_hue_user_color11_2   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color11_2  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR11_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color11_2)
// h004e, bit: 6
/* Main window IHC hue adjustment of color12 in section 2 */
#define offset_of_ace2_reg_main_hue_user_color12_2 (0x9c)
#define mask_of_ace2_reg_main_hue_user_color12_2   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color12_2  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR12_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color12_2)
#define REG_ACE2_4E_L                              (ACE2_REG_MAIN_HUE_USER_COLOR12_2)
// h004e, bit: 14
/* Main window IHC hue adjustment of color13 in section 2 */
#define offset_of_ace2_reg_main_hue_user_color13_2 (0x9c)
#define mask_of_ace2_reg_main_hue_user_color13_2   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color13_2  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR13_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color13_2)
// h004f, bit: 6
/* Main window IHC hue adjustment of color14 in section 2 */
#define offset_of_ace2_reg_main_hue_user_color14_2 (0x9e)
#define mask_of_ace2_reg_main_hue_user_color14_2   (0x7f)
#define shift_of_ace2_reg_main_hue_user_color14_2  (0)
#define ACE2_REG_MAIN_HUE_USER_COLOR14_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color14_2)
#define REG_ACE2_4F_L                              (ACE2_REG_MAIN_HUE_USER_COLOR14_2)
// h004f, bit: 14
/* Main window IHC hue adjustment of color15 in section 2  */
#define offset_of_ace2_reg_main_hue_user_color15_2 (0x9e)
#define mask_of_ace2_reg_main_hue_user_color15_2   (0x7f00)
#define shift_of_ace2_reg_main_hue_user_color15_2  (8)
#define ACE2_REG_MAIN_HUE_USER_COLOR15_2           (REG_ACE2_BASE + offset_of_ace2_reg_main_hue_user_color15_2)
#define REG_ACE2_50_L                              (REG_ACE2_BASE + 0xa0)
#define REG_ACE2_51_L                              (REG_ACE2_BASE + 0xa2)
#define REG_ACE2_52_L                              (REG_ACE2_BASE + 0xa4)
#define REG_ACE2_53_L                              (REG_ACE2_BASE + 0xa6)
#define REG_ACE2_54_L                              (REG_ACE2_BASE + 0xa8)
#define REG_ACE2_55_L                              (REG_ACE2_BASE + 0xaa)
#define REG_ACE2_56_L                              (REG_ACE2_BASE + 0xac)
#define REG_ACE2_57_L                              (REG_ACE2_BASE + 0xae)
#define REG_ACE2_58_L                              (REG_ACE2_BASE + 0xb0)
#define REG_ACE2_59_L                              (REG_ACE2_BASE + 0xb2)
#define REG_ACE2_5A_L                              (REG_ACE2_BASE + 0xb4)
#define REG_ACE2_5B_L                              (REG_ACE2_BASE + 0xb6)
#define REG_ACE2_5C_L                              (REG_ACE2_BASE + 0xb8)
#define REG_ACE2_5D_L                              (REG_ACE2_BASE + 0xba)
#define REG_ACE2_5E_L                              (REG_ACE2_BASE + 0xbc)
#define REG_ACE2_5F_L                              (REG_ACE2_BASE + 0xbe)
#define REG_ACE2_60_L                              (REG_ACE2_BASE + 0xc0)
#define REG_ACE2_61_L                              (REG_ACE2_BASE + 0xc2)
#define REG_ACE2_62_L                              (REG_ACE2_BASE + 0xc4)
#define REG_ACE2_63_L                              (REG_ACE2_BASE + 0xc6)
#define REG_ACE2_64_L                              (REG_ACE2_BASE + 0xc8)
#define REG_ACE2_65_L                              (REG_ACE2_BASE + 0xca)
#define REG_ACE2_66_L                              (REG_ACE2_BASE + 0xcc)
#define REG_ACE2_67_L                              (REG_ACE2_BASE + 0xce)
// h0068, bit: 1
/* Main window IHC adaptive Y mode  in different color enable*/
#define offset_of_ace2_reg_main_ihc_y_mode_diff_color_en (0xd0)
#define mask_of_ace2_reg_main_ihc_y_mode_diff_color_en   (0x2)
#define shift_of_ace2_reg_main_ihc_y_mode_diff_color_en  (1)
#define ACE2_REG_MAIN_IHC_Y_MODE_DIFF_COLOR_EN           (REG_ACE2_BASE + offset_of_ace2_reg_main_ihc_y_mode_diff_color_en)
#define REG_ACE2_68_L                                    (ACE2_REG_MAIN_IHC_Y_MODE_DIFF_COLOR_EN)
// h0068, bit: 7
/* Main window IHC adaptive Y mode enable*/
#define offset_of_ace2_reg_main_ihc_y_mode_en (0xd0)
#define mask_of_ace2_reg_main_ihc_y_mode_en   (0x80)
#define shift_of_ace2_reg_main_ihc_y_mode_en  (7)
#define ACE2_REG_MAIN_IHC_Y_MODE_EN           (REG_ACE2_BASE + offset_of_ace2_reg_main_ihc_y_mode_en)
// h0069, bit: 0
/* Bnad1 adaptive debug mode enable*/
#define offset_of_ace2_reg_band1_adaptive_debug_en (0xd2)
#define mask_of_ace2_reg_band1_adaptive_debug_en   (0x1)
#define shift_of_ace2_reg_band1_adaptive_debug_en  (0)
#define ACE2_REG_BAND1_ADAPTIVE_DEBUG_EN           (REG_ACE2_BASE + offset_of_ace2_reg_band1_adaptive_debug_en)
#define REG_ACE2_69_L                              (ACE2_REG_BAND1_ADAPTIVE_DEBUG_EN)
// h0069, bit: 1
/* Bnad2 adaptive debug mode enable*/
#define offset_of_ace2_reg_band2_adaptive_debug_en (0xd2)
#define mask_of_ace2_reg_band2_adaptive_debug_en   (0x2)
#define shift_of_ace2_reg_band2_adaptive_debug_en  (1)
#define ACE2_REG_BAND2_ADAPTIVE_DEBUG_EN           (REG_ACE2_BASE + offset_of_ace2_reg_band2_adaptive_debug_en)
// h0069, bit: 2
/* Bnad3 adaptive debug mode enable*/
#define offset_of_ace2_reg_band3_adaptive_debug_en (0xd2)
#define mask_of_ace2_reg_band3_adaptive_debug_en   (0x4)
#define shift_of_ace2_reg_band3_adaptive_debug_en  (2)
#define ACE2_REG_BAND3_ADAPTIVE_DEBUG_EN           (REG_ACE2_BASE + offset_of_ace2_reg_band3_adaptive_debug_en)
// h0069, bit: 3
/* Bnad4 adaptive debug mode enable*/
#define offset_of_ace2_reg_band4_adaptive_debug_en (0xd2)
#define mask_of_ace2_reg_band4_adaptive_debug_en   (0x8)
#define shift_of_ace2_reg_band4_adaptive_debug_en  (3)
#define ACE2_REG_BAND4_ADAPTIVE_DEBUG_EN           (REG_ACE2_BASE + offset_of_ace2_reg_band4_adaptive_debug_en)
// h0069, bit: 4
/* Bnad5 adaptive debug mode enable*/
#define offset_of_ace2_reg_band5_adaptive_debug_en (0xd2)
#define mask_of_ace2_reg_band5_adaptive_debug_en   (0x10)
#define shift_of_ace2_reg_band5_adaptive_debug_en  (4)
#define ACE2_REG_BAND5_ADAPTIVE_DEBUG_EN           (REG_ACE2_BASE + offset_of_ace2_reg_band5_adaptive_debug_en)
// h0069, bit: 5
/* Bnad6 adaptive debug mode enable*/
#define offset_of_ace2_reg_band6_adaptive_debug_en (0xd2)
#define mask_of_ace2_reg_band6_adaptive_debug_en   (0x20)
#define shift_of_ace2_reg_band6_adaptive_debug_en  (5)
#define ACE2_REG_BAND6_ADAPTIVE_DEBUG_EN           (REG_ACE2_BASE + offset_of_ace2_reg_band6_adaptive_debug_en)
// h0069, bit: 6
/* Bnad7 adaptive debug mode enable*/
#define offset_of_ace2_reg_band7_adaptive_debug_en (0xd2)
#define mask_of_ace2_reg_band7_adaptive_debug_en   (0x40)
#define shift_of_ace2_reg_band7_adaptive_debug_en  (6)
#define ACE2_REG_BAND7_ADAPTIVE_DEBUG_EN           (REG_ACE2_BASE + offset_of_ace2_reg_band7_adaptive_debug_en)
// h0069, bit: 7
/* Bnad8 adaptive debug mode enable*/
#define offset_of_ace2_reg_band8_adaptive_debug_en (0xd2)
#define mask_of_ace2_reg_band8_adaptive_debug_en   (0x80)
#define shift_of_ace2_reg_band8_adaptive_debug_en  (7)
#define ACE2_REG_BAND8_ADAPTIVE_DEBUG_EN           (REG_ACE2_BASE + offset_of_ace2_reg_band8_adaptive_debug_en)
// h0069, bit: 8
/* Bnad9 adaptive debug mode enable*/
#define offset_of_ace2_reg_band9_adaptive_debug_en (0xd2)
#define mask_of_ace2_reg_band9_adaptive_debug_en   (0x100)
#define shift_of_ace2_reg_band9_adaptive_debug_en  (8)
#define ACE2_REG_BAND9_ADAPTIVE_DEBUG_EN           (REG_ACE2_BASE + offset_of_ace2_reg_band9_adaptive_debug_en)
// h0069, bit: 9
/* Bnad10 adaptive debug mode enable*/
#define offset_of_ace2_reg_band10_adaptive_debug_en (0xd2)
#define mask_of_ace2_reg_band10_adaptive_debug_en   (0x200)
#define shift_of_ace2_reg_band10_adaptive_debug_en  (9)
#define ACE2_REG_BAND10_ADAPTIVE_DEBUG_EN           (REG_ACE2_BASE + offset_of_ace2_reg_band10_adaptive_debug_en)
// h0069, bit: 10
/* Bnad11 adaptive debug mode enable*/
#define offset_of_ace2_reg_band11_adaptive_debug_en (0xd2)
#define mask_of_ace2_reg_band11_adaptive_debug_en   (0x400)
#define shift_of_ace2_reg_band11_adaptive_debug_en  (10)
#define ACE2_REG_BAND11_ADAPTIVE_DEBUG_EN           (REG_ACE2_BASE + offset_of_ace2_reg_band11_adaptive_debug_en)
// h0069, bit: 11
/* Bnad12 adaptive debug mode enable*/
#define offset_of_ace2_reg_band12_adaptive_debug_en (0xd2)
#define mask_of_ace2_reg_band12_adaptive_debug_en   (0x800)
#define shift_of_ace2_reg_band12_adaptive_debug_en  (11)
#define ACE2_REG_BAND12_ADAPTIVE_DEBUG_EN           (REG_ACE2_BASE + offset_of_ace2_reg_band12_adaptive_debug_en)
// h006a, bit: 4
/* Bnad1 low difference threshold*/
#define offset_of_ace2_reg_band1_low_diff_thrd (0xd4)
#define mask_of_ace2_reg_band1_low_diff_thrd   (0x1f)
#define shift_of_ace2_reg_band1_low_diff_thrd  (0)
#define ACE2_REG_BAND1_LOW_DIFF_THRD           (REG_ACE2_BASE + offset_of_ace2_reg_band1_low_diff_thrd)
#define REG_ACE2_6A_L                          (ACE2_REG_BAND1_LOW_DIFF_THRD)
// h006a, bit: 7
/* Band1 differential adaptive gain step*/
#define offset_of_ace2_reg_band1_adaptive_gain_step (0xd4)
#define mask_of_ace2_reg_band1_adaptive_gain_step   (0xe0)
#define shift_of_ace2_reg_band1_adaptive_gain_step  (5)
#define ACE2_REG_BAND1_ADAPTIVE_GAIN_STEP           (REG_ACE2_BASE + offset_of_ace2_reg_band1_adaptive_gain_step)
// h006a, bit: 12
/* Bnad2 low difference threshold*/
#define offset_of_ace2_reg_band2_low_diff_thrd (0xd4)
#define mask_of_ace2_reg_band2_low_diff_thrd   (0x1f00)
#define shift_of_ace2_reg_band2_low_diff_thrd  (8)
#define ACE2_REG_BAND2_LOW_DIFF_THRD           (REG_ACE2_BASE + offset_of_ace2_reg_band2_low_diff_thrd)
// h006a, bit: 15
/* Band2 differential adaptive gain step*/
#define offset_of_ace2_reg_band2_adaptive_gain_step (0xd4)
#define mask_of_ace2_reg_band2_adaptive_gain_step   (0xe000)
#define shift_of_ace2_reg_band2_adaptive_gain_step  (13)
#define ACE2_REG_BAND2_ADAPTIVE_GAIN_STEP           (REG_ACE2_BASE + offset_of_ace2_reg_band2_adaptive_gain_step)
// h006b, bit: 4
/* Bnad3 low difference threshold*/
#define offset_of_ace2_reg_band3_low_diff_thrd (0xd6)
#define mask_of_ace2_reg_band3_low_diff_thrd   (0x1f)
#define shift_of_ace2_reg_band3_low_diff_thrd  (0)
#define ACE2_REG_BAND3_LOW_DIFF_THRD           (REG_ACE2_BASE + offset_of_ace2_reg_band3_low_diff_thrd)
#define REG_ACE2_6B_L                          (ACE2_REG_BAND3_LOW_DIFF_THRD)
// h006b, bit: 7
/* Band3 differential adaptive gain step*/
#define offset_of_ace2_reg_band3_adaptive_gain_step (0xd6)
#define mask_of_ace2_reg_band3_adaptive_gain_step   (0xe0)
#define shift_of_ace2_reg_band3_adaptive_gain_step  (5)
#define ACE2_REG_BAND3_ADAPTIVE_GAIN_STEP           (REG_ACE2_BASE + offset_of_ace2_reg_band3_adaptive_gain_step)
// h006b, bit: 12
/* Bnad4 low difference threshold*/
#define offset_of_ace2_reg_band4_low_diff_thrd (0xd6)
#define mask_of_ace2_reg_band4_low_diff_thrd   (0x1f00)
#define shift_of_ace2_reg_band4_low_diff_thrd  (8)
#define ACE2_REG_BAND4_LOW_DIFF_THRD           (REG_ACE2_BASE + offset_of_ace2_reg_band4_low_diff_thrd)
// h006b, bit: 15
/* Band4 differential adaptive gain step*/
#define offset_of_ace2_reg_band4_adaptive_gain_step (0xd6)
#define mask_of_ace2_reg_band4_adaptive_gain_step   (0xe000)
#define shift_of_ace2_reg_band4_adaptive_gain_step  (13)
#define ACE2_REG_BAND4_ADAPTIVE_GAIN_STEP           (REG_ACE2_BASE + offset_of_ace2_reg_band4_adaptive_gain_step)
// h006c, bit: 4
/* Bnad5 low difference threshold*/
#define offset_of_ace2_reg_band5_low_diff_thrd (0xd8)
#define mask_of_ace2_reg_band5_low_diff_thrd   (0x1f)
#define shift_of_ace2_reg_band5_low_diff_thrd  (0)
#define ACE2_REG_BAND5_LOW_DIFF_THRD           (REG_ACE2_BASE + offset_of_ace2_reg_band5_low_diff_thrd)
#define REG_ACE2_6C_L                          (ACE2_REG_BAND5_LOW_DIFF_THRD)
// h006c, bit: 7
/* Band5 differential adaptive gain step*/
#define offset_of_ace2_reg_band5_adaptive_gain_step (0xd8)
#define mask_of_ace2_reg_band5_adaptive_gain_step   (0xe0)
#define shift_of_ace2_reg_band5_adaptive_gain_step  (5)
#define ACE2_REG_BAND5_ADAPTIVE_GAIN_STEP           (REG_ACE2_BASE + offset_of_ace2_reg_band5_adaptive_gain_step)
// h006c, bit: 12
/* Bnad6 low difference threshold*/
#define offset_of_ace2_reg_band6_low_diff_thrd (0xd8)
#define mask_of_ace2_reg_band6_low_diff_thrd   (0x1f00)
#define shift_of_ace2_reg_band6_low_diff_thrd  (8)
#define ACE2_REG_BAND6_LOW_DIFF_THRD           (REG_ACE2_BASE + offset_of_ace2_reg_band6_low_diff_thrd)
// h006c, bit: 15
/* Band6 differential adaptive gain step*/
#define offset_of_ace2_reg_band6_adaptive_gain_step (0xd8)
#define mask_of_ace2_reg_band6_adaptive_gain_step   (0xe000)
#define shift_of_ace2_reg_band6_adaptive_gain_step  (13)
#define ACE2_REG_BAND6_ADAPTIVE_GAIN_STEP           (REG_ACE2_BASE + offset_of_ace2_reg_band6_adaptive_gain_step)
// h006d, bit: 4
/* Bnad7 low difference threshold*/
#define offset_of_ace2_reg_band7_low_diff_thrd (0xda)
#define mask_of_ace2_reg_band7_low_diff_thrd   (0x1f)
#define shift_of_ace2_reg_band7_low_diff_thrd  (0)
#define ACE2_REG_BAND7_LOW_DIFF_THRD           (REG_ACE2_BASE + offset_of_ace2_reg_band7_low_diff_thrd)
#define REG_ACE2_6D_L                          (ACE2_REG_BAND7_LOW_DIFF_THRD)
// h006d, bit: 7
/* Band7 differential adaptive gain step*/
#define offset_of_ace2_reg_band7_adaptive_gain_step (0xda)
#define mask_of_ace2_reg_band7_adaptive_gain_step   (0xe0)
#define shift_of_ace2_reg_band7_adaptive_gain_step  (5)
#define ACE2_REG_BAND7_ADAPTIVE_GAIN_STEP           (REG_ACE2_BASE + offset_of_ace2_reg_band7_adaptive_gain_step)
// h006d, bit: 12
/* Bnad8 low difference threshold*/
#define offset_of_ace2_reg_band8_low_diff_thrd (0xda)
#define mask_of_ace2_reg_band8_low_diff_thrd   (0x1f00)
#define shift_of_ace2_reg_band8_low_diff_thrd  (8)
#define ACE2_REG_BAND8_LOW_DIFF_THRD           (REG_ACE2_BASE + offset_of_ace2_reg_band8_low_diff_thrd)
// h006d, bit: 15
/* Band8 differential adaptive gain step*/
#define offset_of_ace2_reg_band8_adaptive_gain_step (0xda)
#define mask_of_ace2_reg_band8_adaptive_gain_step   (0xe000)
#define shift_of_ace2_reg_band8_adaptive_gain_step  (13)
#define ACE2_REG_BAND8_ADAPTIVE_GAIN_STEP           (REG_ACE2_BASE + offset_of_ace2_reg_band8_adaptive_gain_step)
// h006e, bit: 4
/* Bnad9 low difference threshold*/
#define offset_of_ace2_reg_band9_low_diff_thrd (0xdc)
#define mask_of_ace2_reg_band9_low_diff_thrd   (0x1f)
#define shift_of_ace2_reg_band9_low_diff_thrd  (0)
#define ACE2_REG_BAND9_LOW_DIFF_THRD           (REG_ACE2_BASE + offset_of_ace2_reg_band9_low_diff_thrd)
#define REG_ACE2_6E_L                          (ACE2_REG_BAND9_LOW_DIFF_THRD)
// h006e, bit: 7
/* Band9 differential adaptive gain step*/
#define offset_of_ace2_reg_band9_adaptive_gain_step (0xdc)
#define mask_of_ace2_reg_band9_adaptive_gain_step   (0xe0)
#define shift_of_ace2_reg_band9_adaptive_gain_step  (5)
#define ACE2_REG_BAND9_ADAPTIVE_GAIN_STEP           (REG_ACE2_BASE + offset_of_ace2_reg_band9_adaptive_gain_step)
// h006e, bit: 12
/* Bnad10 low difference threshold*/
#define offset_of_ace2_reg_band10_low_diff_thrd (0xdc)
#define mask_of_ace2_reg_band10_low_diff_thrd   (0x1f00)
#define shift_of_ace2_reg_band10_low_diff_thrd  (8)
#define ACE2_REG_BAND10_LOW_DIFF_THRD           (REG_ACE2_BASE + offset_of_ace2_reg_band10_low_diff_thrd)
// h006e, bit: 15
/* Band10 differential adaptive gain step*/
#define offset_of_ace2_reg_band10_adaptive_gain_step (0xdc)
#define mask_of_ace2_reg_band10_adaptive_gain_step   (0xe000)
#define shift_of_ace2_reg_band10_adaptive_gain_step  (13)
#define ACE2_REG_BAND10_ADAPTIVE_GAIN_STEP           (REG_ACE2_BASE + offset_of_ace2_reg_band10_adaptive_gain_step)
// h006f, bit: 4
/* Bnad11 low difference threshold*/
#define offset_of_ace2_reg_band11_low_diff_thrd (0xde)
#define mask_of_ace2_reg_band11_low_diff_thrd   (0x1f)
#define shift_of_ace2_reg_band11_low_diff_thrd  (0)
#define ACE2_REG_BAND11_LOW_DIFF_THRD           (REG_ACE2_BASE + offset_of_ace2_reg_band11_low_diff_thrd)
#define REG_ACE2_6F_L                           (ACE2_REG_BAND11_LOW_DIFF_THRD)
// h006f, bit: 7
/* Band11 differential adaptive gain step*/
#define offset_of_ace2_reg_band11_adaptive_gain_step (0xde)
#define mask_of_ace2_reg_band11_adaptive_gain_step   (0xe0)
#define shift_of_ace2_reg_band11_adaptive_gain_step  (5)
#define ACE2_REG_BAND11_ADAPTIVE_GAIN_STEP           (REG_ACE2_BASE + offset_of_ace2_reg_band11_adaptive_gain_step)
// h006f, bit: 12
/* Bnad12 low difference threshold*/
#define offset_of_ace2_reg_band12_low_diff_thrd (0xde)
#define mask_of_ace2_reg_band12_low_diff_thrd   (0x1f00)
#define shift_of_ace2_reg_band12_low_diff_thrd  (8)
#define ACE2_REG_BAND12_LOW_DIFF_THRD           (REG_ACE2_BASE + offset_of_ace2_reg_band12_low_diff_thrd)
// h006f, bit: 15
/* Band12 differential adaptive gain step*/
#define offset_of_ace2_reg_band12_adaptive_gain_step (0xde)
#define mask_of_ace2_reg_band12_adaptive_gain_step   (0xe000)
#define shift_of_ace2_reg_band12_adaptive_gain_step  (13)
#define ACE2_REG_BAND12_ADAPTIVE_GAIN_STEP           (REG_ACE2_BASE + offset_of_ace2_reg_band12_adaptive_gain_step)
#define REG_ACE2_70_L                                (REG_ACE2_BASE + 0xe0)
#define REG_ACE2_71_L                                (REG_ACE2_BASE + 0xe2)
#define REG_ACE2_72_L                                (REG_ACE2_BASE + 0xe4)
#define REG_ACE2_73_L                                (REG_ACE2_BASE + 0xe6)
#define REG_ACE2_74_L                                (REG_ACE2_BASE + 0xe8)
#define REG_ACE2_75_L                                (REG_ACE2_BASE + 0xea)
#define REG_ACE2_76_L                                (REG_ACE2_BASE + 0xec)
#define REG_ACE2_77_L                                (REG_ACE2_BASE + 0xee)
// h0078, bit: 0
/* ICC sram IO enable*/
#define offset_of_ace2_reg_icc_sram_io_en (0xf0)
#define mask_of_ace2_reg_icc_sram_io_en   (0x1)
#define shift_of_ace2_reg_icc_sram_io_en  (0)
#define ACE2_REG_ICC_SRAM_IO_EN           (REG_ACE2_BASE + offset_of_ace2_reg_icc_sram_io_en)
#define REG_ACE2_78_L                     (ACE2_REG_ICC_SRAM_IO_EN)
// h0078, bit: 2
/* ICC io select*/
#define offset_of_ace2_reg_icc_sram_io_select (0xf0)
#define mask_of_ace2_reg_icc_sram_io_select   (0x6)
#define shift_of_ace2_reg_icc_sram_io_select  (1)
#define ACE2_REG_ICC_SRAM_IO_SELECT           (REG_ACE2_BASE + offset_of_ace2_reg_icc_sram_io_select)
// h0079, bit: 8
/* ICC io address*/
#define offset_of_ace2_reg_icc_ioaddr (0xf2)
#define mask_of_ace2_reg_icc_ioaddr   (0x1ff)
#define shift_of_ace2_reg_icc_ioaddr  (0)
#define ACE2_REG_ICC_IOADDR           (REG_ACE2_BASE + offset_of_ace2_reg_icc_ioaddr)
#define REG_ACE2_79_L                 (ACE2_REG_ICC_IOADDR)
// h0079, bit: 15
/* ICC io read enable*/
#define offset_of_ace2_reg_icc_iore (0xf2)
#define mask_of_ace2_reg_icc_iore   (0x8000)
#define shift_of_ace2_reg_icc_iore  (15)
#define ACE2_REG_ICC_IORE           (REG_ACE2_BASE + offset_of_ace2_reg_icc_iore)
// h007a, bit: 8
/* ICC io write data*/
#define offset_of_ace2_reg_icc_iowdata (0xf4)
#define mask_of_ace2_reg_icc_iowdata   (0x1ff)
#define shift_of_ace2_reg_icc_iowdata  (0)
#define ACE2_REG_ICC_IOWDATA           (REG_ACE2_BASE + offset_of_ace2_reg_icc_iowdata)
#define REG_ACE2_7A_L                  (ACE2_REG_ICC_IOWDATA)
// h007a, bit: 15
/* ICC io write enable*/
#define offset_of_ace2_reg_icc_iowe (0xf4)
#define mask_of_ace2_reg_icc_iowe   (0x8000)
#define shift_of_ace2_reg_icc_iowe  (15)
#define ACE2_REG_ICC_IOWE           (REG_ACE2_BASE + offset_of_ace2_reg_icc_iowe)
// h007b, bit: 8
/* ICC io read data*/
#define offset_of_ace2_reg_icc_iordata (0xf6)
#define mask_of_ace2_reg_icc_iordata   (0x1ff)
#define shift_of_ace2_reg_icc_iordata  (0)
#define ACE2_REG_ICC_IORDATA           (REG_ACE2_BASE + offset_of_ace2_reg_icc_iordata)
#define REG_ACE2_7B_L                  (ACE2_REG_ICC_IORDATA)
// h007c, bit: 0
/* IHC sram IO enable*/
#define offset_of_ace2_reg_ihc_sram_io_en (0xf8)
#define mask_of_ace2_reg_ihc_sram_io_en   (0x1)
#define shift_of_ace2_reg_ihc_sram_io_en  (0)
#define ACE2_REG_IHC_SRAM_IO_EN           (REG_ACE2_BASE + offset_of_ace2_reg_ihc_sram_io_en)
#define REG_ACE2_7C_L                     (ACE2_REG_IHC_SRAM_IO_EN)
// h007c, bit: 2
/* IHC sram IO select*/
#define offset_of_ace2_reg_ihc_sram_io_select (0xf8)
#define mask_of_ace2_reg_ihc_sram_io_select   (0x6)
#define shift_of_ace2_reg_ihc_sram_io_select  (1)
#define ACE2_REG_IHC_SRAM_IO_SELECT           (REG_ACE2_BASE + offset_of_ace2_reg_ihc_sram_io_select)
// h007d, bit: 8
/* IHC io address*/
#define offset_of_ace2_reg_ihc_ioaddr (0xfa)
#define mask_of_ace2_reg_ihc_ioaddr   (0x1ff)
#define shift_of_ace2_reg_ihc_ioaddr  (0)
#define ACE2_REG_IHC_IOADDR           (REG_ACE2_BASE + offset_of_ace2_reg_ihc_ioaddr)
#define REG_ACE2_7D_L                 (ACE2_REG_IHC_IOADDR)
// h007d, bit: 15
/* IHC io read enable*/
#define offset_of_ace2_reg_ihc_iore (0xfa)
#define mask_of_ace2_reg_ihc_iore   (0x8000)
#define shift_of_ace2_reg_ihc_iore  (15)
#define ACE2_REG_IHC_IORE           (REG_ACE2_BASE + offset_of_ace2_reg_ihc_iore)
// h007e, bit: 9
/* IHC io write data*/
#define offset_of_ace2_reg_ihc_iowdata (0xfc)
#define mask_of_ace2_reg_ihc_iowdata   (0x3ff)
#define shift_of_ace2_reg_ihc_iowdata  (0)
#define ACE2_REG_IHC_IOWDATA           (REG_ACE2_BASE + offset_of_ace2_reg_ihc_iowdata)
#define REG_ACE2_7E_L                  (ACE2_REG_IHC_IOWDATA)
// h007e, bit: 15
/* IHC io write enable*/
#define offset_of_ace2_reg_ihc_iowe (0xfc)
#define mask_of_ace2_reg_ihc_iowe   (0x8000)
#define shift_of_ace2_reg_ihc_iowe  (15)
#define ACE2_REG_IHC_IOWE           (REG_ACE2_BASE + offset_of_ace2_reg_ihc_iowe)
// h007f, bit: 9
/* IHC io read data*/
#define offset_of_ace2_reg_ihc_iordata (0xfe)
#define mask_of_ace2_reg_ihc_iordata   (0x3ff)
#define shift_of_ace2_reg_ihc_iordata  (0)
#define ACE2_REG_IHC_IORDATA           (REG_ACE2_BASE + offset_of_ace2_reg_ihc_iordata)
#define REG_ACE2_7F_L                  (ACE2_REG_IHC_IORDATA)
#define REG_ACE3_00_L                  (REG_ACE3_BASE + 0x0)
#define REG_ACE3_01_L                  (REG_ACE3_BASE + 0x2)
#define REG_ACE3_02_L                  (REG_ACE3_BASE + 0x4)
#define REG_ACE3_03_L                  (REG_ACE3_BASE + 0x6)
#define REG_ACE3_04_L                  (REG_ACE3_BASE + 0x8)
#define REG_ACE3_05_L                  (REG_ACE3_BASE + 0xa)
#define REG_ACE3_06_L                  (REG_ACE3_BASE + 0xc)
#define REG_ACE3_07_L                  (REG_ACE3_BASE + 0xe)
// h0008, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color0*/
#define offset_of_ace3_reg_main_ihc_icc_color0_y_0 (0x10)
#define mask_of_ace3_reg_main_ihc_icc_color0_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color0_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR0_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color0_y_0)
#define REG_ACE3_08_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR0_Y_0)
// h0008, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color0*/
#define offset_of_ace3_reg_main_ihc_icc_color0_y_1 (0x10)
#define mask_of_ace3_reg_main_ihc_icc_color0_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color0_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR0_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color0_y_1)
// h0009, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color0*/
#define offset_of_ace3_reg_main_ihc_icc_color0_y_2 (0x12)
#define mask_of_ace3_reg_main_ihc_icc_color0_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color0_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR0_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color0_y_2)
#define REG_ACE3_09_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR0_Y_2)
// h0009, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color0*/
#define offset_of_ace3_reg_main_ihc_icc_color0_y_3 (0x12)
#define mask_of_ace3_reg_main_ihc_icc_color0_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color0_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR0_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color0_y_3)
// h000a, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color1*/
#define offset_of_ace3_reg_main_ihc_icc_color1_y_0 (0x14)
#define mask_of_ace3_reg_main_ihc_icc_color1_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color1_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR1_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color1_y_0)
#define REG_ACE3_0A_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR1_Y_0)
// h000a, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color1*/
#define offset_of_ace3_reg_main_ihc_icc_color1_y_1 (0x14)
#define mask_of_ace3_reg_main_ihc_icc_color1_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color1_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR1_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color1_y_1)
// h000b, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color1*/
#define offset_of_ace3_reg_main_ihc_icc_color1_y_2 (0x16)
#define mask_of_ace3_reg_main_ihc_icc_color1_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color1_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR1_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color1_y_2)
#define REG_ACE3_0B_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR1_Y_2)
// h000b, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color1*/
#define offset_of_ace3_reg_main_ihc_icc_color1_y_3 (0x16)
#define mask_of_ace3_reg_main_ihc_icc_color1_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color1_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR1_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color1_y_3)
// h000c, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color2*/
#define offset_of_ace3_reg_main_ihc_icc_color2_y_0 (0x18)
#define mask_of_ace3_reg_main_ihc_icc_color2_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color2_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR2_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color2_y_0)
#define REG_ACE3_0C_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR2_Y_0)
// h000c, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color2*/
#define offset_of_ace3_reg_main_ihc_icc_color2_y_1 (0x18)
#define mask_of_ace3_reg_main_ihc_icc_color2_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color2_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR2_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color2_y_1)
// h000d, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color2*/
#define offset_of_ace3_reg_main_ihc_icc_color2_y_2 (0x1a)
#define mask_of_ace3_reg_main_ihc_icc_color2_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color2_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR2_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color2_y_2)
#define REG_ACE3_0D_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR2_Y_2)
// h000d, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color2*/
#define offset_of_ace3_reg_main_ihc_icc_color2_y_3 (0x1a)
#define mask_of_ace3_reg_main_ihc_icc_color2_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color2_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR2_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color2_y_3)
// h000e, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color3*/
#define offset_of_ace3_reg_main_ihc_icc_color3_y_0 (0x1c)
#define mask_of_ace3_reg_main_ihc_icc_color3_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color3_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR3_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color3_y_0)
#define REG_ACE3_0E_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR3_Y_0)
// h000e, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color3*/
#define offset_of_ace3_reg_main_ihc_icc_color3_y_1 (0x1c)
#define mask_of_ace3_reg_main_ihc_icc_color3_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color3_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR3_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color3_y_1)
// h000f, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color3*/
#define offset_of_ace3_reg_main_ihc_icc_color3_y_2 (0x1e)
#define mask_of_ace3_reg_main_ihc_icc_color3_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color3_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR3_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color3_y_2)
#define REG_ACE3_0F_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR3_Y_2)
// h000f, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color3*/
#define offset_of_ace3_reg_main_ihc_icc_color3_y_3 (0x1e)
#define mask_of_ace3_reg_main_ihc_icc_color3_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color3_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR3_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color3_y_3)
// h0010, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color4*/
#define offset_of_ace3_reg_main_ihc_icc_color4_y_0 (0x20)
#define mask_of_ace3_reg_main_ihc_icc_color4_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color4_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR4_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color4_y_0)
#define REG_ACE3_10_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR4_Y_0)
// h0010, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color4*/
#define offset_of_ace3_reg_main_ihc_icc_color4_y_1 (0x20)
#define mask_of_ace3_reg_main_ihc_icc_color4_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color4_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR4_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color4_y_1)
// h0011, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color4*/
#define offset_of_ace3_reg_main_ihc_icc_color4_y_2 (0x22)
#define mask_of_ace3_reg_main_ihc_icc_color4_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color4_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR4_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color4_y_2)
#define REG_ACE3_11_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR4_Y_2)
// h0011, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color4*/
#define offset_of_ace3_reg_main_ihc_icc_color4_y_3 (0x22)
#define mask_of_ace3_reg_main_ihc_icc_color4_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color4_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR4_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color4_y_3)
// h0012, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color5*/
#define offset_of_ace3_reg_main_ihc_icc_color5_y_0 (0x24)
#define mask_of_ace3_reg_main_ihc_icc_color5_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color5_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR5_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color5_y_0)
#define REG_ACE3_12_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR5_Y_0)
// h0012, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color5*/
#define offset_of_ace3_reg_main_ihc_icc_color5_y_1 (0x24)
#define mask_of_ace3_reg_main_ihc_icc_color5_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color5_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR5_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color5_y_1)
// h0013, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color5*/
#define offset_of_ace3_reg_main_ihc_icc_color5_y_2 (0x26)
#define mask_of_ace3_reg_main_ihc_icc_color5_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color5_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR5_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color5_y_2)
#define REG_ACE3_13_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR5_Y_2)
// h0013, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color5*/
#define offset_of_ace3_reg_main_ihc_icc_color5_y_3 (0x26)
#define mask_of_ace3_reg_main_ihc_icc_color5_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color5_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR5_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color5_y_3)
// h0014, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color6*/
#define offset_of_ace3_reg_main_ihc_icc_color6_y_0 (0x28)
#define mask_of_ace3_reg_main_ihc_icc_color6_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color6_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR6_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color6_y_0)
#define REG_ACE3_14_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR6_Y_0)
// h0014, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color6*/
#define offset_of_ace3_reg_main_ihc_icc_color6_y_1 (0x28)
#define mask_of_ace3_reg_main_ihc_icc_color6_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color6_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR6_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color6_y_1)
// h0015, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color6*/
#define offset_of_ace3_reg_main_ihc_icc_color6_y_2 (0x2a)
#define mask_of_ace3_reg_main_ihc_icc_color6_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color6_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR6_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color6_y_2)
#define REG_ACE3_15_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR6_Y_2)
// h0015, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color6*/
#define offset_of_ace3_reg_main_ihc_icc_color6_y_3 (0x2a)
#define mask_of_ace3_reg_main_ihc_icc_color6_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color6_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR6_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color6_y_3)
// h0016, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color7*/
#define offset_of_ace3_reg_main_ihc_icc_color7_y_0 (0x2c)
#define mask_of_ace3_reg_main_ihc_icc_color7_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color7_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR7_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color7_y_0)
#define REG_ACE3_16_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR7_Y_0)
// h0016, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color7*/
#define offset_of_ace3_reg_main_ihc_icc_color7_y_1 (0x2c)
#define mask_of_ace3_reg_main_ihc_icc_color7_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color7_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR7_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color7_y_1)
// h0017, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color7*/
#define offset_of_ace3_reg_main_ihc_icc_color7_y_2 (0x2e)
#define mask_of_ace3_reg_main_ihc_icc_color7_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color7_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR7_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color7_y_2)
#define REG_ACE3_17_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR7_Y_2)
// h0017, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color7*/
#define offset_of_ace3_reg_main_ihc_icc_color7_y_3 (0x2e)
#define mask_of_ace3_reg_main_ihc_icc_color7_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color7_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR7_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color7_y_3)
// h0018, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color8*/
#define offset_of_ace3_reg_main_ihc_icc_color8_y_0 (0x30)
#define mask_of_ace3_reg_main_ihc_icc_color8_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color8_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR8_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color8_y_0)
#define REG_ACE3_18_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR8_Y_0)
// h0018, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color8*/
#define offset_of_ace3_reg_main_ihc_icc_color8_y_1 (0x30)
#define mask_of_ace3_reg_main_ihc_icc_color8_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color8_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR8_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color8_y_1)
// h0019, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color8*/
#define offset_of_ace3_reg_main_ihc_icc_color8_y_2 (0x32)
#define mask_of_ace3_reg_main_ihc_icc_color8_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color8_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR8_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color8_y_2)
#define REG_ACE3_19_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR8_Y_2)
// h0019, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color8*/
#define offset_of_ace3_reg_main_ihc_icc_color8_y_3 (0x32)
#define mask_of_ace3_reg_main_ihc_icc_color8_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color8_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR8_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color8_y_3)
// h001a, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color9*/
#define offset_of_ace3_reg_main_ihc_icc_color9_y_0 (0x34)
#define mask_of_ace3_reg_main_ihc_icc_color9_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color9_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR9_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color9_y_0)
#define REG_ACE3_1A_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR9_Y_0)
// h001a, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color9*/
#define offset_of_ace3_reg_main_ihc_icc_color9_y_1 (0x34)
#define mask_of_ace3_reg_main_ihc_icc_color9_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color9_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR9_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color9_y_1)
// h001b, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color9*/
#define offset_of_ace3_reg_main_ihc_icc_color9_y_2 (0x36)
#define mask_of_ace3_reg_main_ihc_icc_color9_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color9_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR9_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color9_y_2)
#define REG_ACE3_1B_L                              (ACE3_REG_MAIN_IHC_ICC_COLOR9_Y_2)
// h001b, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color9*/
#define offset_of_ace3_reg_main_ihc_icc_color9_y_3 (0x36)
#define mask_of_ace3_reg_main_ihc_icc_color9_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color9_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR9_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color9_y_3)
// h001c, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color10*/
#define offset_of_ace3_reg_main_ihc_icc_color10_y_0 (0x38)
#define mask_of_ace3_reg_main_ihc_icc_color10_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color10_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR10_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color10_y_0)
#define REG_ACE3_1C_L                               (ACE3_REG_MAIN_IHC_ICC_COLOR10_Y_0)
// h001c, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color10*/
#define offset_of_ace3_reg_main_ihc_icc_color10_y_1 (0x38)
#define mask_of_ace3_reg_main_ihc_icc_color10_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color10_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR10_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color10_y_1)
// h001d, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color10*/
#define offset_of_ace3_reg_main_ihc_icc_color10_y_2 (0x3a)
#define mask_of_ace3_reg_main_ihc_icc_color10_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color10_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR10_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color10_y_2)
#define REG_ACE3_1D_L                               (ACE3_REG_MAIN_IHC_ICC_COLOR10_Y_2)
// h001d, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color10*/
#define offset_of_ace3_reg_main_ihc_icc_color10_y_3 (0x3a)
#define mask_of_ace3_reg_main_ihc_icc_color10_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color10_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR10_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color10_y_3)
// h001e, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color11*/
#define offset_of_ace3_reg_main_ihc_icc_color11_y_0 (0x3c)
#define mask_of_ace3_reg_main_ihc_icc_color11_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color11_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR11_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color11_y_0)
#define REG_ACE3_1E_L                               (ACE3_REG_MAIN_IHC_ICC_COLOR11_Y_0)
// h001e, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color11*/
#define offset_of_ace3_reg_main_ihc_icc_color11_y_1 (0x3c)
#define mask_of_ace3_reg_main_ihc_icc_color11_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color11_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR11_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color11_y_1)
// h001f, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color11*/
#define offset_of_ace3_reg_main_ihc_icc_color11_y_2 (0x3e)
#define mask_of_ace3_reg_main_ihc_icc_color11_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color11_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR11_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color11_y_2)
#define REG_ACE3_1F_L                               (ACE3_REG_MAIN_IHC_ICC_COLOR11_Y_2)
// h001f, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color11*/
#define offset_of_ace3_reg_main_ihc_icc_color11_y_3 (0x3e)
#define mask_of_ace3_reg_main_ihc_icc_color11_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color11_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR11_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color11_y_3)
// h0020, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color12*/
#define offset_of_ace3_reg_main_ihc_icc_color12_y_0 (0x40)
#define mask_of_ace3_reg_main_ihc_icc_color12_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color12_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR12_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color12_y_0)
#define REG_ACE3_20_L                               (ACE3_REG_MAIN_IHC_ICC_COLOR12_Y_0)
// h0020, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color12*/
#define offset_of_ace3_reg_main_ihc_icc_color12_y_1 (0x40)
#define mask_of_ace3_reg_main_ihc_icc_color12_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color12_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR12_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color12_y_1)
// h0021, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color12*/
#define offset_of_ace3_reg_main_ihc_icc_color12_y_2 (0x42)
#define mask_of_ace3_reg_main_ihc_icc_color12_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color12_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR12_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color12_y_2)
#define REG_ACE3_21_L                               (ACE3_REG_MAIN_IHC_ICC_COLOR12_Y_2)
// h0021, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color12*/
#define offset_of_ace3_reg_main_ihc_icc_color12_y_3 (0x42)
#define mask_of_ace3_reg_main_ihc_icc_color12_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color12_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR12_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color12_y_3)
// h0022, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color13*/
#define offset_of_ace3_reg_main_ihc_icc_color13_y_0 (0x44)
#define mask_of_ace3_reg_main_ihc_icc_color13_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color13_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR13_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color13_y_0)
#define REG_ACE3_22_L                               (ACE3_REG_MAIN_IHC_ICC_COLOR13_Y_0)
// h0022, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color13*/
#define offset_of_ace3_reg_main_ihc_icc_color13_y_1 (0x44)
#define mask_of_ace3_reg_main_ihc_icc_color13_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color13_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR13_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color13_y_1)
// h0023, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color13*/
#define offset_of_ace3_reg_main_ihc_icc_color13_y_2 (0x46)
#define mask_of_ace3_reg_main_ihc_icc_color13_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color13_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR13_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color13_y_2)
#define REG_ACE3_23_L                               (ACE3_REG_MAIN_IHC_ICC_COLOR13_Y_2)
// h0023, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color13*/
#define offset_of_ace3_reg_main_ihc_icc_color13_y_3 (0x46)
#define mask_of_ace3_reg_main_ihc_icc_color13_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color13_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR13_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color13_y_3)
// h0024, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color14*/
#define offset_of_ace3_reg_main_ihc_icc_color14_y_0 (0x48)
#define mask_of_ace3_reg_main_ihc_icc_color14_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color14_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR14_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color14_y_0)
#define REG_ACE3_24_L                               (ACE3_REG_MAIN_IHC_ICC_COLOR14_Y_0)
// h0024, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color14*/
#define offset_of_ace3_reg_main_ihc_icc_color14_y_1 (0x48)
#define mask_of_ace3_reg_main_ihc_icc_color14_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color14_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR14_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color14_y_1)
// h0025, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color14*/
#define offset_of_ace3_reg_main_ihc_icc_color14_y_2 (0x4a)
#define mask_of_ace3_reg_main_ihc_icc_color14_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color14_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR14_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color14_y_2)
#define REG_ACE3_25_L                               (ACE3_REG_MAIN_IHC_ICC_COLOR14_Y_2)
// h0025, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color14*/
#define offset_of_ace3_reg_main_ihc_icc_color14_y_3 (0x4a)
#define mask_of_ace3_reg_main_ihc_icc_color14_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color14_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR14_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color14_y_3)
// h0026, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color15*/
#define offset_of_ace3_reg_main_ihc_icc_color15_y_0 (0x4c)
#define mask_of_ace3_reg_main_ihc_icc_color15_y_0   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color15_y_0  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR15_Y_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color15_y_0)
#define REG_ACE3_26_L                               (ACE3_REG_MAIN_IHC_ICC_COLOR15_Y_0)
// h0026, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color15*/
#define offset_of_ace3_reg_main_ihc_icc_color15_y_1 (0x4c)
#define mask_of_ace3_reg_main_ihc_icc_color15_y_1   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color15_y_1  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR15_Y_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color15_y_1)
// h0027, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color15*/
#define offset_of_ace3_reg_main_ihc_icc_color15_y_2 (0x4e)
#define mask_of_ace3_reg_main_ihc_icc_color15_y_2   (0xff)
#define shift_of_ace3_reg_main_ihc_icc_color15_y_2  (0)
#define ACE3_REG_MAIN_IHC_ICC_COLOR15_Y_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color15_y_2)
#define REG_ACE3_27_L                               (ACE3_REG_MAIN_IHC_ICC_COLOR15_Y_2)
// h0027, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color15*/
#define offset_of_ace3_reg_main_ihc_icc_color15_y_3 (0x4e)
#define mask_of_ace3_reg_main_ihc_icc_color15_y_3   (0xff00)
#define shift_of_ace3_reg_main_ihc_icc_color15_y_3  (8)
#define ACE3_REG_MAIN_IHC_ICC_COLOR15_Y_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_ihc_icc_color15_y_3)
#define REG_ACE3_28_L                               (REG_ACE3_BASE + 0x50)
#define REG_ACE3_29_L                               (REG_ACE3_BASE + 0x52)
#define REG_ACE3_2A_L                               (REG_ACE3_BASE + 0x54)
#define REG_ACE3_2B_L                               (REG_ACE3_BASE + 0x56)
#define REG_ACE3_2C_L                               (REG_ACE3_BASE + 0x58)
#define REG_ACE3_2D_L                               (REG_ACE3_BASE + 0x5a)
#define REG_ACE3_2E_L                               (REG_ACE3_BASE + 0x5c)
#define REG_ACE3_2F_L                               (REG_ACE3_BASE + 0x5e)
#define REG_ACE3_30_L                               (REG_ACE3_BASE + 0x60)
#define REG_ACE3_31_L                               (REG_ACE3_BASE + 0x62)
#define REG_ACE3_32_L                               (REG_ACE3_BASE + 0x64)
#define REG_ACE3_33_L                               (REG_ACE3_BASE + 0x66)
#define REG_ACE3_34_L                               (REG_ACE3_BASE + 0x68)
#define REG_ACE3_35_L                               (REG_ACE3_BASE + 0x6a)
#define REG_ACE3_36_L                               (REG_ACE3_BASE + 0x6c)
#define REG_ACE3_37_L                               (REG_ACE3_BASE + 0x6e)
// h0038, bit: 3
/* Main window  ICC saturation adjustment of color0 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color0_0 (0x70)
#define mask_of_ace3_reg_main_sa_user_color0_0   (0xf)
#define shift_of_ace3_reg_main_sa_user_color0_0  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR0_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color0_0)
#define REG_ACE3_38_L                            (ACE3_REG_MAIN_SA_USER_COLOR0_0)
// h0038, bit: 11
/* Main window  ICC saturation adjustment of color1 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color1_0 (0x70)
#define mask_of_ace3_reg_main_sa_user_color1_0   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color1_0  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR1_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color1_0)
// h0039, bit: 3
/* Main window  ICC saturation adjustment of color2 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color2_0 (0x72)
#define mask_of_ace3_reg_main_sa_user_color2_0   (0xf)
#define shift_of_ace3_reg_main_sa_user_color2_0  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR2_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color2_0)
#define REG_ACE3_39_L                            (ACE3_REG_MAIN_SA_USER_COLOR2_0)
// h0039, bit: 11
/* Main window  ICC saturation adjustment of color3 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color3_0 (0x72)
#define mask_of_ace3_reg_main_sa_user_color3_0   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color3_0  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR3_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color3_0)
// h003a, bit: 3
/* Main window  ICC saturation adjustment of color4 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color4_0 (0x74)
#define mask_of_ace3_reg_main_sa_user_color4_0   (0xf)
#define shift_of_ace3_reg_main_sa_user_color4_0  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR4_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color4_0)
#define REG_ACE3_3A_L                            (ACE3_REG_MAIN_SA_USER_COLOR4_0)
// h003a, bit: 11
/* Main window  ICC saturation adjustment of color5 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color5_0 (0x74)
#define mask_of_ace3_reg_main_sa_user_color5_0   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color5_0  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR5_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color5_0)
// h003b, bit: 3
/* Main window  ICC saturation adjustment of color6 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color6_0 (0x76)
#define mask_of_ace3_reg_main_sa_user_color6_0   (0xf)
#define shift_of_ace3_reg_main_sa_user_color6_0  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR6_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color6_0)
#define REG_ACE3_3B_L                            (ACE3_REG_MAIN_SA_USER_COLOR6_0)
// h003b, bit: 11
/* Main window  ICC saturation adjustment of color7 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color7_0 (0x76)
#define mask_of_ace3_reg_main_sa_user_color7_0   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color7_0  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR7_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color7_0)
// h003c, bit: 3
/* Main window  ICC saturation adjustment of color8 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color8_0 (0x78)
#define mask_of_ace3_reg_main_sa_user_color8_0   (0xf)
#define shift_of_ace3_reg_main_sa_user_color8_0  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR8_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color8_0)
#define REG_ACE3_3C_L                            (ACE3_REG_MAIN_SA_USER_COLOR8_0)
// h003c, bit: 11
/* Main window  ICC saturation adjustment of color9 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color9_0 (0x78)
#define mask_of_ace3_reg_main_sa_user_color9_0   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color9_0  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR9_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color9_0)
// h003d, bit: 3
/* Main window  ICC saturation adjustment of color10 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color10_0 (0x7a)
#define mask_of_ace3_reg_main_sa_user_color10_0   (0xf)
#define shift_of_ace3_reg_main_sa_user_color10_0  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR10_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color10_0)
#define REG_ACE3_3D_L                             (ACE3_REG_MAIN_SA_USER_COLOR10_0)
// h003d, bit: 11
/* Main window  ICC saturation adjustment of color11 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color11_0 (0x7a)
#define mask_of_ace3_reg_main_sa_user_color11_0   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color11_0  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR11_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color11_0)
// h003e, bit: 3
/* Main window  ICC saturation adjustment of color12 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color12_0 (0x7c)
#define mask_of_ace3_reg_main_sa_user_color12_0   (0xf)
#define shift_of_ace3_reg_main_sa_user_color12_0  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR12_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color12_0)
#define REG_ACE3_3E_L                             (ACE3_REG_MAIN_SA_USER_COLOR12_0)
// h003e, bit: 11
/* Main window  ICC saturation adjustment of color13 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color13_0 (0x7c)
#define mask_of_ace3_reg_main_sa_user_color13_0   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color13_0  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR13_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color13_0)
// h003f, bit: 3
/* Main window  ICC saturation adjustment of color14 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color14_0 (0x7e)
#define mask_of_ace3_reg_main_sa_user_color14_0   (0xf)
#define shift_of_ace3_reg_main_sa_user_color14_0  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR14_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color14_0)
#define REG_ACE3_3F_L                             (ACE3_REG_MAIN_SA_USER_COLOR14_0)
// h003f, bit: 11
/* Main window  ICC saturation adjustment of color15 in section 0 */
#define offset_of_ace3_reg_main_sa_user_color15_0 (0x7e)
#define mask_of_ace3_reg_main_sa_user_color15_0   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color15_0  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR15_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color15_0)
// h0040, bit: 3
/* Main window  ICC saturation adjustment of color0 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color0_1 (0x80)
#define mask_of_ace3_reg_main_sa_user_color0_1   (0xf)
#define shift_of_ace3_reg_main_sa_user_color0_1  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR0_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color0_1)
#define REG_ACE3_40_L                            (ACE3_REG_MAIN_SA_USER_COLOR0_1)
// h0040, bit: 11
/* Main window  ICC saturation adjustment of color1 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color1_1 (0x80)
#define mask_of_ace3_reg_main_sa_user_color1_1   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color1_1  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR1_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color1_1)
// h0041, bit: 3
/* Main window  ICC saturation adjustment of color2 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color2_1 (0x82)
#define mask_of_ace3_reg_main_sa_user_color2_1   (0xf)
#define shift_of_ace3_reg_main_sa_user_color2_1  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR2_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color2_1)
#define REG_ACE3_41_L                            (ACE3_REG_MAIN_SA_USER_COLOR2_1)
// h0041, bit: 11
/* Main window  ICC saturation adjustment of color3 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color3_1 (0x82)
#define mask_of_ace3_reg_main_sa_user_color3_1   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color3_1  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR3_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color3_1)
// h0042, bit: 3
/* Main window  ICC saturation adjustment of color4 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color4_1 (0x84)
#define mask_of_ace3_reg_main_sa_user_color4_1   (0xf)
#define shift_of_ace3_reg_main_sa_user_color4_1  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR4_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color4_1)
#define REG_ACE3_42_L                            (ACE3_REG_MAIN_SA_USER_COLOR4_1)
// h0042, bit: 11
/* Main window  ICC saturation adjustment of color5 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color5_1 (0x84)
#define mask_of_ace3_reg_main_sa_user_color5_1   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color5_1  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR5_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color5_1)
// h0043, bit: 3
/* Main window  ICC saturation adjustment of color6 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color6_1 (0x86)
#define mask_of_ace3_reg_main_sa_user_color6_1   (0xf)
#define shift_of_ace3_reg_main_sa_user_color6_1  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR6_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color6_1)
#define REG_ACE3_43_L                            (ACE3_REG_MAIN_SA_USER_COLOR6_1)
// h0043, bit: 11
/* Main window  ICC saturation adjustment of color7 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color7_1 (0x86)
#define mask_of_ace3_reg_main_sa_user_color7_1   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color7_1  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR7_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color7_1)
// h0044, bit: 3
/* Main window  ICC saturation adjustment of color8 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color8_1 (0x88)
#define mask_of_ace3_reg_main_sa_user_color8_1   (0xf)
#define shift_of_ace3_reg_main_sa_user_color8_1  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR8_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color8_1)
#define REG_ACE3_44_L                            (ACE3_REG_MAIN_SA_USER_COLOR8_1)
// h0044, bit: 11
/* Main window  ICC saturation adjustment of color9 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color9_1 (0x88)
#define mask_of_ace3_reg_main_sa_user_color9_1   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color9_1  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR9_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color9_1)
// h0045, bit: 3
/* Main window  ICC saturation adjustment of color10 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color10_1 (0x8a)
#define mask_of_ace3_reg_main_sa_user_color10_1   (0xf)
#define shift_of_ace3_reg_main_sa_user_color10_1  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR10_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color10_1)
#define REG_ACE3_45_L                             (ACE3_REG_MAIN_SA_USER_COLOR10_1)
// h0045, bit: 11
/* Main window  ICC saturation adjustment of color11 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color11_1 (0x8a)
#define mask_of_ace3_reg_main_sa_user_color11_1   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color11_1  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR11_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color11_1)
// h0046, bit: 3
/* Main window  ICC saturation adjustment of color12 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color12_1 (0x8c)
#define mask_of_ace3_reg_main_sa_user_color12_1   (0xf)
#define shift_of_ace3_reg_main_sa_user_color12_1  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR12_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color12_1)
#define REG_ACE3_46_L                             (ACE3_REG_MAIN_SA_USER_COLOR12_1)
// h0046, bit: 11
/* Main window  ICC saturation adjustment of color13 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color13_1 (0x8c)
#define mask_of_ace3_reg_main_sa_user_color13_1   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color13_1  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR13_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color13_1)
// h0047, bit: 3
/* Main window  ICC saturation adjustment of color14 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color14_1 (0x8e)
#define mask_of_ace3_reg_main_sa_user_color14_1   (0xf)
#define shift_of_ace3_reg_main_sa_user_color14_1  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR14_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color14_1)
#define REG_ACE3_47_L                             (ACE3_REG_MAIN_SA_USER_COLOR14_1)
// h0047, bit: 11
/* Main window  ICC saturation adjustment of color15 in section 1 */
#define offset_of_ace3_reg_main_sa_user_color15_1 (0x8e)
#define mask_of_ace3_reg_main_sa_user_color15_1   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color15_1  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR15_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color15_1)
// h0048, bit: 3
/* Main window  ICC saturation adjustment of color0 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color0_2 (0x90)
#define mask_of_ace3_reg_main_sa_user_color0_2   (0xf)
#define shift_of_ace3_reg_main_sa_user_color0_2  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR0_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color0_2)
#define REG_ACE3_48_L                            (ACE3_REG_MAIN_SA_USER_COLOR0_2)
// h0048, bit: 11
/* Main window  ICC saturation adjustment of color1 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color1_2 (0x90)
#define mask_of_ace3_reg_main_sa_user_color1_2   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color1_2  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR1_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color1_2)
// h0049, bit: 3
/* Main window  ICC saturation adjustment of color2 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color2_2 (0x92)
#define mask_of_ace3_reg_main_sa_user_color2_2   (0xf)
#define shift_of_ace3_reg_main_sa_user_color2_2  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR2_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color2_2)
#define REG_ACE3_49_L                            (ACE3_REG_MAIN_SA_USER_COLOR2_2)
// h0049, bit: 11
/* Main window  ICC saturation adjustment of color3 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color3_2 (0x92)
#define mask_of_ace3_reg_main_sa_user_color3_2   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color3_2  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR3_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color3_2)
// h004a, bit: 3
/* Main window  ICC saturation adjustment of color4 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color4_2 (0x94)
#define mask_of_ace3_reg_main_sa_user_color4_2   (0xf)
#define shift_of_ace3_reg_main_sa_user_color4_2  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR4_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color4_2)
#define REG_ACE3_4A_L                            (ACE3_REG_MAIN_SA_USER_COLOR4_2)
// h004a, bit: 11
/* Main window  ICC saturation adjustment of color5 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color5_2 (0x94)
#define mask_of_ace3_reg_main_sa_user_color5_2   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color5_2  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR5_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color5_2)
// h004b, bit: 3
/* Main window  ICC saturation adjustment of color6 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color6_2 (0x96)
#define mask_of_ace3_reg_main_sa_user_color6_2   (0xf)
#define shift_of_ace3_reg_main_sa_user_color6_2  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR6_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color6_2)
#define REG_ACE3_4B_L                            (ACE3_REG_MAIN_SA_USER_COLOR6_2)
// h004b, bit: 11
/* Main window  ICC saturation adjustment of color7 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color7_2 (0x96)
#define mask_of_ace3_reg_main_sa_user_color7_2   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color7_2  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR7_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color7_2)
// h004c, bit: 3
/* Main window  ICC saturation adjustment of color8 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color8_2 (0x98)
#define mask_of_ace3_reg_main_sa_user_color8_2   (0xf)
#define shift_of_ace3_reg_main_sa_user_color8_2  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR8_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color8_2)
#define REG_ACE3_4C_L                            (ACE3_REG_MAIN_SA_USER_COLOR8_2)
// h004c, bit: 11
/* Main window  ICC saturation adjustment of color9 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color9_2 (0x98)
#define mask_of_ace3_reg_main_sa_user_color9_2   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color9_2  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR9_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color9_2)
// h004d, bit: 3
/* Main window  ICC saturation adjustment of color10 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color10_2 (0x9a)
#define mask_of_ace3_reg_main_sa_user_color10_2   (0xf)
#define shift_of_ace3_reg_main_sa_user_color10_2  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR10_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color10_2)
#define REG_ACE3_4D_L                             (ACE3_REG_MAIN_SA_USER_COLOR10_2)
// h004d, bit: 11
/* Main window  ICC saturation adjustment of color11 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color11_2 (0x9a)
#define mask_of_ace3_reg_main_sa_user_color11_2   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color11_2  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR11_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color11_2)
// h004e, bit: 3
/* Main window  ICC saturation adjustment of color12 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color12_2 (0x9c)
#define mask_of_ace3_reg_main_sa_user_color12_2   (0xf)
#define shift_of_ace3_reg_main_sa_user_color12_2  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR12_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color12_2)
#define REG_ACE3_4E_L                             (ACE3_REG_MAIN_SA_USER_COLOR12_2)
// h004e, bit: 11
/* Main window  ICC saturation adjustment of color13 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color13_2 (0x9c)
#define mask_of_ace3_reg_main_sa_user_color13_2   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color13_2  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR13_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color13_2)
// h004f, bit: 3
/* Main window  ICC saturation adjustment of color14 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color14_2 (0x9e)
#define mask_of_ace3_reg_main_sa_user_color14_2   (0xf)
#define shift_of_ace3_reg_main_sa_user_color14_2  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR14_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color14_2)
#define REG_ACE3_4F_L                             (ACE3_REG_MAIN_SA_USER_COLOR14_2)
// h004f, bit: 11
/* Main window  ICC saturation adjustment of color15 in section 2 */
#define offset_of_ace3_reg_main_sa_user_color15_2 (0x9e)
#define mask_of_ace3_reg_main_sa_user_color15_2   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color15_2  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR15_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color15_2)
// h0050, bit: 1
/* Main window ICC adaptive Y mode  in different color enable*/
#define offset_of_ace3_reg_main_icc_y_mode_diff_color_en (0xa0)
#define mask_of_ace3_reg_main_icc_y_mode_diff_color_en   (0x2)
#define shift_of_ace3_reg_main_icc_y_mode_diff_color_en  (1)
#define ACE3_REG_MAIN_ICC_Y_MODE_DIFF_COLOR_EN           (REG_ACE3_BASE + offset_of_ace3_reg_main_icc_y_mode_diff_color_en)
#define REG_ACE3_50_L                                    (ACE3_REG_MAIN_ICC_Y_MODE_DIFF_COLOR_EN)
// h0050, bit: 7
/* Main window ICC adaptive Y mode enable*/
#define offset_of_ace3_reg_main_icc_y_mode_en (0xa0)
#define mask_of_ace3_reg_main_icc_y_mode_en   (0x80)
#define shift_of_ace3_reg_main_icc_y_mode_en  (7)
#define ACE3_REG_MAIN_ICC_Y_MODE_EN           (REG_ACE3_BASE + offset_of_ace3_reg_main_icc_y_mode_en)
// h0051, bit: 15
/* Main window ICC decrease saturation  in section 0,
 */
#define offset_of_ace3_reg_main_sign_sa_user_0 (0xa2)
#define mask_of_ace3_reg_main_sign_sa_user_0   (0xffff)
#define shift_of_ace3_reg_main_sign_sa_user_0  (0)
#define ACE3_REG_MAIN_SIGN_SA_USER_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sign_sa_user_0)
#define REG_ACE3_51_L                          (ACE3_REG_MAIN_SIGN_SA_USER_0)
#define REG_ACE3_52_L                          (REG_ACE3_BASE + 0xa4)
// h0053, bit: 15
/* Main window ICC decrease saturation in section 1 ,
 */
#define offset_of_ace3_reg_main_sign_sa_user_1 (0xa6)
#define mask_of_ace3_reg_main_sign_sa_user_1   (0xffff)
#define shift_of_ace3_reg_main_sign_sa_user_1  (0)
#define ACE3_REG_MAIN_SIGN_SA_USER_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sign_sa_user_1)
#define REG_ACE3_53_L                          (ACE3_REG_MAIN_SIGN_SA_USER_1)
#define REG_ACE3_54_L                          (REG_ACE3_BASE + 0xa8)
// h0055, bit: 15
/* Main window ICC decrease saturation in section 2,
 */
#define offset_of_ace3_reg_main_sign_sa_user_2 (0xaa)
#define mask_of_ace3_reg_main_sign_sa_user_2   (0xffff)
#define shift_of_ace3_reg_main_sign_sa_user_2  (0)
#define ACE3_REG_MAIN_SIGN_SA_USER_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sign_sa_user_2)
#define REG_ACE3_55_L                          (ACE3_REG_MAIN_SIGN_SA_USER_2)
#define REG_ACE3_56_L                          (REG_ACE3_BASE + 0xac)
#define REG_ACE3_57_L                          (REG_ACE3_BASE + 0xae)
// h0058, bit: 15
/* IHC color test mode,
16 colors [15:0]*/
#define offset_of_ace3_reg_ihc_color_test (0xb0)
#define mask_of_ace3_reg_ihc_color_test   (0xffff)
#define shift_of_ace3_reg_ihc_color_test  (0)
#define ACE3_REG_IHC_COLOR_TEST           (REG_ACE3_BASE + offset_of_ace3_reg_ihc_color_test)
#define REG_ACE3_58_L                     (ACE3_REG_IHC_COLOR_TEST)
// h0059, bit: 15
/* ICC color test mode,
16 colors [15:0]*/
#define offset_of_ace3_reg_icc_color_test (0xb2)
#define mask_of_ace3_reg_icc_color_test   (0xffff)
#define shift_of_ace3_reg_icc_color_test  (0)
#define ACE3_REG_ICC_COLOR_TEST           (REG_ACE3_BASE + offset_of_ace3_reg_icc_color_test)
#define REG_ACE3_59_L                     (ACE3_REG_ICC_COLOR_TEST)
#define REG_ACE3_5A_L                     (REG_ACE3_BASE + 0xb4)
#define REG_ACE3_5B_L                     (REG_ACE3_BASE + 0xb6)
#define REG_ACE3_5C_L                     (REG_ACE3_BASE + 0xb8)
#define REG_ACE3_5D_L                     (REG_ACE3_BASE + 0xba)
#define REG_ACE3_5E_L                     (REG_ACE3_BASE + 0xbc)
#define REG_ACE3_5F_L                     (REG_ACE3_BASE + 0xbe)
// h0060, bit: 0
/* ICC dither enable*/
#define offset_of_ace3_reg_icc_dither_en (0xc0)
#define mask_of_ace3_reg_icc_dither_en   (0x1)
#define shift_of_ace3_reg_icc_dither_en  (0)
#define ACE3_REG_ICC_DITHER_EN           (REG_ACE3_BASE + offset_of_ace3_reg_icc_dither_en)
#define REG_ACE3_60_L                    (ACE3_REG_ICC_DITHER_EN)
// h0060, bit: 1
/* reserved*/
#define offset_of_ace3_reg_icc_low_reserve1 (0xc0)
#define mask_of_ace3_reg_icc_low_reserve1   (0x2)
#define shift_of_ace3_reg_icc_low_reserve1  (1)
#define ACE3_REG_ICC_LOW_RESERVE1           (REG_ACE3_BASE + offset_of_ace3_reg_icc_low_reserve1)
// h0060, bit: 5
/* reserved*/
#define offset_of_ace3_reg_icc_low_reserve2 (0xc0)
#define mask_of_ace3_reg_icc_low_reserve2   (0x30)
#define shift_of_ace3_reg_icc_low_reserve2  (4)
#define ACE3_REG_ICC_LOW_RESERVE2           (REG_ACE3_BASE + offset_of_ace3_reg_icc_low_reserve2)
// h0060, bit: 6
/* Main window ICC enable*/
#define offset_of_ace3_reg_main_icc_en (0xc0)
#define mask_of_ace3_reg_main_icc_en   (0x40)
#define shift_of_ace3_reg_main_icc_en  (6)
#define ACE3_REG_MAIN_ICC_EN           (REG_ACE3_BASE + offset_of_ace3_reg_main_icc_en)
// h0060, bit: 7
/* Main window cbcr to uv enable*/
#define offset_of_ace3_reg_main_cbcr_to_uv (0xc0)
#define mask_of_ace3_reg_main_cbcr_to_uv   (0x80)
#define shift_of_ace3_reg_main_cbcr_to_uv  (7)
#define ACE3_REG_MAIN_CBCR_TO_UV           (REG_ACE3_BASE + offset_of_ace3_reg_main_cbcr_to_uv)
// h0060, bit: 15
/* reserved*/
#define offset_of_ace3_reg_icc_reserved (0xc0)
#define mask_of_ace3_reg_icc_reserved   (0xff00)
#define shift_of_ace3_reg_icc_reserved  (8)
#define ACE3_REG_ICC_RESERVED           (REG_ACE3_BASE + offset_of_ace3_reg_icc_reserved)
// h0061, bit: 3
/* Main window  ICC saturation adjustment of color 0 */
#define offset_of_ace3_reg_main_sa_user_color0 (0xc2)
#define mask_of_ace3_reg_main_sa_user_color0   (0xf)
#define shift_of_ace3_reg_main_sa_user_color0  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR0           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color0)
#define REG_ACE3_61_L                          (ACE3_REG_MAIN_SA_USER_COLOR0)
// h0061, bit: 11
/* Main window  ICC saturation adjustment of color 1 */
#define offset_of_ace3_reg_main_sa_user_color1 (0xc2)
#define mask_of_ace3_reg_main_sa_user_color1   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color1  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR1           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color1)
// h0062, bit: 3
/* Main window  ICC saturation adjustment of color 2 */
#define offset_of_ace3_reg_main_sa_user_color2 (0xc4)
#define mask_of_ace3_reg_main_sa_user_color2   (0xf)
#define shift_of_ace3_reg_main_sa_user_color2  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR2           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color2)
#define REG_ACE3_62_L                          (ACE3_REG_MAIN_SA_USER_COLOR2)
// h0062, bit: 11
/* Main window  ICC saturation adjustment of color 3 */
#define offset_of_ace3_reg_main_sa_user_color3 (0xc4)
#define mask_of_ace3_reg_main_sa_user_color3   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color3  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR3           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color3)
// h0063, bit: 3
/* Main window  ICC saturation adjustment of color 4 */
#define offset_of_ace3_reg_main_sa_user_color4 (0xc6)
#define mask_of_ace3_reg_main_sa_user_color4   (0xf)
#define shift_of_ace3_reg_main_sa_user_color4  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR4           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color4)
#define REG_ACE3_63_L                          (ACE3_REG_MAIN_SA_USER_COLOR4)
// h0063, bit: 11
/* Main window  ICC saturation adjustment of color 5 */
#define offset_of_ace3_reg_main_sa_user_color5 (0xc6)
#define mask_of_ace3_reg_main_sa_user_color5   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color5  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR5           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color5)
// h0064, bit: 3
/* Main window  ICC saturation adjustment of color 6 */
#define offset_of_ace3_reg_main_sa_user_color6 (0xc8)
#define mask_of_ace3_reg_main_sa_user_color6   (0xf)
#define shift_of_ace3_reg_main_sa_user_color6  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR6           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color6)
#define REG_ACE3_64_L                          (ACE3_REG_MAIN_SA_USER_COLOR6)
// h0064, bit: 11
/* Main window  ICC saturation adjustment of color 7 */
#define offset_of_ace3_reg_main_sa_user_color7 (0xc8)
#define mask_of_ace3_reg_main_sa_user_color7   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color7  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR7           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color7)
// h0065, bit: 3
/* Main window  ICC saturation adjustment of color 8*/
#define offset_of_ace3_reg_main_sa_user_color8 (0xca)
#define mask_of_ace3_reg_main_sa_user_color8   (0xf)
#define shift_of_ace3_reg_main_sa_user_color8  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR8           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color8)
#define REG_ACE3_65_L                          (ACE3_REG_MAIN_SA_USER_COLOR8)
// h0065, bit: 11
/* Main window  ICC saturation adjustment of color 9 */
#define offset_of_ace3_reg_main_sa_user_color9 (0xca)
#define mask_of_ace3_reg_main_sa_user_color9   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color9  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR9           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color9)
// h0066, bit: 3
/* Main window  ICC saturation adjustment of color 10*/
#define offset_of_ace3_reg_main_sa_user_color10 (0xcc)
#define mask_of_ace3_reg_main_sa_user_color10   (0xf)
#define shift_of_ace3_reg_main_sa_user_color10  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR10           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color10)
#define REG_ACE3_66_L                           (ACE3_REG_MAIN_SA_USER_COLOR10)
// h0066, bit: 11
/* Main window  ICC saturation adjustment of color 11*/
#define offset_of_ace3_reg_main_sa_user_color11 (0xcc)
#define mask_of_ace3_reg_main_sa_user_color11   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color11  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR11           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color11)
// h0067, bit: 3
/* Main window  ICC saturation adjustment of color 12 */
#define offset_of_ace3_reg_main_sa_user_color12 (0xce)
#define mask_of_ace3_reg_main_sa_user_color12   (0xf)
#define shift_of_ace3_reg_main_sa_user_color12  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR12           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color12)
#define REG_ACE3_67_L                           (ACE3_REG_MAIN_SA_USER_COLOR12)
// h0067, bit: 11
/* Main window  ICC saturation adjustment of color 13 */
#define offset_of_ace3_reg_main_sa_user_color13 (0xce)
#define mask_of_ace3_reg_main_sa_user_color13   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color13  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR13           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color13)
// h0068, bit: 3
/* Main window  ICC saturation adjustment of color 14 */
#define offset_of_ace3_reg_main_sa_user_color14 (0xd0)
#define mask_of_ace3_reg_main_sa_user_color14   (0xf)
#define shift_of_ace3_reg_main_sa_user_color14  (0)
#define ACE3_REG_MAIN_SA_USER_COLOR14           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color14)
#define REG_ACE3_68_L                           (ACE3_REG_MAIN_SA_USER_COLOR14)
// h0068, bit: 11
/* Main window  ICC saturation adjustment of color 15 */
#define offset_of_ace3_reg_main_sa_user_color15 (0xd0)
#define mask_of_ace3_reg_main_sa_user_color15   (0xf00)
#define shift_of_ace3_reg_main_sa_user_color15  (8)
#define ACE3_REG_MAIN_SA_USER_COLOR15           (REG_ACE3_BASE + offset_of_ace3_reg_main_sa_user_color15)
// h0069, bit: 15
/* Main window ICC decrease saturation,
 */
#define offset_of_ace3_reg_main_sign_sa_user (0xd2)
#define mask_of_ace3_reg_main_sign_sa_user   (0xffff)
#define shift_of_ace3_reg_main_sign_sa_user  (0)
#define ACE3_REG_MAIN_SIGN_SA_USER           (REG_ACE3_BASE + offset_of_ace3_reg_main_sign_sa_user)
#define REG_ACE3_69_L                        (ACE3_REG_MAIN_SIGN_SA_USER)
#define REG_ACE3_6A_L                        (REG_ACE3_BASE + 0xd4)
// h006b, bit: 4
/* ICC decrease saturation common gain,
.XXXXX*/
#define offset_of_ace3_reg_common_minus_gain (0xd6)
#define mask_of_ace3_reg_common_minus_gain   (0x1f)
#define shift_of_ace3_reg_common_minus_gain  (0)
#define ACE3_REG_COMMON_MINUS_GAIN           (REG_ACE3_BASE + offset_of_ace3_reg_common_minus_gain)
#define REG_ACE3_6B_L                        (ACE3_REG_COMMON_MINUS_GAIN)
// h006b, bit: 14
/* ICC decrease saturation minimum threshold,
.XXXXXXX*/
#define offset_of_ace3_reg_sa_min (0xd6)
#define mask_of_ace3_reg_sa_min   (0x7f00)
#define shift_of_ace3_reg_sa_min  (8)
#define ACE3_REG_SA_MIN           (REG_ACE3_BASE + offset_of_ace3_reg_sa_min)
// h006c, bit: 15
/* Main window ICC step, dafualt=0, one is user_gain x2
 */
#define offset_of_ace3_reg_main_step_sa_user (0xd8)
#define mask_of_ace3_reg_main_step_sa_user   (0xffff)
#define shift_of_ace3_reg_main_step_sa_user  (0)
#define ACE3_REG_MAIN_STEP_SA_USER           (REG_ACE3_BASE + offset_of_ace3_reg_main_step_sa_user)
#define REG_ACE3_6C_L                        (ACE3_REG_MAIN_STEP_SA_USER)
#define REG_ACE3_6D_L                        (REG_ACE3_BASE + 0xda)
// h006e, bit: 15
/* reserved*/
#define offset_of_ace3_reg_reserved_icc_low_y (0xdc)
#define mask_of_ace3_reg_reserved_icc_low_y   (0xffff)
#define shift_of_ace3_reg_reserved_icc_low_y  (0)
#define ACE3_REG_RESERVED_ICC_LOW_Y           (REG_ACE3_BASE + offset_of_ace3_reg_reserved_icc_low_y)
#define REG_ACE3_6E_L                         (ACE3_REG_RESERVED_ICC_LOW_Y)
#define REG_ACE3_6F_L                         (REG_ACE3_BASE + 0xde)
// h0070, bit: 0
/* Main window coring adaptive y enable*/
#define offset_of_ace3_reg_main_coring_adp_y_en (0xe0)
#define mask_of_ace3_reg_main_coring_adp_y_en   (0x1)
#define shift_of_ace3_reg_main_coring_adp_y_en  (0)
#define ACE3_REG_MAIN_CORING_ADP_Y_EN           (REG_ACE3_BASE + offset_of_ace3_reg_main_coring_adp_y_en)
#define REG_ACE3_70_L                           (ACE3_REG_MAIN_CORING_ADP_Y_EN)
// h0070, bit: 1
/* Main window coring adaptive y alpha low pass filter enable*/
#define offset_of_ace3_reg_main_coring_adp_y_alpha_lpf_en (0xe0)
#define mask_of_ace3_reg_main_coring_adp_y_alpha_lpf_en   (0x2)
#define shift_of_ace3_reg_main_coring_adp_y_alpha_lpf_en  (1)
#define ACE3_REG_MAIN_CORING_ADP_Y_ALPHA_LPF_EN           (REG_ACE3_BASE + offset_of_ace3_reg_main_coring_adp_y_alpha_lpf_en)
// h0070, bit: 5
/* Main window coring adaptive y alpha step*/
#define offset_of_ace3_reg_main_coring_adp_y_step (0xe0)
#define mask_of_ace3_reg_main_coring_adp_y_step   (0x30)
#define shift_of_ace3_reg_main_coring_adp_y_step  (4)
#define ACE3_REG_MAIN_CORING_ADP_Y_STEP           (REG_ACE3_BASE + offset_of_ace3_reg_main_coring_adp_y_step)
// h0070, bit: 15
/* Main window coring adaptive y low threshold */
#define offset_of_ace3_reg_main_coring_y_low_thrd (0xe0)
#define mask_of_ace3_reg_main_coring_y_low_thrd   (0xff00)
#define shift_of_ace3_reg_main_coring_y_low_thrd  (8)
#define ACE3_REG_MAIN_CORING_Y_LOW_THRD           (REG_ACE3_BASE + offset_of_ace3_reg_main_coring_y_low_thrd)
// h0071, bit: 5
/* Main window coring adaptive y alpha LUT 0*/
#define offset_of_ace3_reg_main_coring_adp_y_alpha_lut_0 (0xe2)
#define mask_of_ace3_reg_main_coring_adp_y_alpha_lut_0   (0x3f)
#define shift_of_ace3_reg_main_coring_adp_y_alpha_lut_0  (0)
#define ACE3_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_0           (REG_ACE3_BASE + offset_of_ace3_reg_main_coring_adp_y_alpha_lut_0)
#define REG_ACE3_71_L                                    (ACE3_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_0)
// h0071, bit: 13
/* Main window coring adaptive y alpha LUT 1*/
#define offset_of_ace3_reg_main_coring_adp_y_alpha_lut_1 (0xe2)
#define mask_of_ace3_reg_main_coring_adp_y_alpha_lut_1   (0x3f00)
#define shift_of_ace3_reg_main_coring_adp_y_alpha_lut_1  (8)
#define ACE3_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_1           (REG_ACE3_BASE + offset_of_ace3_reg_main_coring_adp_y_alpha_lut_1)
// h0072, bit: 5
/* Main window coring adaptive y alpha LUT 2*/
#define offset_of_ace3_reg_main_coring_adp_y_alpha_lut_2 (0xe4)
#define mask_of_ace3_reg_main_coring_adp_y_alpha_lut_2   (0x3f)
#define shift_of_ace3_reg_main_coring_adp_y_alpha_lut_2  (0)
#define ACE3_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_2           (REG_ACE3_BASE + offset_of_ace3_reg_main_coring_adp_y_alpha_lut_2)
#define REG_ACE3_72_L                                    (ACE3_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_2)
// h0072, bit: 13
/* Main window coring adaptive y alpha LUT 3*/
#define offset_of_ace3_reg_main_coring_adp_y_alpha_lut_3 (0xe4)
#define mask_of_ace3_reg_main_coring_adp_y_alpha_lut_3   (0x3f00)
#define shift_of_ace3_reg_main_coring_adp_y_alpha_lut_3  (8)
#define ACE3_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_3           (REG_ACE3_BASE + offset_of_ace3_reg_main_coring_adp_y_alpha_lut_3)
// h0073, bit: 5
/* Main window coring adaptive y alpha LUT 4*/
#define offset_of_ace3_reg_main_coring_adp_y_alpha_lut_4 (0xe6)
#define mask_of_ace3_reg_main_coring_adp_y_alpha_lut_4   (0x3f)
#define shift_of_ace3_reg_main_coring_adp_y_alpha_lut_4  (0)
#define ACE3_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_4           (REG_ACE3_BASE + offset_of_ace3_reg_main_coring_adp_y_alpha_lut_4)
#define REG_ACE3_73_L                                    (ACE3_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_4)
// h0073, bit: 13
/* Main window coring adaptive y alpha LUT 5*/
#define offset_of_ace3_reg_main_coring_adp_y_alpha_lut_5 (0xe6)
#define mask_of_ace3_reg_main_coring_adp_y_alpha_lut_5   (0x3f00)
#define shift_of_ace3_reg_main_coring_adp_y_alpha_lut_5  (8)
#define ACE3_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_5           (REG_ACE3_BASE + offset_of_ace3_reg_main_coring_adp_y_alpha_lut_5)
// h0074, bit: 5
/* Main window coring adaptive y alpha LUT 6*/
#define offset_of_ace3_reg_main_coring_adp_y_alpha_lut_6 (0xe8)
#define mask_of_ace3_reg_main_coring_adp_y_alpha_lut_6   (0x3f)
#define shift_of_ace3_reg_main_coring_adp_y_alpha_lut_6  (0)
#define ACE3_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_6           (REG_ACE3_BASE + offset_of_ace3_reg_main_coring_adp_y_alpha_lut_6)
#define REG_ACE3_74_L                                    (ACE3_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_6)
// h0074, bit: 13
/* Main window coring adaptive y alpha LUT 7*/
#define offset_of_ace3_reg_main_coring_adp_y_alpha_lut_7 (0xe8)
#define mask_of_ace3_reg_main_coring_adp_y_alpha_lut_7   (0x3f00)
#define shift_of_ace3_reg_main_coring_adp_y_alpha_lut_7  (8)
#define ACE3_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_7           (REG_ACE3_BASE + offset_of_ace3_reg_main_coring_adp_y_alpha_lut_7)
#define REG_ACE3_75_L                                    (REG_ACE3_BASE + 0xea)
#define REG_ACE3_76_L                                    (REG_ACE3_BASE + 0xec)
#define REG_ACE3_77_L                                    (REG_ACE3_BASE + 0xee)
#define REG_ACE3_78_L                                    (REG_ACE3_BASE + 0xf0)
#define REG_ACE3_79_L                                    (REG_ACE3_BASE + 0xf2)
#define REG_ACE3_7A_L                                    (REG_ACE3_BASE + 0xf4)
#define REG_ACE3_7B_L                                    (REG_ACE3_BASE + 0xf6)
#define REG_ACE3_7C_L                                    (REG_ACE3_BASE + 0xf8)
#define REG_ACE3_7D_L                                    (REG_ACE3_BASE + 0xfa)
#define REG_ACE3_7E_L                                    (REG_ACE3_BASE + 0xfc)
#define REG_ACE3_7F_L                                    (REG_ACE3_BASE + 0xfe)
#define REG_ACE_00_L                                     (REG_ACE_BASE + 0x0)
#define REG_ACE_01_L                                     (REG_ACE_BASE + 0x2)
#define REG_ACE_02_L                                     (REG_ACE_BASE + 0x4)
#define REG_ACE_03_L                                     (REG_ACE_BASE + 0x6)
#define REG_ACE_04_L                                     (REG_ACE_BASE + 0x8)
#define REG_ACE_05_L                                     (REG_ACE_BASE + 0xa)
#define REG_ACE_06_L                                     (REG_ACE_BASE + 0xc)
#define REG_ACE_07_L                                     (REG_ACE_BASE + 0xe)
#define REG_ACE_08_L                                     (REG_ACE_BASE + 0x10)
#define REG_ACE_09_L                                     (REG_ACE_BASE + 0x12)
#define REG_ACE_0A_L                                     (REG_ACE_BASE + 0x14)
#define REG_ACE_0B_L                                     (REG_ACE_BASE + 0x16)
#define REG_ACE_0C_L                                     (REG_ACE_BASE + 0x18)
#define REG_ACE_0D_L                                     (REG_ACE_BASE + 0x1a)
#define REG_ACE_0E_L                                     (REG_ACE_BASE + 0x1c)
#define REG_ACE_0F_L                                     (REG_ACE_BASE + 0x1e)
// h0010, bit: 0
/* Main window FCC region 1 enable*/
#define offset_of_ace_reg_main_fcc_1t_en (0x20)
#define mask_of_ace_reg_main_fcc_1t_en   (0x1)
#define shift_of_ace_reg_main_fcc_1t_en  (0)
#define ACE_REG_MAIN_FCC_1T_EN           (REG_ACE_BASE + offset_of_ace_reg_main_fcc_1t_en)
#define REG_ACE_10_L                     (ACE_REG_MAIN_FCC_1T_EN)
// h0010, bit: 1
/* Main window FCC region 2 enable*/
#define offset_of_ace_reg_main_fcc_2t_en (0x20)
#define mask_of_ace_reg_main_fcc_2t_en   (0x2)
#define shift_of_ace_reg_main_fcc_2t_en  (1)
#define ACE_REG_MAIN_FCC_2T_EN           (REG_ACE_BASE + offset_of_ace_reg_main_fcc_2t_en)
// h0010, bit: 2
/* Main window FCC region 3 enable*/
#define offset_of_ace_reg_main_fcc_3t_en (0x20)
#define mask_of_ace_reg_main_fcc_3t_en   (0x4)
#define shift_of_ace_reg_main_fcc_3t_en  (2)
#define ACE_REG_MAIN_FCC_3T_EN           (REG_ACE_BASE + offset_of_ace_reg_main_fcc_3t_en)
// h0010, bit: 3
/* Main window FCC region 4 enable*/
#define offset_of_ace_reg_main_fcc_4t_en (0x20)
#define mask_of_ace_reg_main_fcc_4t_en   (0x8)
#define shift_of_ace_reg_main_fcc_4t_en  (3)
#define ACE_REG_MAIN_FCC_4T_EN           (REG_ACE_BASE + offset_of_ace_reg_main_fcc_4t_en)
// h0010, bit: 4
/* Main window FCC region 5 enable*/
#define offset_of_ace_reg_main_fcc_5t_en (0x20)
#define mask_of_ace_reg_main_fcc_5t_en   (0x10)
#define shift_of_ace_reg_main_fcc_5t_en  (4)
#define ACE_REG_MAIN_FCC_5T_EN           (REG_ACE_BASE + offset_of_ace_reg_main_fcc_5t_en)
// h0010, bit: 5
/* Main window FCC region 6 enable*/
#define offset_of_ace_reg_main_fcc_6t_en (0x20)
#define mask_of_ace_reg_main_fcc_6t_en   (0x20)
#define shift_of_ace_reg_main_fcc_6t_en  (5)
#define ACE_REG_MAIN_FCC_6T_EN           (REG_ACE_BASE + offset_of_ace_reg_main_fcc_6t_en)
// h0010, bit: 6
/* Main window FCC region 7 enable*/
#define offset_of_ace_reg_main_fcc_7t_en (0x20)
#define mask_of_ace_reg_main_fcc_7t_en   (0x40)
#define shift_of_ace_reg_main_fcc_7t_en  (6)
#define ACE_REG_MAIN_FCC_7T_EN           (REG_ACE_BASE + offset_of_ace_reg_main_fcc_7t_en)
// h0010, bit: 7
/* Main window FCC region 8 enable*/
#define offset_of_ace_reg_main_fcc_8t_en (0x20)
#define mask_of_ace_reg_main_fcc_8t_en   (0x80)
#define shift_of_ace_reg_main_fcc_8t_en  (7)
#define ACE_REG_MAIN_FCC_8T_EN           (REG_ACE_BASE + offset_of_ace_reg_main_fcc_8t_en)
// h0010, bit: 8
/* Main window FCC window 9 enable*/
#define offset_of_ace_reg_main_fcc_9t_en (0x20)
#define mask_of_ace_reg_main_fcc_9t_en   (0x100)
#define shift_of_ace_reg_main_fcc_9t_en  (8)
#define ACE_REG_MAIN_FCC_9T_EN           (REG_ACE_BASE + offset_of_ace_reg_main_fcc_9t_en)
// h0010, bit: 9
/* Main window FCC window 9 priority one enable*/
#define offset_of_ace_reg_main_fcc_9t_first_en (0x20)
#define mask_of_ace_reg_main_fcc_9t_first_en   (0x200)
#define shift_of_ace_reg_main_fcc_9t_first_en  (9)
#define ACE_REG_MAIN_FCC_9T_FIRST_EN           (REG_ACE_BASE + offset_of_ace_reg_main_fcc_9t_first_en)
// h0010, bit: 13
/* reserved*/
#define offset_of_ace_reg_fcc_reserved_1 (0x20)
#define mask_of_ace_reg_fcc_reserved_1   (0x3c00)
#define shift_of_ace_reg_fcc_reserved_1  (10)
#define ACE_REG_FCC_RESERVED_1           (REG_ACE_BASE + offset_of_ace_reg_fcc_reserved_1)
// h0010, bit: 14
/* FCC dither bit enable*/
#define offset_of_ace_reg_fcc_dither_en (0x20)
#define mask_of_ace_reg_fcc_dither_en   (0x4000)
#define shift_of_ace_reg_fcc_dither_en  (14)
#define ACE_REG_FCC_DITHER_EN           (REG_ACE_BASE + offset_of_ace_reg_fcc_dither_en)
// h0010, bit: 15
/* Region 1 dark mode enable*/
#define offset_of_ace_reg_fcc_win1_dark_mode_en (0x20)
#define mask_of_ace_reg_fcc_win1_dark_mode_en   (0x8000)
#define shift_of_ace_reg_fcc_win1_dark_mode_en  (15)
#define ACE_REG_FCC_WIN1_DARK_MODE_EN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win1_dark_mode_en)
// h0011, bit: 15
/* reserved*/
#define offset_of_ace_reg_fcc_reserved_2 (0x22)
#define mask_of_ace_reg_fcc_reserved_2   (0xfc00)
#define shift_of_ace_reg_fcc_reserved_2  (10)
#define ACE_REG_FCC_RESERVED_2           (REG_ACE_BASE + offset_of_ace_reg_fcc_reserved_2)
#define REG_ACE_11_L                     (ACE_REG_FCC_RESERVED_2)
// h0012, bit: 1
/* Main window FCC boundary limit distance
#0 : disable
#1: x4
#2: x2
#3: x1*/
#define offset_of_ace_reg_main_fcc_bdry_dist (0x24)
#define mask_of_ace_reg_main_fcc_bdry_dist   (0x3)
#define shift_of_ace_reg_main_fcc_bdry_dist  (0)
#define ACE_REG_MAIN_FCC_BDRY_DIST           (REG_ACE_BASE + offset_of_ace_reg_main_fcc_bdry_dist)
#define REG_ACE_12_L                         (ACE_REG_MAIN_FCC_BDRY_DIST)
// h0013, bit: 7
/* FCC region 1 cb target, when Y=10*/
#define offset_of_ace_reg_fcc_cb_t1_y_10 (0x26)
#define mask_of_ace_reg_fcc_cb_t1_y_10   (0xff)
#define shift_of_ace_reg_fcc_cb_t1_y_10  (0)
#define ACE_REG_FCC_CB_T1_Y_10           (REG_ACE_BASE + offset_of_ace_reg_fcc_cb_t1_y_10)
#define REG_ACE_13_L                     (ACE_REG_FCC_CB_T1_Y_10)
// h0013, bit: 15
/* FCC region 1 cr target, when Y=10*/
#define offset_of_ace_reg_fcc_cr_t1_y_10 (0x26)
#define mask_of_ace_reg_fcc_cr_t1_y_10   (0xff00)
#define shift_of_ace_reg_fcc_cr_t1_y_10  (8)
#define ACE_REG_FCC_CR_T1_Y_10           (REG_ACE_BASE + offset_of_ace_reg_fcc_cr_t1_y_10)
// h0014, bit: 7
/* FCC region 1 cb target, when Y=20*/
#define offset_of_ace_reg_fcc_cb_t1_y_20 (0x28)
#define mask_of_ace_reg_fcc_cb_t1_y_20   (0xff)
#define shift_of_ace_reg_fcc_cb_t1_y_20  (0)
#define ACE_REG_FCC_CB_T1_Y_20           (REG_ACE_BASE + offset_of_ace_reg_fcc_cb_t1_y_20)
#define REG_ACE_14_L                     (ACE_REG_FCC_CB_T1_Y_20)
// h0014, bit: 15
/* FCC region 1 cr target, when Y=20*/
#define offset_of_ace_reg_fcc_cr_t1_y_20 (0x28)
#define mask_of_ace_reg_fcc_cr_t1_y_20   (0xff00)
#define shift_of_ace_reg_fcc_cr_t1_y_20  (8)
#define ACE_REG_FCC_CR_T1_Y_20           (REG_ACE_BASE + offset_of_ace_reg_fcc_cr_t1_y_20)
// h0015, bit: 7
/* FCC region 1 cb target, when Y=30*/
#define offset_of_ace_reg_fcc_cb_t1_y_30 (0x2a)
#define mask_of_ace_reg_fcc_cb_t1_y_30   (0xff)
#define shift_of_ace_reg_fcc_cb_t1_y_30  (0)
#define ACE_REG_FCC_CB_T1_Y_30           (REG_ACE_BASE + offset_of_ace_reg_fcc_cb_t1_y_30)
#define REG_ACE_15_L                     (ACE_REG_FCC_CB_T1_Y_30)
// h0015, bit: 15
/* FCC region 1 cr target, when Y=30*/
#define offset_of_ace_reg_fcc_cr_t1_y_30 (0x2a)
#define mask_of_ace_reg_fcc_cr_t1_y_30   (0xff00)
#define shift_of_ace_reg_fcc_cr_t1_y_30  (8)
#define ACE_REG_FCC_CR_T1_Y_30           (REG_ACE_BASE + offset_of_ace_reg_fcc_cr_t1_y_30)
// h0016, bit: 7
/* FCC region 1 cb target, when Y=40*/
#define offset_of_ace_reg_fcc_cb_t1_y_40 (0x2c)
#define mask_of_ace_reg_fcc_cb_t1_y_40   (0xff)
#define shift_of_ace_reg_fcc_cb_t1_y_40  (0)
#define ACE_REG_FCC_CB_T1_Y_40           (REG_ACE_BASE + offset_of_ace_reg_fcc_cb_t1_y_40)
#define REG_ACE_16_L                     (ACE_REG_FCC_CB_T1_Y_40)
// h0016, bit: 15
/* FCC region 1 cr target, when Y=40*/
#define offset_of_ace_reg_fcc_cr_t1_y_40 (0x2c)
#define mask_of_ace_reg_fcc_cr_t1_y_40   (0xff00)
#define shift_of_ace_reg_fcc_cr_t1_y_40  (8)
#define ACE_REG_FCC_CR_T1_Y_40           (REG_ACE_BASE + offset_of_ace_reg_fcc_cr_t1_y_40)
// h0017, bit: 7
/* FCC region 1 cb target, when Y=50*/
#define offset_of_ace_reg_fcc_cb_t1_y_50 (0x2e)
#define mask_of_ace_reg_fcc_cb_t1_y_50   (0xff)
#define shift_of_ace_reg_fcc_cb_t1_y_50  (0)
#define ACE_REG_FCC_CB_T1_Y_50           (REG_ACE_BASE + offset_of_ace_reg_fcc_cb_t1_y_50)
#define REG_ACE_17_L                     (ACE_REG_FCC_CB_T1_Y_50)
// h0017, bit: 15
/* FCC region 1 cr target, when Y=50*/
#define offset_of_ace_reg_fcc_cr_t1_y_50 (0x2e)
#define mask_of_ace_reg_fcc_cr_t1_y_50   (0xff00)
#define shift_of_ace_reg_fcc_cr_t1_y_50  (8)
#define ACE_REG_FCC_CR_T1_Y_50           (REG_ACE_BASE + offset_of_ace_reg_fcc_cr_t1_y_50)
// h0018, bit: 7
/* FCC region 1 cb target*/
#define offset_of_ace_reg_fcc_cb_t1 (0x30)
#define mask_of_ace_reg_fcc_cb_t1   (0xff)
#define shift_of_ace_reg_fcc_cb_t1  (0)
#define ACE_REG_FCC_CB_T1           (REG_ACE_BASE + offset_of_ace_reg_fcc_cb_t1)
#define REG_ACE_18_L                (ACE_REG_FCC_CB_T1)
// h0018, bit: 15
/* FCC region 1 cr target*/
#define offset_of_ace_reg_fcc_cr_t1 (0x30)
#define mask_of_ace_reg_fcc_cr_t1   (0xff00)
#define shift_of_ace_reg_fcc_cr_t1  (8)
#define ACE_REG_FCC_CR_T1           (REG_ACE_BASE + offset_of_ace_reg_fcc_cr_t1)
// h0019, bit: 7
/* FCC region 2 cb target*/
#define offset_of_ace_reg_fcc_cb_t2 (0x32)
#define mask_of_ace_reg_fcc_cb_t2   (0xff)
#define shift_of_ace_reg_fcc_cb_t2  (0)
#define ACE_REG_FCC_CB_T2           (REG_ACE_BASE + offset_of_ace_reg_fcc_cb_t2)
#define REG_ACE_19_L                (ACE_REG_FCC_CB_T2)
// h0019, bit: 15
/* FCC region 2 cr target*/
#define offset_of_ace_reg_fcc_cr_t2 (0x32)
#define mask_of_ace_reg_fcc_cr_t2   (0xff00)
#define shift_of_ace_reg_fcc_cr_t2  (8)
#define ACE_REG_FCC_CR_T2           (REG_ACE_BASE + offset_of_ace_reg_fcc_cr_t2)
// h001a, bit: 7
/* FCC region 3 cb target*/
#define offset_of_ace_reg_fcc_cb_t3 (0x34)
#define mask_of_ace_reg_fcc_cb_t3   (0xff)
#define shift_of_ace_reg_fcc_cb_t3  (0)
#define ACE_REG_FCC_CB_T3           (REG_ACE_BASE + offset_of_ace_reg_fcc_cb_t3)
#define REG_ACE_1A_L                (ACE_REG_FCC_CB_T3)
// h001a, bit: 15
/* FCC region 3 cr target*/
#define offset_of_ace_reg_fcc_cr_t3 (0x34)
#define mask_of_ace_reg_fcc_cr_t3   (0xff00)
#define shift_of_ace_reg_fcc_cr_t3  (8)
#define ACE_REG_FCC_CR_T3           (REG_ACE_BASE + offset_of_ace_reg_fcc_cr_t3)
// h001b, bit: 7
/* FCC region 4 cb target*/
#define offset_of_ace_reg_fcc_cb_t4 (0x36)
#define mask_of_ace_reg_fcc_cb_t4   (0xff)
#define shift_of_ace_reg_fcc_cb_t4  (0)
#define ACE_REG_FCC_CB_T4           (REG_ACE_BASE + offset_of_ace_reg_fcc_cb_t4)
#define REG_ACE_1B_L                (ACE_REG_FCC_CB_T4)
// h001b, bit: 15
/* FCC region 4 cr target*/
#define offset_of_ace_reg_fcc_cr_t4 (0x36)
#define mask_of_ace_reg_fcc_cr_t4   (0xff00)
#define shift_of_ace_reg_fcc_cr_t4  (8)
#define ACE_REG_FCC_CR_T4           (REG_ACE_BASE + offset_of_ace_reg_fcc_cr_t4)
// h001c, bit: 7
/* FCC region 5 cb target*/
#define offset_of_ace_reg_fcc_cb_t5 (0x38)
#define mask_of_ace_reg_fcc_cb_t5   (0xff)
#define shift_of_ace_reg_fcc_cb_t5  (0)
#define ACE_REG_FCC_CB_T5           (REG_ACE_BASE + offset_of_ace_reg_fcc_cb_t5)
#define REG_ACE_1C_L                (ACE_REG_FCC_CB_T5)
// h001c, bit: 15
/* FCC region 5 cr target*/
#define offset_of_ace_reg_fcc_cr_t5 (0x38)
#define mask_of_ace_reg_fcc_cr_t5   (0xff00)
#define shift_of_ace_reg_fcc_cr_t5  (8)
#define ACE_REG_FCC_CR_T5           (REG_ACE_BASE + offset_of_ace_reg_fcc_cr_t5)
// h001d, bit: 7
/* FCC region 6 cb target*/
#define offset_of_ace_reg_fcc_cb_t6 (0x3a)
#define mask_of_ace_reg_fcc_cb_t6   (0xff)
#define shift_of_ace_reg_fcc_cb_t6  (0)
#define ACE_REG_FCC_CB_T6           (REG_ACE_BASE + offset_of_ace_reg_fcc_cb_t6)
#define REG_ACE_1D_L                (ACE_REG_FCC_CB_T6)
// h001d, bit: 15
/* FCC region 6 cr target*/
#define offset_of_ace_reg_fcc_cr_t6 (0x3a)
#define mask_of_ace_reg_fcc_cr_t6   (0xff00)
#define shift_of_ace_reg_fcc_cr_t6  (8)
#define ACE_REG_FCC_CR_T6           (REG_ACE_BASE + offset_of_ace_reg_fcc_cr_t6)
// h001e, bit: 7
/* FCC region 7 cb target*/
#define offset_of_ace_reg_fcc_cb_t7 (0x3c)
#define mask_of_ace_reg_fcc_cb_t7   (0xff)
#define shift_of_ace_reg_fcc_cb_t7  (0)
#define ACE_REG_FCC_CB_T7           (REG_ACE_BASE + offset_of_ace_reg_fcc_cb_t7)
#define REG_ACE_1E_L                (ACE_REG_FCC_CB_T7)
// h001e, bit: 15
/* FCC region 7 cr target*/
#define offset_of_ace_reg_fcc_cr_t7 (0x3c)
#define mask_of_ace_reg_fcc_cr_t7   (0xff00)
#define shift_of_ace_reg_fcc_cr_t7  (8)
#define ACE_REG_FCC_CR_T7           (REG_ACE_BASE + offset_of_ace_reg_fcc_cr_t7)
// h001f, bit: 7
/* FCC region 8 cb target*/
#define offset_of_ace_reg_fcc_cb_t8 (0x3e)
#define mask_of_ace_reg_fcc_cb_t8   (0xff)
#define shift_of_ace_reg_fcc_cb_t8  (0)
#define ACE_REG_FCC_CB_T8           (REG_ACE_BASE + offset_of_ace_reg_fcc_cb_t8)
#define REG_ACE_1F_L                (ACE_REG_FCC_CB_T8)
// h001f, bit: 15
/* FCC region 8 cr target*/
#define offset_of_ace_reg_fcc_cr_t8 (0x3e)
#define mask_of_ace_reg_fcc_cr_t8   (0xff00)
#define shift_of_ace_reg_fcc_cr_t8  (8)
#define ACE_REG_FCC_CR_T8           (REG_ACE_BASE + offset_of_ace_reg_fcc_cr_t8)
// h0020, bit: 3
/* FCC region 1 strength*/
#define offset_of_ace_reg_fcc_k_1t (0x40)
#define mask_of_ace_reg_fcc_k_1t   (0xf)
#define shift_of_ace_reg_fcc_k_1t  (0)
#define ACE_REG_FCC_K_1T           (REG_ACE_BASE + offset_of_ace_reg_fcc_k_1t)
#define REG_ACE_20_L               (ACE_REG_FCC_K_1T)
// h0020, bit: 7
/* FCC region 2 strength */
#define offset_of_ace_reg_fcc_k_2t (0x40)
#define mask_of_ace_reg_fcc_k_2t   (0xf0)
#define shift_of_ace_reg_fcc_k_2t  (4)
#define ACE_REG_FCC_K_2T           (REG_ACE_BASE + offset_of_ace_reg_fcc_k_2t)
// h0020, bit: 11
/* FCC region 3 strength*/
#define offset_of_ace_reg_fcc_k_3t (0x40)
#define mask_of_ace_reg_fcc_k_3t   (0xf00)
#define shift_of_ace_reg_fcc_k_3t  (8)
#define ACE_REG_FCC_K_3T           (REG_ACE_BASE + offset_of_ace_reg_fcc_k_3t)
// h0020, bit: 15
/* FCC region 4 strength */
#define offset_of_ace_reg_fcc_k_4t (0x40)
#define mask_of_ace_reg_fcc_k_4t   (0xf000)
#define shift_of_ace_reg_fcc_k_4t  (12)
#define ACE_REG_FCC_K_4T           (REG_ACE_BASE + offset_of_ace_reg_fcc_k_4t)
// h0021, bit: 3
/* FCC region 5 strength*/
#define offset_of_ace_reg_fcc_k_5t (0x42)
#define mask_of_ace_reg_fcc_k_5t   (0xf)
#define shift_of_ace_reg_fcc_k_5t  (0)
#define ACE_REG_FCC_K_5T           (REG_ACE_BASE + offset_of_ace_reg_fcc_k_5t)
#define REG_ACE_21_L               (ACE_REG_FCC_K_5T)
// h0021, bit: 7
/* FCC region 6 strength*/
#define offset_of_ace_reg_fcc_k_6t (0x42)
#define mask_of_ace_reg_fcc_k_6t   (0xf0)
#define shift_of_ace_reg_fcc_k_6t  (4)
#define ACE_REG_FCC_K_6T           (REG_ACE_BASE + offset_of_ace_reg_fcc_k_6t)
// h0021, bit: 11
/* FCC region 7 strength*/
#define offset_of_ace_reg_fcc_k_7t (0x42)
#define mask_of_ace_reg_fcc_k_7t   (0xf00)
#define shift_of_ace_reg_fcc_k_7t  (8)
#define ACE_REG_FCC_K_7T           (REG_ACE_BASE + offset_of_ace_reg_fcc_k_7t)
// h0021, bit: 15
/* FCC region 8 strength*/
#define offset_of_ace_reg_fcc_k_8t (0x42)
#define mask_of_ace_reg_fcc_k_8t   (0xf000)
#define shift_of_ace_reg_fcc_k_8t  (12)
#define ACE_REG_FCC_K_8T           (REG_ACE_BASE + offset_of_ace_reg_fcc_k_8t)
// h0022, bit: 3
/* FCC region 9 strength*/
#define offset_of_ace_reg_fcc_k_9t (0x44)
#define mask_of_ace_reg_fcc_k_9t   (0xf)
#define shift_of_ace_reg_fcc_k_9t  (0)
#define ACE_REG_FCC_K_9T           (REG_ACE_BASE + offset_of_ace_reg_fcc_k_9t)
#define REG_ACE_22_L               (ACE_REG_FCC_K_9T)
#define REG_ACE_23_L               (REG_ACE_BASE + 0x46)
// h0024, bit: 1
/* FCC region 1 target cr down distance   */
#define offset_of_ace_reg_fcc_win1_cr_down (0x48)
#define mask_of_ace_reg_fcc_win1_cr_down   (0x3)
#define shift_of_ace_reg_fcc_win1_cr_down  (0)
#define ACE_REG_FCC_WIN1_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win1_cr_down)
#define REG_ACE_24_L                       (ACE_REG_FCC_WIN1_CR_DOWN)
// h0024, bit: 3
/* FCC region 1 target cr up distance     */
#define offset_of_ace_reg_fcc_win1_cr_up (0x48)
#define mask_of_ace_reg_fcc_win1_cr_up   (0xc)
#define shift_of_ace_reg_fcc_win1_cr_up  (2)
#define ACE_REG_FCC_WIN1_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win1_cr_up)
// h0024, bit: 5
/* FCC region 1 target cb down distance   */
#define offset_of_ace_reg_fcc_win1_cb_down (0x48)
#define mask_of_ace_reg_fcc_win1_cb_down   (0x30)
#define shift_of_ace_reg_fcc_win1_cb_down  (4)
#define ACE_REG_FCC_WIN1_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win1_cb_down)
// h0024, bit: 7
/* FCC region 1 target cb up distance     */
#define offset_of_ace_reg_fcc_win1_cb_up (0x48)
#define mask_of_ace_reg_fcc_win1_cb_up   (0xc0)
#define shift_of_ace_reg_fcc_win1_cb_up  (6)
#define ACE_REG_FCC_WIN1_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win1_cb_up)
// h0024, bit: 9
/* FCC region 2 target cr down distance   */
#define offset_of_ace_reg_fcc_win2_cr_down (0x48)
#define mask_of_ace_reg_fcc_win2_cr_down   (0x300)
#define shift_of_ace_reg_fcc_win2_cr_down  (8)
#define ACE_REG_FCC_WIN2_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win2_cr_down)
// h0024, bit: 11
/* FCC region 2 target cr up distance     */
#define offset_of_ace_reg_fcc_win2_cr_up (0x48)
#define mask_of_ace_reg_fcc_win2_cr_up   (0xc00)
#define shift_of_ace_reg_fcc_win2_cr_up  (10)
#define ACE_REG_FCC_WIN2_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win2_cr_up)
// h0024, bit: 13
/* FCC region 2 target cb down distance   */
#define offset_of_ace_reg_fcc_win2_cb_down (0x48)
#define mask_of_ace_reg_fcc_win2_cb_down   (0x3000)
#define shift_of_ace_reg_fcc_win2_cb_down  (12)
#define ACE_REG_FCC_WIN2_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win2_cb_down)
// h0024, bit: 15
/* FCC region 2 target cb up distance     */
#define offset_of_ace_reg_fcc_win2_cb_up (0x48)
#define mask_of_ace_reg_fcc_win2_cb_up   (0xc000)
#define shift_of_ace_reg_fcc_win2_cb_up  (14)
#define ACE_REG_FCC_WIN2_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win2_cb_up)
// h0025, bit: 1
/* FCC region 3 target cr down distance   */
#define offset_of_ace_reg_fcc_win3_cr_down (0x4a)
#define mask_of_ace_reg_fcc_win3_cr_down   (0x3)
#define shift_of_ace_reg_fcc_win3_cr_down  (0)
#define ACE_REG_FCC_WIN3_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win3_cr_down)
#define REG_ACE_25_L                       (ACE_REG_FCC_WIN3_CR_DOWN)
// h0025, bit: 3
/* FCC region 3 target cr up distance   */
#define offset_of_ace_reg_fcc_win3_cr_up (0x4a)
#define mask_of_ace_reg_fcc_win3_cr_up   (0xc)
#define shift_of_ace_reg_fcc_win3_cr_up  (2)
#define ACE_REG_FCC_WIN3_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win3_cr_up)
// h0025, bit: 5
/* FCC region 3 target cb down distance   */
#define offset_of_ace_reg_fcc_win3_cb_down (0x4a)
#define mask_of_ace_reg_fcc_win3_cb_down   (0x30)
#define shift_of_ace_reg_fcc_win3_cb_down  (4)
#define ACE_REG_FCC_WIN3_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win3_cb_down)
// h0025, bit: 7
/* FCC region 3 target cb up distance     */
#define offset_of_ace_reg_fcc_win3_cb_up (0x4a)
#define mask_of_ace_reg_fcc_win3_cb_up   (0xc0)
#define shift_of_ace_reg_fcc_win3_cb_up  (6)
#define ACE_REG_FCC_WIN3_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win3_cb_up)
// h0025, bit: 9
/* FCC region 4 target cr down distance   */
#define offset_of_ace_reg_fcc_win4_cr_down (0x4a)
#define mask_of_ace_reg_fcc_win4_cr_down   (0x300)
#define shift_of_ace_reg_fcc_win4_cr_down  (8)
#define ACE_REG_FCC_WIN4_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win4_cr_down)
// h0025, bit: 11
/* FCC region 4 target cr up distance     */
#define offset_of_ace_reg_fcc_win4_cr_up (0x4a)
#define mask_of_ace_reg_fcc_win4_cr_up   (0xc00)
#define shift_of_ace_reg_fcc_win4_cr_up  (10)
#define ACE_REG_FCC_WIN4_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win4_cr_up)
// h0025, bit: 13
/* FCC region 4 target cb down distance   */
#define offset_of_ace_reg_fcc_win4_cb_down (0x4a)
#define mask_of_ace_reg_fcc_win4_cb_down   (0x3000)
#define shift_of_ace_reg_fcc_win4_cb_down  (12)
#define ACE_REG_FCC_WIN4_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win4_cb_down)
// h0025, bit: 15
/* FCC region 4 target cb up distance     */
#define offset_of_ace_reg_fcc_win4_cb_up (0x4a)
#define mask_of_ace_reg_fcc_win4_cb_up   (0xc000)
#define shift_of_ace_reg_fcc_win4_cb_up  (14)
#define ACE_REG_FCC_WIN4_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win4_cb_up)
// h0026, bit: 1
/* FCC region 5 target cr down distance   */
#define offset_of_ace_reg_fcc_win5_cr_down (0x4c)
#define mask_of_ace_reg_fcc_win5_cr_down   (0x3)
#define shift_of_ace_reg_fcc_win5_cr_down  (0)
#define ACE_REG_FCC_WIN5_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win5_cr_down)
#define REG_ACE_26_L                       (ACE_REG_FCC_WIN5_CR_DOWN)
// h0026, bit: 3
/* FCC region 5 target cr up distance     */
#define offset_of_ace_reg_fcc_win5_cr_up (0x4c)
#define mask_of_ace_reg_fcc_win5_cr_up   (0xc)
#define shift_of_ace_reg_fcc_win5_cr_up  (2)
#define ACE_REG_FCC_WIN5_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win5_cr_up)
// h0026, bit: 5
/* FCC region 5 target cb down distance   */
#define offset_of_ace_reg_fcc_win5_cb_down (0x4c)
#define mask_of_ace_reg_fcc_win5_cb_down   (0x30)
#define shift_of_ace_reg_fcc_win5_cb_down  (4)
#define ACE_REG_FCC_WIN5_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win5_cb_down)
// h0026, bit: 7
/* FCC region 5 target cb up distance     */
#define offset_of_ace_reg_fcc_win5_cb_up (0x4c)
#define mask_of_ace_reg_fcc_win5_cb_up   (0xc0)
#define shift_of_ace_reg_fcc_win5_cb_up  (6)
#define ACE_REG_FCC_WIN5_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win5_cb_up)
// h0026, bit: 9
/* FCC region 6 target cr down distance   */
#define offset_of_ace_reg_fcc_win6_cr_down (0x4c)
#define mask_of_ace_reg_fcc_win6_cr_down   (0x300)
#define shift_of_ace_reg_fcc_win6_cr_down  (8)
#define ACE_REG_FCC_WIN6_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win6_cr_down)
// h0026, bit: 11
/* FCC region 6 target cr up distance     */
#define offset_of_ace_reg_fcc_win6_cr_up (0x4c)
#define mask_of_ace_reg_fcc_win6_cr_up   (0xc00)
#define shift_of_ace_reg_fcc_win6_cr_up  (10)
#define ACE_REG_FCC_WIN6_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win6_cr_up)
// h0026, bit: 13
/* FCC region 6 target cb down distance   */
#define offset_of_ace_reg_fcc_win6_cb_down (0x4c)
#define mask_of_ace_reg_fcc_win6_cb_down   (0x3000)
#define shift_of_ace_reg_fcc_win6_cb_down  (12)
#define ACE_REG_FCC_WIN6_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win6_cb_down)
// h0026, bit: 15
/* FCC region 6 target cb up distance     */
#define offset_of_ace_reg_fcc_win6_cb_up (0x4c)
#define mask_of_ace_reg_fcc_win6_cb_up   (0xc000)
#define shift_of_ace_reg_fcc_win6_cb_up  (14)
#define ACE_REG_FCC_WIN6_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win6_cb_up)
// h0027, bit: 1
/* FCC region 7 target cr down distance   */
#define offset_of_ace_reg_fcc_win7_cr_down (0x4e)
#define mask_of_ace_reg_fcc_win7_cr_down   (0x3)
#define shift_of_ace_reg_fcc_win7_cr_down  (0)
#define ACE_REG_FCC_WIN7_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win7_cr_down)
#define REG_ACE_27_L                       (ACE_REG_FCC_WIN7_CR_DOWN)
// h0027, bit: 3
/* FCC region 7 target cr up distance     */
#define offset_of_ace_reg_fcc_win7_cr_up (0x4e)
#define mask_of_ace_reg_fcc_win7_cr_up   (0xc)
#define shift_of_ace_reg_fcc_win7_cr_up  (2)
#define ACE_REG_FCC_WIN7_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win7_cr_up)
// h0027, bit: 5
/* FCC region 7 target cb down distance   */
#define offset_of_ace_reg_fcc_win7_cb_down (0x4e)
#define mask_of_ace_reg_fcc_win7_cb_down   (0x30)
#define shift_of_ace_reg_fcc_win7_cb_down  (4)
#define ACE_REG_FCC_WIN7_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win7_cb_down)
// h0027, bit: 7
/* FCC region 7 target cb up distance     */
#define offset_of_ace_reg_fcc_win7_cb_up (0x4e)
#define mask_of_ace_reg_fcc_win7_cb_up   (0xc0)
#define shift_of_ace_reg_fcc_win7_cb_up  (6)
#define ACE_REG_FCC_WIN7_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win7_cb_up)
// h0027, bit: 9
/* FCC region 8 target cr down distance   */
#define offset_of_ace_reg_fcc_win8_cr_down (0x4e)
#define mask_of_ace_reg_fcc_win8_cr_down   (0x300)
#define shift_of_ace_reg_fcc_win8_cr_down  (8)
#define ACE_REG_FCC_WIN8_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win8_cr_down)
// h0027, bit: 11
/* FCC region 8 target cr up distance     */
#define offset_of_ace_reg_fcc_win8_cr_up (0x4e)
#define mask_of_ace_reg_fcc_win8_cr_up   (0xc00)
#define shift_of_ace_reg_fcc_win8_cr_up  (10)
#define ACE_REG_FCC_WIN8_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win8_cr_up)
// h0027, bit: 13
/* FCC region 8 target cb down distance   */
#define offset_of_ace_reg_fcc_win8_cb_down (0x4e)
#define mask_of_ace_reg_fcc_win8_cb_down   (0x3000)
#define shift_of_ace_reg_fcc_win8_cb_down  (12)
#define ACE_REG_FCC_WIN8_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_win8_cb_down)
// h0027, bit: 15
/* FCC region 8 target cb up distance     */
#define offset_of_ace_reg_fcc_win8_cb_up (0x4e)
#define mask_of_ace_reg_fcc_win8_cb_up   (0xc000)
#define shift_of_ace_reg_fcc_win8_cb_up  (14)
#define ACE_REG_FCC_WIN8_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_win8_cb_up)
// h0028, bit: 2
/* FCC region 9 target cr distance      */
#define offset_of_ace_reg_fcc_win9_cr (0x50)
#define mask_of_ace_reg_fcc_win9_cr   (0x7)
#define shift_of_ace_reg_fcc_win9_cr  (0)
#define ACE_REG_FCC_WIN9_CR           (REG_ACE_BASE + offset_of_ace_reg_fcc_win9_cr)
#define REG_ACE_28_L                  (ACE_REG_FCC_WIN9_CR)
// h0028, bit: 5
/* FCC region 9 target cb distance        */
#define offset_of_ace_reg_fcc_win9_cb (0x50)
#define mask_of_ace_reg_fcc_win9_cb   (0x38)
#define shift_of_ace_reg_fcc_win9_cb  (3)
#define ACE_REG_FCC_WIN9_CB           (REG_ACE_BASE + offset_of_ace_reg_fcc_win9_cb)
// h0028, bit: 15
/* FCC test mode enable*/
#define offset_of_ace_reg_fcc_test_mode (0x50)
#define mask_of_ace_reg_fcc_test_mode   (0xff00)
#define shift_of_ace_reg_fcc_test_mode  (8)
#define ACE_REG_FCC_TEST_MODE           (REG_ACE_BASE + offset_of_ace_reg_fcc_test_mode)
#define REG_ACE_29_L                    (REG_ACE_BASE + 0x52)
#define REG_ACE_2A_L                    (REG_ACE_BASE + 0x54)
#define REG_ACE_2B_L                    (REG_ACE_BASE + 0x56)
#define REG_ACE_2C_L                    (REG_ACE_BASE + 0x58)
#define REG_ACE_2D_L                    (REG_ACE_BASE + 0x5a)
#define REG_ACE_2E_L                    (REG_ACE_BASE + 0x5c)
#define REG_ACE_2F_L                    (REG_ACE_BASE + 0x5e)
#define REG_ACE_30_L                    (REG_ACE_BASE + 0x60)
#define REG_ACE_31_L                    (REG_ACE_BASE + 0x62)
#define REG_ACE_32_L                    (REG_ACE_BASE + 0x64)
#define REG_ACE_33_L                    (REG_ACE_BASE + 0x66)
#define REG_ACE_34_L                    (REG_ACE_BASE + 0x68)
#define REG_ACE_35_L                    (REG_ACE_BASE + 0x6a)
#define REG_ACE_36_L                    (REG_ACE_BASE + 0x6c)
#define REG_ACE_37_L                    (REG_ACE_BASE + 0x6e)
// h0038, bit: 0
/* reserved*/
#define offset_of_ace_reg_ack_reserved_1 (0x70)
#define mask_of_ace_reg_ack_reserved_1   (0x1)
#define shift_of_ace_reg_ack_reserved_1  (0)
#define ACE_REG_ACK_RESERVED_1           (REG_ACE_BASE + offset_of_ace_reg_ack_reserved_1)
#define REG_ACE_38_L                     (ACE_REG_ACK_RESERVED_1)
// h0038, bit: 1
/* BLE/WLE dither enable*/
#define offset_of_ace_reg_bw_dither_en (0x70)
#define mask_of_ace_reg_bw_dither_en   (0x2)
#define shift_of_ace_reg_bw_dither_en  (1)
#define ACE_REG_BW_DITHER_EN           (REG_ACE_BASE + offset_of_ace_reg_bw_dither_en)
// h0038, bit: 4
/* Y switch dither bit enable*/
#define offset_of_ace_reg_y_switch_dither_en (0x70)
#define mask_of_ace_reg_y_switch_dither_en   (0x10)
#define shift_of_ace_reg_y_switch_dither_en  (4)
#define ACE_REG_Y_SWITCH_DITHER_EN           (REG_ACE_BASE + offset_of_ace_reg_y_switch_dither_en)
// h0038, bit: 5
/* ACK dither enable*/
#define offset_of_ace_reg_ack_dither_en (0x70)
#define mask_of_ace_reg_ack_dither_en   (0x20)
#define shift_of_ace_reg_ack_dither_en  (5)
#define ACE_REG_ACK_DITHER_EN           (REG_ACE_BASE + offset_of_ace_reg_ack_dither_en)
// h0038, bit: 6
/* Main window ACK enable*/
#define offset_of_ace_reg_main_ack_en (0x70)
#define mask_of_ace_reg_main_ack_en   (0x40)
#define shift_of_ace_reg_main_ack_en  (6)
#define ACE_REG_MAIN_ACK_EN           (REG_ACE_BASE + offset_of_ace_reg_main_ack_en)
// h0038, bit: 7
/* Main window Y switch enable*/
#define offset_of_ace_reg_main_y_switch_en (0x70)
#define mask_of_ace_reg_main_y_switch_en   (0x80)
#define shift_of_ace_reg_main_y_switch_en  (7)
#define ACE_REG_MAIN_Y_SWITCH_EN           (REG_ACE_BASE + offset_of_ace_reg_main_y_switch_en)
// h0039, bit: 5
/* U coefficent for Y switch*/
#define offset_of_ace_reg_u_switch_coef (0x72)
#define mask_of_ace_reg_u_switch_coef   (0x3f)
#define shift_of_ace_reg_u_switch_coef  (0)
#define ACE_REG_U_SWITCH_COEF           (REG_ACE_BASE + offset_of_ace_reg_u_switch_coef)
#define REG_ACE_39_L                    (ACE_REG_U_SWITCH_COEF)
// h0039, bit: 13
/* V coefficent for Y switch*/
#define offset_of_ace_reg_v_switch_coef (0x72)
#define mask_of_ace_reg_v_switch_coef   (0x3f00)
#define shift_of_ace_reg_v_switch_coef  (8)
#define ACE_REG_V_SWITCH_COEF           (REG_ACE_BASE + offset_of_ace_reg_v_switch_coef)
// h003a, bit: 3
/* Ack Y threshold*/
#define offset_of_ace_reg_ack_y_thrd (0x74)
#define mask_of_ace_reg_ack_y_thrd   (0xf)
#define shift_of_ace_reg_ack_y_thrd  (0)
#define ACE_REG_ACK_Y_THRD           (REG_ACE_BASE + offset_of_ace_reg_ack_y_thrd)
#define REG_ACE_3A_L                 (ACE_REG_ACK_Y_THRD)
// h003a, bit: 7
/* Ack offset*/
#define offset_of_ace_reg_ack_offset (0x74)
#define mask_of_ace_reg_ack_offset   (0xf0)
#define shift_of_ace_reg_ack_offset  (4)
#define ACE_REG_ACK_OFFSET           (REG_ACE_BASE + offset_of_ace_reg_ack_offset)
// h003a, bit: 12
/* Ack y slop*/
#define offset_of_ace_reg_ack_y_slop (0x74)
#define mask_of_ace_reg_ack_y_slop   (0x1f00)
#define shift_of_ace_reg_ack_y_slop  (8)
#define ACE_REG_ACK_Y_SLOP           (REG_ACE_BASE + offset_of_ace_reg_ack_y_slop)
// h003b, bit: 6
/* Ack limit*/
#define offset_of_ace_reg_ack_limit (0x76)
#define mask_of_ace_reg_ack_limit   (0x7f)
#define shift_of_ace_reg_ack_limit  (0)
#define ACE_REG_ACK_LIMIT           (REG_ACE_BASE + offset_of_ace_reg_ack_limit)
#define REG_ACE_3B_L                (ACE_REG_ACK_LIMIT)
// h003b, bit: 7
/* Ack chroma compensate enable*/
#define offset_of_ace_reg_ack_c_comp_en (0x76)
#define mask_of_ace_reg_ack_c_comp_en   (0x80)
#define shift_of_ace_reg_ack_c_comp_en  (7)
#define ACE_REG_ACK_C_COMP_EN           (REG_ACE_BASE + offset_of_ace_reg_ack_c_comp_en)
// h003b, bit: 11
/* Ack chroma threshold*/
#define offset_of_ace_reg_ack_c_thrd (0x76)
#define mask_of_ace_reg_ack_c_thrd   (0xf00)
#define shift_of_ace_reg_ack_c_thrd  (8)
#define ACE_REG_ACK_C_THRD           (REG_ACE_BASE + offset_of_ace_reg_ack_c_thrd)
// h003b, bit: 12
/* reserved*/
#define offset_of_ace_reg_ack_reserved_3 (0x76)
#define mask_of_ace_reg_ack_reserved_3   (0x1000)
#define shift_of_ace_reg_ack_reserved_3  (12)
#define ACE_REG_ACK_RESERVED_3           (REG_ACE_BASE + offset_of_ace_reg_ack_reserved_3)
// h003b, bit: 14
/* Ack chroma range*/
#define offset_of_ace_reg_ack_c_range (0x76)
#define mask_of_ace_reg_ack_c_range   (0x6000)
#define shift_of_ace_reg_ack_c_range  (13)
#define ACE_REG_ACK_C_RANGE           (REG_ACE_BASE + offset_of_ace_reg_ack_c_range)
// h003b, bit: 15
/* reserved*/
#define offset_of_ace_reg_ack_reserved_4 (0x76)
#define mask_of_ace_reg_ack_reserved_4   (0x8000)
#define shift_of_ace_reg_ack_reserved_4  (15)
#define ACE_REG_ACK_RESERVED_4           (REG_ACE_BASE + offset_of_ace_reg_ack_reserved_4)
#define REG_ACE_3C_L                     (REG_ACE_BASE + 0x78)
#define REG_ACE_3D_L                     (REG_ACE_BASE + 0x7a)
#define REG_ACE_3E_L                     (REG_ACE_BASE + 0x7c)
#define REG_ACE_3F_L                     (REG_ACE_BASE + 0x7e)
// h0040, bit: 0
/* Main window FCC region 1 enable for full range*/
#define offset_of_ace_reg_main_fcc_fr_en (0x80)
#define mask_of_ace_reg_main_fcc_fr_en   (0x1)
#define shift_of_ace_reg_main_fcc_fr_en  (0)
#define ACE_REG_MAIN_FCC_FR_EN           (REG_ACE_BASE + offset_of_ace_reg_main_fcc_fr_en)
#define REG_ACE_40_L                     (ACE_REG_MAIN_FCC_FR_EN)
// h0041, bit: 1
/* FCC region 1 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cb_t1_lsb (0x82)
#define mask_of_ace_reg_fcc_fr_cb_t1_lsb   (0x3)
#define shift_of_ace_reg_fcc_fr_cb_t1_lsb  (0)
#define ACE_REG_FCC_FR_CB_T1_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cb_t1_lsb)
#define REG_ACE_41_L                       (ACE_REG_FCC_FR_CB_T1_LSB)
// h0041, bit: 3
/* FCC region 1 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cr_t1_lsb (0x82)
#define mask_of_ace_reg_fcc_fr_cr_t1_lsb   (0xc)
#define shift_of_ace_reg_fcc_fr_cr_t1_lsb  (2)
#define ACE_REG_FCC_FR_CR_T1_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cr_t1_lsb)
// h0041, bit: 5
/* FCC region 2 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cb_t2_lsb (0x82)
#define mask_of_ace_reg_fcc_fr_cb_t2_lsb   (0x30)
#define shift_of_ace_reg_fcc_fr_cb_t2_lsb  (4)
#define ACE_REG_FCC_FR_CB_T2_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cb_t2_lsb)
// h0041, bit: 7
/* FCC region 2 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cr_t2_lsb (0x82)
#define mask_of_ace_reg_fcc_fr_cr_t2_lsb   (0xc0)
#define shift_of_ace_reg_fcc_fr_cr_t2_lsb  (6)
#define ACE_REG_FCC_FR_CR_T2_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cr_t2_lsb)
// h0041, bit: 9
/* FCC region 3 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cb_t3_lsb (0x82)
#define mask_of_ace_reg_fcc_fr_cb_t3_lsb   (0x300)
#define shift_of_ace_reg_fcc_fr_cb_t3_lsb  (8)
#define ACE_REG_FCC_FR_CB_T3_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cb_t3_lsb)
// h0041, bit: 11
/* FCC region 3 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cr_t3_lsb (0x82)
#define mask_of_ace_reg_fcc_fr_cr_t3_lsb   (0xc00)
#define shift_of_ace_reg_fcc_fr_cr_t3_lsb  (10)
#define ACE_REG_FCC_FR_CR_T3_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cr_t3_lsb)
// h0041, bit: 13
/* FCC region 4 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cb_t4_lsb (0x82)
#define mask_of_ace_reg_fcc_fr_cb_t4_lsb   (0x3000)
#define shift_of_ace_reg_fcc_fr_cb_t4_lsb  (12)
#define ACE_REG_FCC_FR_CB_T4_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cb_t4_lsb)
// h0041, bit: 15
/* FCC region 4 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cr_t4_lsb (0x82)
#define mask_of_ace_reg_fcc_fr_cr_t4_lsb   (0xc000)
#define shift_of_ace_reg_fcc_fr_cr_t4_lsb  (14)
#define ACE_REG_FCC_FR_CR_T4_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cr_t4_lsb)
// h0042, bit: 1
/* FCC region 5 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cb_t5_lsb (0x84)
#define mask_of_ace_reg_fcc_fr_cb_t5_lsb   (0x3)
#define shift_of_ace_reg_fcc_fr_cb_t5_lsb  (0)
#define ACE_REG_FCC_FR_CB_T5_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cb_t5_lsb)
#define REG_ACE_42_L                       (ACE_REG_FCC_FR_CB_T5_LSB)
// h0042, bit: 3
/* FCC region 5 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cr_t5_lsb (0x84)
#define mask_of_ace_reg_fcc_fr_cr_t5_lsb   (0xc)
#define shift_of_ace_reg_fcc_fr_cr_t5_lsb  (2)
#define ACE_REG_FCC_FR_CR_T5_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cr_t5_lsb)
// h0042, bit: 5
/* FCC region 6 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cb_t6_lsb (0x84)
#define mask_of_ace_reg_fcc_fr_cb_t6_lsb   (0x30)
#define shift_of_ace_reg_fcc_fr_cb_t6_lsb  (4)
#define ACE_REG_FCC_FR_CB_T6_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cb_t6_lsb)
// h0042, bit: 7
/* FCC region 6 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cr_t6_lsb (0x84)
#define mask_of_ace_reg_fcc_fr_cr_t6_lsb   (0xc0)
#define shift_of_ace_reg_fcc_fr_cr_t6_lsb  (6)
#define ACE_REG_FCC_FR_CR_T6_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cr_t6_lsb)
// h0042, bit: 9
/* FCC region 7 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cb_t7_lsb (0x84)
#define mask_of_ace_reg_fcc_fr_cb_t7_lsb   (0x300)
#define shift_of_ace_reg_fcc_fr_cb_t7_lsb  (8)
#define ACE_REG_FCC_FR_CB_T7_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cb_t7_lsb)
// h0042, bit: 11
/* FCC region 7 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cr_t7_lsb (0x84)
#define mask_of_ace_reg_fcc_fr_cr_t7_lsb   (0xc00)
#define shift_of_ace_reg_fcc_fr_cr_t7_lsb  (10)
#define ACE_REG_FCC_FR_CR_T7_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cr_t7_lsb)
// h0042, bit: 13
/* FCC region 8 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cb_t8_lsb (0x84)
#define mask_of_ace_reg_fcc_fr_cb_t8_lsb   (0x3000)
#define shift_of_ace_reg_fcc_fr_cb_t8_lsb  (12)
#define ACE_REG_FCC_FR_CB_T8_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cb_t8_lsb)
// h0042, bit: 15
/* FCC region 8 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_reg_fcc_fr_cr_t8_lsb (0x84)
#define mask_of_ace_reg_fcc_fr_cr_t8_lsb   (0xc000)
#define shift_of_ace_reg_fcc_fr_cr_t8_lsb  (14)
#define ACE_REG_FCC_FR_CR_T8_LSB           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cr_t8_lsb)
// h0043, bit: 9
/* FCC region 9 cb target for full range*/
#define offset_of_ace_reg_fcc_fr_cb_t9 (0x86)
#define mask_of_ace_reg_fcc_fr_cb_t9   (0x3ff)
#define shift_of_ace_reg_fcc_fr_cb_t9  (0)
#define ACE_REG_FCC_FR_CB_T9           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cb_t9)
#define REG_ACE_43_L                   (ACE_REG_FCC_FR_CB_T9)
// h0044, bit: 9
/* FCC region 9 cr target for full range*/
#define offset_of_ace_reg_fcc_fr_cr_t9 (0x88)
#define mask_of_ace_reg_fcc_fr_cr_t9   (0x3ff)
#define shift_of_ace_reg_fcc_fr_cr_t9  (0)
#define ACE_REG_FCC_FR_CR_T9           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_cr_t9)
#define REG_ACE_44_L                   (ACE_REG_FCC_FR_CR_T9)
// h0045, bit: 9
/* FCC region 1 target cr down distance  for full range,*/
#define offset_of_ace_reg_fcc_fr_win1_cr_down (0x8a)
#define mask_of_ace_reg_fcc_fr_win1_cr_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win1_cr_down  (0)
#define ACE_REG_FCC_FR_WIN1_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win1_cr_down)
#define REG_ACE_45_L                          (ACE_REG_FCC_FR_WIN1_CR_DOWN)
// h0046, bit: 9
/* FCC region 1 target cr up distance for full range*/
#define offset_of_ace_reg_fcc_fr_win1_cr_up (0x8c)
#define mask_of_ace_reg_fcc_fr_win1_cr_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win1_cr_up  (0)
#define ACE_REG_FCC_FR_WIN1_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win1_cr_up)
#define REG_ACE_46_L                        (ACE_REG_FCC_FR_WIN1_CR_UP)
// h0047, bit: 9
/* FCC region 1 target cb down distance  for full range */
#define offset_of_ace_reg_fcc_fr_win1_cb_down (0x8e)
#define mask_of_ace_reg_fcc_fr_win1_cb_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win1_cb_down  (0)
#define ACE_REG_FCC_FR_WIN1_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win1_cb_down)
#define REG_ACE_47_L                          (ACE_REG_FCC_FR_WIN1_CB_DOWN)
// h0048, bit: 9
/* FCC region 1 target cb up distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win1_cb_up (0x90)
#define mask_of_ace_reg_fcc_fr_win1_cb_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win1_cb_up  (0)
#define ACE_REG_FCC_FR_WIN1_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win1_cb_up)
#define REG_ACE_48_L                        (ACE_REG_FCC_FR_WIN1_CB_UP)
// h0049, bit: 9
/* FCC region 2 target cr down distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win2_cr_down (0x92)
#define mask_of_ace_reg_fcc_fr_win2_cr_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win2_cr_down  (0)
#define ACE_REG_FCC_FR_WIN2_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win2_cr_down)
#define REG_ACE_49_L                          (ACE_REG_FCC_FR_WIN2_CR_DOWN)
// h004a, bit: 9
/* FCC region 2 target cr up distance for full range    */
#define offset_of_ace_reg_fcc_fr_win2_cr_up (0x94)
#define mask_of_ace_reg_fcc_fr_win2_cr_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win2_cr_up  (0)
#define ACE_REG_FCC_FR_WIN2_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win2_cr_up)
#define REG_ACE_4A_L                        (ACE_REG_FCC_FR_WIN2_CR_UP)
// h004b, bit: 9
/* FCC region 2 target cb down distance  for full range */
#define offset_of_ace_reg_fcc_fr_win2_cb_down (0x96)
#define mask_of_ace_reg_fcc_fr_win2_cb_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win2_cb_down  (0)
#define ACE_REG_FCC_FR_WIN2_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win2_cb_down)
#define REG_ACE_4B_L                          (ACE_REG_FCC_FR_WIN2_CB_DOWN)
// h004c, bit: 9
/* FCC region 2 target cb up distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win2_cb_up (0x98)
#define mask_of_ace_reg_fcc_fr_win2_cb_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win2_cb_up  (0)
#define ACE_REG_FCC_FR_WIN2_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win2_cb_up)
#define REG_ACE_4C_L                        (ACE_REG_FCC_FR_WIN2_CB_UP)
// h004d, bit: 9
/* FCC region 3 target cr down distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win3_cr_down (0x9a)
#define mask_of_ace_reg_fcc_fr_win3_cr_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win3_cr_down  (0)
#define ACE_REG_FCC_FR_WIN3_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win3_cr_down)
#define REG_ACE_4D_L                          (ACE_REG_FCC_FR_WIN3_CR_DOWN)
// h004e, bit: 9
/* FCC region 3 target cr up distance for full range    */
#define offset_of_ace_reg_fcc_fr_win3_cr_up (0x9c)
#define mask_of_ace_reg_fcc_fr_win3_cr_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win3_cr_up  (0)
#define ACE_REG_FCC_FR_WIN3_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win3_cr_up)
#define REG_ACE_4E_L                        (ACE_REG_FCC_FR_WIN3_CR_UP)
// h004f, bit: 9
/* FCC region 3 target cb down distance  for full range */
#define offset_of_ace_reg_fcc_fr_win3_cb_down (0x9e)
#define mask_of_ace_reg_fcc_fr_win3_cb_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win3_cb_down  (0)
#define ACE_REG_FCC_FR_WIN3_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win3_cb_down)
#define REG_ACE_4F_L                          (ACE_REG_FCC_FR_WIN3_CB_DOWN)
// h0050, bit: 9
/* FCC region 3 target cb up distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win3_cb_up (0xa0)
#define mask_of_ace_reg_fcc_fr_win3_cb_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win3_cb_up  (0)
#define ACE_REG_FCC_FR_WIN3_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win3_cb_up)
#define REG_ACE_50_L                        (ACE_REG_FCC_FR_WIN3_CB_UP)
// h0051, bit: 9
/* FCC region 4 target cr down distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win4_cr_down (0xa2)
#define mask_of_ace_reg_fcc_fr_win4_cr_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win4_cr_down  (0)
#define ACE_REG_FCC_FR_WIN4_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win4_cr_down)
#define REG_ACE_51_L                          (ACE_REG_FCC_FR_WIN4_CR_DOWN)
// h0052, bit: 9
/* FCC region 4 target cr up distance for full range    */
#define offset_of_ace_reg_fcc_fr_win4_cr_up (0xa4)
#define mask_of_ace_reg_fcc_fr_win4_cr_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win4_cr_up  (0)
#define ACE_REG_FCC_FR_WIN4_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win4_cr_up)
#define REG_ACE_52_L                        (ACE_REG_FCC_FR_WIN4_CR_UP)
// h0053, bit: 9
/* FCC region 4 target cb down distance  for full range */
#define offset_of_ace_reg_fcc_fr_win4_cb_down (0xa6)
#define mask_of_ace_reg_fcc_fr_win4_cb_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win4_cb_down  (0)
#define ACE_REG_FCC_FR_WIN4_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win4_cb_down)
#define REG_ACE_53_L                          (ACE_REG_FCC_FR_WIN4_CB_DOWN)
// h0054, bit: 9
/* FCC region 4 target cb up distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win4_cb_up (0xa8)
#define mask_of_ace_reg_fcc_fr_win4_cb_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win4_cb_up  (0)
#define ACE_REG_FCC_FR_WIN4_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win4_cb_up)
#define REG_ACE_54_L                        (ACE_REG_FCC_FR_WIN4_CB_UP)
// h0055, bit: 9
/* FCC region 5 target cr down distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win5_cr_down (0xaa)
#define mask_of_ace_reg_fcc_fr_win5_cr_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win5_cr_down  (0)
#define ACE_REG_FCC_FR_WIN5_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win5_cr_down)
#define REG_ACE_55_L                          (ACE_REG_FCC_FR_WIN5_CR_DOWN)
// h0056, bit: 9
/* FCC region 5 target cr up distance for full range    */
#define offset_of_ace_reg_fcc_fr_win5_cr_up (0xac)
#define mask_of_ace_reg_fcc_fr_win5_cr_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win5_cr_up  (0)
#define ACE_REG_FCC_FR_WIN5_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win5_cr_up)
#define REG_ACE_56_L                        (ACE_REG_FCC_FR_WIN5_CR_UP)
// h0057, bit: 9
/* FCC region 5 target cb down distance  for full range */
#define offset_of_ace_reg_fcc_fr_win5_cb_down (0xae)
#define mask_of_ace_reg_fcc_fr_win5_cb_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win5_cb_down  (0)
#define ACE_REG_FCC_FR_WIN5_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win5_cb_down)
#define REG_ACE_57_L                          (ACE_REG_FCC_FR_WIN5_CB_DOWN)
// h0058, bit: 9
/* FCC region 5 target cb up distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win5_cb_up (0xb0)
#define mask_of_ace_reg_fcc_fr_win5_cb_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win5_cb_up  (0)
#define ACE_REG_FCC_FR_WIN5_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win5_cb_up)
#define REG_ACE_58_L                        (ACE_REG_FCC_FR_WIN5_CB_UP)
// h0059, bit: 9
/* FCC region 6 target cr down distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win6_cr_down (0xb2)
#define mask_of_ace_reg_fcc_fr_win6_cr_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win6_cr_down  (0)
#define ACE_REG_FCC_FR_WIN6_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win6_cr_down)
#define REG_ACE_59_L                          (ACE_REG_FCC_FR_WIN6_CR_DOWN)
#define REG_ACE_5A_L                          (REG_ACE_BASE + 0xb4)
#define REG_ACE_5B_L                          (REG_ACE_BASE + 0xb6)
#define REG_ACE_5C_L                          (REG_ACE_BASE + 0xb8)
#define REG_ACE_5D_L                          (REG_ACE_BASE + 0xba)
#define REG_ACE_5E_L                          (REG_ACE_BASE + 0xbc)
#define REG_ACE_5F_L                          (REG_ACE_BASE + 0xbe)
// h0060, bit: 9
/* FCC region 6 target cr up distance for full range    */
#define offset_of_ace_reg_fcc_fr_win6_cr_up (0xc0)
#define mask_of_ace_reg_fcc_fr_win6_cr_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win6_cr_up  (0)
#define ACE_REG_FCC_FR_WIN6_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win6_cr_up)
#define REG_ACE_60_L                        (ACE_REG_FCC_FR_WIN6_CR_UP)
// h0061, bit: 9
/* FCC region 6 target cb down distance  for full range */
#define offset_of_ace_reg_fcc_fr_win6_cb_down (0xc2)
#define mask_of_ace_reg_fcc_fr_win6_cb_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win6_cb_down  (0)
#define ACE_REG_FCC_FR_WIN6_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win6_cb_down)
#define REG_ACE_61_L                          (ACE_REG_FCC_FR_WIN6_CB_DOWN)
// h0062, bit: 9
/* FCC region 6target cb up distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win6_cb_up (0xc4)
#define mask_of_ace_reg_fcc_fr_win6_cb_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win6_cb_up  (0)
#define ACE_REG_FCC_FR_WIN6_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win6_cb_up)
#define REG_ACE_62_L                        (ACE_REG_FCC_FR_WIN6_CB_UP)
// h0063, bit: 9
/* FCC region 7 target cr down distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win7_cr_down (0xc6)
#define mask_of_ace_reg_fcc_fr_win7_cr_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win7_cr_down  (0)
#define ACE_REG_FCC_FR_WIN7_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win7_cr_down)
#define REG_ACE_63_L                          (ACE_REG_FCC_FR_WIN7_CR_DOWN)
// h0064, bit: 9
/* FCC region 7 target cr up distance for full range    */
#define offset_of_ace_reg_fcc_fr_win7_cr_up (0xc8)
#define mask_of_ace_reg_fcc_fr_win7_cr_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win7_cr_up  (0)
#define ACE_REG_FCC_FR_WIN7_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win7_cr_up)
#define REG_ACE_64_L                        (ACE_REG_FCC_FR_WIN7_CR_UP)
// h0065, bit: 9
/* FCC region 7 target cb down distance  for full range */
#define offset_of_ace_reg_fcc_fr_win7_cb_down (0xca)
#define mask_of_ace_reg_fcc_fr_win7_cb_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win7_cb_down  (0)
#define ACE_REG_FCC_FR_WIN7_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win7_cb_down)
#define REG_ACE_65_L                          (ACE_REG_FCC_FR_WIN7_CB_DOWN)
// h0066, bit: 9
/* FCC region 7 target cb up distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win7_cb_up (0xcc)
#define mask_of_ace_reg_fcc_fr_win7_cb_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win7_cb_up  (0)
#define ACE_REG_FCC_FR_WIN7_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win7_cb_up)
#define REG_ACE_66_L                        (ACE_REG_FCC_FR_WIN7_CB_UP)
// h0067, bit: 9
/* FCC region 8 target cr down distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win8_cr_down (0xce)
#define mask_of_ace_reg_fcc_fr_win8_cr_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win8_cr_down  (0)
#define ACE_REG_FCC_FR_WIN8_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win8_cr_down)
#define REG_ACE_67_L                          (ACE_REG_FCC_FR_WIN8_CR_DOWN)
// h0068, bit: 9
/* FCC region 8 target cr up distance for full range    */
#define offset_of_ace_reg_fcc_fr_win8_cr_up (0xd0)
#define mask_of_ace_reg_fcc_fr_win8_cr_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win8_cr_up  (0)
#define ACE_REG_FCC_FR_WIN8_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win8_cr_up)
#define REG_ACE_68_L                        (ACE_REG_FCC_FR_WIN8_CR_UP)
// h0069, bit: 9
/* FCC region 8 target cb down distance  for full range */
#define offset_of_ace_reg_fcc_fr_win8_cb_down (0xd2)
#define mask_of_ace_reg_fcc_fr_win8_cb_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win8_cb_down  (0)
#define ACE_REG_FCC_FR_WIN8_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win8_cb_down)
#define REG_ACE_69_L                          (ACE_REG_FCC_FR_WIN8_CB_DOWN)
// h006a, bit: 9
/* FCC region 8 target cb up distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win8_cb_up (0xd4)
#define mask_of_ace_reg_fcc_fr_win8_cb_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win8_cb_up  (0)
#define ACE_REG_FCC_FR_WIN8_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win8_cb_up)
#define REG_ACE_6A_L                        (ACE_REG_FCC_FR_WIN8_CB_UP)
// h006b, bit: 9
/* FCC region 9 target cr down distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win9_cr_down (0xd6)
#define mask_of_ace_reg_fcc_fr_win9_cr_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win9_cr_down  (0)
#define ACE_REG_FCC_FR_WIN9_CR_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win9_cr_down)
#define REG_ACE_6B_L                          (ACE_REG_FCC_FR_WIN9_CR_DOWN)
// h006c, bit: 9
/* FCC region 9 target cr up distance for full range    */
#define offset_of_ace_reg_fcc_fr_win9_cr_up (0xd8)
#define mask_of_ace_reg_fcc_fr_win9_cr_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win9_cr_up  (0)
#define ACE_REG_FCC_FR_WIN9_CR_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win9_cr_up)
#define REG_ACE_6C_L                        (ACE_REG_FCC_FR_WIN9_CR_UP)
// h006d, bit: 9
/* FCC region 9 target cb down distance  for full range */
#define offset_of_ace_reg_fcc_fr_win9_cb_down (0xda)
#define mask_of_ace_reg_fcc_fr_win9_cb_down   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win9_cb_down  (0)
#define ACE_REG_FCC_FR_WIN9_CB_DOWN           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win9_cb_down)
#define REG_ACE_6D_L                          (ACE_REG_FCC_FR_WIN9_CB_DOWN)
// h006e, bit: 9
/* FCC region 9 target cb up distance  for full range  */
#define offset_of_ace_reg_fcc_fr_win9_cb_up (0xdc)
#define mask_of_ace_reg_fcc_fr_win9_cb_up   (0x3ff)
#define shift_of_ace_reg_fcc_fr_win9_cb_up  (0)
#define ACE_REG_FCC_FR_WIN9_CB_UP           (REG_ACE_BASE + offset_of_ace_reg_fcc_fr_win9_cb_up)
#define REG_ACE_6E_L                        (ACE_REG_FCC_FR_WIN9_CB_UP)
#define REG_ACE_6F_L                        (REG_ACE_BASE + 0xde)
#define REG_ACE_70_L                        (REG_ACE_BASE + 0xe0)
#define REG_ACE_71_L                        (REG_ACE_BASE + 0xe2)
#define REG_ACE_72_L                        (REG_ACE_BASE + 0xe4)
#define REG_ACE_73_L                        (REG_ACE_BASE + 0xe6)
#define REG_ACE_74_L                        (REG_ACE_BASE + 0xe8)
#define REG_ACE_75_L                        (REG_ACE_BASE + 0xea)
#define REG_ACE_76_L                        (REG_ACE_BASE + 0xec)
#define REG_ACE_77_L                        (REG_ACE_BASE + 0xee)
// h0078, bit: 0
/* vip main window clamp enable*/
#define offset_of_ace_reg_vip_main_clamp_en (0xf0)
#define mask_of_ace_reg_vip_main_clamp_en   (0x1)
#define shift_of_ace_reg_vip_main_clamp_en  (0)
#define ACE_REG_VIP_MAIN_CLAMP_EN           (REG_ACE_BASE + offset_of_ace_reg_vip_main_clamp_en)
#define REG_ACE_78_L                        (ACE_REG_VIP_MAIN_CLAMP_EN)
// h0079, bit: 9
/* Main window y maximum clamp*/
#define offset_of_ace_reg_main_y_max_clamp (0xf2)
#define mask_of_ace_reg_main_y_max_clamp   (0x3ff)
#define shift_of_ace_reg_main_y_max_clamp  (0)
#define ACE_REG_MAIN_Y_MAX_CLAMP           (REG_ACE_BASE + offset_of_ace_reg_main_y_max_clamp)
#define REG_ACE_79_L                       (ACE_REG_MAIN_Y_MAX_CLAMP)
// h007a, bit: 9
/* Main window y minimum clamp*/
#define offset_of_ace_reg_main_y_min_clamp (0xf4)
#define mask_of_ace_reg_main_y_min_clamp   (0x3ff)
#define shift_of_ace_reg_main_y_min_clamp  (0)
#define ACE_REG_MAIN_Y_MIN_CLAMP           (REG_ACE_BASE + offset_of_ace_reg_main_y_min_clamp)
#define REG_ACE_7A_L                       (ACE_REG_MAIN_Y_MIN_CLAMP)
// h007b, bit: 9
/* Main window cb maximum clamp*/
#define offset_of_ace_reg_main_cb_max_clamp (0xf6)
#define mask_of_ace_reg_main_cb_max_clamp   (0x3ff)
#define shift_of_ace_reg_main_cb_max_clamp  (0)
#define ACE_REG_MAIN_CB_MAX_CLAMP           (REG_ACE_BASE + offset_of_ace_reg_main_cb_max_clamp)
#define REG_ACE_7B_L                        (ACE_REG_MAIN_CB_MAX_CLAMP)
// h007c, bit: 9
/* Main window cb minimum clamp*/
#define offset_of_ace_reg_main_cb_min_clamp (0xf8)
#define mask_of_ace_reg_main_cb_min_clamp   (0x3ff)
#define shift_of_ace_reg_main_cb_min_clamp  (0)
#define ACE_REG_MAIN_CB_MIN_CLAMP           (REG_ACE_BASE + offset_of_ace_reg_main_cb_min_clamp)
#define REG_ACE_7C_L                        (ACE_REG_MAIN_CB_MIN_CLAMP)
// h007d, bit: 9
/* Main window cr maximum clamp*/
#define offset_of_ace_reg_main_cr_max_clamp (0xfa)
#define mask_of_ace_reg_main_cr_max_clamp   (0x3ff)
#define shift_of_ace_reg_main_cr_max_clamp  (0)
#define ACE_REG_MAIN_CR_MAX_CLAMP           (REG_ACE_BASE + offset_of_ace_reg_main_cr_max_clamp)
#define REG_ACE_7D_L                        (ACE_REG_MAIN_CR_MAX_CLAMP)
// h007e, bit: 9
/* Main window cr minimum clamp*/
#define offset_of_ace_reg_main_cr_min_clamp (0xfc)
#define mask_of_ace_reg_main_cr_min_clamp   (0x3ff)
#define shift_of_ace_reg_main_cr_min_clamp  (0)
#define ACE_REG_MAIN_CR_MIN_CLAMP           (REG_ACE_BASE + offset_of_ace_reg_main_cr_min_clamp)
#define REG_ACE_7E_L                        (ACE_REG_MAIN_CR_MIN_CLAMP)
#define REG_ACE_7F_L                        (REG_ACE_BASE + 0xfe)
#define REG_DLC_00_L                        (REG_DLC_BASE + 0x0)
#define REG_DLC_01_L                        (REG_DLC_BASE + 0x2)
// h0002, bit: 3
/* Main window Y gain LSB
y_gain_new(1.10) = {y_gain,y_gain_lsb}*/
#define offset_of_dlc_reg_main_y_gain_lsb (0x4)
#define mask_of_dlc_reg_main_y_gain_lsb   (0xf)
#define shift_of_dlc_reg_main_y_gain_lsb  (0)
#define DLC_REG_MAIN_Y_GAIN_LSB           (REG_DLC_BASE + offset_of_dlc_reg_main_y_gain_lsb)
#define REG_DLC_02_L                      (DLC_REG_MAIN_Y_GAIN_LSB)
// h0002, bit: 7
/* Main window pre Y gain LSB
pre_y_gain_new(1.10) = {pre_y_gain,pre_y_gain_lsb}*/
#define offset_of_dlc_reg_main_pre_y_gain_lsb (0x4)
#define mask_of_dlc_reg_main_pre_y_gain_lsb   (0xf0)
#define shift_of_dlc_reg_main_pre_y_gain_lsb  (4)
#define DLC_REG_MAIN_PRE_Y_GAIN_LSB           (REG_DLC_BASE + offset_of_dlc_reg_main_pre_y_gain_lsb)
// h0003, bit: 2
/* */
#define offset_of_dlc_reg_histrpt_sft (0x6)
#define mask_of_dlc_reg_histrpt_sft   (0x7)
#define shift_of_dlc_reg_histrpt_sft  (0)
#define DLC_REG_HISTRPT_SFT           (REG_DLC_BASE + offset_of_dlc_reg_histrpt_sft)
#define REG_DLC_03_L                  (DLC_REG_HISTRPT_SFT)
// h0004, bit: 1
/* Main window statistic enable*/
#define offset_of_dlc_reg_main_statistic_en (0x8)
#define mask_of_dlc_reg_main_statistic_en   (0x2)
#define shift_of_dlc_reg_main_statistic_en  (1)
#define DLC_REG_MAIN_STATISTIC_EN           (REG_DLC_BASE + offset_of_dlc_reg_main_statistic_en)
#define REG_DLC_04_L                        (DLC_REG_MAIN_STATISTIC_EN)
// h0004, bit: 3
/* Histogram Acknowledge*/
#define offset_of_dlc_reg_statistic_ack (0x8)
#define mask_of_dlc_reg_statistic_ack   (0x8)
#define shift_of_dlc_reg_statistic_ack  (3)
#define DLC_REG_STATISTIC_ACK           (REG_DLC_BASE + offset_of_dlc_reg_statistic_ack)
// h0004, bit: 4
/*   0 : 3 section
  1 : 8 section*/
#define offset_of_dlc_reg_histogram_mode (0x8)
#define mask_of_dlc_reg_histogram_mode   (0x10)
#define shift_of_dlc_reg_histogram_mode  (4)
#define DLC_REG_HISTOGRAM_MODE           (REG_DLC_BASE + offset_of_dlc_reg_histogram_mode)
// h0004, bit: 5
/* Y curve fit dither enable*/
#define offset_of_dlc_reg_ycv_dither_en (0x8)
#define mask_of_dlc_reg_ycv_dither_en   (0x20)
#define shift_of_dlc_reg_ycv_dither_en  (5)
#define DLC_REG_YCV_DITHER_EN           (REG_DLC_BASE + offset_of_dlc_reg_ycv_dither_en)
// h0004, bit: 7
/* Main window luma curve enable*/
#define offset_of_dlc_reg_main_curve_fit_en (0x8)
#define mask_of_dlc_reg_main_curve_fit_en   (0x80)
#define shift_of_dlc_reg_main_curve_fit_en  (7)
#define DLC_REG_MAIN_CURVE_FIT_EN           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_en)
// h0004, bit: 8
/* Variable 8 section of histogram enable  */
#define offset_of_dlc_reg_variable_range_en (0x8)
#define mask_of_dlc_reg_variable_range_en   (0x100)
#define shift_of_dlc_reg_variable_range_en  (8)
#define DLC_REG_VARIABLE_RANGE_EN           (REG_DLC_BASE + offset_of_dlc_reg_variable_range_en)
// h0004, bit: 10
/* Histogram Y report as PC(RGB) mode enable*/
#define offset_of_dlc_reg_his_y_rgb_mode_en (0x8)
#define mask_of_dlc_reg_his_y_rgb_mode_en   (0x400)
#define shift_of_dlc_reg_his_y_rgb_mode_en  (10)
#define DLC_REG_HIS_Y_RGB_MODE_EN           (REG_DLC_BASE + offset_of_dlc_reg_his_y_rgb_mode_en)
// h0004, bit: 11
/* pre- brightness adjust dither bit enable*/
#define offset_of_dlc_reg_pre_bri_dither_en (0x8)
#define mask_of_dlc_reg_pre_bri_dither_en   (0x800)
#define shift_of_dlc_reg_pre_bri_dither_en  (11)
#define DLC_REG_PRE_BRI_DITHER_EN           (REG_DLC_BASE + offset_of_dlc_reg_pre_bri_dither_en)
// h0004, bit: 13
/* Main window luma curve enable as PC(RGB) mode enable*/
#define offset_of_dlc_reg_main_curve_fit_rgb_en (0x8)
#define mask_of_dlc_reg_main_curve_fit_rgb_en   (0x2000)
#define shift_of_dlc_reg_main_curve_fit_rgb_en  (13)
#define DLC_REG_MAIN_CURVE_FIT_RGB_EN           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_rgb_en)
// h0005, bit: 7
/* Dark level for 3 section histogram*/
#define offset_of_dlc_reg_dark_level (0xa)
#define mask_of_dlc_reg_dark_level   (0xff)
#define shift_of_dlc_reg_dark_level  (0)
#define DLC_REG_DARK_LEVEL           (REG_DLC_BASE + offset_of_dlc_reg_dark_level)
#define REG_DLC_05_L                 (DLC_REG_DARK_LEVEL)
// h0005, bit: 15
/* Light level for 3 section histogram*/
#define offset_of_dlc_reg_light_level (0xa)
#define mask_of_dlc_reg_light_level   (0xff00)
#define shift_of_dlc_reg_light_level  (8)
#define DLC_REG_LIGHT_LEVEL           (REG_DLC_BASE + offset_of_dlc_reg_light_level)
#define REG_DLC_06_L                  (REG_DLC_BASE + 0xc)
#define REG_DLC_07_L                  (REG_DLC_BASE + 0xe)
// h0008, bit: 5
/* Firmware main window white level extension enable*/
#define offset_of_dlc_reg_main_wle_en (0x10)
#define mask_of_dlc_reg_main_wle_en   (0x20)
#define shift_of_dlc_reg_main_wle_en  (5)
#define DLC_REG_MAIN_WLE_EN           (REG_DLC_BASE + offset_of_dlc_reg_main_wle_en)
#define REG_DLC_08_L                  (DLC_REG_MAIN_WLE_EN)
// h0008, bit: 6
/* Firmware main window black level extension enable*/
#define offset_of_dlc_reg_main_ble_en (0x10)
#define mask_of_dlc_reg_main_ble_en   (0x40)
#define shift_of_dlc_reg_main_ble_en  (6)
#define DLC_REG_MAIN_BLE_EN           (REG_DLC_BASE + offset_of_dlc_reg_main_ble_en)
// h0008, bit: 7
/* Main window histogram range enable*/
#define offset_of_dlc_reg_main_range_en (0x10)
#define mask_of_dlc_reg_main_range_en   (0x80)
#define shift_of_dlc_reg_main_range_en  (7)
#define DLC_REG_MAIN_RANGE_EN           (REG_DLC_BASE + offset_of_dlc_reg_main_range_en)
// h0008, bit: 8
/* Main window UV compensate enable*/
#define offset_of_dlc_reg_main_uvc_en (0x10)
#define mask_of_dlc_reg_main_uvc_en   (0x100)
#define shift_of_dlc_reg_main_uvc_en  (8)
#define DLC_REG_MAIN_UVC_EN           (REG_DLC_BASE + offset_of_dlc_reg_main_uvc_en)
// h0008, bit: 9
/* Main window UV compensate reference location
 //0: after ble/wle
 //1: after curve fit0*/
#define offset_of_dlc_reg_main_uvc_locate (0x10)
#define mask_of_dlc_reg_main_uvc_locate   (0x200)
#define shift_of_dlc_reg_main_uvc_locate  (9)
#define DLC_REG_MAIN_UVC_LOCATE           (REG_DLC_BASE + offset_of_dlc_reg_main_uvc_locate)
// h0008, bit: 14
/* reserved                     */
#define offset_of_dlc_reg_reserved_pw_left_sign_en (0x10)
#define mask_of_dlc_reg_reserved_pw_left_sign_en   (0x4000)
#define shift_of_dlc_reg_reserved_pw_left_sign_en  (14)
#define DLC_REG_RESERVED_PW_LEFT_SIGN_EN           (REG_DLC_BASE + offset_of_dlc_reg_reserved_pw_left_sign_en)
// h0008, bit: 15
/* UV compensate dither enable*/
#define offset_of_dlc_reg_uvc_dither_en (0x10)
#define mask_of_dlc_reg_uvc_dither_en   (0x8000)
#define shift_of_dlc_reg_uvc_dither_en  (15)
#define DLC_REG_UVC_DITHER_EN           (REG_DLC_BASE + offset_of_dlc_reg_uvc_dither_en)
#define REG_DLC_09_L                    (REG_DLC_BASE + 0x12)
#define REG_DLC_0A_L                    (REG_DLC_BASE + 0x14)
#define REG_DLC_0B_L                    (REG_DLC_BASE + 0x16)
// h000c, bit: 7
/* Variable 8 section of histogram range 1*/
#define offset_of_dlc_reg_histogram_range1 (0x18)
#define mask_of_dlc_reg_histogram_range1   (0xff)
#define shift_of_dlc_reg_histogram_range1  (0)
#define DLC_REG_HISTOGRAM_RANGE1           (REG_DLC_BASE + offset_of_dlc_reg_histogram_range1)
#define REG_DLC_0C_L                       (DLC_REG_HISTOGRAM_RANGE1)
// h000c, bit: 15
/* Variable 8 section of histogram range 2*/
#define offset_of_dlc_reg_histogram_range2 (0x18)
#define mask_of_dlc_reg_histogram_range2   (0xff00)
#define shift_of_dlc_reg_histogram_range2  (8)
#define DLC_REG_HISTOGRAM_RANGE2           (REG_DLC_BASE + offset_of_dlc_reg_histogram_range2)
// h000d, bit: 7
/* Variable 8 section of histogram range 3*/
#define offset_of_dlc_reg_histogram_range3 (0x1a)
#define mask_of_dlc_reg_histogram_range3   (0xff)
#define shift_of_dlc_reg_histogram_range3  (0)
#define DLC_REG_HISTOGRAM_RANGE3           (REG_DLC_BASE + offset_of_dlc_reg_histogram_range3)
#define REG_DLC_0D_L                       (DLC_REG_HISTOGRAM_RANGE3)
// h000d, bit: 15
/* Variable 8 section of histogram range 4*/
#define offset_of_dlc_reg_histogram_range4 (0x1a)
#define mask_of_dlc_reg_histogram_range4   (0xff00)
#define shift_of_dlc_reg_histogram_range4  (8)
#define DLC_REG_HISTOGRAM_RANGE4           (REG_DLC_BASE + offset_of_dlc_reg_histogram_range4)
// h000e, bit: 7
/* Variable 8 section of histogram range 5*/
#define offset_of_dlc_reg_histogram_range5 (0x1c)
#define mask_of_dlc_reg_histogram_range5   (0xff)
#define shift_of_dlc_reg_histogram_range5  (0)
#define DLC_REG_HISTOGRAM_RANGE5           (REG_DLC_BASE + offset_of_dlc_reg_histogram_range5)
#define REG_DLC_0E_L                       (DLC_REG_HISTOGRAM_RANGE5)
// h000e, bit: 15
/* Variable 8 section of histogram range 6*/
#define offset_of_dlc_reg_histogram_range6 (0x1c)
#define mask_of_dlc_reg_histogram_range6   (0xff00)
#define shift_of_dlc_reg_histogram_range6  (8)
#define DLC_REG_HISTOGRAM_RANGE6           (REG_DLC_BASE + offset_of_dlc_reg_histogram_range6)
// h000f, bit: 7
/* Variable 8 section of histogram range 7*/
#define offset_of_dlc_reg_histogram_range7 (0x1e)
#define mask_of_dlc_reg_histogram_range7   (0xff)
#define shift_of_dlc_reg_histogram_range7  (0)
#define DLC_REG_HISTOGRAM_RANGE7           (REG_DLC_BASE + offset_of_dlc_reg_histogram_range7)
#define REG_DLC_0F_L                       (DLC_REG_HISTOGRAM_RANGE7)
// h0010, bit: 7
/* Main window curve table 0*/
#define offset_of_dlc_reg_main_curve_fit_table_0 (0x20)
#define mask_of_dlc_reg_main_curve_fit_table_0   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_0  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_0           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_0)
#define REG_DLC_10_L                             (DLC_REG_MAIN_CURVE_FIT_TABLE_0)
// h0010, bit: 15
/* Main window curve table 1*/
#define offset_of_dlc_reg_main_curve_fit_table_1 (0x20)
#define mask_of_dlc_reg_main_curve_fit_table_1   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_1  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_1           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_1)
// h0011, bit: 7
/* Main window curve table 2*/
#define offset_of_dlc_reg_main_curve_fit_table_2 (0x22)
#define mask_of_dlc_reg_main_curve_fit_table_2   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_2  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_2           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_2)
#define REG_DLC_11_L                             (DLC_REG_MAIN_CURVE_FIT_TABLE_2)
// h0011, bit: 15
/* Main window curve table 3*/
#define offset_of_dlc_reg_main_curve_fit_table_3 (0x22)
#define mask_of_dlc_reg_main_curve_fit_table_3   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_3  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_3           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_3)
// h0012, bit: 7
/* Main window curve table 4*/
#define offset_of_dlc_reg_main_curve_fit_table_4 (0x24)
#define mask_of_dlc_reg_main_curve_fit_table_4   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_4  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_4           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_4)
#define REG_DLC_12_L                             (DLC_REG_MAIN_CURVE_FIT_TABLE_4)
// h0012, bit: 15
/* Main window curve table 5*/
#define offset_of_dlc_reg_main_curve_fit_table_5 (0x24)
#define mask_of_dlc_reg_main_curve_fit_table_5   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_5  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_5           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_5)
// h0013, bit: 7
/* Main window curve table 6*/
#define offset_of_dlc_reg_main_curve_fit_table_6 (0x26)
#define mask_of_dlc_reg_main_curve_fit_table_6   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_6  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_6           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_6)
#define REG_DLC_13_L                             (DLC_REG_MAIN_CURVE_FIT_TABLE_6)
// h0013, bit: 15
/* Main window curve table 7*/
#define offset_of_dlc_reg_main_curve_fit_table_7 (0x26)
#define mask_of_dlc_reg_main_curve_fit_table_7   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_7  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_7           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_7)
// h0014, bit: 7
/* Main window curve table 8*/
#define offset_of_dlc_reg_main_curve_fit_table_8 (0x28)
#define mask_of_dlc_reg_main_curve_fit_table_8   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_8  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_8           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_8)
#define REG_DLC_14_L                             (DLC_REG_MAIN_CURVE_FIT_TABLE_8)
// h0014, bit: 15
/* Main window curve table 9*/
#define offset_of_dlc_reg_main_curve_fit_table_9 (0x28)
#define mask_of_dlc_reg_main_curve_fit_table_9   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_9  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_9           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_9)
// h0015, bit: 7
/* Main window curve table 10*/
#define offset_of_dlc_reg_main_curve_fit_table_10 (0x2a)
#define mask_of_dlc_reg_main_curve_fit_table_10   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_10  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_10           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_10)
#define REG_DLC_15_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_10)
// h0015, bit: 15
/* Main window curve table 11*/
#define offset_of_dlc_reg_main_curve_fit_table_11 (0x2a)
#define mask_of_dlc_reg_main_curve_fit_table_11   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_11  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_11           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_11)
// h0016, bit: 7
/* Main window curve table 12*/
#define offset_of_dlc_reg_main_curve_fit_table_12 (0x2c)
#define mask_of_dlc_reg_main_curve_fit_table_12   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_12  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_12           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_12)
#define REG_DLC_16_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_12)
// h0016, bit: 15
/* Main window curve table 13*/
#define offset_of_dlc_reg_main_curve_fit_table_13 (0x2c)
#define mask_of_dlc_reg_main_curve_fit_table_13   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_13  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_13           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_13)
// h0017, bit: 7
/* Main window curve table 14*/
#define offset_of_dlc_reg_main_curve_fit_table_14 (0x2e)
#define mask_of_dlc_reg_main_curve_fit_table_14   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_14  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_14           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_14)
#define REG_DLC_17_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_14)
// h0017, bit: 15
/* Main window curve table 15*/
#define offset_of_dlc_reg_main_curve_fit_table_15 (0x2e)
#define mask_of_dlc_reg_main_curve_fit_table_15   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_15  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_15           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_15)
// h0018, bit: 7
/* Main window curve table 16*/
#define offset_of_dlc_reg_main_curve_fit_table_16 (0x30)
#define mask_of_dlc_reg_main_curve_fit_table_16   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_16  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_16           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_16)
#define REG_DLC_18_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_16)
// h0018, bit: 15
/* Main window curve table 17*/
#define offset_of_dlc_reg_main_curve_fit_table_17 (0x30)
#define mask_of_dlc_reg_main_curve_fit_table_17   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_17  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_17           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_17)
// h0019, bit: 7
/* Main window curve table 18*/
#define offset_of_dlc_reg_main_curve_fit_table_18 (0x32)
#define mask_of_dlc_reg_main_curve_fit_table_18   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_18  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_18           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_18)
#define REG_DLC_19_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_18)
// h0019, bit: 15
/* Main window curve table 19*/
#define offset_of_dlc_reg_main_curve_fit_table_19 (0x32)
#define mask_of_dlc_reg_main_curve_fit_table_19   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_19  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_19           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_19)
// h001a, bit: 7
/* Main window curve table 20*/
#define offset_of_dlc_reg_main_curve_fit_table_20 (0x34)
#define mask_of_dlc_reg_main_curve_fit_table_20   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_20  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_20           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_20)
#define REG_DLC_1A_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_20)
// h001a, bit: 15
/* Main window curve table 21*/
#define offset_of_dlc_reg_main_curve_fit_table_21 (0x34)
#define mask_of_dlc_reg_main_curve_fit_table_21   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_21  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_21           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_21)
// h001b, bit: 7
/* Main window curve table 22*/
#define offset_of_dlc_reg_main_curve_fit_table_22 (0x36)
#define mask_of_dlc_reg_main_curve_fit_table_22   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_22  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_22           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_22)
#define REG_DLC_1B_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_22)
// h001b, bit: 15
/* Main window curve table 23*/
#define offset_of_dlc_reg_main_curve_fit_table_23 (0x36)
#define mask_of_dlc_reg_main_curve_fit_table_23   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_23  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_23           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_23)
// h001c, bit: 7
/* Main window curve table 24*/
#define offset_of_dlc_reg_main_curve_fit_table_24 (0x38)
#define mask_of_dlc_reg_main_curve_fit_table_24   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_24  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_24           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_24)
#define REG_DLC_1C_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_24)
// h001c, bit: 15
/* Main window curve table 25*/
#define offset_of_dlc_reg_main_curve_fit_table_25 (0x38)
#define mask_of_dlc_reg_main_curve_fit_table_25   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_25  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_25           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_25)
// h001d, bit: 7
/* Main window curve table 26*/
#define offset_of_dlc_reg_main_curve_fit_table_26 (0x3a)
#define mask_of_dlc_reg_main_curve_fit_table_26   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_26  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_26           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_26)
#define REG_DLC_1D_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_26)
// h001d, bit: 15
/* Main window curve table 27*/
#define offset_of_dlc_reg_main_curve_fit_table_27 (0x3a)
#define mask_of_dlc_reg_main_curve_fit_table_27   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_27  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_27           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_27)
// h001e, bit: 7
/* Main window curve table 28*/
#define offset_of_dlc_reg_main_curve_fit_table_28 (0x3c)
#define mask_of_dlc_reg_main_curve_fit_table_28   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_28  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_28           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_28)
#define REG_DLC_1E_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_28)
// h001e, bit: 15
/* Main window curve table 29*/
#define offset_of_dlc_reg_main_curve_fit_table_29 (0x3c)
#define mask_of_dlc_reg_main_curve_fit_table_29   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_29  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_29           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_29)
// h001f, bit: 7
/* Main window curve table 30*/
#define offset_of_dlc_reg_main_curve_fit_table_30 (0x3e)
#define mask_of_dlc_reg_main_curve_fit_table_30   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_30  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_30           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_30)
#define REG_DLC_1F_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_30)
// h001f, bit: 15
/* Main window curve table 31*/
#define offset_of_dlc_reg_main_curve_fit_table_31 (0x3e)
#define mask_of_dlc_reg_main_curve_fit_table_31   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_31  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_31           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_31)
// h0020, bit: 7
/* Main window curve table 32*/
#define offset_of_dlc_reg_main_curve_fit_table_32 (0x40)
#define mask_of_dlc_reg_main_curve_fit_table_32   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_32  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_32           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_32)
#define REG_DLC_20_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_32)
// h0020, bit: 15
/* Main window curve table 33*/
#define offset_of_dlc_reg_main_curve_fit_table_33 (0x40)
#define mask_of_dlc_reg_main_curve_fit_table_33   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_33  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_33           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_33)
// h0021, bit: 7
/* Main window curve table 34*/
#define offset_of_dlc_reg_main_curve_fit_table_34 (0x42)
#define mask_of_dlc_reg_main_curve_fit_table_34   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_34  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_34           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_34)
#define REG_DLC_21_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_34)
// h0021, bit: 15
/* Main window curve table 35*/
#define offset_of_dlc_reg_main_curve_fit_table_35 (0x42)
#define mask_of_dlc_reg_main_curve_fit_table_35   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_35  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_35           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_35)
// h0022, bit: 7
/* Main window curve table 36*/
#define offset_of_dlc_reg_main_curve_fit_table_36 (0x44)
#define mask_of_dlc_reg_main_curve_fit_table_36   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_36  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_36           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_36)
#define REG_DLC_22_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_36)
// h0022, bit: 15
/* Main window curve table 37*/
#define offset_of_dlc_reg_main_curve_fit_table_37 (0x44)
#define mask_of_dlc_reg_main_curve_fit_table_37   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_37  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_37           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_37)
// h0023, bit: 7
/* Main window curve table 38*/
#define offset_of_dlc_reg_main_curve_fit_table_38 (0x46)
#define mask_of_dlc_reg_main_curve_fit_table_38   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_38  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_38           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_38)
#define REG_DLC_23_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_38)
// h0023, bit: 15
/* Main window curve table 39*/
#define offset_of_dlc_reg_main_curve_fit_table_39 (0x46)
#define mask_of_dlc_reg_main_curve_fit_table_39   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_39  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_39           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_39)
// h0024, bit: 7
/* Main window curve table 40*/
#define offset_of_dlc_reg_main_curve_fit_table_40 (0x48)
#define mask_of_dlc_reg_main_curve_fit_table_40   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_40  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_40           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_40)
#define REG_DLC_24_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_40)
// h0024, bit: 15
/* Main window curve table 41*/
#define offset_of_dlc_reg_main_curve_fit_table_41 (0x48)
#define mask_of_dlc_reg_main_curve_fit_table_41   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_41  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_41           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_41)
// h0025, bit: 7
/* Main window curve table 42*/
#define offset_of_dlc_reg_main_curve_fit_table_42 (0x4a)
#define mask_of_dlc_reg_main_curve_fit_table_42   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_42  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_42           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_42)
#define REG_DLC_25_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_42)
// h0025, bit: 15
/* Main window curve table 43*/
#define offset_of_dlc_reg_main_curve_fit_table_43 (0x4a)
#define mask_of_dlc_reg_main_curve_fit_table_43   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_43  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_43           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_43)
// h0026, bit: 7
/* Main window curve table 44*/
#define offset_of_dlc_reg_main_curve_fit_table_44 (0x4c)
#define mask_of_dlc_reg_main_curve_fit_table_44   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_44  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_44           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_44)
#define REG_DLC_26_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_44)
// h0026, bit: 15
/* Main window curve table 45*/
#define offset_of_dlc_reg_main_curve_fit_table_45 (0x4c)
#define mask_of_dlc_reg_main_curve_fit_table_45   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_45  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_45           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_45)
// h0027, bit: 7
/* Main window curve table 46*/
#define offset_of_dlc_reg_main_curve_fit_table_46 (0x4e)
#define mask_of_dlc_reg_main_curve_fit_table_46   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_46  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_46           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_46)
#define REG_DLC_27_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_46)
// h0027, bit: 15
/* Main window curve table 47*/
#define offset_of_dlc_reg_main_curve_fit_table_47 (0x4e)
#define mask_of_dlc_reg_main_curve_fit_table_47   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_47  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_47           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_47)
// h0028, bit: 7
/* Main window curve table 48*/
#define offset_of_dlc_reg_main_curve_fit_table_48 (0x50)
#define mask_of_dlc_reg_main_curve_fit_table_48   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_48  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_48           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_48)
#define REG_DLC_28_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_48)
// h0028, bit: 15
/* Main window curve table 49*/
#define offset_of_dlc_reg_main_curve_fit_table_49 (0x50)
#define mask_of_dlc_reg_main_curve_fit_table_49   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_49  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_49           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_49)
// h0029, bit: 7
/* Main window curve table 50*/
#define offset_of_dlc_reg_main_curve_fit_table_50 (0x52)
#define mask_of_dlc_reg_main_curve_fit_table_50   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_50  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_50           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_50)
#define REG_DLC_29_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_50)
// h0029, bit: 15
/* Main window curve table 51*/
#define offset_of_dlc_reg_main_curve_fit_table_51 (0x52)
#define mask_of_dlc_reg_main_curve_fit_table_51   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_51  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_51           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_51)
// h002a, bit: 7
/* Main window curve table 52*/
#define offset_of_dlc_reg_main_curve_fit_table_52 (0x54)
#define mask_of_dlc_reg_main_curve_fit_table_52   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_52  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_52           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_52)
#define REG_DLC_2A_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_52)
// h002a, bit: 15
/* Main window curve table 53*/
#define offset_of_dlc_reg_main_curve_fit_table_53 (0x54)
#define mask_of_dlc_reg_main_curve_fit_table_53   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_53  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_53           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_53)
// h002b, bit: 7
/* Main window curve table 54*/
#define offset_of_dlc_reg_main_curve_fit_table_54 (0x56)
#define mask_of_dlc_reg_main_curve_fit_table_54   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_54  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_54           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_54)
#define REG_DLC_2B_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_54)
// h002b, bit: 15
/* Main window curve table 55*/
#define offset_of_dlc_reg_main_curve_fit_table_55 (0x56)
#define mask_of_dlc_reg_main_curve_fit_table_55   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_55  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_55           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_55)
// h002c, bit: 7
/* Main window curve table 56*/
#define offset_of_dlc_reg_main_curve_fit_table_56 (0x58)
#define mask_of_dlc_reg_main_curve_fit_table_56   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_56  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_56           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_56)
#define REG_DLC_2C_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_56)
// h002c, bit: 15
/* Main window curve table 57*/
#define offset_of_dlc_reg_main_curve_fit_table_57 (0x58)
#define mask_of_dlc_reg_main_curve_fit_table_57   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_57  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_57           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_57)
// h002d, bit: 7
/* Main window curve table 58*/
#define offset_of_dlc_reg_main_curve_fit_table_58 (0x5a)
#define mask_of_dlc_reg_main_curve_fit_table_58   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_58  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_58           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_58)
#define REG_DLC_2D_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_58)
// h002d, bit: 15
/* Main window curve table 59*/
#define offset_of_dlc_reg_main_curve_fit_table_59 (0x5a)
#define mask_of_dlc_reg_main_curve_fit_table_59   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_59  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_59           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_59)
// h002e, bit: 7
/* Main window curve table 60*/
#define offset_of_dlc_reg_main_curve_fit_table_60 (0x5c)
#define mask_of_dlc_reg_main_curve_fit_table_60   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_60  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_60           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_60)
#define REG_DLC_2E_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_60)
// h002e, bit: 15
/* Main window curve table 61*/
#define offset_of_dlc_reg_main_curve_fit_table_61 (0x5c)
#define mask_of_dlc_reg_main_curve_fit_table_61   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_61  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_61           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_61)
// h002f, bit: 7
/* Main window curve table 62*/
#define offset_of_dlc_reg_main_curve_fit_table_62 (0x5e)
#define mask_of_dlc_reg_main_curve_fit_table_62   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_62  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_62           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_62)
#define REG_DLC_2F_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_62)
// h002f, bit: 15
/* Main window curve table 63*/
#define offset_of_dlc_reg_main_curve_fit_table_63 (0x5e)
#define mask_of_dlc_reg_main_curve_fit_table_63   (0xff00)
#define shift_of_dlc_reg_main_curve_fit_table_63  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_63           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_63)
// h0030, bit: 0
/* Main window 16 variable piecewise linear DLC enable*/
#define offset_of_dlc_reg_main_curve_fit_var_pw_en (0x60)
#define mask_of_dlc_reg_main_curve_fit_var_pw_en   (0x1)
#define shift_of_dlc_reg_main_curve_fit_var_pw_en  (0)
#define DLC_REG_MAIN_CURVE_FIT_VAR_PW_EN           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_var_pw_en)
#define REG_DLC_30_L                               (DLC_REG_MAIN_CURVE_FIT_VAR_PW_EN)
// h0030, bit: 10
/* Main window c_gain emable for color0*/
#define offset_of_dlc_reg_main_cgain_color_en (0x60)
#define mask_of_dlc_reg_main_cgain_color_en   (0x400)
#define shift_of_dlc_reg_main_cgain_color_en  (10)
#define DLC_REG_MAIN_CGAIN_COLOR_EN           (REG_DLC_BASE + offset_of_dlc_reg_main_cgain_color_en)
// h0030, bit: 15
/* sat normalize enanle for Cgain adaptive sat*/
#define offset_of_dlc_reg_cgain_adp_sat_norm_en (0x60)
#define mask_of_dlc_reg_cgain_adp_sat_norm_en   (0x8000)
#define shift_of_dlc_reg_cgain_adp_sat_norm_en  (15)
#define DLC_REG_CGAIN_ADP_SAT_NORM_EN           (REG_DLC_BASE + offset_of_dlc_reg_cgain_adp_sat_norm_en)
// h0031, bit: 15
/* Main window color0 selection for  cgain of  Color Group*/
#define offset_of_dlc_reg_main_color_select_cgain (0x62)
#define mask_of_dlc_reg_main_color_select_cgain   (0xffff)
#define shift_of_dlc_reg_main_color_select_cgain  (0)
#define DLC_REG_MAIN_COLOR_SELECT_CGAIN           (REG_DLC_BASE + offset_of_dlc_reg_main_color_select_cgain)
#define REG_DLC_31_L                              (DLC_REG_MAIN_COLOR_SELECT_CGAIN)
// h0032, bit: 7
/* Main window C gain for color0*/
#define offset_of_dlc_reg_main_c_gain_color (0x64)
#define mask_of_dlc_reg_main_c_gain_color   (0xff)
#define shift_of_dlc_reg_main_c_gain_color  (0)
#define DLC_REG_MAIN_C_GAIN_COLOR           (REG_DLC_BASE + offset_of_dlc_reg_main_c_gain_color)
#define REG_DLC_32_L                        (DLC_REG_MAIN_C_GAIN_COLOR)
#define REG_DLC_33_L                        (REG_DLC_BASE + 0x66)
#define REG_DLC_34_L                        (REG_DLC_BASE + 0x68)
#define REG_DLC_35_L                        (REG_DLC_BASE + 0x6a)
#define REG_DLC_36_L                        (REG_DLC_BASE + 0x6c)
#define REG_DLC_37_L                        (REG_DLC_BASE + 0x6e)
// h0038, bit: 10
/* y gain before dlc, 1.10*/
#define offset_of_dlc_reg_dlc_in_y_gain (0x70)
#define mask_of_dlc_reg_dlc_in_y_gain   (0x7ff)
#define shift_of_dlc_reg_dlc_in_y_gain  (0)
#define DLC_REG_DLC_IN_Y_GAIN           (REG_DLC_BASE + offset_of_dlc_reg_dlc_in_y_gain)
#define REG_DLC_38_L                    (DLC_REG_DLC_IN_Y_GAIN)
// h0039, bit: 8
/* y offset before dlc, 8bit, sign magnitude*/
#define offset_of_dlc_reg_dlc_in_y_offset (0x72)
#define mask_of_dlc_reg_dlc_in_y_offset   (0x1ff)
#define shift_of_dlc_reg_dlc_in_y_offset  (0)
#define DLC_REG_DLC_IN_Y_OFFSET           (REG_DLC_BASE + offset_of_dlc_reg_dlc_in_y_offset)
#define REG_DLC_39_L                      (DLC_REG_DLC_IN_Y_OFFSET)
// h003a, bit: 10
/* c gain before dlc, 1.10*/
#define offset_of_dlc_reg_dlc_in_c_gain (0x74)
#define mask_of_dlc_reg_dlc_in_c_gain   (0x7ff)
#define shift_of_dlc_reg_dlc_in_c_gain  (0)
#define DLC_REG_DLC_IN_C_GAIN           (REG_DLC_BASE + offset_of_dlc_reg_dlc_in_c_gain)
#define REG_DLC_3A_L                    (DLC_REG_DLC_IN_C_GAIN)
// h003b, bit: 8
/* c offset before dlc, 8bit, sign magnitude*/
#define offset_of_dlc_reg_dlc_in_c_offset (0x76)
#define mask_of_dlc_reg_dlc_in_c_offset   (0x1ff)
#define shift_of_dlc_reg_dlc_in_c_offset  (0)
#define DLC_REG_DLC_IN_C_OFFSET           (REG_DLC_BASE + offset_of_dlc_reg_dlc_in_c_offset)
#define REG_DLC_3B_L                      (DLC_REG_DLC_IN_C_OFFSET)
// h003c, bit: 10
/* y gain after dlc, 1.10*/
#define offset_of_dlc_reg_dlc_out_y_gain (0x78)
#define mask_of_dlc_reg_dlc_out_y_gain   (0x7ff)
#define shift_of_dlc_reg_dlc_out_y_gain  (0)
#define DLC_REG_DLC_OUT_Y_GAIN           (REG_DLC_BASE + offset_of_dlc_reg_dlc_out_y_gain)
#define REG_DLC_3C_L                     (DLC_REG_DLC_OUT_Y_GAIN)
// h003d, bit: 8
/* y offset after dlc, 8bit, sign magnitude*/
#define offset_of_dlc_reg_dlc_out_y_offset (0x7a)
#define mask_of_dlc_reg_dlc_out_y_offset   (0x1ff)
#define shift_of_dlc_reg_dlc_out_y_offset  (0)
#define DLC_REG_DLC_OUT_Y_OFFSET           (REG_DLC_BASE + offset_of_dlc_reg_dlc_out_y_offset)
#define REG_DLC_3D_L                       (DLC_REG_DLC_OUT_Y_OFFSET)
// h003e, bit: 10
/* c gain after dlc, 1.10*/
#define offset_of_dlc_reg_dlc_out_c_gain (0x7c)
#define mask_of_dlc_reg_dlc_out_c_gain   (0x7ff)
#define shift_of_dlc_reg_dlc_out_c_gain  (0)
#define DLC_REG_DLC_OUT_C_GAIN           (REG_DLC_BASE + offset_of_dlc_reg_dlc_out_c_gain)
#define REG_DLC_3E_L                     (DLC_REG_DLC_OUT_C_GAIN)
// h003f, bit: 8
/* c offset after dlc, 1.8, sign magnitude*/
#define offset_of_dlc_reg_dlc_out_c_offset (0x7e)
#define mask_of_dlc_reg_dlc_out_c_offset   (0x1ff)
#define shift_of_dlc_reg_dlc_out_c_offset  (0)
#define DLC_REG_DLC_OUT_C_OFFSET           (REG_DLC_BASE + offset_of_dlc_reg_dlc_out_c_offset)
#define REG_DLC_3F_L                       (DLC_REG_DLC_OUT_C_OFFSET)
// h0040, bit: 7
/* 16 variable piecewise linear DLC control point 1*/
#define offset_of_dlc_reg_curve_fit_var_cp1 (0x80)
#define mask_of_dlc_reg_curve_fit_var_cp1   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp1  (0)
#define DLC_REG_CURVE_FIT_VAR_CP1           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp1)
#define REG_DLC_40_L                        (DLC_REG_CURVE_FIT_VAR_CP1)
// h0040, bit: 15
/* 16 variable piecewise linear DLC control point 2*/
#define offset_of_dlc_reg_curve_fit_var_cp2 (0x80)
#define mask_of_dlc_reg_curve_fit_var_cp2   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp2  (8)
#define DLC_REG_CURVE_FIT_VAR_CP2           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp2)
// h0041, bit: 7
/* 16 variable piecewise linear DLC control point 3*/
#define offset_of_dlc_reg_curve_fit_var_cp3 (0x82)
#define mask_of_dlc_reg_curve_fit_var_cp3   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp3  (0)
#define DLC_REG_CURVE_FIT_VAR_CP3           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp3)
#define REG_DLC_41_L                        (DLC_REG_CURVE_FIT_VAR_CP3)
// h0041, bit: 15
/* 16 variable piecewise linear DLC control point 4*/
#define offset_of_dlc_reg_curve_fit_var_cp4 (0x82)
#define mask_of_dlc_reg_curve_fit_var_cp4   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp4  (8)
#define DLC_REG_CURVE_FIT_VAR_CP4           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp4)
// h0042, bit: 7
/* 16 variable piecewise linear DLC control point 5*/
#define offset_of_dlc_reg_curve_fit_var_cp5 (0x84)
#define mask_of_dlc_reg_curve_fit_var_cp5   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp5  (0)
#define DLC_REG_CURVE_FIT_VAR_CP5           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp5)
#define REG_DLC_42_L                        (DLC_REG_CURVE_FIT_VAR_CP5)
// h0042, bit: 15
/* 16 variable piecewise linear DLC control point 6*/
#define offset_of_dlc_reg_curve_fit_var_cp6 (0x84)
#define mask_of_dlc_reg_curve_fit_var_cp6   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp6  (8)
#define DLC_REG_CURVE_FIT_VAR_CP6           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp6)
// h0043, bit: 7
/* 16 variable piecewise linear DLC control point 7*/
#define offset_of_dlc_reg_curve_fit_var_cp7 (0x86)
#define mask_of_dlc_reg_curve_fit_var_cp7   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp7  (0)
#define DLC_REG_CURVE_FIT_VAR_CP7           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp7)
#define REG_DLC_43_L                        (DLC_REG_CURVE_FIT_VAR_CP7)
// h0043, bit: 15
/* 16 variable piecewise linear DLC control point 8*/
#define offset_of_dlc_reg_curve_fit_var_cp8 (0x86)
#define mask_of_dlc_reg_curve_fit_var_cp8   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp8  (8)
#define DLC_REG_CURVE_FIT_VAR_CP8           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp8)
// h0044, bit: 7
/* 16 variable piecewise linear DLC control point 9*/
#define offset_of_dlc_reg_curve_fit_var_cp9 (0x88)
#define mask_of_dlc_reg_curve_fit_var_cp9   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp9  (0)
#define DLC_REG_CURVE_FIT_VAR_CP9           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp9)
#define REG_DLC_44_L                        (DLC_REG_CURVE_FIT_VAR_CP9)
// h0044, bit: 15
/* 16 variable piecewise linear DLC control point 10*/
#define offset_of_dlc_reg_curve_fit_var_cp10 (0x88)
#define mask_of_dlc_reg_curve_fit_var_cp10   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp10  (8)
#define DLC_REG_CURVE_FIT_VAR_CP10           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp10)
// h0045, bit: 7
/* 16 variable piecewise linear DLC control point 11*/
#define offset_of_dlc_reg_curve_fit_var_cp11 (0x8a)
#define mask_of_dlc_reg_curve_fit_var_cp11   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp11  (0)
#define DLC_REG_CURVE_FIT_VAR_CP11           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp11)
#define REG_DLC_45_L                         (DLC_REG_CURVE_FIT_VAR_CP11)
// h0045, bit: 15
/* 16 variable piecewise linear DLC control point 12*/
#define offset_of_dlc_reg_curve_fit_var_cp12 (0x8a)
#define mask_of_dlc_reg_curve_fit_var_cp12   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp12  (8)
#define DLC_REG_CURVE_FIT_VAR_CP12           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp12)
// h0046, bit: 7
/* 16 variable piecewise linear DLC control point 13*/
#define offset_of_dlc_reg_curve_fit_var_cp13 (0x8c)
#define mask_of_dlc_reg_curve_fit_var_cp13   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp13  (0)
#define DLC_REG_CURVE_FIT_VAR_CP13           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp13)
#define REG_DLC_46_L                         (DLC_REG_CURVE_FIT_VAR_CP13)
// h0046, bit: 15
/* 16 variable piecewise linear DLC control point 14*/
#define offset_of_dlc_reg_curve_fit_var_cp14 (0x8c)
#define mask_of_dlc_reg_curve_fit_var_cp14   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp14  (8)
#define DLC_REG_CURVE_FIT_VAR_CP14           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp14)
// h0047, bit: 7
/* 16 variable piecewise linear DLC control point 15*/
#define offset_of_dlc_reg_curve_fit_var_cp15 (0x8e)
#define mask_of_dlc_reg_curve_fit_var_cp15   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp15  (0)
#define DLC_REG_CURVE_FIT_VAR_CP15           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp15)
#define REG_DLC_47_L                         (DLC_REG_CURVE_FIT_VAR_CP15)
// h0047, bit: 15
/* 16 variable piecewise linear DLC control point 16*/
#define offset_of_dlc_reg_curve_fit_var_cp16 (0x8e)
#define mask_of_dlc_reg_curve_fit_var_cp16   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp16  (8)
#define DLC_REG_CURVE_FIT_VAR_CP16           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp16)
// h0048, bit: 7
/* 17 variable piecewise linear DLC control point 1*/
#define offset_of_dlc_reg_curve_fit_var_cp17 (0x90)
#define mask_of_dlc_reg_curve_fit_var_cp17   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp17  (0)
#define DLC_REG_CURVE_FIT_VAR_CP17           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp17)
#define REG_DLC_48_L                         (DLC_REG_CURVE_FIT_VAR_CP17)
// h0048, bit: 15
/* 17 variable piecewise linear DLC control point 2*/
#define offset_of_dlc_reg_curve_fit_var_cp18 (0x90)
#define mask_of_dlc_reg_curve_fit_var_cp18   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp18  (8)
#define DLC_REG_CURVE_FIT_VAR_CP18           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp18)
// h0049, bit: 7
/* 17 variable piecewise linear DLC control point 3*/
#define offset_of_dlc_reg_curve_fit_var_cp19 (0x92)
#define mask_of_dlc_reg_curve_fit_var_cp19   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp19  (0)
#define DLC_REG_CURVE_FIT_VAR_CP19           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp19)
#define REG_DLC_49_L                         (DLC_REG_CURVE_FIT_VAR_CP19)
// h0049, bit: 15
/* 17 variable piecewise linear DLC control point 4*/
#define offset_of_dlc_reg_curve_fit_var_cp20 (0x92)
#define mask_of_dlc_reg_curve_fit_var_cp20   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp20  (8)
#define DLC_REG_CURVE_FIT_VAR_CP20           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp20)
// h004a, bit: 7
/* 17 variable piecewise linear DLC control point 5*/
#define offset_of_dlc_reg_curve_fit_var_cp21 (0x94)
#define mask_of_dlc_reg_curve_fit_var_cp21   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp21  (0)
#define DLC_REG_CURVE_FIT_VAR_CP21           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp21)
#define REG_DLC_4A_L                         (DLC_REG_CURVE_FIT_VAR_CP21)
// h004a, bit: 15
/* 17 variable piecewise linear DLC control point 6*/
#define offset_of_dlc_reg_curve_fit_var_cp22 (0x94)
#define mask_of_dlc_reg_curve_fit_var_cp22   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp22  (8)
#define DLC_REG_CURVE_FIT_VAR_CP22           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp22)
// h004b, bit: 7
/* 17 variable piecewise linear DLC control point 7*/
#define offset_of_dlc_reg_curve_fit_var_cp23 (0x96)
#define mask_of_dlc_reg_curve_fit_var_cp23   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp23  (0)
#define DLC_REG_CURVE_FIT_VAR_CP23           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp23)
#define REG_DLC_4B_L                         (DLC_REG_CURVE_FIT_VAR_CP23)
// h004b, bit: 15
/* 17 variable piecewise linear DLC control point 8*/
#define offset_of_dlc_reg_curve_fit_var_cp24 (0x96)
#define mask_of_dlc_reg_curve_fit_var_cp24   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp24  (8)
#define DLC_REG_CURVE_FIT_VAR_CP24           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp24)
// h004c, bit: 7
/* 17 variable piecewise linear DLC control point 9*/
#define offset_of_dlc_reg_curve_fit_var_cp25 (0x98)
#define mask_of_dlc_reg_curve_fit_var_cp25   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp25  (0)
#define DLC_REG_CURVE_FIT_VAR_CP25           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp25)
#define REG_DLC_4C_L                         (DLC_REG_CURVE_FIT_VAR_CP25)
// h004c, bit: 15
/* 17 variable piecewise linear DLC control point 10*/
#define offset_of_dlc_reg_curve_fit_var_cp26 (0x98)
#define mask_of_dlc_reg_curve_fit_var_cp26   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp26  (8)
#define DLC_REG_CURVE_FIT_VAR_CP26           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp26)
// h004d, bit: 7
/* 17 variable piecewise linear DLC control point 11*/
#define offset_of_dlc_reg_curve_fit_var_cp27 (0x9a)
#define mask_of_dlc_reg_curve_fit_var_cp27   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp27  (0)
#define DLC_REG_CURVE_FIT_VAR_CP27           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp27)
#define REG_DLC_4D_L                         (DLC_REG_CURVE_FIT_VAR_CP27)
// h004d, bit: 15
/* 17 variable piecewise linear DLC control point 12*/
#define offset_of_dlc_reg_curve_fit_var_cp28 (0x9a)
#define mask_of_dlc_reg_curve_fit_var_cp28   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp28  (8)
#define DLC_REG_CURVE_FIT_VAR_CP28           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp28)
// h004e, bit: 7
/* 17 variable piecewise linear DLC control point 13*/
#define offset_of_dlc_reg_curve_fit_var_cp29 (0x9c)
#define mask_of_dlc_reg_curve_fit_var_cp29   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp29  (0)
#define DLC_REG_CURVE_FIT_VAR_CP29           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp29)
#define REG_DLC_4E_L                         (DLC_REG_CURVE_FIT_VAR_CP29)
// h004e, bit: 15
/* 17 variable piecewise linear DLC control point 14*/
#define offset_of_dlc_reg_curve_fit_var_cp30 (0x9c)
#define mask_of_dlc_reg_curve_fit_var_cp30   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp30  (8)
#define DLC_REG_CURVE_FIT_VAR_CP30           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp30)
// h004f, bit: 7
/* 17 variable piecewise linear DLC control point 15*/
#define offset_of_dlc_reg_curve_fit_var_cp31 (0x9e)
#define mask_of_dlc_reg_curve_fit_var_cp31   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp31  (0)
#define DLC_REG_CURVE_FIT_VAR_CP31           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp31)
#define REG_DLC_4F_L                         (DLC_REG_CURVE_FIT_VAR_CP31)
// h004f, bit: 15
/* 17 variable piecewise linear DLC control point 16*/
#define offset_of_dlc_reg_curve_fit_var_cp32 (0x9e)
#define mask_of_dlc_reg_curve_fit_var_cp32   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp32  (8)
#define DLC_REG_CURVE_FIT_VAR_CP32           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp32)
// h0050, bit: 7
/* 18 variable piecewise linear DLC control point 1*/
#define offset_of_dlc_reg_curve_fit_var_cp33 (0xa0)
#define mask_of_dlc_reg_curve_fit_var_cp33   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp33  (0)
#define DLC_REG_CURVE_FIT_VAR_CP33           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp33)
#define REG_DLC_50_L                         (DLC_REG_CURVE_FIT_VAR_CP33)
// h0050, bit: 15
/* 18 variable piecewise linear DLC control point 2*/
#define offset_of_dlc_reg_curve_fit_var_cp34 (0xa0)
#define mask_of_dlc_reg_curve_fit_var_cp34   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp34  (8)
#define DLC_REG_CURVE_FIT_VAR_CP34           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp34)
// h0051, bit: 7
/* 18 variable piecewise linear DLC control point 3*/
#define offset_of_dlc_reg_curve_fit_var_cp35 (0xa2)
#define mask_of_dlc_reg_curve_fit_var_cp35   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp35  (0)
#define DLC_REG_CURVE_FIT_VAR_CP35           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp35)
#define REG_DLC_51_L                         (DLC_REG_CURVE_FIT_VAR_CP35)
// h0051, bit: 15
/* 18 variable piecewise linear DLC control point 4*/
#define offset_of_dlc_reg_curve_fit_var_cp36 (0xa2)
#define mask_of_dlc_reg_curve_fit_var_cp36   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp36  (8)
#define DLC_REG_CURVE_FIT_VAR_CP36           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp36)
// h0052, bit: 7
/* 18 variable piecewise linear DLC control point 5*/
#define offset_of_dlc_reg_curve_fit_var_cp37 (0xa4)
#define mask_of_dlc_reg_curve_fit_var_cp37   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp37  (0)
#define DLC_REG_CURVE_FIT_VAR_CP37           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp37)
#define REG_DLC_52_L                         (DLC_REG_CURVE_FIT_VAR_CP37)
// h0052, bit: 15
/* 18 variable piecewise linear DLC control point 6*/
#define offset_of_dlc_reg_curve_fit_var_cp38 (0xa4)
#define mask_of_dlc_reg_curve_fit_var_cp38   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp38  (8)
#define DLC_REG_CURVE_FIT_VAR_CP38           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp38)
// h0053, bit: 7
/* 18 variable piecewise linear DLC control point 7*/
#define offset_of_dlc_reg_curve_fit_var_cp39 (0xa6)
#define mask_of_dlc_reg_curve_fit_var_cp39   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp39  (0)
#define DLC_REG_CURVE_FIT_VAR_CP39           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp39)
#define REG_DLC_53_L                         (DLC_REG_CURVE_FIT_VAR_CP39)
// h0053, bit: 15
/* 18 variable piecewise linear DLC control point 8*/
#define offset_of_dlc_reg_curve_fit_var_cp40 (0xa6)
#define mask_of_dlc_reg_curve_fit_var_cp40   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp40  (8)
#define DLC_REG_CURVE_FIT_VAR_CP40           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp40)
// h0054, bit: 7
/* 18 variable piecewise linear DLC control point 9*/
#define offset_of_dlc_reg_curve_fit_var_cp41 (0xa8)
#define mask_of_dlc_reg_curve_fit_var_cp41   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp41  (0)
#define DLC_REG_CURVE_FIT_VAR_CP41           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp41)
#define REG_DLC_54_L                         (DLC_REG_CURVE_FIT_VAR_CP41)
// h0054, bit: 15
/* 18 variable piecewise linear DLC control point 10*/
#define offset_of_dlc_reg_curve_fit_var_cp42 (0xa8)
#define mask_of_dlc_reg_curve_fit_var_cp42   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp42  (8)
#define DLC_REG_CURVE_FIT_VAR_CP42           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp42)
// h0055, bit: 7
/* 18 variable piecewise linear DLC control point 11*/
#define offset_of_dlc_reg_curve_fit_var_cp43 (0xaa)
#define mask_of_dlc_reg_curve_fit_var_cp43   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp43  (0)
#define DLC_REG_CURVE_FIT_VAR_CP43           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp43)
#define REG_DLC_55_L                         (DLC_REG_CURVE_FIT_VAR_CP43)
// h0055, bit: 15
/* 18 variable piecewise linear DLC control point 12*/
#define offset_of_dlc_reg_curve_fit_var_cp44 (0xaa)
#define mask_of_dlc_reg_curve_fit_var_cp44   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp44  (8)
#define DLC_REG_CURVE_FIT_VAR_CP44           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp44)
// h0056, bit: 7
/* 18 variable piecewise linear DLC control point 13*/
#define offset_of_dlc_reg_curve_fit_var_cp45 (0xac)
#define mask_of_dlc_reg_curve_fit_var_cp45   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp45  (0)
#define DLC_REG_CURVE_FIT_VAR_CP45           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp45)
#define REG_DLC_56_L                         (DLC_REG_CURVE_FIT_VAR_CP45)
// h0056, bit: 15
/* 18 variable piecewise linear DLC control point 14*/
#define offset_of_dlc_reg_curve_fit_var_cp46 (0xac)
#define mask_of_dlc_reg_curve_fit_var_cp46   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp46  (8)
#define DLC_REG_CURVE_FIT_VAR_CP46           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp46)
// h0057, bit: 7
/* 18 variable piecewise linear DLC control point 15*/
#define offset_of_dlc_reg_curve_fit_var_cp47 (0xae)
#define mask_of_dlc_reg_curve_fit_var_cp47   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp47  (0)
#define DLC_REG_CURVE_FIT_VAR_CP47           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp47)
#define REG_DLC_57_L                         (DLC_REG_CURVE_FIT_VAR_CP47)
// h0057, bit: 15
/* 18 variable piecewise linear DLC control point 16*/
#define offset_of_dlc_reg_curve_fit_var_cp48 (0xae)
#define mask_of_dlc_reg_curve_fit_var_cp48   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp48  (8)
#define DLC_REG_CURVE_FIT_VAR_CP48           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp48)
// h0058, bit: 7
/* 19 variable piecewise linear DLC control point 1*/
#define offset_of_dlc_reg_curve_fit_var_cp49 (0xb0)
#define mask_of_dlc_reg_curve_fit_var_cp49   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp49  (0)
#define DLC_REG_CURVE_FIT_VAR_CP49           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp49)
#define REG_DLC_58_L                         (DLC_REG_CURVE_FIT_VAR_CP49)
// h0058, bit: 15
/* 19 variable piecewise linear DLC control point 2*/
#define offset_of_dlc_reg_curve_fit_var_cp50 (0xb0)
#define mask_of_dlc_reg_curve_fit_var_cp50   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp50  (8)
#define DLC_REG_CURVE_FIT_VAR_CP50           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp50)
// h0059, bit: 7
/* 19 variable piecewise linear DLC control point 3*/
#define offset_of_dlc_reg_curve_fit_var_cp51 (0xb2)
#define mask_of_dlc_reg_curve_fit_var_cp51   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp51  (0)
#define DLC_REG_CURVE_FIT_VAR_CP51           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp51)
#define REG_DLC_59_L                         (DLC_REG_CURVE_FIT_VAR_CP51)
// h0059, bit: 15
/* 19 variable piecewise linear DLC control point 4*/
#define offset_of_dlc_reg_curve_fit_var_cp52 (0xb2)
#define mask_of_dlc_reg_curve_fit_var_cp52   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp52  (8)
#define DLC_REG_CURVE_FIT_VAR_CP52           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp52)
// h005a, bit: 7
/* 19 variable piecewise linear DLC control point 5*/
#define offset_of_dlc_reg_curve_fit_var_cp53 (0xb4)
#define mask_of_dlc_reg_curve_fit_var_cp53   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp53  (0)
#define DLC_REG_CURVE_FIT_VAR_CP53           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp53)
#define REG_DLC_5A_L                         (DLC_REG_CURVE_FIT_VAR_CP53)
// h005a, bit: 15
/* 19 variable piecewise linear DLC control point 6*/
#define offset_of_dlc_reg_curve_fit_var_cp54 (0xb4)
#define mask_of_dlc_reg_curve_fit_var_cp54   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp54  (8)
#define DLC_REG_CURVE_FIT_VAR_CP54           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp54)
// h005b, bit: 7
/* 19 variable piecewise linear DLC control point 7*/
#define offset_of_dlc_reg_curve_fit_var_cp55 (0xb6)
#define mask_of_dlc_reg_curve_fit_var_cp55   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp55  (0)
#define DLC_REG_CURVE_FIT_VAR_CP55           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp55)
#define REG_DLC_5B_L                         (DLC_REG_CURVE_FIT_VAR_CP55)
// h005b, bit: 15
/* 19 variable piecewise linear DLC control point 8*/
#define offset_of_dlc_reg_curve_fit_var_cp56 (0xb6)
#define mask_of_dlc_reg_curve_fit_var_cp56   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp56  (8)
#define DLC_REG_CURVE_FIT_VAR_CP56           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp56)
// h005c, bit: 7
/* 19 variable piecewise linear DLC control point 9*/
#define offset_of_dlc_reg_curve_fit_var_cp57 (0xb8)
#define mask_of_dlc_reg_curve_fit_var_cp57   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp57  (0)
#define DLC_REG_CURVE_FIT_VAR_CP57           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp57)
#define REG_DLC_5C_L                         (DLC_REG_CURVE_FIT_VAR_CP57)
// h005c, bit: 15
/* 19 variable piecewise linear DLC control point 10*/
#define offset_of_dlc_reg_curve_fit_var_cp58 (0xb8)
#define mask_of_dlc_reg_curve_fit_var_cp58   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp58  (8)
#define DLC_REG_CURVE_FIT_VAR_CP58           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp58)
// h005d, bit: 7
/* 19 variable piecewise linear DLC control point 11*/
#define offset_of_dlc_reg_curve_fit_var_cp59 (0xba)
#define mask_of_dlc_reg_curve_fit_var_cp59   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp59  (0)
#define DLC_REG_CURVE_FIT_VAR_CP59           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp59)
#define REG_DLC_5D_L                         (DLC_REG_CURVE_FIT_VAR_CP59)
// h005d, bit: 15
/* 19 variable piecewise linear DLC control point 12*/
#define offset_of_dlc_reg_curve_fit_var_cp60 (0xba)
#define mask_of_dlc_reg_curve_fit_var_cp60   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp60  (8)
#define DLC_REG_CURVE_FIT_VAR_CP60           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp60)
// h005e, bit: 7
/* 19 variable piecewise linear DLC control point 13*/
#define offset_of_dlc_reg_curve_fit_var_cp61 (0xbc)
#define mask_of_dlc_reg_curve_fit_var_cp61   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp61  (0)
#define DLC_REG_CURVE_FIT_VAR_CP61           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp61)
#define REG_DLC_5E_L                         (DLC_REG_CURVE_FIT_VAR_CP61)
// h005e, bit: 15
/* 19 variable piecewise linear DLC control point 14*/
#define offset_of_dlc_reg_curve_fit_var_cp62 (0xbc)
#define mask_of_dlc_reg_curve_fit_var_cp62   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp62  (8)
#define DLC_REG_CURVE_FIT_VAR_CP62           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp62)
// h005f, bit: 7
/* 19 variable piecewise linear DLC control point 15*/
#define offset_of_dlc_reg_curve_fit_var_cp63 (0xbe)
#define mask_of_dlc_reg_curve_fit_var_cp63   (0xff)
#define shift_of_dlc_reg_curve_fit_var_cp63  (0)
#define DLC_REG_CURVE_FIT_VAR_CP63           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp63)
#define REG_DLC_5F_L                         (DLC_REG_CURVE_FIT_VAR_CP63)
// h005f, bit: 15
/* 19 variable piecewise linear DLC control point 16*/
#define offset_of_dlc_reg_curve_fit_var_cp64 (0xbe)
#define mask_of_dlc_reg_curve_fit_var_cp64   (0xff00)
#define shift_of_dlc_reg_curve_fit_var_cp64  (8)
#define DLC_REG_CURVE_FIT_VAR_CP64           (REG_DLC_BASE + offset_of_dlc_reg_curve_fit_var_cp64)
#define REG_DLC_60_L                         (REG_DLC_BASE + 0xc0)
// h0061, bit: 7
/* Main window minimun pixel saturation*/
#define offset_of_dlc_reg_main_max_pixel_sat (0xc2)
#define mask_of_dlc_reg_main_max_pixel_sat   (0xff)
#define shift_of_dlc_reg_main_max_pixel_sat  (0)
#define DLC_REG_MAIN_MAX_PIXEL_SAT           (REG_DLC_BASE + offset_of_dlc_reg_main_max_pixel_sat)
#define REG_DLC_61_L                         (DLC_REG_MAIN_MAX_PIXEL_SAT)
// h0061, bit: 15
/* Main window maximum pixel saturation*/
#define offset_of_dlc_reg_main_min_pixel_sat (0xc2)
#define mask_of_dlc_reg_main_min_pixel_sat   (0xff00)
#define shift_of_dlc_reg_main_min_pixel_sat  (8)
#define DLC_REG_MAIN_MIN_PIXEL_SAT           (REG_DLC_BASE + offset_of_dlc_reg_main_min_pixel_sat)
// h0062, bit: 7
/* Main window maximun pixel*/
#define offset_of_dlc_reg_main_max_pixel (0xc4)
#define mask_of_dlc_reg_main_max_pixel   (0xff)
#define shift_of_dlc_reg_main_max_pixel  (0)
#define DLC_REG_MAIN_MAX_PIXEL           (REG_DLC_BASE + offset_of_dlc_reg_main_max_pixel)
#define REG_DLC_62_L                     (DLC_REG_MAIN_MAX_PIXEL)
// h0062, bit: 15
/* Main window minimum pixel*/
#define offset_of_dlc_reg_main_min_pixel (0xc4)
#define mask_of_dlc_reg_main_min_pixel   (0xff00)
#define shift_of_dlc_reg_main_min_pixel  (8)
#define DLC_REG_MAIN_MIN_PIXEL           (REG_DLC_BASE + offset_of_dlc_reg_main_min_pixel)
#define REG_DLC_63_L                     (REG_DLC_BASE + 0xc6)
// h0064, bit: 11
/* Main window UV compensate gain up limit (format is 4.8)*/
#define offset_of_dlc_reg_main_uvc_gain_high_limit (0xc8)
#define mask_of_dlc_reg_main_uvc_gain_high_limit   (0xfff)
#define shift_of_dlc_reg_main_uvc_gain_high_limit  (0)
#define DLC_REG_MAIN_UVC_GAIN_HIGH_LIMIT           (REG_DLC_BASE + offset_of_dlc_reg_main_uvc_gain_high_limit)
#define REG_DLC_64_L                               (DLC_REG_MAIN_UVC_GAIN_HIGH_LIMIT)
// h0065, bit: 11
/* Main window UV compensate gain down limit (format is 4.8)*/
#define offset_of_dlc_reg_main_uvc_gain_low_limit (0xca)
#define mask_of_dlc_reg_main_uvc_gain_low_limit   (0xfff)
#define shift_of_dlc_reg_main_uvc_gain_low_limit  (0)
#define DLC_REG_MAIN_UVC_GAIN_LOW_LIMIT           (REG_DLC_BASE + offset_of_dlc_reg_main_uvc_gain_low_limit)
#define REG_DLC_65_L                              (DLC_REG_MAIN_UVC_GAIN_LOW_LIMIT)
#define REG_DLC_66_L                              (REG_DLC_BASE + 0xcc)
#define REG_DLC_67_L                              (REG_DLC_BASE + 0xce)
// h0068, bit: 0
/* Main window show pixel value for debug Left*/
#define offset_of_dlc_reg_main_debug_show_pixel_en (0xd0)
#define mask_of_dlc_reg_main_debug_show_pixel_en   (0x1)
#define shift_of_dlc_reg_main_debug_show_pixel_en  (0)
#define DLC_REG_MAIN_DEBUG_SHOW_PIXEL_EN           (REG_DLC_BASE + offset_of_dlc_reg_main_debug_show_pixel_en)
#define REG_DLC_68_L                               (DLC_REG_MAIN_DEBUG_SHOW_PIXEL_EN)
// h0068, bit: 1
/* Sub window show pixel value for debug Right*/
#define offset_of_dlc_reg_sub_debug_show_pixel_en (0xd0)
#define mask_of_dlc_reg_sub_debug_show_pixel_en   (0x2)
#define shift_of_dlc_reg_sub_debug_show_pixel_en  (1)
#define DLC_REG_SUB_DEBUG_SHOW_PIXEL_EN           (REG_DLC_BASE + offset_of_dlc_reg_sub_debug_show_pixel_en)
// h0068, bit: 7
/* debug location:
// 0000 : input data (y,cb,cr)
// 0001 : vip_noise_mask_top output (y,cb,cr)
// 0010 : vip_v_noise_mask_filter output (y,cb,cr)
// 0011 : vip_fcc output  (y,cb,cr)
// 0100 : vip_IHC output  (y,u,v)
// 0101 : vip_ICC  output (y,u,v)
// 0110 : vip_IBC output  (y,u,v)
// 0111 : ble/wle output  (y,u,v)
// 1000 : y_rgb_delta output  (y,u,v)
// 1001 : output_data (y,cb,cr)*/
#define offset_of_dlc_reg_debug_locate (0xd0)
#define mask_of_dlc_reg_debug_locate   (0xf0)
#define shift_of_dlc_reg_debug_locate  (4)
#define DLC_REG_DEBUG_LOCATE           (REG_DLC_BASE + offset_of_dlc_reg_debug_locate)
// h0068, bit: 15
/* Histogram test mode for flesh color enable
This location must be in locate=2'h2*/
#define offset_of_dlc_reg_his_color_test_en (0xd0)
#define mask_of_dlc_reg_his_color_test_en   (0x8000)
#define shift_of_dlc_reg_his_color_test_en  (15)
#define DLC_REG_HIS_COLOR_TEST_EN           (REG_DLC_BASE + offset_of_dlc_reg_his_color_test_en)
// h0069, bit: 15
/* debug pixel Horizontal location (max:2048+256g)*/
#define offset_of_dlc_reg_debug_loc_h (0xd2)
#define mask_of_dlc_reg_debug_loc_h   (0xffff)
#define shift_of_dlc_reg_debug_loc_h  (0)
#define DLC_REG_DEBUG_LOC_H           (REG_DLC_BASE + offset_of_dlc_reg_debug_loc_h)
#define REG_DLC_69_L                  (DLC_REG_DEBUG_LOC_H)
// h006a, bit: 15
/* debug pixel Vertical location (max:4320)*/
#define offset_of_dlc_reg_debug_loc_v (0xd4)
#define mask_of_dlc_reg_debug_loc_v   (0xffff)
#define shift_of_dlc_reg_debug_loc_v  (0)
#define DLC_REG_DEBUG_LOC_V           (REG_DLC_BASE + offset_of_dlc_reg_debug_loc_v)
#define REG_DLC_6A_L                  (DLC_REG_DEBUG_LOC_V)
// h006b, bit: 9
/* debug value for Y*/
#define offset_of_dlc_reg_debug_show_pixel_y (0xd6)
#define mask_of_dlc_reg_debug_show_pixel_y   (0x3ff)
#define shift_of_dlc_reg_debug_show_pixel_y  (0)
#define DLC_REG_DEBUG_SHOW_PIXEL_Y           (REG_DLC_BASE + offset_of_dlc_reg_debug_show_pixel_y)
#define REG_DLC_6B_L                         (DLC_REG_DEBUG_SHOW_PIXEL_Y)
// h006c, bit: 9
/* debug value for Cb*/
#define offset_of_dlc_reg_debug_show_pixel_cb_u (0xd8)
#define mask_of_dlc_reg_debug_show_pixel_cb_u   (0x3ff)
#define shift_of_dlc_reg_debug_show_pixel_cb_u  (0)
#define DLC_REG_DEBUG_SHOW_PIXEL_CB_U           (REG_DLC_BASE + offset_of_dlc_reg_debug_show_pixel_cb_u)
#define REG_DLC_6C_L                            (DLC_REG_DEBUG_SHOW_PIXEL_CB_U)
// h006d, bit: 9
/* debug value for Cr*/
#define offset_of_dlc_reg_debug_show_pixel_cr_v (0xda)
#define mask_of_dlc_reg_debug_show_pixel_cr_v   (0x3ff)
#define shift_of_dlc_reg_debug_show_pixel_cr_v  (0)
#define DLC_REG_DEBUG_SHOW_PIXEL_CR_V           (REG_DLC_BASE + offset_of_dlc_reg_debug_show_pixel_cr_v)
#define REG_DLC_6D_L                            (DLC_REG_DEBUG_SHOW_PIXEL_CR_V)
#define REG_DLC_6E_L                            (REG_DLC_BASE + 0xdc)
#define REG_DLC_6F_L                            (REG_DLC_BASE + 0xde)
// h0070, bit: 7
/* Histogram Color adaptive win1 cb up*/
#define offset_of_dlc_reg_color_his_cb_up (0xe0)
#define mask_of_dlc_reg_color_his_cb_up   (0xff)
#define shift_of_dlc_reg_color_his_cb_up  (0)
#define DLC_REG_COLOR_HIS_CB_UP           (REG_DLC_BASE + offset_of_dlc_reg_color_his_cb_up)
#define REG_DLC_70_L                      (DLC_REG_COLOR_HIS_CB_UP)
// h0070, bit: 15
/* Histogram Color adaptive win1 cr up*/
#define offset_of_dlc_reg_color_his_cr_up (0xe0)
#define mask_of_dlc_reg_color_his_cr_up   (0xff00)
#define shift_of_dlc_reg_color_his_cr_up  (8)
#define DLC_REG_COLOR_HIS_CR_UP           (REG_DLC_BASE + offset_of_dlc_reg_color_his_cr_up)
// h0071, bit: 7
/* Histogram Color adaptive win1 cb down*/
#define offset_of_dlc_reg_color_his_cb_down (0xe2)
#define mask_of_dlc_reg_color_his_cb_down   (0xff)
#define shift_of_dlc_reg_color_his_cb_down  (0)
#define DLC_REG_COLOR_HIS_CB_DOWN           (REG_DLC_BASE + offset_of_dlc_reg_color_his_cb_down)
#define REG_DLC_71_L                        (DLC_REG_COLOR_HIS_CB_DOWN)
// h0071, bit: 15
/* Histogram Color adaptive win1 cr down*/
#define offset_of_dlc_reg_color_his_cr_down (0xe2)
#define mask_of_dlc_reg_color_his_cr_down   (0xff00)
#define shift_of_dlc_reg_color_his_cr_down  (8)
#define DLC_REG_COLOR_HIS_CR_DOWN           (REG_DLC_BASE + offset_of_dlc_reg_color_his_cr_down)
#define REG_DLC_72_L                        (REG_DLC_BASE + 0xe4)
#define REG_DLC_73_L                        (REG_DLC_BASE + 0xe6)
#define REG_DLC_74_L                        (REG_DLC_BASE + 0xe8)
// h0075, bit: 7
/* Main window curve table left point, MSB is sign bit*/
#define offset_of_dlc_reg_main_curve_fit_table_n0 (0xea)
#define mask_of_dlc_reg_main_curve_fit_table_n0   (0xff)
#define shift_of_dlc_reg_main_curve_fit_table_n0  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_N0           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_n0)
#define REG_DLC_75_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_N0)
// h0076, bit: 8
/* Main window curve table 64*/
#define offset_of_dlc_reg_main_curve_fit_table_64 (0xec)
#define mask_of_dlc_reg_main_curve_fit_table_64   (0x1ff)
#define shift_of_dlc_reg_main_curve_fit_table_64  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_64           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_64)
#define REG_DLC_76_L                              (DLC_REG_MAIN_CURVE_FIT_TABLE_64)
// h0077, bit: 1
/* Main window curve table n0 LSB*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_n0 (0xee)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_n0   (0x3)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_n0  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_N0           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_n0)
#define REG_DLC_77_L                                  (DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_N0)
// h0077, bit: 3
/* Main window curve table 64 LSB*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_64 (0xee)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_64   (0xc)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_64  (2)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_64           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_64)
// h0077, bit: 14
/* Main window curve table left point, MSB is sign bit*/
#define offset_of_dlc_reg_main_curve_fit_table_n0_sign (0xee)
#define mask_of_dlc_reg_main_curve_fit_table_n0_sign   (0x4000)
#define shift_of_dlc_reg_main_curve_fit_table_n0_sign  (14)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_N0_SIGN           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_n0_sign)
// h0077, bit: 15
/* Sign bit of Main window curve table 0 */
#define offset_of_dlc_reg_main_curve_fit_table_0_sign (0xee)
#define mask_of_dlc_reg_main_curve_fit_table_0_sign   (0x8000)
#define shift_of_dlc_reg_main_curve_fit_table_0_sign  (15)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_0_SIGN           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_0_sign)
// h0078, bit: 1
/* Main window curve table_lsb 0*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_0 (0xf0)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_0   (0x3)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_0  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_0           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_0)
#define REG_DLC_78_L                                 (DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_0)
// h0078, bit: 3
/* Main window curve table_lsb 1*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_1 (0xf0)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_1   (0xc)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_1  (2)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_1           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_1)
// h0078, bit: 5
/* Main window curve table_lsb 2*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_2 (0xf0)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_2   (0x30)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_2  (4)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_2           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_2)
// h0078, bit: 7
/* Main window curve table_lsb 3*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_3 (0xf0)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_3   (0xc0)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_3  (6)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_3           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_3)
// h0078, bit: 9
/* Main window curve table_lsb 4*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_4 (0xf0)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_4   (0x300)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_4  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_4           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_4)
// h0078, bit: 11
/* Main window curve table_lsb 5*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_5 (0xf0)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_5   (0xc00)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_5  (10)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_5           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_5)
// h0078, bit: 13
/* Main window curve table_lsb 6*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_6 (0xf0)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_6   (0x3000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_6  (12)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_6           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_6)
// h0078, bit: 15
/* Main window curve table_lsb 7*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_7 (0xf0)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_7   (0xc000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_7  (14)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_7           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_7)
// h0079, bit: 1
/* Main window curve table_lsb 8*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_8 (0xf2)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_8   (0x3)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_8  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_8           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_8)
#define REG_DLC_79_L                                 (DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_8)
// h0079, bit: 3
/* Main window curve table_lsb 9*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_9 (0xf2)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_9   (0xc)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_9  (2)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_9           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_9)
// h0079, bit: 5
/* Main window curve table_lsb 10*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_10 (0xf2)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_10   (0x30)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_10  (4)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_10           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_10)
// h0079, bit: 7
/* Main window curve table_lsb 11*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_11 (0xf2)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_11   (0xc0)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_11  (6)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_11           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_11)
// h0079, bit: 9
/* Main window curve table_lsb 12*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_12 (0xf2)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_12   (0x300)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_12  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_12           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_12)
// h0079, bit: 11
/* Main window curve table_lsb 13*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_13 (0xf2)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_13   (0xc00)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_13  (10)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_13           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_13)
// h0079, bit: 13
/* Main window curve table_lsb 14*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_14 (0xf2)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_14   (0x3000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_14  (12)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_14           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_14)
// h0079, bit: 15
/* Main window curve table_lsb 15*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_15 (0xf2)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_15   (0xc000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_15  (14)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_15           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_15)
// h007a, bit: 1
/* Main window curve table_lsb 16*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_16 (0xf4)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_16   (0x3)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_16  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_16           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_16)
#define REG_DLC_7A_L                                  (DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_16)
// h007a, bit: 3
/* Main window curve table_lsb 17*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_17 (0xf4)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_17   (0xc)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_17  (2)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_17           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_17)
// h007a, bit: 5
/* Main window curve table_lsb 18*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_18 (0xf4)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_18   (0x30)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_18  (4)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_18           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_18)
// h007a, bit: 7
/* Main window curve table_lsb 19*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_19 (0xf4)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_19   (0xc0)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_19  (6)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_19           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_19)
// h007a, bit: 9
/* Main window curve table_lsb 20*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_20 (0xf4)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_20   (0x300)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_20  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_20           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_20)
// h007a, bit: 11
/* Main window curve table_lsb 21*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_21 (0xf4)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_21   (0xc00)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_21  (10)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_21           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_21)
// h007a, bit: 13
/* Main window curve table_lsb 22*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_22 (0xf4)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_22   (0x3000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_22  (12)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_22           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_22)
// h007a, bit: 15
/* Main window curve table_lsb 23*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_23 (0xf4)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_23   (0xc000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_23  (14)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_23           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_23)
// h007b, bit: 1
/* Main window curve table_lsb 24*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_24 (0xf6)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_24   (0x3)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_24  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_24           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_24)
#define REG_DLC_7B_L                                  (DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_24)
// h007b, bit: 3
/* Main window curve table_lsb 25*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_25 (0xf6)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_25   (0xc)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_25  (2)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_25           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_25)
// h007b, bit: 5
/* Main window curve table_lsb 26*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_26 (0xf6)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_26   (0x30)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_26  (4)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_26           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_26)
// h007b, bit: 7
/* Main window curve table_lsb 27*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_27 (0xf6)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_27   (0xc0)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_27  (6)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_27           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_27)
// h007b, bit: 9
/* Main window curve table_lsb 28*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_28 (0xf6)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_28   (0x300)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_28  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_28           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_28)
// h007b, bit: 11
/* Main window curve table_lsb 29*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_29 (0xf6)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_29   (0xc00)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_29  (10)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_29           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_29)
// h007b, bit: 13
/* Main window curve table_lsb 30*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_30 (0xf6)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_30   (0x3000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_30  (12)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_30           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_30)
// h007b, bit: 15
/* Main window curve table_lsb 31*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_31 (0xf6)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_31   (0xc000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_31  (14)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_31           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_31)
// h007c, bit: 1
/* Main window curve table_lsb 32*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_32 (0xf8)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_32   (0x3)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_32  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_32           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_32)
#define REG_DLC_7C_L                                  (DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_32)
// h007c, bit: 3
/* Main window curve table_lsb 33*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_33 (0xf8)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_33   (0xc)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_33  (2)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_33           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_33)
// h007c, bit: 5
/* Main window curve table_lsb 34*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_34 (0xf8)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_34   (0x30)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_34  (4)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_34           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_34)
// h007c, bit: 7
/* Main window curve table_lsb 35*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_35 (0xf8)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_35   (0xc0)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_35  (6)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_35           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_35)
// h007c, bit: 9
/* Main window curve table_lsb 36*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_36 (0xf8)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_36   (0x300)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_36  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_36           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_36)
// h007c, bit: 11
/* Main window curve table_lsb 37*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_37 (0xf8)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_37   (0xc00)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_37  (10)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_37           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_37)
// h007c, bit: 13
/* Main window curve table_lsb 38*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_38 (0xf8)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_38   (0x3000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_38  (12)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_38           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_38)
// h007c, bit: 15
/* Main window curve table_lsb 39*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_39 (0xf8)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_39   (0xc000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_39  (14)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_39           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_39)
// h007d, bit: 1
/* Main window curve table_lsb 40*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_40 (0xfa)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_40   (0x3)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_40  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_40           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_40)
#define REG_DLC_7D_L                                  (DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_40)
// h007d, bit: 3
/* Main window curve table_lsb 41*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_41 (0xfa)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_41   (0xc)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_41  (2)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_41           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_41)
// h007d, bit: 5
/* Main window curve table_lsb 42*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_42 (0xfa)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_42   (0x30)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_42  (4)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_42           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_42)
// h007d, bit: 7
/* Main window curve table_lsb 43*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_43 (0xfa)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_43   (0xc0)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_43  (6)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_43           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_43)
// h007d, bit: 9
/* Main window curve table_lsb 44*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_44 (0xfa)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_44   (0x300)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_44  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_44           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_44)
// h007d, bit: 11
/* Main window curve table_lsb 45*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_45 (0xfa)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_45   (0xc00)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_45  (10)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_45           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_45)
// h007d, bit: 13
/* Main window curve table_lsb 46*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_46 (0xfa)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_46   (0x3000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_46  (12)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_46           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_46)
// h007d, bit: 15
/* Main window curve table_lsb 47*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_47 (0xfa)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_47   (0xc000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_47  (14)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_47           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_47)
// h007e, bit: 1
/* Main window curve table_lsb 48*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_48 (0xfc)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_48   (0x3)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_48  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_48           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_48)
#define REG_DLC_7E_L                                  (DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_48)
// h007e, bit: 3
/* Main window curve table_lsb 49*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_49 (0xfc)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_49   (0xc)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_49  (2)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_49           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_49)
// h007e, bit: 5
/* Main window curve table_lsb 50*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_50 (0xfc)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_50   (0x30)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_50  (4)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_50           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_50)
// h007e, bit: 7
/* Main window curve table_lsb 51*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_51 (0xfc)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_51   (0xc0)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_51  (6)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_51           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_51)
// h007e, bit: 9
/* Main window curve table_lsb 52*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_52 (0xfc)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_52   (0x300)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_52  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_52           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_52)
// h007e, bit: 11
/* Main window curve table_lsb 53*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_53 (0xfc)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_53   (0xc00)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_53  (10)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_53           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_53)
// h007e, bit: 13
/* Main window curve table_lsb 54*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_54 (0xfc)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_54   (0x3000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_54  (12)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_54           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_54)
// h007e, bit: 15
/* Main window curve table_lsb 55*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_55 (0xfc)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_55   (0xc000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_55  (14)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_55           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_55)
// h007f, bit: 1
/* Main window curve table_lsb 56*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_56 (0xfe)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_56   (0x3)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_56  (0)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_56           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_56)
#define REG_DLC_7F_L                                  (DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_56)
// h007f, bit: 3
/* Main window curve table_lsb 57*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_57 (0xfe)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_57   (0xc)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_57  (2)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_57           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_57)
// h007f, bit: 5
/* Main window curve table_lsb 58*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_58 (0xfe)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_58   (0x30)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_58  (4)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_58           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_58)
// h007f, bit: 7
/* Main window curve table_lsb 59*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_59 (0xfe)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_59   (0xc0)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_59  (6)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_59           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_59)
// h007f, bit: 9
/* Main window curve table_lsb 60*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_60 (0xfe)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_60   (0x300)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_60  (8)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_60           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_60)
// h007f, bit: 11
/* Main window curve table_lsb 61*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_61 (0xfe)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_61   (0xc00)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_61  (10)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_61           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_61)
// h007f, bit: 13
/* Main window curve table_lsb 62*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_62 (0xfe)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_62   (0x3000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_62  (12)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_62           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_62)
// h007f, bit: 15
/* Main window curve table_lsb 63*/
#define offset_of_dlc_reg_main_curve_fit_table_lsb_63 (0xfe)
#define mask_of_dlc_reg_main_curve_fit_table_lsb_63   (0xc000)
#define shift_of_dlc_reg_main_curve_fit_table_lsb_63  (14)
#define DLC_REG_MAIN_CURVE_FIT_TABLE_LSB_63           (REG_DLC_BASE + offset_of_dlc_reg_main_curve_fit_table_lsb_63)
#define REG_LCE_00_L                                  (REG_LCE_BASE + 0x0)
#define REG_LCE_01_L                                  (REG_LCE_BASE + 0x2)
#define REG_LCE_02_L                                  (REG_LCE_BASE + 0x4)
#define REG_LCE_03_L                                  (REG_LCE_BASE + 0x6)
#define REG_LCE_04_L                                  (REG_LCE_BASE + 0x8)
#define REG_LCE_05_L                                  (REG_LCE_BASE + 0xa)
#define REG_LCE_06_L                                  (REG_LCE_BASE + 0xc)
#define REG_LCE_07_L                                  (REG_LCE_BASE + 0xe)
// h0008, bit: 15
/* Main window color selection for  lce of  Color 0*/
#define offset_of_lce_reg_main_color_g0_select_lce (0x10)
#define mask_of_lce_reg_main_color_g0_select_lce   (0xffff)
#define shift_of_lce_reg_main_color_g0_select_lce  (0)
#define LCE_REG_MAIN_COLOR_G0_SELECT_LCE           (REG_LCE_BASE + offset_of_lce_reg_main_color_g0_select_lce)
#define REG_LCE_08_L                               (LCE_REG_MAIN_COLOR_G0_SELECT_LCE)
// h0009, bit: 15
/* Main window color selection for  lce of  Color 1*/
#define offset_of_lce_reg_main_color_g1_select_lce (0x12)
#define mask_of_lce_reg_main_color_g1_select_lce   (0xffff)
#define shift_of_lce_reg_main_color_g1_select_lce  (0)
#define LCE_REG_MAIN_COLOR_G1_SELECT_LCE           (REG_LCE_BASE + offset_of_lce_reg_main_color_g1_select_lce)
#define REG_LCE_09_L                               (LCE_REG_MAIN_COLOR_G1_SELECT_LCE)
// h000a, bit: 15
/* Main window color selection for  lce of  Color 2*/
#define offset_of_lce_reg_main_color_g2_select_lce (0x14)
#define mask_of_lce_reg_main_color_g2_select_lce   (0xffff)
#define shift_of_lce_reg_main_color_g2_select_lce  (0)
#define LCE_REG_MAIN_COLOR_G2_SELECT_LCE           (REG_LCE_BASE + offset_of_lce_reg_main_color_g2_select_lce)
#define REG_LCE_0A_L                               (LCE_REG_MAIN_COLOR_G2_SELECT_LCE)
// h000b, bit: 15
/* Main window color selection for  lce of  Color 3*/
#define offset_of_lce_reg_main_color_g3_select_lce (0x16)
#define mask_of_lce_reg_main_color_g3_select_lce   (0xffff)
#define shift_of_lce_reg_main_color_g3_select_lce  (0)
#define LCE_REG_MAIN_COLOR_G3_SELECT_LCE           (REG_LCE_BASE + offset_of_lce_reg_main_color_g3_select_lce)
#define REG_LCE_0B_L                               (LCE_REG_MAIN_COLOR_G3_SELECT_LCE)
#define REG_LCE_0C_L                               (REG_LCE_BASE + 0x18)
#define REG_LCE_0D_L                               (REG_LCE_BASE + 0x1a)
#define REG_LCE_0E_L                               (REG_LCE_BASE + 0x1c)
#define REG_LCE_0F_L                               (REG_LCE_BASE + 0x1e)
// h0010, bit: 0
/* main window lce  enable*/
#define offset_of_lce_reg_main_lce_en (0x20)
#define mask_of_lce_reg_main_lce_en   (0x1)
#define shift_of_lce_reg_main_lce_en  (0)
#define LCE_REG_MAIN_LCE_EN           (REG_LCE_BASE + offset_of_lce_reg_main_lce_en)
#define REG_LCE_10_L                  (LCE_REG_MAIN_LCE_EN)
// h0010, bit: 1
/* main window lce slop of dlc curve alpha blending enable*/
#define offset_of_lce_reg_main_lce_sodc_alpha_en (0x20)
#define mask_of_lce_reg_main_lce_sodc_alpha_en   (0x2)
#define shift_of_lce_reg_main_lce_sodc_alpha_en  (1)
#define LCE_REG_MAIN_LCE_SODC_ALPHA_EN           (REG_LCE_BASE + offset_of_lce_reg_main_lce_sodc_alpha_en)
// h0010, bit: 2
/* main window lce dering alpha blending enable*/
#define offset_of_lce_reg_main_lce_dering_alpha_en (0x20)
#define mask_of_lce_reg_main_lce_dering_alpha_en   (0x4)
#define shift_of_lce_reg_main_lce_dering_alpha_en  (2)
#define LCE_REG_MAIN_LCE_DERING_ALPHA_EN           (REG_LCE_BASE + offset_of_lce_reg_main_lce_dering_alpha_en)
// h0010, bit: 3
/* main window lce color adaptive alpha blending enable*/
#define offset_of_lce_reg_main_lce_color_alpha_en (0x20)
#define mask_of_lce_reg_main_lce_color_alpha_en   (0x8)
#define shift_of_lce_reg_main_lce_color_alpha_en  (3)
#define LCE_REG_MAIN_LCE_COLOR_ALPHA_EN           (REG_LCE_BASE + offset_of_lce_reg_main_lce_color_alpha_en)
// h0010, bit: 4
/* main window lce y ave selection(1'b1: 5x7; 1'b0:5x11)*/
#define offset_of_lce_reg_main_lce_y_ave_sel (0x20)
#define mask_of_lce_reg_main_lce_y_ave_sel   (0x10)
#define shift_of_lce_reg_main_lce_y_ave_sel  (4)
#define LCE_REG_MAIN_LCE_Y_AVE_SEL           (REG_LCE_BASE + offset_of_lce_reg_main_lce_y_ave_sel)
// h0010, bit: 5
/* lce_debug_mode*/
#define offset_of_lce_reg_lce_debug_en (0x20)
#define mask_of_lce_reg_lce_debug_en   (0x20)
#define shift_of_lce_reg_lce_debug_en  (5)
#define LCE_REG_LCE_DEBUG_EN           (REG_LCE_BASE + offset_of_lce_reg_lce_debug_en)
// h0010, bit: 6
/* lce 3 curve enable*/
#define offset_of_lce_reg_lce_3curve_en (0x20)
#define mask_of_lce_reg_lce_3curve_en   (0x40)
#define shift_of_lce_reg_lce_3curve_en  (6)
#define LCE_REG_LCE_3CURVE_EN           (REG_LCE_BASE + offset_of_lce_reg_lce_3curve_en)
// h0010, bit: 7
/* lce dither enable*/
#define offset_of_lce_reg_lce_dither_en (0x20)
#define mask_of_lce_reg_lce_dither_en   (0x80)
#define shift_of_lce_reg_lce_dither_en  (7)
#define LCE_REG_LCE_DITHER_EN           (REG_LCE_BASE + offset_of_lce_reg_lce_dither_en)
// h0010, bit: 11
/* main window lce std slop1: 0.00xxxx format*/
#define offset_of_lce_reg_main_lce_std_slop1 (0x20)
#define mask_of_lce_reg_main_lce_std_slop1   (0xf00)
#define shift_of_lce_reg_main_lce_std_slop1  (8)
#define LCE_REG_MAIN_LCE_STD_SLOP1           (REG_LCE_BASE + offset_of_lce_reg_main_lce_std_slop1)
// h0010, bit: 15
/* main window lce std slop2: 0.00xxxx format*/
#define offset_of_lce_reg_main_lce_std_slop2 (0x20)
#define mask_of_lce_reg_main_lce_std_slop2   (0xf000)
#define shift_of_lce_reg_main_lce_std_slop2  (12)
#define LCE_REG_MAIN_LCE_STD_SLOP2           (REG_LCE_BASE + offset_of_lce_reg_main_lce_std_slop2)
// h0011, bit: 7
/* main window lce std threshold 1: 8 bit precision*/
#define offset_of_lce_reg_main_lce_std_th1 (0x22)
#define mask_of_lce_reg_main_lce_std_th1   (0xff)
#define shift_of_lce_reg_main_lce_std_th1  (0)
#define LCE_REG_MAIN_LCE_STD_TH1           (REG_LCE_BASE + offset_of_lce_reg_main_lce_std_th1)
#define REG_LCE_11_L                       (LCE_REG_MAIN_LCE_STD_TH1)
// h0011, bit: 15
/* main window lce std threshold 2: 8 bit precision*/
#define offset_of_lce_reg_main_lce_std_th2 (0x22)
#define mask_of_lce_reg_main_lce_std_th2   (0xff00)
#define shift_of_lce_reg_main_lce_std_th2  (8)
#define LCE_REG_MAIN_LCE_STD_TH2           (REG_LCE_BASE + offset_of_lce_reg_main_lce_std_th2)
// h0012, bit: 6
/* main window lce std gain minimum: x.xxxxxx format*/
#define offset_of_lce_reg_main_lce_gain_min (0x24)
#define mask_of_lce_reg_main_lce_gain_min   (0x7f)
#define shift_of_lce_reg_main_lce_gain_min  (0)
#define LCE_REG_MAIN_LCE_GAIN_MIN           (REG_LCE_BASE + offset_of_lce_reg_main_lce_gain_min)
#define REG_LCE_12_L                        (LCE_REG_MAIN_LCE_GAIN_MIN)
// h0012, bit: 15
/* main window lce std gain maximum: xx.xxxxxx format*/
#define offset_of_lce_reg_main_lce_gain_max (0x24)
#define mask_of_lce_reg_main_lce_gain_max   (0xff00)
#define shift_of_lce_reg_main_lce_gain_max  (8)
#define LCE_REG_MAIN_LCE_GAIN_MAX           (REG_LCE_BASE + offset_of_lce_reg_main_lce_gain_max)
// h0013, bit: 5
/* main window lce slop of dlc curve low alpha*/
#define offset_of_lce_reg_main_lce_sodc_low_alpha (0x26)
#define mask_of_lce_reg_main_lce_sodc_low_alpha   (0x3f)
#define shift_of_lce_reg_main_lce_sodc_low_alpha  (0)
#define LCE_REG_MAIN_LCE_SODC_LOW_ALPHA           (REG_LCE_BASE + offset_of_lce_reg_main_lce_sodc_low_alpha)
#define REG_LCE_13_L                              (LCE_REG_MAIN_LCE_SODC_LOW_ALPHA)
// h0013, bit: 15
/* main window lce slop of dlc curve low threshold: 8 bit precesion*/
#define offset_of_lce_reg_main_lce_sodc_low_th (0x26)
#define mask_of_lce_reg_main_lce_sodc_low_th   (0xff00)
#define shift_of_lce_reg_main_lce_sodc_low_th  (8)
#define LCE_REG_MAIN_LCE_SODC_LOW_TH           (REG_LCE_BASE + offset_of_lce_reg_main_lce_sodc_low_th)
// h0014, bit: 3
/* main window lce slop of dlc curve slop; 0.000xxxx format*/
#define offset_of_lce_reg_main_lce_sodc_slop (0x28)
#define mask_of_lce_reg_main_lce_sodc_slop   (0xf)
#define shift_of_lce_reg_main_lce_sodc_slop  (0)
#define LCE_REG_MAIN_LCE_SODC_SLOP           (REG_LCE_BASE + offset_of_lce_reg_main_lce_sodc_slop)
#define REG_LCE_14_L                         (LCE_REG_MAIN_LCE_SODC_SLOP)
// h0014, bit: 13
/* main window lce diff gain; xx.xxxx format*/
#define offset_of_lce_reg_main_lce_diff_gain (0x28)
#define mask_of_lce_reg_main_lce_diff_gain   (0x3f00)
#define shift_of_lce_reg_main_lce_diff_gain  (8)
#define LCE_REG_MAIN_LCE_DIFF_GAIN           (REG_LCE_BASE + offset_of_lce_reg_main_lce_diff_gain)
// h0015, bit: 3
/* Main window color adaptive for  lce of Color 0*/
#define offset_of_lce_reg_main_color_g0_strength_lce (0x2a)
#define mask_of_lce_reg_main_color_g0_strength_lce   (0xf)
#define shift_of_lce_reg_main_color_g0_strength_lce  (0)
#define LCE_REG_MAIN_COLOR_G0_STRENGTH_LCE           (REG_LCE_BASE + offset_of_lce_reg_main_color_g0_strength_lce)
#define REG_LCE_15_L                                 (LCE_REG_MAIN_COLOR_G0_STRENGTH_LCE)
// h0015, bit: 7
/* Main window color adaptive for  lce of Color 1*/
#define offset_of_lce_reg_main_color_g1_strength_lce (0x2a)
#define mask_of_lce_reg_main_color_g1_strength_lce   (0xf0)
#define shift_of_lce_reg_main_color_g1_strength_lce  (4)
#define LCE_REG_MAIN_COLOR_G1_STRENGTH_LCE           (REG_LCE_BASE + offset_of_lce_reg_main_color_g1_strength_lce)
// h0015, bit: 11
/* Main window color adaptive for  lce of Color 2*/
#define offset_of_lce_reg_main_color_g2_strength_lce (0x2a)
#define mask_of_lce_reg_main_color_g2_strength_lce   (0xf00)
#define shift_of_lce_reg_main_color_g2_strength_lce  (8)
#define LCE_REG_MAIN_COLOR_G2_STRENGTH_LCE           (REG_LCE_BASE + offset_of_lce_reg_main_color_g2_strength_lce)
// h0015, bit: 15
/* Main window color adaptive for  lce of Color 3*/
#define offset_of_lce_reg_main_color_g3_strength_lce (0x2a)
#define mask_of_lce_reg_main_color_g3_strength_lce   (0xf000)
#define shift_of_lce_reg_main_color_g3_strength_lce  (12)
#define LCE_REG_MAIN_COLOR_G3_STRENGTH_LCE           (REG_LCE_BASE + offset_of_lce_reg_main_color_g3_strength_lce)
#define REG_LCE_16_L                                 (REG_LCE_BASE + 0x2c)
// h0017, bit: 7
/* main window lce curve threshold a; a<b<c<d; 8 bit precision */
#define offset_of_lce_reg_main_lce_curve_a (0x2e)
#define mask_of_lce_reg_main_lce_curve_a   (0xff)
#define shift_of_lce_reg_main_lce_curve_a  (0)
#define LCE_REG_MAIN_LCE_CURVE_A           (REG_LCE_BASE + offset_of_lce_reg_main_lce_curve_a)
#define REG_LCE_17_L                       (LCE_REG_MAIN_LCE_CURVE_A)
// h0017, bit: 15
/* main window lce curve threshold b; a<b<c<d; 8 bit precision */
#define offset_of_lce_reg_main_lce_curve_b (0x2e)
#define mask_of_lce_reg_main_lce_curve_b   (0xff00)
#define shift_of_lce_reg_main_lce_curve_b  (8)
#define LCE_REG_MAIN_LCE_CURVE_B           (REG_LCE_BASE + offset_of_lce_reg_main_lce_curve_b)
// h0018, bit: 7
/* main window lce curve threshold c; a<b<c<d; 8 bit precision */
#define offset_of_lce_reg_main_lce_curve_c (0x30)
#define mask_of_lce_reg_main_lce_curve_c   (0xff)
#define shift_of_lce_reg_main_lce_curve_c  (0)
#define LCE_REG_MAIN_LCE_CURVE_C           (REG_LCE_BASE + offset_of_lce_reg_main_lce_curve_c)
#define REG_LCE_18_L                       (LCE_REG_MAIN_LCE_CURVE_C)
// h0018, bit: 15
/* main window lce curve threshold d; a<b<c<d; 8 bit precision */
#define offset_of_lce_reg_main_lce_curve_d (0x30)
#define mask_of_lce_reg_main_lce_curve_d   (0xff00)
#define shift_of_lce_reg_main_lce_curve_d  (8)
#define LCE_REG_MAIN_LCE_CURVE_D           (REG_LCE_BASE + offset_of_lce_reg_main_lce_curve_d)
// h0019, bit: 7
/* main window lce std gain complex: xx.xxxxxx format*/
#define offset_of_lce_reg_main_lce_gain_complex (0x32)
#define mask_of_lce_reg_main_lce_gain_complex   (0xff)
#define shift_of_lce_reg_main_lce_gain_complex  (0)
#define LCE_REG_MAIN_LCE_GAIN_COMPLEX           (REG_LCE_BASE + offset_of_lce_reg_main_lce_gain_complex)
#define REG_LCE_19_L                            (LCE_REG_MAIN_LCE_GAIN_COMPLEX)
// h001a, bit: 5
/* min sad gain for LCE ds patch, 2.4*/
#define offset_of_lce_reg_dsptch_lce_dsw_minsadgain (0x34)
#define mask_of_lce_reg_dsptch_lce_dsw_minsadgain   (0x3f)
#define shift_of_lce_reg_dsptch_lce_dsw_minsadgain  (0)
#define LCE_REG_DSPTCH_LCE_DSW_MINSADGAIN           (REG_LCE_BASE + offset_of_lce_reg_dsptch_lce_dsw_minsadgain)
#define REG_LCE_1A_L                                (LCE_REG_DSPTCH_LCE_DSW_MINSADGAIN)
// h001a, bit: 11
/* gain for LCE ds patch, 1.3*/
#define offset_of_lce_reg_dsptch_lce_dsw_gain (0x34)
#define mask_of_lce_reg_dsptch_lce_dsw_gain   (0xf00)
#define shift_of_lce_reg_dsptch_lce_dsw_gain  (8)
#define LCE_REG_DSPTCH_LCE_DSW_GAIN           (REG_LCE_BASE + offset_of_lce_reg_dsptch_lce_dsw_gain)
// h001b, bit: 4
/* threshold for LCE ds patch*/
#define offset_of_lce_reg_dsptch_lce_dsw_thrd (0x36)
#define mask_of_lce_reg_dsptch_lce_dsw_thrd   (0x1f)
#define shift_of_lce_reg_dsptch_lce_dsw_thrd  (0)
#define LCE_REG_DSPTCH_LCE_DSW_THRD           (REG_LCE_BASE + offset_of_lce_reg_dsptch_lce_dsw_thrd)
#define REG_LCE_1B_L                          (LCE_REG_DSPTCH_LCE_DSW_THRD)
#define REG_LCE_1C_L                          (REG_LCE_BASE + 0x38)
#define REG_LCE_1D_L                          (REG_LCE_BASE + 0x3a)
#define REG_LCE_1E_L                          (REG_LCE_BASE + 0x3c)
#define REG_LCE_1F_L                          (REG_LCE_BASE + 0x3e)
#define REG_LCE_20_L                          (REG_LCE_BASE + 0x40)
#define REG_LCE_21_L                          (REG_LCE_BASE + 0x42)
#define REG_LCE_22_L                          (REG_LCE_BASE + 0x44)
#define REG_LCE_23_L                          (REG_LCE_BASE + 0x46)
#define REG_LCE_24_L                          (REG_LCE_BASE + 0x48)
#define REG_LCE_25_L                          (REG_LCE_BASE + 0x4a)
#define REG_LCE_26_L                          (REG_LCE_BASE + 0x4c)
#define REG_LCE_27_L                          (REG_LCE_BASE + 0x4e)
#define REG_LCE_28_L                          (REG_LCE_BASE + 0x50)
#define REG_LCE_29_L                          (REG_LCE_BASE + 0x52)
#define REG_LCE_2A_L                          (REG_LCE_BASE + 0x54)
#define REG_LCE_2B_L                          (REG_LCE_BASE + 0x56)
#define REG_LCE_2C_L                          (REG_LCE_BASE + 0x58)
#define REG_LCE_2D_L                          (REG_LCE_BASE + 0x5a)
#define REG_LCE_2E_L                          (REG_LCE_BASE + 0x5c)
#define REG_LCE_2F_L                          (REG_LCE_BASE + 0x5e)
// h0030, bit: 7
/* lce curve lut1 luma equal to 0x08 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_08_8msb (0x60)
#define mask_of_lce_reg_lce_curve_lut1_08_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_08_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_08_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_08_8msb)
#define REG_LCE_30_L                             (LCE_REG_LCE_CURVE_LUT1_08_8MSB)
// h0030, bit: 9
/* lce curve lut1 luma equal to 0x08 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_08_2lsb (0x60)
#define mask_of_lce_reg_lce_curve_lut1_08_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_08_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_08_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_08_2lsb)
// h0031, bit: 7
/* lce curve lut1 luma equal to 0x18 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_18_8msb (0x62)
#define mask_of_lce_reg_lce_curve_lut1_18_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_18_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_18_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_18_8msb)
#define REG_LCE_31_L                             (LCE_REG_LCE_CURVE_LUT1_18_8MSB)
// h0031, bit: 9
/* lce curve lut1 luma equal to 0x18 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_18_2lsb (0x62)
#define mask_of_lce_reg_lce_curve_lut1_18_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_18_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_18_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_18_2lsb)
// h0032, bit: 7
/* lce curve lut1 luma equal to 0x28 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_28_8msb (0x64)
#define mask_of_lce_reg_lce_curve_lut1_28_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_28_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_28_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_28_8msb)
#define REG_LCE_32_L                             (LCE_REG_LCE_CURVE_LUT1_28_8MSB)
// h0032, bit: 9
/* lce curve lut1 luma equal to 0x28 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_28_2lsb (0x64)
#define mask_of_lce_reg_lce_curve_lut1_28_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_28_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_28_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_28_2lsb)
// h0033, bit: 7
/* lce curve lut1 luma equal to 0x38 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_38_8msb (0x66)
#define mask_of_lce_reg_lce_curve_lut1_38_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_38_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_38_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_38_8msb)
#define REG_LCE_33_L                             (LCE_REG_LCE_CURVE_LUT1_38_8MSB)
// h0033, bit: 9
/* lce curve lut1 luma equal to 0x38 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_38_2lsb (0x66)
#define mask_of_lce_reg_lce_curve_lut1_38_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_38_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_38_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_38_2lsb)
// h0034, bit: 7
/* lce curve lut1 luma equal to 0x48 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_48_8msb (0x68)
#define mask_of_lce_reg_lce_curve_lut1_48_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_48_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_48_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_48_8msb)
#define REG_LCE_34_L                             (LCE_REG_LCE_CURVE_LUT1_48_8MSB)
// h0034, bit: 9
/* lce curve lut1 luma equal to 0x48 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_48_2lsb (0x68)
#define mask_of_lce_reg_lce_curve_lut1_48_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_48_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_48_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_48_2lsb)
// h0035, bit: 7
/* lce curve lut1 luma equal to 0x58 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_58_8msb (0x6a)
#define mask_of_lce_reg_lce_curve_lut1_58_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_58_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_58_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_58_8msb)
#define REG_LCE_35_L                             (LCE_REG_LCE_CURVE_LUT1_58_8MSB)
// h0035, bit: 9
/* lce curve lut1 luma equal to 0x58 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_58_2lsb (0x6a)
#define mask_of_lce_reg_lce_curve_lut1_58_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_58_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_58_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_58_2lsb)
// h0036, bit: 7
/* lce curve lut1 luma equal to 0x68 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_68_8msb (0x6c)
#define mask_of_lce_reg_lce_curve_lut1_68_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_68_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_68_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_68_8msb)
#define REG_LCE_36_L                             (LCE_REG_LCE_CURVE_LUT1_68_8MSB)
// h0036, bit: 9
/* lce curve lut1 luma equal to 0x68 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_68_2lsb (0x6c)
#define mask_of_lce_reg_lce_curve_lut1_68_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_68_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_68_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_68_2lsb)
// h0037, bit: 7
/* lce curve lut1 luma equal to 0x78 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_78_8msb (0x6e)
#define mask_of_lce_reg_lce_curve_lut1_78_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_78_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_78_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_78_8msb)
#define REG_LCE_37_L                             (LCE_REG_LCE_CURVE_LUT1_78_8MSB)
// h0037, bit: 9
/* lce curve lut1 luma equal to 0x78 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_78_2lsb (0x6e)
#define mask_of_lce_reg_lce_curve_lut1_78_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_78_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_78_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_78_2lsb)
// h0038, bit: 7
/* lce curve lut1 luma equal to 0x88 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_88_8msb (0x70)
#define mask_of_lce_reg_lce_curve_lut1_88_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_88_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_88_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_88_8msb)
#define REG_LCE_38_L                             (LCE_REG_LCE_CURVE_LUT1_88_8MSB)
// h0038, bit: 9
/* lce curve lut1 luma equal to 0x88 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_88_2lsb (0x70)
#define mask_of_lce_reg_lce_curve_lut1_88_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_88_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_88_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_88_2lsb)
// h0039, bit: 7
/* lce curve lut1 luma equal to 0x98 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_98_8msb (0x72)
#define mask_of_lce_reg_lce_curve_lut1_98_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_98_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_98_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_98_8msb)
#define REG_LCE_39_L                             (LCE_REG_LCE_CURVE_LUT1_98_8MSB)
// h0039, bit: 9
/* lce curve lut1 luma equal to 0x98 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_98_2lsb (0x72)
#define mask_of_lce_reg_lce_curve_lut1_98_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_98_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_98_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_98_2lsb)
// h003a, bit: 7
/* lce curve lut1 luma equal to 0xa8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_a8_8msb (0x74)
#define mask_of_lce_reg_lce_curve_lut1_a8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_a8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_A8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_a8_8msb)
#define REG_LCE_3A_L                             (LCE_REG_LCE_CURVE_LUT1_A8_8MSB)
// h003a, bit: 9
/* lce curve lut1 luma equal to 0xa8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_a8_2lsb (0x74)
#define mask_of_lce_reg_lce_curve_lut1_a8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_a8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_A8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_a8_2lsb)
// h003b, bit: 7
/* lce curve lut1 luma equal to 0xb8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_b8_8msb (0x76)
#define mask_of_lce_reg_lce_curve_lut1_b8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_b8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_B8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_b8_8msb)
#define REG_LCE_3B_L                             (LCE_REG_LCE_CURVE_LUT1_B8_8MSB)
// h003b, bit: 9
/* lce curve lut1 luma equal to 0xb8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_b8_2lsb (0x76)
#define mask_of_lce_reg_lce_curve_lut1_b8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_b8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_B8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_b8_2lsb)
// h003c, bit: 7
/* lce curve lut1 luma equal to 0xc8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_c8_8msb (0x78)
#define mask_of_lce_reg_lce_curve_lut1_c8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_c8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_C8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_c8_8msb)
#define REG_LCE_3C_L                             (LCE_REG_LCE_CURVE_LUT1_C8_8MSB)
// h003c, bit: 9
/* lce curve lut1 luma equal to 0xc8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_c8_2lsb (0x78)
#define mask_of_lce_reg_lce_curve_lut1_c8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_c8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_C8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_c8_2lsb)
// h003d, bit: 7
/* lce curve lut1 luma equal to 0xd8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_d8_8msb (0x7a)
#define mask_of_lce_reg_lce_curve_lut1_d8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_d8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_D8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_d8_8msb)
#define REG_LCE_3D_L                             (LCE_REG_LCE_CURVE_LUT1_D8_8MSB)
// h003d, bit: 9
/* lce curve lut1 luma equal to 0xd8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_d8_2lsb (0x7a)
#define mask_of_lce_reg_lce_curve_lut1_d8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_d8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_D8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_d8_2lsb)
// h003e, bit: 7
/* lce curve lut1 luma equal to 0xe8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_e8_8msb (0x7c)
#define mask_of_lce_reg_lce_curve_lut1_e8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_e8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_E8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_e8_8msb)
#define REG_LCE_3E_L                             (LCE_REG_LCE_CURVE_LUT1_E8_8MSB)
// h003e, bit: 9
/* lce curve lut1 luma equal to 0xe8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_e8_2lsb (0x7c)
#define mask_of_lce_reg_lce_curve_lut1_e8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_e8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_E8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_e8_2lsb)
// h003f, bit: 7
/* lce curve lut1 luma equal to 0xf8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut1_f8_8msb (0x7e)
#define mask_of_lce_reg_lce_curve_lut1_f8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut1_f8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT1_F8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_f8_8msb)
#define REG_LCE_3F_L                             (LCE_REG_LCE_CURVE_LUT1_F8_8MSB)
// h003f, bit: 9
/* lce curve lut1 luma equal to 0xf8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut1_f8_2lsb (0x7e)
#define mask_of_lce_reg_lce_curve_lut1_f8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut1_f8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT1_F8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut1_f8_2lsb)
// h0040, bit: 7
/* lce curve lut2 luma equal to 0x08 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_08_8msb (0x80)
#define mask_of_lce_reg_lce_curve_lut2_08_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_08_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_08_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_08_8msb)
#define REG_LCE_40_L                             (LCE_REG_LCE_CURVE_LUT2_08_8MSB)
// h0040, bit: 9
/* lce curve lut2 luma equal to 0x08 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_08_2lsb (0x80)
#define mask_of_lce_reg_lce_curve_lut2_08_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_08_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_08_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_08_2lsb)
// h0041, bit: 7
/* lce curve lut2 luma equal to 0x18 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_18_8msb (0x82)
#define mask_of_lce_reg_lce_curve_lut2_18_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_18_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_18_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_18_8msb)
#define REG_LCE_41_L                             (LCE_REG_LCE_CURVE_LUT2_18_8MSB)
// h0041, bit: 9
/* lce curve lut2 luma equal to 0x18 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_18_2lsb (0x82)
#define mask_of_lce_reg_lce_curve_lut2_18_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_18_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_18_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_18_2lsb)
// h0042, bit: 7
/* lce curve lut2 luma equal to 0x28 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_28_8msb (0x84)
#define mask_of_lce_reg_lce_curve_lut2_28_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_28_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_28_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_28_8msb)
#define REG_LCE_42_L                             (LCE_REG_LCE_CURVE_LUT2_28_8MSB)
// h0042, bit: 9
/* lce curve lut2 luma equal to 0x28 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_28_2lsb (0x84)
#define mask_of_lce_reg_lce_curve_lut2_28_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_28_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_28_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_28_2lsb)
// h0043, bit: 7
/* lce curve lut2 luma equal to 0x38 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_38_8msb (0x86)
#define mask_of_lce_reg_lce_curve_lut2_38_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_38_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_38_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_38_8msb)
#define REG_LCE_43_L                             (LCE_REG_LCE_CURVE_LUT2_38_8MSB)
// h0043, bit: 9
/* lce curve lut2 luma equal to 0x38 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_38_2lsb (0x86)
#define mask_of_lce_reg_lce_curve_lut2_38_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_38_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_38_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_38_2lsb)
// h0044, bit: 7
/* lce curve lut2 luma equal to 0x48 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_48_8msb (0x88)
#define mask_of_lce_reg_lce_curve_lut2_48_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_48_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_48_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_48_8msb)
#define REG_LCE_44_L                             (LCE_REG_LCE_CURVE_LUT2_48_8MSB)
// h0044, bit: 9
/* lce curve lut2 luma equal to 0x48 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_48_2lsb (0x88)
#define mask_of_lce_reg_lce_curve_lut2_48_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_48_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_48_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_48_2lsb)
// h0045, bit: 7
/* lce curve lut2 luma equal to 0x58 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_58_8msb (0x8a)
#define mask_of_lce_reg_lce_curve_lut2_58_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_58_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_58_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_58_8msb)
#define REG_LCE_45_L                             (LCE_REG_LCE_CURVE_LUT2_58_8MSB)
// h0045, bit: 9
/* lce curve lut2 luma equal to 0x58 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_58_2lsb (0x8a)
#define mask_of_lce_reg_lce_curve_lut2_58_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_58_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_58_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_58_2lsb)
// h0046, bit: 7
/* lce curve lut2 luma equal to 0x68 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_68_8msb (0x8c)
#define mask_of_lce_reg_lce_curve_lut2_68_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_68_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_68_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_68_8msb)
#define REG_LCE_46_L                             (LCE_REG_LCE_CURVE_LUT2_68_8MSB)
// h0046, bit: 9
/* lce curve lut2 luma equal to 0x68 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_68_2lsb (0x8c)
#define mask_of_lce_reg_lce_curve_lut2_68_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_68_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_68_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_68_2lsb)
// h0047, bit: 7
/* lce curve lut2 luma equal to 0x78 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_78_8msb (0x8e)
#define mask_of_lce_reg_lce_curve_lut2_78_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_78_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_78_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_78_8msb)
#define REG_LCE_47_L                             (LCE_REG_LCE_CURVE_LUT2_78_8MSB)
// h0047, bit: 9
/* lce curve lut2 luma equal to 0x78 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_78_2lsb (0x8e)
#define mask_of_lce_reg_lce_curve_lut2_78_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_78_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_78_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_78_2lsb)
// h0048, bit: 7
/* lce curve lut2 luma equal to 0x88 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_88_8msb (0x90)
#define mask_of_lce_reg_lce_curve_lut2_88_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_88_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_88_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_88_8msb)
#define REG_LCE_48_L                             (LCE_REG_LCE_CURVE_LUT2_88_8MSB)
// h0048, bit: 9
/* lce curve lut2 luma equal to 0x88 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_88_2lsb (0x90)
#define mask_of_lce_reg_lce_curve_lut2_88_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_88_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_88_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_88_2lsb)
// h0049, bit: 7
/* lce curve lut2 luma equal to 0x98 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_98_8msb (0x92)
#define mask_of_lce_reg_lce_curve_lut2_98_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_98_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_98_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_98_8msb)
#define REG_LCE_49_L                             (LCE_REG_LCE_CURVE_LUT2_98_8MSB)
// h0049, bit: 9
/* lce curve lut2 luma equal to 0x98 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_98_2lsb (0x92)
#define mask_of_lce_reg_lce_curve_lut2_98_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_98_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_98_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_98_2lsb)
// h004a, bit: 7
/* lce curve lut2 luma equal to 0xa8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_a8_8msb (0x94)
#define mask_of_lce_reg_lce_curve_lut2_a8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_a8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_A8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_a8_8msb)
#define REG_LCE_4A_L                             (LCE_REG_LCE_CURVE_LUT2_A8_8MSB)
// h004a, bit: 9
/* lce curve lut2 luma equal to 0xa8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_a8_2lsb (0x94)
#define mask_of_lce_reg_lce_curve_lut2_a8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_a8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_A8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_a8_2lsb)
// h004b, bit: 7
/* lce curve lut2 luma equal to 0xb8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_b8_8msb (0x96)
#define mask_of_lce_reg_lce_curve_lut2_b8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_b8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_B8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_b8_8msb)
#define REG_LCE_4B_L                             (LCE_REG_LCE_CURVE_LUT2_B8_8MSB)
// h004b, bit: 9
/* lce curve lut2 luma equal to 0xb8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_b8_2lsb (0x96)
#define mask_of_lce_reg_lce_curve_lut2_b8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_b8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_B8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_b8_2lsb)
// h004c, bit: 7
/* lce curve lut2 luma equal to 0xc8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_c8_8msb (0x98)
#define mask_of_lce_reg_lce_curve_lut2_c8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_c8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_C8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_c8_8msb)
#define REG_LCE_4C_L                             (LCE_REG_LCE_CURVE_LUT2_C8_8MSB)
// h004c, bit: 9
/* lce curve lut2 luma equal to 0xc8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_c8_2lsb (0x98)
#define mask_of_lce_reg_lce_curve_lut2_c8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_c8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_C8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_c8_2lsb)
// h004d, bit: 7
/* lce curve lut2 luma equal to 0xd8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_d8_8msb (0x9a)
#define mask_of_lce_reg_lce_curve_lut2_d8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_d8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_D8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_d8_8msb)
#define REG_LCE_4D_L                             (LCE_REG_LCE_CURVE_LUT2_D8_8MSB)
// h004d, bit: 9
/* lce curve lut2 luma equal to 0xd8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_d8_2lsb (0x9a)
#define mask_of_lce_reg_lce_curve_lut2_d8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_d8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_D8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_d8_2lsb)
// h004e, bit: 7
/* lce curve lut2 luma equal to 0xe8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_e8_8msb (0x9c)
#define mask_of_lce_reg_lce_curve_lut2_e8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_e8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_E8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_e8_8msb)
#define REG_LCE_4E_L                             (LCE_REG_LCE_CURVE_LUT2_E8_8MSB)
// h004e, bit: 9
/* lce curve lut2 luma equal to 0xe8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_e8_2lsb (0x9c)
#define mask_of_lce_reg_lce_curve_lut2_e8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_e8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_E8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_e8_2lsb)
// h004f, bit: 7
/* lce curve lut2 luma equal to 0xf8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut2_f8_8msb (0x9e)
#define mask_of_lce_reg_lce_curve_lut2_f8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut2_f8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT2_F8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_f8_8msb)
#define REG_LCE_4F_L                             (LCE_REG_LCE_CURVE_LUT2_F8_8MSB)
// h004f, bit: 9
/* lce curve lut2 luma equal to 0xf8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut2_f8_2lsb (0x9e)
#define mask_of_lce_reg_lce_curve_lut2_f8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut2_f8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT2_F8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut2_f8_2lsb)
// h0050, bit: 7
/* lce curve lut3 luma equal to 0x08 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_08_8msb (0xa0)
#define mask_of_lce_reg_lce_curve_lut3_08_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_08_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_08_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_08_8msb)
#define REG_LCE_50_L                             (LCE_REG_LCE_CURVE_LUT3_08_8MSB)
// h0050, bit: 9
/* lce curve lut3 luma equal to 0x08 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_08_2lsb (0xa0)
#define mask_of_lce_reg_lce_curve_lut3_08_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_08_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_08_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_08_2lsb)
// h0051, bit: 7
/* lce curve lut3 luma equal to 0x18 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_18_8msb (0xa2)
#define mask_of_lce_reg_lce_curve_lut3_18_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_18_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_18_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_18_8msb)
#define REG_LCE_51_L                             (LCE_REG_LCE_CURVE_LUT3_18_8MSB)
// h0051, bit: 9
/* lce curve lut3 luma equal to 0x18 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_18_2lsb (0xa2)
#define mask_of_lce_reg_lce_curve_lut3_18_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_18_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_18_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_18_2lsb)
// h0052, bit: 7
/* lce curve lut3 luma equal to 0x28 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_28_8msb (0xa4)
#define mask_of_lce_reg_lce_curve_lut3_28_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_28_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_28_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_28_8msb)
#define REG_LCE_52_L                             (LCE_REG_LCE_CURVE_LUT3_28_8MSB)
// h0052, bit: 9
/* lce curve lut3 luma equal to 0x28 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_28_2lsb (0xa4)
#define mask_of_lce_reg_lce_curve_lut3_28_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_28_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_28_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_28_2lsb)
// h0053, bit: 7
/* lce curve lut3 luma equal to 0x38 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_38_8msb (0xa6)
#define mask_of_lce_reg_lce_curve_lut3_38_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_38_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_38_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_38_8msb)
#define REG_LCE_53_L                             (LCE_REG_LCE_CURVE_LUT3_38_8MSB)
// h0053, bit: 9
/* lce curve lut3 luma equal to 0x38 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_38_2lsb (0xa6)
#define mask_of_lce_reg_lce_curve_lut3_38_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_38_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_38_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_38_2lsb)
// h0054, bit: 7
/* lce curve lut3 luma equal to 0x48 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_48_8msb (0xa8)
#define mask_of_lce_reg_lce_curve_lut3_48_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_48_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_48_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_48_8msb)
#define REG_LCE_54_L                             (LCE_REG_LCE_CURVE_LUT3_48_8MSB)
// h0054, bit: 9
/* lce curve lut3 luma equal to 0x48 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_48_2lsb (0xa8)
#define mask_of_lce_reg_lce_curve_lut3_48_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_48_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_48_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_48_2lsb)
// h0055, bit: 7
/* lce curve lut3 luma equal to 0x58 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_58_8msb (0xaa)
#define mask_of_lce_reg_lce_curve_lut3_58_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_58_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_58_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_58_8msb)
#define REG_LCE_55_L                             (LCE_REG_LCE_CURVE_LUT3_58_8MSB)
// h0055, bit: 9
/* lce curve lut3 luma equal to 0x58 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_58_2lsb (0xaa)
#define mask_of_lce_reg_lce_curve_lut3_58_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_58_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_58_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_58_2lsb)
// h0056, bit: 7
/* lce curve lut3 luma equal to 0x68 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_68_8msb (0xac)
#define mask_of_lce_reg_lce_curve_lut3_68_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_68_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_68_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_68_8msb)
#define REG_LCE_56_L                             (LCE_REG_LCE_CURVE_LUT3_68_8MSB)
// h0056, bit: 9
/* lce curve lut3 luma equal to 0x68 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_68_2lsb (0xac)
#define mask_of_lce_reg_lce_curve_lut3_68_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_68_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_68_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_68_2lsb)
// h0057, bit: 7
/* lce curve lut3 luma equal to 0x78 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_78_8msb (0xae)
#define mask_of_lce_reg_lce_curve_lut3_78_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_78_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_78_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_78_8msb)
#define REG_LCE_57_L                             (LCE_REG_LCE_CURVE_LUT3_78_8MSB)
// h0057, bit: 9
/* lce curve lut3 luma equal to 0x78 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_78_2lsb (0xae)
#define mask_of_lce_reg_lce_curve_lut3_78_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_78_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_78_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_78_2lsb)
// h0058, bit: 7
/* lce curve lut3 luma equal to 0x88 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_88_8msb (0xb0)
#define mask_of_lce_reg_lce_curve_lut3_88_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_88_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_88_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_88_8msb)
#define REG_LCE_58_L                             (LCE_REG_LCE_CURVE_LUT3_88_8MSB)
// h0058, bit: 9
/* lce curve lut3 luma equal to 0x88 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_88_2lsb (0xb0)
#define mask_of_lce_reg_lce_curve_lut3_88_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_88_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_88_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_88_2lsb)
// h0059, bit: 7
/* lce curve lut3 luma equal to 0x98 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_98_8msb (0xb2)
#define mask_of_lce_reg_lce_curve_lut3_98_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_98_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_98_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_98_8msb)
#define REG_LCE_59_L                             (LCE_REG_LCE_CURVE_LUT3_98_8MSB)
// h0059, bit: 9
/* lce curve lut3 luma equal to 0x98 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_98_2lsb (0xb2)
#define mask_of_lce_reg_lce_curve_lut3_98_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_98_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_98_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_98_2lsb)
// h005a, bit: 7
/* lce curve lut3 luma equal to 0xa8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_a8_8msb (0xb4)
#define mask_of_lce_reg_lce_curve_lut3_a8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_a8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_A8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_a8_8msb)
#define REG_LCE_5A_L                             (LCE_REG_LCE_CURVE_LUT3_A8_8MSB)
// h005a, bit: 9
/* lce curve lut3 luma equal to 0xa8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_a8_2lsb (0xb4)
#define mask_of_lce_reg_lce_curve_lut3_a8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_a8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_A8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_a8_2lsb)
// h005b, bit: 7
/* lce curve lut3 luma equal to 0xb8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_b8_8msb (0xb6)
#define mask_of_lce_reg_lce_curve_lut3_b8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_b8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_B8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_b8_8msb)
#define REG_LCE_5B_L                             (LCE_REG_LCE_CURVE_LUT3_B8_8MSB)
// h005b, bit: 9
/* lce curve lut3 luma equal to 0xb8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_b8_2lsb (0xb6)
#define mask_of_lce_reg_lce_curve_lut3_b8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_b8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_B8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_b8_2lsb)
// h005c, bit: 7
/* lce curve lut3 luma equal to 0xc8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_c8_8msb (0xb8)
#define mask_of_lce_reg_lce_curve_lut3_c8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_c8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_C8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_c8_8msb)
#define REG_LCE_5C_L                             (LCE_REG_LCE_CURVE_LUT3_C8_8MSB)
// h005c, bit: 9
/* lce curve lut3 luma equal to 0xc8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_c8_2lsb (0xb8)
#define mask_of_lce_reg_lce_curve_lut3_c8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_c8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_C8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_c8_2lsb)
// h005d, bit: 7
/* lce curve lut3 luma equal to 0xd8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_d8_8msb (0xba)
#define mask_of_lce_reg_lce_curve_lut3_d8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_d8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_D8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_d8_8msb)
#define REG_LCE_5D_L                             (LCE_REG_LCE_CURVE_LUT3_D8_8MSB)
// h005d, bit: 9
/* lce curve lut3 luma equal to 0xd8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_d8_2lsb (0xba)
#define mask_of_lce_reg_lce_curve_lut3_d8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_d8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_D8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_d8_2lsb)
// h005e, bit: 7
/* lce curve lut3 luma equal to 0xe8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_e8_8msb (0xbc)
#define mask_of_lce_reg_lce_curve_lut3_e8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_e8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_E8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_e8_8msb)
#define REG_LCE_5E_L                             (LCE_REG_LCE_CURVE_LUT3_E8_8MSB)
// h005e, bit: 9
/* lce curve lut3 luma equal to 0xe8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_e8_2lsb (0xbc)
#define mask_of_lce_reg_lce_curve_lut3_e8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_e8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_E8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_e8_2lsb)
// h005f, bit: 7
/* lce curve lut3 luma equal to 0xf8 8 MSBs*/
#define offset_of_lce_reg_lce_curve_lut3_f8_8msb (0xbe)
#define mask_of_lce_reg_lce_curve_lut3_f8_8msb   (0xff)
#define shift_of_lce_reg_lce_curve_lut3_f8_8msb  (0)
#define LCE_REG_LCE_CURVE_LUT3_F8_8MSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_f8_8msb)
#define REG_LCE_5F_L                             (LCE_REG_LCE_CURVE_LUT3_F8_8MSB)
// h005f, bit: 9
/* lce curve lut3 luma equal to 0xf8 2 LSBs*/
#define offset_of_lce_reg_lce_curve_lut3_f8_2lsb (0xbe)
#define mask_of_lce_reg_lce_curve_lut3_f8_2lsb   (0x300)
#define shift_of_lce_reg_lce_curve_lut3_f8_2lsb  (8)
#define LCE_REG_LCE_CURVE_LUT3_F8_2LSB           (REG_LCE_BASE + offset_of_lce_reg_lce_curve_lut3_f8_2lsb)
#define REG_LCE_60_L                             (REG_LCE_BASE + 0xc0)
// h0061, bit: 0
/* Main window UV compensate adaptive luma enable*/
#define offset_of_lce_reg_main_uvc_adaptive_luma_en (0xc2)
#define mask_of_lce_reg_main_uvc_adaptive_luma_en   (0x1)
#define shift_of_lce_reg_main_uvc_adaptive_luma_en  (0)
#define LCE_REG_MAIN_UVC_ADAPTIVE_LUMA_EN           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_adaptive_luma_en)
#define REG_LCE_61_L                                (LCE_REG_MAIN_UVC_ADAPTIVE_LUMA_EN)
// h0061, bit: 1
/* Main window UV compensate adaptive luma y input mux
#0 : Yout
#1 : Yin*/
#define offset_of_lce_reg_main_uvc_adaptive_luma_y_input (0xc2)
#define mask_of_lce_reg_main_uvc_adaptive_luma_y_input   (0x2)
#define shift_of_lce_reg_main_uvc_adaptive_luma_y_input  (1)
#define LCE_REG_MAIN_UVC_ADAPTIVE_LUMA_Y_INPUT           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_adaptive_luma_y_input)
// h0061, bit: 2
/* Main window UV compensate rgb mode enable*/
#define offset_of_lce_reg_main_uvc_rgb_en (0xc2)
#define mask_of_lce_reg_main_uvc_rgb_en   (0x4)
#define shift_of_lce_reg_main_uvc_rgb_en  (2)
#define LCE_REG_MAIN_UVC_RGB_EN           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_rgb_en)
// h0061, bit: 3
/* Main window UV compensate cmc fullrange enable in rgb mode*/
#define offset_of_lce_reg_main_uvc_dlc_fullrange_en (0xc2)
#define mask_of_lce_reg_main_uvc_dlc_fullrange_en   (0x8)
#define shift_of_lce_reg_main_uvc_dlc_fullrange_en  (3)
#define LCE_REG_MAIN_UVC_DLC_FULLRANGE_EN           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_dlc_fullrange_en)
// h0061, bit: 5
/* Main window UV compensate adaptive luma black region step*/
#define offset_of_lce_reg_main_uvc_adaptive_luma_black_step (0xc2)
#define mask_of_lce_reg_main_uvc_adaptive_luma_black_step   (0x30)
#define shift_of_lce_reg_main_uvc_adaptive_luma_black_step  (4)
#define LCE_REG_MAIN_UVC_ADAPTIVE_LUMA_BLACK_STEP           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_adaptive_luma_black_step)
// h0061, bit: 7
/* Main window UV compensate adaptive luma white region step*/
#define offset_of_lce_reg_main_uvc_adaptive_luma_white_step (0xc2)
#define mask_of_lce_reg_main_uvc_adaptive_luma_white_step   (0xc0)
#define shift_of_lce_reg_main_uvc_adaptive_luma_white_step  (6)
#define LCE_REG_MAIN_UVC_ADAPTIVE_LUMA_WHITE_STEP           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_adaptive_luma_white_step)
// h0062, bit: 7
/* Main window UV compensate adaptive luma black region threshold*/
#define offset_of_lce_reg_main_uvc_adaptive_luma_black_thrd (0xc4)
#define mask_of_lce_reg_main_uvc_adaptive_luma_black_thrd   (0xff)
#define shift_of_lce_reg_main_uvc_adaptive_luma_black_thrd  (0)
#define LCE_REG_MAIN_UVC_ADAPTIVE_LUMA_BLACK_THRD           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_adaptive_luma_black_thrd)
#define REG_LCE_62_L                                        (LCE_REG_MAIN_UVC_ADAPTIVE_LUMA_BLACK_THRD)
// h0062, bit: 15
/* Main window UV compensate adaptive luma white region threshold*/
#define offset_of_lce_reg_main_uvc_adaptive_luma_white_thrd (0xc4)
#define mask_of_lce_reg_main_uvc_adaptive_luma_white_thrd   (0xff00)
#define shift_of_lce_reg_main_uvc_adaptive_luma_white_thrd  (8)
#define LCE_REG_MAIN_UVC_ADAPTIVE_LUMA_WHITE_THRD           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_adaptive_luma_white_thrd)
// h0063, bit: 4
/* Main window UV compensate adaptive luma gain in low threshold region(x.xxxx)*/
#define offset_of_lce_reg_main_uvc_adaptive_luma_gain_low (0xc6)
#define mask_of_lce_reg_main_uvc_adaptive_luma_gain_low   (0x1f)
#define shift_of_lce_reg_main_uvc_adaptive_luma_gain_low  (0)
#define LCE_REG_MAIN_UVC_ADAPTIVE_LUMA_GAIN_LOW           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_adaptive_luma_gain_low)
#define REG_LCE_63_L                                      (LCE_REG_MAIN_UVC_ADAPTIVE_LUMA_GAIN_LOW)
// h0063, bit: 12
/* Main window UV compensate adaptive luma gain in median threshold region*/
#define offset_of_lce_reg_main_uvc_adaptive_luma_gain_med (0xc6)
#define mask_of_lce_reg_main_uvc_adaptive_luma_gain_med   (0x1f00)
#define shift_of_lce_reg_main_uvc_adaptive_luma_gain_med  (8)
#define LCE_REG_MAIN_UVC_ADAPTIVE_LUMA_GAIN_MED           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_adaptive_luma_gain_med)
// h0064, bit: 4
/* Main window UV compensate adaptive luma gain in high threshold region*/
#define offset_of_lce_reg_main_uvc_adaptive_luma_gain_high (0xc8)
#define mask_of_lce_reg_main_uvc_adaptive_luma_gain_high   (0x1f)
#define shift_of_lce_reg_main_uvc_adaptive_luma_gain_high  (0)
#define LCE_REG_MAIN_UVC_ADAPTIVE_LUMA_GAIN_HIGH           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_adaptive_luma_gain_high)
#define REG_LCE_64_L                                       (LCE_REG_MAIN_UVC_ADAPTIVE_LUMA_GAIN_HIGH)
#define REG_LCE_65_L                                       (REG_LCE_BASE + 0xca)
#define REG_LCE_66_L                                       (REG_LCE_BASE + 0xcc)
#define REG_LCE_67_L                                       (REG_LCE_BASE + 0xce)
#define REG_LCE_68_L                                       (REG_LCE_BASE + 0xd0)
#define REG_LCE_69_L                                       (REG_LCE_BASE + 0xd2)
#define REG_LCE_6A_L                                       (REG_LCE_BASE + 0xd4)
#define REG_LCE_6B_L                                       (REG_LCE_BASE + 0xd6)
#define REG_LCE_6C_L                                       (REG_LCE_BASE + 0xd8)
#define REG_LCE_6D_L                                       (REG_LCE_BASE + 0xda)
// h006e, bit: 15
/* VIP function horizontal pixel number enable ( max: 2048+256(guard))*/
#define offset_of_lce_reg_vip_horizontal_num (0xdc)
#define mask_of_lce_reg_vip_horizontal_num   (0xffff)
#define shift_of_lce_reg_vip_horizontal_num  (0)
#define LCE_REG_VIP_HORIZONTAL_NUM           (REG_LCE_BASE + offset_of_lce_reg_vip_horizontal_num)
#define REG_LCE_6E_L                         (LCE_REG_VIP_HORIZONTAL_NUM)
// h006f, bit: 15
/* VIP function vertical line number ( max: 4320)*/
#define offset_of_lce_reg_vip_vertical_num (0xde)
#define mask_of_lce_reg_vip_vertical_num   (0xffff)
#define shift_of_lce_reg_vip_vertical_num  (0)
#define LCE_REG_VIP_VERTICAL_NUM           (REG_LCE_BASE + offset_of_lce_reg_vip_vertical_num)
#define REG_LCE_6F_L                       (LCE_REG_VIP_VERTICAL_NUM)
// h0070, bit: 0
/* vip all function bypass enable*/
#define offset_of_lce_reg_vip_fun_bypass_en (0xe0)
#define mask_of_lce_reg_vip_fun_bypass_en   (0x1)
#define shift_of_lce_reg_vip_fun_bypass_en  (0)
#define LCE_REG_VIP_FUN_BYPASS_EN           (REG_LCE_BASE + offset_of_lce_reg_vip_fun_bypass_en)
#define REG_LCE_70_L                        (LCE_REG_VIP_FUN_BYPASS_EN)
// h0070, bit: 1
/* vip main picture assign constant value enable Left*/
#define offset_of_lce_reg_vip_main_const_en (0xe0)
#define mask_of_lce_reg_vip_main_const_en   (0x2)
#define shift_of_lce_reg_vip_main_const_en  (1)
#define LCE_REG_VIP_MAIN_CONST_EN           (REG_LCE_BASE + offset_of_lce_reg_vip_main_const_en)
// h0070, bit: 2
/* vip sub picture assign constant value enable Right*/
#define offset_of_lce_reg_vip_sub_const_en (0xe0)
#define mask_of_lce_reg_vip_sub_const_en   (0x4)
#define shift_of_lce_reg_vip_sub_const_en  (2)
#define LCE_REG_VIP_SUB_CONST_EN           (REG_LCE_BASE + offset_of_lce_reg_vip_sub_const_en)
// h0070, bit: 3
/* vip low power control using latch signal  (panel_de) for flip-flops */
#define offset_of_lce_reg_vip_low_power_en (0xe0)
#define mask_of_lce_reg_vip_low_power_en   (0x8)
#define shift_of_lce_reg_vip_low_power_en  (3)
#define LCE_REG_VIP_LOW_POWER_EN           (REG_LCE_BASE + offset_of_lce_reg_vip_low_power_en)
// h0070, bit: 4
/* vip main picture bypass enable Left*/
#define offset_of_lce_reg_vip_main_bypass_en (0xe0)
#define mask_of_lce_reg_vip_main_bypass_en   (0x10)
#define shift_of_lce_reg_vip_main_bypass_en  (4)
#define LCE_REG_VIP_MAIN_BYPASS_EN           (REG_LCE_BASE + offset_of_lce_reg_vip_main_bypass_en)
// h0070, bit: 5
/* vip sub picture bypass enable Right*/
#define offset_of_lce_reg_vip_sub_bypass_en (0xe0)
#define mask_of_lce_reg_vip_sub_bypass_en   (0x20)
#define shift_of_lce_reg_vip_sub_bypass_en  (5)
#define LCE_REG_VIP_SUB_BYPASS_EN           (REG_LCE_BASE + offset_of_lce_reg_vip_sub_bypass_en)
// h0070, bit: 6
/* force VIP enable no matter 422 mode is enable or not*/
#define offset_of_lce_reg_vip_force_en (0xe0)
#define mask_of_lce_reg_vip_force_en   (0x40)
#define shift_of_lce_reg_vip_force_en  (6)
#define LCE_REG_VIP_FORCE_EN           (REG_LCE_BASE + offset_of_lce_reg_vip_force_en)
// h0070, bit: 8
/* vip ihc table using menu load*/
#define offset_of_lce_reg_vip_ihc_menu_en (0xe0)
#define mask_of_lce_reg_vip_ihc_menu_en   (0x100)
#define shift_of_lce_reg_vip_ihc_menu_en  (8)
#define LCE_REG_VIP_IHC_MENU_EN           (REG_LCE_BASE + offset_of_lce_reg_vip_ihc_menu_en)
// h0070, bit: 9
/* vip icc table using menu load*/
#define offset_of_lce_reg_vip_icc_menu_en (0xe0)
#define mask_of_lce_reg_vip_icc_menu_en   (0x200)
#define shift_of_lce_reg_vip_icc_menu_en  (9)
#define LCE_REG_VIP_ICC_MENU_EN           (REG_LCE_BASE + offset_of_lce_reg_vip_icc_menu_en)
// h0070, bit: 14
/* vip double buffer force write*/
#define offset_of_lce_reg_vip_rup_rp (0xe0)
#define mask_of_lce_reg_vip_rup_rp   (0x4000)
#define shift_of_lce_reg_vip_rup_rp  (14)
#define LCE_REG_VIP_RUP_RP           (REG_LCE_BASE + offset_of_lce_reg_vip_rup_rp)
// h0070, bit: 15
/* vip empty enable*/
#define offset_of_lce_reg_vip_empty_en (0xe0)
#define mask_of_lce_reg_vip_empty_en   (0x8000)
#define shift_of_lce_reg_vip_empty_en  (15)
#define LCE_REG_VIP_EMPTY_EN           (REG_LCE_BASE + offset_of_lce_reg_vip_empty_en)
// h0071, bit: 15
/* vip ontrol guard pipe number*/
#define offset_of_lce_reg_pipe_guard_cycle (0xe2)
#define mask_of_lce_reg_pipe_guard_cycle   (0xff00)
#define shift_of_lce_reg_pipe_guard_cycle  (8)
#define LCE_REG_PIPE_GUARD_CYCLE           (REG_LCE_BASE + offset_of_lce_reg_pipe_guard_cycle)
#define REG_LCE_71_L                       (LCE_REG_PIPE_GUARD_CYCLE)
// h0072, bit: 1
/* vip 422 to 444 mode*/
#define offset_of_lce_reg_vip_422to444_md (0xe4)
#define mask_of_lce_reg_vip_422to444_md   (0x3)
#define shift_of_lce_reg_vip_422to444_md  (0)
#define LCE_REG_VIP_422TO444_MD           (REG_LCE_BASE + offset_of_lce_reg_vip_422to444_md)
#define REG_LCE_72_L                      (LCE_REG_VIP_422TO444_MD)
// h0072, bit: 2
/* vip 422 to 444 mode cr load ini*/
#define offset_of_lce_reg_vip_cr_load_ini (0xe4)
#define mask_of_lce_reg_vip_cr_load_ini   (0x4)
#define shift_of_lce_reg_vip_cr_load_ini  (2)
#define LCE_REG_VIP_CR_LOAD_INI           (REG_LCE_BASE + offset_of_lce_reg_vip_cr_load_ini)
// h0072, bit: 3
/* vip 422 to 444 mode trancate en*/
#define offset_of_lce_reg_vip_trancate_en (0xe4)
#define mask_of_lce_reg_vip_trancate_en   (0x8)
#define shift_of_lce_reg_vip_trancate_en  (3)
#define LCE_REG_VIP_TRANCATE_EN           (REG_LCE_BASE + offset_of_lce_reg_vip_trancate_en)
// h0072, bit: 7
/* vip 422 to 444 mode enable*/
#define offset_of_lce_reg_vip_422to444_en (0xe4)
#define mask_of_lce_reg_vip_422to444_en   (0x80)
#define shift_of_lce_reg_vip_422to444_en  (7)
#define LCE_REG_VIP_422TO444_EN           (REG_LCE_BASE + offset_of_lce_reg_vip_422to444_en)
#define REG_LCE_73_L                      (REG_LCE_BASE + 0xe6)
#define REG_LCE_74_L                      (REG_LCE_BASE + 0xe8)
#define REG_LCE_75_L                      (REG_LCE_BASE + 0xea)
#define REG_LCE_76_L                      (REG_LCE_BASE + 0xec)
#define REG_LCE_77_L                      (REG_LCE_BASE + 0xee)
#define REG_LCE_78_L                      (REG_LCE_BASE + 0xf0)
// h0079, bit: 7
/* main window uv compensate low sat protect threshold*/
#define offset_of_lce_reg_main_uvc_low_sat_prot_thrd (0xf2)
#define mask_of_lce_reg_main_uvc_low_sat_prot_thrd   (0xff)
#define shift_of_lce_reg_main_uvc_low_sat_prot_thrd  (0)
#define LCE_REG_MAIN_UVC_LOW_SAT_PROT_THRD           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_low_sat_prot_thrd)
#define REG_LCE_79_L                                 (LCE_REG_MAIN_UVC_LOW_SAT_PROT_THRD)
// h0079, bit: 11
/* main window uv compensate low sat minimum strength*/
#define offset_of_lce_reg_main_uvc_low_sat_min_strength (0xf2)
#define mask_of_lce_reg_main_uvc_low_sat_min_strength   (0xf00)
#define shift_of_lce_reg_main_uvc_low_sat_min_strength  (8)
#define LCE_REG_MAIN_UVC_LOW_SAT_MIN_STRENGTH           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_low_sat_min_strength)
// h0079, bit: 12
/* main window uv compensate low y protect enable*/
#define offset_of_lce_reg_main_uvc_low_y_prot_en (0xf2)
#define mask_of_lce_reg_main_uvc_low_y_prot_en   (0x1000)
#define shift_of_lce_reg_main_uvc_low_y_prot_en  (12)
#define LCE_REG_MAIN_UVC_LOW_Y_PROT_EN           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_low_y_prot_en)
// h0079, bit: 13
/* main window uv compensate low sat protect enable*/
#define offset_of_lce_reg_main_uvc_low_sat_prot_en (0xf2)
#define mask_of_lce_reg_main_uvc_low_sat_prot_en   (0x2000)
#define shift_of_lce_reg_main_uvc_low_sat_prot_en  (13)
#define LCE_REG_MAIN_UVC_LOW_SAT_PROT_EN           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_low_sat_prot_en)
// h0079, bit: 14
/* main window uv compensate lpf for low y and low sat protect enable*/
#define offset_of_lce_reg_main_uvc_lpf_en (0xf2)
#define mask_of_lce_reg_main_uvc_lpf_en   (0x4000)
#define shift_of_lce_reg_main_uvc_lpf_en  (14)
#define LCE_REG_MAIN_UVC_LPF_EN           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_lpf_en)
// h0079, bit: 15
/* main window uv compensate low y and low sat protect enable*/
#define offset_of_lce_reg_main_uvc_low_y_sat_prot_en (0xf2)
#define mask_of_lce_reg_main_uvc_low_y_sat_prot_en   (0x8000)
#define shift_of_lce_reg_main_uvc_low_y_sat_prot_en  (15)
#define LCE_REG_MAIN_UVC_LOW_Y_SAT_PROT_EN           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_low_y_sat_prot_en)
// h007a, bit: 5
/* main window uv compensate low sat protect slope*/
#define offset_of_lce_reg_main_uvc_low_sat_prot_slope (0xf4)
#define mask_of_lce_reg_main_uvc_low_sat_prot_slope   (0x3f)
#define shift_of_lce_reg_main_uvc_low_sat_prot_slope  (0)
#define LCE_REG_MAIN_UVC_LOW_SAT_PROT_SLOPE           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_low_sat_prot_slope)
#define REG_LCE_7A_L                                  (LCE_REG_MAIN_UVC_LOW_SAT_PROT_SLOPE)
// h007a, bit: 13
/* main window uv compensate low y protect slope*/
#define offset_of_lce_reg_main_uvc_low_y_prot_slope (0xf4)
#define mask_of_lce_reg_main_uvc_low_y_prot_slope   (0x3f00)
#define shift_of_lce_reg_main_uvc_low_y_prot_slope  (8)
#define LCE_REG_MAIN_UVC_LOW_Y_PROT_SLOPE           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_low_y_prot_slope)
// h007a, bit: 15
/* main window uv compensate y input selection*/
#define offset_of_lce_reg_main_uvc_low_y_sel (0xf4)
#define mask_of_lce_reg_main_uvc_low_y_sel   (0xc000)
#define shift_of_lce_reg_main_uvc_low_y_sel  (14)
#define LCE_REG_MAIN_UVC_LOW_Y_SEL           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_low_y_sel)
// h007b, bit: 7
/* main window uv compensate low y protect threshold*/
#define offset_of_lce_reg_main_uvc_low_y_prot_thrd (0xf6)
#define mask_of_lce_reg_main_uvc_low_y_prot_thrd   (0xff)
#define shift_of_lce_reg_main_uvc_low_y_prot_thrd  (0)
#define LCE_REG_MAIN_UVC_LOW_Y_PROT_THRD           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_low_y_prot_thrd)
#define REG_LCE_7B_L                               (LCE_REG_MAIN_UVC_LOW_Y_PROT_THRD)
// h007b, bit: 11
/* main window uv compensate low y minimum strength*/
#define offset_of_lce_reg_main_uvc_low_y_min_strength (0xf6)
#define mask_of_lce_reg_main_uvc_low_y_min_strength   (0xf00)
#define shift_of_lce_reg_main_uvc_low_y_min_strength  (8)
#define LCE_REG_MAIN_UVC_LOW_Y_MIN_STRENGTH           (REG_LCE_BASE + offset_of_lce_reg_main_uvc_low_y_min_strength)
#define REG_LCE_7C_L                                  (REG_LCE_BASE + 0xf8)
#define REG_LCE_7D_L                                  (REG_LCE_BASE + 0xfa)
#define REG_LCE_7E_L                                  (REG_LCE_BASE + 0xfc)
#define REG_LCE_7F_L                                  (REG_LCE_BASE + 0xfe)
#define REG_MWE_00_L                                  (REG_MWE_BASE + 0x0)
// h0001, bit: 9
/* Main window histogram vertical start (max:4320)
display_start = reg_start * 8*/
#define offset_of_mwe_reg_main_statistic_v_start (0x2)
#define mask_of_mwe_reg_main_statistic_v_start   (0x3ff)
#define shift_of_mwe_reg_main_statistic_v_start  (0)
#define MWE_REG_MAIN_STATISTIC_V_START           (REG_MWE_BASE + offset_of_mwe_reg_main_statistic_v_start)
#define REG_MWE_01_L                             (MWE_REG_MAIN_STATISTIC_V_START)
// h0002, bit: 9
/* Main window histogram vertical end (max:4320)
display_end = reg_end * 8*/
#define offset_of_mwe_reg_main_statistic_v_end (0x4)
#define mask_of_mwe_reg_main_statistic_v_end   (0x3ff)
#define shift_of_mwe_reg_main_statistic_v_end  (0)
#define MWE_REG_MAIN_STATISTIC_V_END           (REG_MWE_BASE + offset_of_mwe_reg_main_statistic_v_end)
#define REG_MWE_02_L                           (MWE_REG_MAIN_STATISTIC_V_END)
// h0003, bit: 8
/* Main window histogram horizontal start (max:2048+40g)
display_start = reg_start * 8*/
#define offset_of_mwe_reg_main_statistic_h_start (0x6)
#define mask_of_mwe_reg_main_statistic_h_start   (0x1ff)
#define shift_of_mwe_reg_main_statistic_h_start  (0)
#define MWE_REG_MAIN_STATISTIC_H_START           (REG_MWE_BASE + offset_of_mwe_reg_main_statistic_h_start)
#define REG_MWE_03_L                             (MWE_REG_MAIN_STATISTIC_H_START)
// h0004, bit: 8
/* Main window histogram horizontal end (max: 2048+40g)
display_end = reg_end * 8*/
#define offset_of_mwe_reg_main_statistic_h_end (0x8)
#define mask_of_mwe_reg_main_statistic_h_end   (0x1ff)
#define shift_of_mwe_reg_main_statistic_h_end  (0)
#define MWE_REG_MAIN_STATISTIC_H_END           (REG_MWE_BASE + offset_of_mwe_reg_main_statistic_h_end)
#define REG_MWE_04_L                           (MWE_REG_MAIN_STATISTIC_H_END)
#define REG_MWE_05_L                           (REG_MWE_BASE + 0xa)
// bigger than 16 bit case allh0006
#define offset_of_mwe_reg_main_total_pixel_sat_weight (0xc)
#define mask_of_mwe_reg_main_total_pixel_sat_weight   (0xfffff)
#define shift_of_mwe_reg_main_total_pixel_sat_weight  (0)
#define MWE_REG_MAIN_TOTAL_PIXEL_SAT_WEIGHT           (REG_MWE_BASE + offset_of_mwe_reg_main_total_pixel_sat_weight)
// h0006, bit: 15
/* Main window histogram saturation report sum of total saturation*/
#define offset_of_mwe_reg_main_total_pixel_sat_weight_0 (0xc)
#define mask_of_mwe_reg_main_total_pixel_sat_weight_0   (0xffff)
#define shift_of_mwe_reg_main_total_pixel_sat_weight_0  (0)
#define MWE_REG_MAIN_TOTAL_PIXEL_SAT_WEIGHT_0           (REG_MWE_BASE + offset_of_mwe_reg_main_total_pixel_sat_weight_0)
#define REG_MWE_06_L                                    (MWE_REG_MAIN_TOTAL_PIXEL_SAT_WEIGHT_0)
// h0007, bit: 3
/* Main window histogram saturation report sum of total saturation*/
#define offset_of_mwe_reg_main_total_pixel_sat_weight_1 (0xe)
#define mask_of_mwe_reg_main_total_pixel_sat_weight_1   (0xf)
#define shift_of_mwe_reg_main_total_pixel_sat_weight_1  (0)
#define MWE_REG_MAIN_TOTAL_PIXEL_SAT_WEIGHT_1           (REG_MWE_BASE + offset_of_mwe_reg_main_total_pixel_sat_weight_1)
#define REG_MWE_07_L                                    (MWE_REG_MAIN_TOTAL_PIXEL_SAT_WEIGHT_1)
// bigger than 16 bit case allh0008
#define offset_of_mwe_reg_main_total_pixel_count (0x10)
#define mask_of_mwe_reg_main_total_pixel_count   (0xfffff)
#define shift_of_mwe_reg_main_total_pixel_count  (0)
#define MWE_REG_MAIN_TOTAL_PIXEL_COUNT           (REG_MWE_BASE + offset_of_mwe_reg_main_total_pixel_count)
// h0008, bit: 15
/* Main window histogram report sum of pixel number (/2^5)*/
#define offset_of_mwe_reg_main_total_pixel_count_0 (0x10)
#define mask_of_mwe_reg_main_total_pixel_count_0   (0xffff)
#define shift_of_mwe_reg_main_total_pixel_count_0  (0)
#define MWE_REG_MAIN_TOTAL_PIXEL_COUNT_0           (REG_MWE_BASE + offset_of_mwe_reg_main_total_pixel_count_0)
#define REG_MWE_08_L                               (MWE_REG_MAIN_TOTAL_PIXEL_COUNT_0)
// h0009, bit: 3
/* Main window histogram report sum of pixel number (/2^5)*/
#define offset_of_mwe_reg_main_total_pixel_count_1 (0x12)
#define mask_of_mwe_reg_main_total_pixel_count_1   (0xf)
#define shift_of_mwe_reg_main_total_pixel_count_1  (0)
#define MWE_REG_MAIN_TOTAL_PIXEL_COUNT_1           (REG_MWE_BASE + offset_of_mwe_reg_main_total_pixel_count_1)
#define REG_MWE_09_L                               (MWE_REG_MAIN_TOTAL_PIXEL_COUNT_1)
// bigger than 16 bit case allh000a
#define offset_of_mwe_reg_main_total_pixel_weight (0x14)
#define mask_of_mwe_reg_main_total_pixel_weight   (0xfffff)
#define shift_of_mwe_reg_main_total_pixel_weight  (0)
#define MWE_REG_MAIN_TOTAL_PIXEL_WEIGHT           (REG_MWE_BASE + offset_of_mwe_reg_main_total_pixel_weight)
// h000a, bit: 15
/* Main window histogram report sum of total Y (/2^13)*/
#define offset_of_mwe_reg_main_total_pixel_weight_0 (0x14)
#define mask_of_mwe_reg_main_total_pixel_weight_0   (0xffff)
#define shift_of_mwe_reg_main_total_pixel_weight_0  (0)
#define MWE_REG_MAIN_TOTAL_PIXEL_WEIGHT_0           (REG_MWE_BASE + offset_of_mwe_reg_main_total_pixel_weight_0)
#define REG_MWE_0A_L                                (MWE_REG_MAIN_TOTAL_PIXEL_WEIGHT_0)
// h000b, bit: 3
/* Main window histogram report sum of total Y (/2^13)*/
#define offset_of_mwe_reg_main_total_pixel_weight_1 (0x16)
#define mask_of_mwe_reg_main_total_pixel_weight_1   (0xf)
#define shift_of_mwe_reg_main_total_pixel_weight_1  (0)
#define MWE_REG_MAIN_TOTAL_PIXEL_WEIGHT_1           (REG_MWE_BASE + offset_of_mwe_reg_main_total_pixel_weight_1)
#define REG_MWE_0B_L                                (MWE_REG_MAIN_TOTAL_PIXEL_WEIGHT_1)
// bigger than 16 bit case allh000c
#define offset_of_mwe_reg_main_total_pixel_diff (0x18)
#define mask_of_mwe_reg_main_total_pixel_diff   (0xfffff)
#define shift_of_mwe_reg_main_total_pixel_diff  (0)
#define MWE_REG_MAIN_TOTAL_PIXEL_DIFF           (REG_MWE_BASE + offset_of_mwe_reg_main_total_pixel_diff)
// h000c, bit: 15
/* Main window histogram report sum of difference Y (/2^13)*/
#define offset_of_mwe_reg_main_total_pixel_diff_0 (0x18)
#define mask_of_mwe_reg_main_total_pixel_diff_0   (0xffff)
#define shift_of_mwe_reg_main_total_pixel_diff_0  (0)
#define MWE_REG_MAIN_TOTAL_PIXEL_DIFF_0           (REG_MWE_BASE + offset_of_mwe_reg_main_total_pixel_diff_0)
#define REG_MWE_0C_L                              (MWE_REG_MAIN_TOTAL_PIXEL_DIFF_0)
// h000d, bit: 3
/* Main window histogram report sum of difference Y (/2^13)*/
#define offset_of_mwe_reg_main_total_pixel_diff_1 (0x1a)
#define mask_of_mwe_reg_main_total_pixel_diff_1   (0xf)
#define shift_of_mwe_reg_main_total_pixel_diff_1  (0)
#define MWE_REG_MAIN_TOTAL_PIXEL_DIFF_1           (REG_MWE_BASE + offset_of_mwe_reg_main_total_pixel_diff_1)
#define REG_MWE_0D_L                              (MWE_REG_MAIN_TOTAL_PIXEL_DIFF_1)
// bigger than 16 bit case allh000e
#define offset_of_mwe_reg_main_total_color_count (0x1c)
#define mask_of_mwe_reg_main_total_color_count   (0xfffff)
#define shift_of_mwe_reg_main_total_color_count  (0)
#define MWE_REG_MAIN_TOTAL_COLOR_COUNT           (REG_MWE_BASE + offset_of_mwe_reg_main_total_color_count)
// h000e, bit: 15
/* Main window histogram report sum of color pixel number (/2^8)*/
#define offset_of_mwe_reg_main_total_color_count_0 (0x1c)
#define mask_of_mwe_reg_main_total_color_count_0   (0xffff)
#define shift_of_mwe_reg_main_total_color_count_0  (0)
#define MWE_REG_MAIN_TOTAL_COLOR_COUNT_0           (REG_MWE_BASE + offset_of_mwe_reg_main_total_color_count_0)
#define REG_MWE_0E_L                               (MWE_REG_MAIN_TOTAL_COLOR_COUNT_0)
// h000f, bit: 3
/* Main window histogram report sum of color pixel number (/2^8)*/
#define offset_of_mwe_reg_main_total_color_count_1 (0x1e)
#define mask_of_mwe_reg_main_total_color_count_1   (0xf)
#define shift_of_mwe_reg_main_total_color_count_1  (0)
#define MWE_REG_MAIN_TOTAL_COLOR_COUNT_1           (REG_MWE_BASE + offset_of_mwe_reg_main_total_color_count_1)
#define REG_MWE_0F_L                               (MWE_REG_MAIN_TOTAL_COLOR_COUNT_1)
// h0010, bit: 0
/* MWE enable*/
#define offset_of_mwe_reg_mwe_en (0x20)
#define mask_of_mwe_reg_mwe_en   (0x1)
#define shift_of_mwe_reg_mwe_en  (0)
#define MWE_REG_MWE_EN           (REG_MWE_BASE + offset_of_mwe_reg_mwe_en)
#define REG_MWE_10_L             (MWE_REG_MWE_EN)
// h0010, bit: 1
/* MWE debug enable*/
#define offset_of_mwe_reg_mwe_debug_en (0x20)
#define mask_of_mwe_reg_mwe_debug_en   (0x2)
#define shift_of_mwe_reg_mwe_debug_en  (1)
#define MWE_REG_MWE_DEBUG_EN           (REG_MWE_BASE + offset_of_mwe_reg_mwe_debug_en)
// h0011, bit: 11
/* Main window MWE horizontal start (max:2048+40g)*/
#define offset_of_mwe_reg_main_mwe_h_start (0x22)
#define mask_of_mwe_reg_main_mwe_h_start   (0xfff)
#define shift_of_mwe_reg_main_mwe_h_start  (0)
#define MWE_REG_MAIN_MWE_H_START           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_h_start)
#define REG_MWE_11_L                       (MWE_REG_MAIN_MWE_H_START)
// h0012, bit: 11
/* Main window MWE horizontal start (max:2048+40g)*/
#define offset_of_mwe_reg_main_mwe_h_end (0x24)
#define mask_of_mwe_reg_main_mwe_h_end   (0xfff)
#define shift_of_mwe_reg_main_mwe_h_end  (0)
#define MWE_REG_MAIN_MWE_H_END           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_h_end)
#define REG_MWE_12_L                     (MWE_REG_MAIN_MWE_H_END)
// h0013, bit: 12
/* Main window MWE horizontal start (max:4320)*/
#define offset_of_mwe_reg_main_mwe_v_start (0x26)
#define mask_of_mwe_reg_main_mwe_v_start   (0x1fff)
#define shift_of_mwe_reg_main_mwe_v_start  (0)
#define MWE_REG_MAIN_MWE_V_START           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_v_start)
#define REG_MWE_13_L                       (MWE_REG_MAIN_MWE_V_START)
// h0014, bit: 12
/* Main window MWE horizontal start (max:4320)*/
#define offset_of_mwe_reg_main_mwe_v_end (0x28)
#define mask_of_mwe_reg_main_mwe_v_end   (0x1fff)
#define shift_of_mwe_reg_main_mwe_v_end  (0)
#define MWE_REG_MAIN_MWE_V_END           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_v_end)
#define REG_MWE_14_L                     (MWE_REG_MAIN_MWE_V_END)
// h0015, bit: 0
/* vip histogram to miu enable*/
#define offset_of_mwe_reg_vip_stat_miu_en (0x2a)
#define mask_of_mwe_reg_vip_stat_miu_en   (0x1)
#define shift_of_mwe_reg_vip_stat_miu_en  (0)
#define MWE_REG_VIP_STAT_MIU_EN           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_miu_en)
#define REG_MWE_15_L                      (MWE_REG_VIP_STAT_MIU_EN)
// h0015, bit: 2
/* vip histogram to miu trigger mode:
0: vip_frame_end
1: vsync risng of vip
2: delay X line from vsync risng of vip */
#define offset_of_mwe_reg_vip_stat_trig_md (0x2a)
#define mask_of_mwe_reg_vip_stat_trig_md   (0x6)
#define shift_of_mwe_reg_vip_stat_trig_md  (1)
#define MWE_REG_VIP_STAT_TRIG_MD           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_trig_md)
// h0015, bit: 6
/*
set trig (delay X line from vsync risng of vip) for histogram report */
#define offset_of_mwe_reg_vip_stat_trig_dlyl (0x2a)
#define mask_of_mwe_reg_vip_stat_trig_dlyl   (0x78)
#define shift_of_mwe_reg_vip_stat_trig_dlyl  (3)
#define MWE_REG_VIP_STAT_TRIG_DLYL           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_trig_dlyl)
// h0015, bit: 7
/* report baseaddress idx*/
#define offset_of_mwe_reg_vip_stat_baseidx (0x2a)
#define mask_of_mwe_reg_vip_stat_baseidx   (0x80)
#define shift_of_mwe_reg_vip_stat_baseidx  (7)
#define MWE_REG_VIP_STAT_BASEIDX           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_baseidx)
// h0015, bit: 12
/* vip histogram to miu burst length*/
#define offset_of_mwe_reg_vip_stat_burst_len (0x2a)
#define mask_of_mwe_reg_vip_stat_burst_len   (0x1f00)
#define shift_of_mwe_reg_vip_stat_burst_len  (8)
#define MWE_REG_VIP_STAT_BURST_LEN           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_burst_len)
// h0015, bit: 14
/* report vip histgroam to miu finish*/
#define offset_of_mwe_reg_vip_stat_finish (0x2a)
#define mask_of_mwe_reg_vip_stat_finish   (0x4000)
#define shift_of_mwe_reg_vip_stat_finish  (14)
#define MWE_REG_VIP_STAT_FINISH           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_finish)
// h0015, bit: 15
/* vip histogram to miu priority*/
#define offset_of_mwe_reg_vip_stat_miu_priority (0x2a)
#define mask_of_mwe_reg_vip_stat_miu_priority   (0x8000)
#define shift_of_mwe_reg_vip_stat_miu_priority  (15)
#define MWE_REG_VIP_STAT_MIU_PRIORITY           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_miu_priority)
#define REG_MWE_16_L                            (REG_MWE_BASE + 0x2c)
#define REG_MWE_17_L                            (REG_MWE_BASE + 0x2e)
// bigger than 16 bit case allh0018
#define offset_of_mwe_reg_vip_stat_base0 (0x30)
#define mask_of_mwe_reg_vip_stat_base0   (0xffffffff)
#define shift_of_mwe_reg_vip_stat_base0  (0)
#define MWE_REG_VIP_STAT_BASE0           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_base0)
// h0018, bit: 15
/* vip histogram base address 0*/
#define offset_of_mwe_reg_vip_stat_base0_0 (0x30)
#define mask_of_mwe_reg_vip_stat_base0_0   (0xffff)
#define shift_of_mwe_reg_vip_stat_base0_0  (0)
#define MWE_REG_VIP_STAT_BASE0_0           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_base0_0)
#define REG_MWE_18_L                       (MWE_REG_VIP_STAT_BASE0_0)
// h0019, bit: 15
/* vip histogram base address 0*/
#define offset_of_mwe_reg_vip_stat_base0_1 (0x32)
#define mask_of_mwe_reg_vip_stat_base0_1   (0xffff)
#define shift_of_mwe_reg_vip_stat_base0_1  (0)
#define MWE_REG_VIP_STAT_BASE0_1           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_base0_1)
#define REG_MWE_19_L                       (MWE_REG_VIP_STAT_BASE0_1)
// bigger than 16 bit case allh001a
#define offset_of_mwe_reg_vip_stat_base1 (0x34)
#define mask_of_mwe_reg_vip_stat_base1   (0xffffffff)
#define shift_of_mwe_reg_vip_stat_base1  (0)
#define MWE_REG_VIP_STAT_BASE1           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_base1)
// h001a, bit: 15
/* vip histogram base address 1*/
#define offset_of_mwe_reg_vip_stat_base1_0 (0x34)
#define mask_of_mwe_reg_vip_stat_base1_0   (0xffff)
#define shift_of_mwe_reg_vip_stat_base1_0  (0)
#define MWE_REG_VIP_STAT_BASE1_0           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_base1_0)
#define REG_MWE_1A_L                       (MWE_REG_VIP_STAT_BASE1_0)
// h001b, bit: 15
/* vip histogram base address 1*/
#define offset_of_mwe_reg_vip_stat_base1_1 (0x36)
#define mask_of_mwe_reg_vip_stat_base1_1   (0xffff)
#define shift_of_mwe_reg_vip_stat_base1_1  (0)
#define MWE_REG_VIP_STAT_BASE1_1           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_base1_1)
#define REG_MWE_1B_L                       (MWE_REG_VIP_STAT_BASE1_1)
// h001c, bit: 0
/* SW  trigger baseaddress idx*/
#define offset_of_mwe_reg_vip_stat_sw_trig_baseidx (0x38)
#define mask_of_mwe_reg_vip_stat_sw_trig_baseidx   (0x1)
#define shift_of_mwe_reg_vip_stat_sw_trig_baseidx  (0)
#define MWE_REG_VIP_STAT_SW_TRIG_BASEIDX           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_sw_trig_baseidx)
#define REG_MWE_1C_L                               (MWE_REG_VIP_STAT_SW_TRIG_BASEIDX)
// h001c, bit: 1
/* SW  trigger baseaddress idx*/
#define offset_of_mwe_reg_vip_stat_sw_trig (0x38)
#define mask_of_mwe_reg_vip_stat_sw_trig   (0x2)
#define shift_of_mwe_reg_vip_stat_sw_trig  (1)
#define MWE_REG_VIP_STAT_SW_TRIG           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_sw_trig)
// h001c, bit: 2
/* */
#define offset_of_mwe_reg_vip_stat_trig_ref_md (0x38)
#define mask_of_mwe_reg_vip_stat_trig_ref_md   (0x4)
#define shift_of_mwe_reg_vip_stat_trig_ref_md  (2)
#define MWE_REG_VIP_STAT_TRIG_REF_MD           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_trig_ref_md)
// h001d, bit: 15
/* */
#define offset_of_mwe_reg_vip_stat_trig_ref_st (0x3a)
#define mask_of_mwe_reg_vip_stat_trig_ref_st   (0xffff)
#define shift_of_mwe_reg_vip_stat_trig_ref_st  (0)
#define MWE_REG_VIP_STAT_TRIG_REF_ST           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_trig_ref_st)
#define REG_MWE_1D_L                           (MWE_REG_VIP_STAT_TRIG_REF_ST)
// h001e, bit: 15
/* */
#define offset_of_mwe_reg_vip_stat_trig_ref_ed (0x3c)
#define mask_of_mwe_reg_vip_stat_trig_ref_ed   (0xffff)
#define shift_of_mwe_reg_vip_stat_trig_ref_ed  (0)
#define MWE_REG_VIP_STAT_TRIG_REF_ED           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_trig_ref_ed)
#define REG_MWE_1E_L                           (MWE_REG_VIP_STAT_TRIG_REF_ED)
// h001f, bit: 15
/* */
#define offset_of_mwe_reg_vip_stat_trig_ref_len (0x3e)
#define mask_of_mwe_reg_vip_stat_trig_ref_len   (0xffff)
#define shift_of_mwe_reg_vip_stat_trig_ref_len  (0)
#define MWE_REG_VIP_STAT_TRIG_REF_LEN           (REG_MWE_BASE + offset_of_mwe_reg_vip_stat_trig_ref_len)
#define REG_MWE_1F_L                            (MWE_REG_VIP_STAT_TRIG_REF_LEN)
// bigger than 16 bit case allh0020
#define offset_of_mwe_reg_total_1f0 (0x40)
#define mask_of_mwe_reg_total_1f0   (0xfffff)
#define shift_of_mwe_reg_total_1f0  (0)
#define MWE_REG_TOTAL_1F0           (REG_MWE_BASE + offset_of_mwe_reg_total_1f0)
// h0020, bit: 15
/* Histogram report section1
1. as reg_acc_counter22_en=1, (/2^5)
2. as reg_acc_counter22_en=0, (/2^4) */
#define offset_of_mwe_reg_total_1f_00_0 (0x40)
#define mask_of_mwe_reg_total_1f_00_0   (0xffff)
#define shift_of_mwe_reg_total_1f_00_0  (0)
#define MWE_REG_TOTAL_1F_00_0           (REG_MWE_BASE + offset_of_mwe_reg_total_1f_00_0)
#define REG_MWE_20_L                    (MWE_REG_TOTAL_1F_00_0)
// h0021, bit: 3
/* Histogram report section1
1. as reg_acc_counter22_en=1, (/2^5)
2. as reg_acc_counter22_en=0, (/2^4) */
#define offset_of_mwe_reg_total_1f_00_1 (0x42)
#define mask_of_mwe_reg_total_1f_00_1   (0xf)
#define shift_of_mwe_reg_total_1f_00_1  (0)
#define MWE_REG_TOTAL_1F_00_1           (REG_MWE_BASE + offset_of_mwe_reg_total_1f_00_1)
#define REG_MWE_21_L                    (MWE_REG_TOTAL_1F_00_1)
// bigger than 16 bit case allh0022
#define offset_of_mwe_reg_total_3f_20 (0x44)
#define mask_of_mwe_reg_total_3f_20   (0xfffff)
#define shift_of_mwe_reg_total_3f_20  (0)
#define MWE_REG_TOTAL_3F_20           (REG_MWE_BASE + offset_of_mwe_reg_total_3f_20)
// h0022, bit: 15
/* Histogram report section2 (/2^5)*/
#define offset_of_mwe_reg_total_3f_20_0 (0x44)
#define mask_of_mwe_reg_total_3f_20_0   (0xffff)
#define shift_of_mwe_reg_total_3f_20_0  (0)
#define MWE_REG_TOTAL_3F_20_0           (REG_MWE_BASE + offset_of_mwe_reg_total_3f_20_0)
#define REG_MWE_22_L                    (MWE_REG_TOTAL_3F_20_0)
// h0023, bit: 3
/* Histogram report section2 (/2^5)*/
#define offset_of_mwe_reg_total_3f_20_1 (0x46)
#define mask_of_mwe_reg_total_3f_20_1   (0xf)
#define shift_of_mwe_reg_total_3f_20_1  (0)
#define MWE_REG_TOTAL_3F_20_1           (REG_MWE_BASE + offset_of_mwe_reg_total_3f_20_1)
#define REG_MWE_23_L                    (MWE_REG_TOTAL_3F_20_1)
// bigger than 16 bit case allh0024
#define offset_of_mwe_reg_total_5f_40 (0x48)
#define mask_of_mwe_reg_total_5f_40   (0xfffff)
#define shift_of_mwe_reg_total_5f_40  (0)
#define MWE_REG_TOTAL_5F_40           (REG_MWE_BASE + offset_of_mwe_reg_total_5f_40)
// h0024, bit: 15
/* Histogram report section3*/
#define offset_of_mwe_reg_total_5f_40_0 (0x48)
#define mask_of_mwe_reg_total_5f_40_0   (0xffff)
#define shift_of_mwe_reg_total_5f_40_0  (0)
#define MWE_REG_TOTAL_5F_40_0           (REG_MWE_BASE + offset_of_mwe_reg_total_5f_40_0)
#define REG_MWE_24_L                    (MWE_REG_TOTAL_5F_40_0)
// h0025, bit: 3
/* Histogram report section3*/
#define offset_of_mwe_reg_total_5f_40_1 (0x4a)
#define mask_of_mwe_reg_total_5f_40_1   (0xf)
#define shift_of_mwe_reg_total_5f_40_1  (0)
#define MWE_REG_TOTAL_5F_40_1           (REG_MWE_BASE + offset_of_mwe_reg_total_5f_40_1)
#define REG_MWE_25_L                    (MWE_REG_TOTAL_5F_40_1)
// bigger than 16 bit case allh0026
#define offset_of_mwe_reg_total_7f_60 (0x4c)
#define mask_of_mwe_reg_total_7f_60   (0xfffff)
#define shift_of_mwe_reg_total_7f_60  (0)
#define MWE_REG_TOTAL_7F_60           (REG_MWE_BASE + offset_of_mwe_reg_total_7f_60)
// h0026, bit: 15
/* Histogram report section4*/
#define offset_of_mwe_reg_total_7f_60_0 (0x4c)
#define mask_of_mwe_reg_total_7f_60_0   (0xffff)
#define shift_of_mwe_reg_total_7f_60_0  (0)
#define MWE_REG_TOTAL_7F_60_0           (REG_MWE_BASE + offset_of_mwe_reg_total_7f_60_0)
#define REG_MWE_26_L                    (MWE_REG_TOTAL_7F_60_0)
// h0027, bit: 3
/* Histogram report section4*/
#define offset_of_mwe_reg_total_7f_60_1 (0x4e)
#define mask_of_mwe_reg_total_7f_60_1   (0xf)
#define shift_of_mwe_reg_total_7f_60_1  (0)
#define MWE_REG_TOTAL_7F_60_1           (REG_MWE_BASE + offset_of_mwe_reg_total_7f_60_1)
#define REG_MWE_27_L                    (MWE_REG_TOTAL_7F_60_1)
// bigger than 16 bit case allh0028
#define offset_of_mwe_reg_total_9f_80 (0x50)
#define mask_of_mwe_reg_total_9f_80   (0xfffff)
#define shift_of_mwe_reg_total_9f_80  (0)
#define MWE_REG_TOTAL_9F_80           (REG_MWE_BASE + offset_of_mwe_reg_total_9f_80)
// h0028, bit: 15
/* Histogram report section5*/
#define offset_of_mwe_reg_total_9f_80_0 (0x50)
#define mask_of_mwe_reg_total_9f_80_0   (0xffff)
#define shift_of_mwe_reg_total_9f_80_0  (0)
#define MWE_REG_TOTAL_9F_80_0           (REG_MWE_BASE + offset_of_mwe_reg_total_9f_80_0)
#define REG_MWE_28_L                    (MWE_REG_TOTAL_9F_80_0)
// h0029, bit: 3
/* Histogram report section5*/
#define offset_of_mwe_reg_total_9f_80_1 (0x52)
#define mask_of_mwe_reg_total_9f_80_1   (0xf)
#define shift_of_mwe_reg_total_9f_80_1  (0)
#define MWE_REG_TOTAL_9F_80_1           (REG_MWE_BASE + offset_of_mwe_reg_total_9f_80_1)
#define REG_MWE_29_L                    (MWE_REG_TOTAL_9F_80_1)
// bigger than 16 bit case allh002a
#define offset_of_mwe_reg_total_bf_a0 (0x54)
#define mask_of_mwe_reg_total_bf_a0   (0xfffff)
#define shift_of_mwe_reg_total_bf_a0  (0)
#define MWE_REG_TOTAL_BF_A0           (REG_MWE_BASE + offset_of_mwe_reg_total_bf_a0)
// h002a, bit: 15
/* Histogram report section6*/
#define offset_of_mwe_reg_total_bf_a0_0 (0x54)
#define mask_of_mwe_reg_total_bf_a0_0   (0xffff)
#define shift_of_mwe_reg_total_bf_a0_0  (0)
#define MWE_REG_TOTAL_BF_A0_0           (REG_MWE_BASE + offset_of_mwe_reg_total_bf_a0_0)
#define REG_MWE_2A_L                    (MWE_REG_TOTAL_BF_A0_0)
// h002b, bit: 3
/* Histogram report section6*/
#define offset_of_mwe_reg_total_bf_a0_1 (0x56)
#define mask_of_mwe_reg_total_bf_a0_1   (0xf)
#define shift_of_mwe_reg_total_bf_a0_1  (0)
#define MWE_REG_TOTAL_BF_A0_1           (REG_MWE_BASE + offset_of_mwe_reg_total_bf_a0_1)
#define REG_MWE_2B_L                    (MWE_REG_TOTAL_BF_A0_1)
// bigger than 16 bit case allh002c
#define offset_of_mwe_reg_total_df_c0 (0x58)
#define mask_of_mwe_reg_total_df_c0   (0xfffff)
#define shift_of_mwe_reg_total_df_c0  (0)
#define MWE_REG_TOTAL_DF_C0           (REG_MWE_BASE + offset_of_mwe_reg_total_df_c0)
// h002c, bit: 15
/* Histogram report section7*/
#define offset_of_mwe_reg_total_df_c0_0 (0x58)
#define mask_of_mwe_reg_total_df_c0_0   (0xffff)
#define shift_of_mwe_reg_total_df_c0_0  (0)
#define MWE_REG_TOTAL_DF_C0_0           (REG_MWE_BASE + offset_of_mwe_reg_total_df_c0_0)
#define REG_MWE_2C_L                    (MWE_REG_TOTAL_DF_C0_0)
// h002d, bit: 3
/* Histogram report section7*/
#define offset_of_mwe_reg_total_df_c0_1 (0x5a)
#define mask_of_mwe_reg_total_df_c0_1   (0xf)
#define shift_of_mwe_reg_total_df_c0_1  (0)
#define MWE_REG_TOTAL_DF_C0_1           (REG_MWE_BASE + offset_of_mwe_reg_total_df_c0_1)
#define REG_MWE_2D_L                    (MWE_REG_TOTAL_DF_C0_1)
// bigger than 16 bit case allh002e
#define offset_of_mwe_reg_total_ff_e0 (0x5c)
#define mask_of_mwe_reg_total_ff_e0   (0xfffff)
#define shift_of_mwe_reg_total_ff_e0  (0)
#define MWE_REG_TOTAL_FF_E0           (REG_MWE_BASE + offset_of_mwe_reg_total_ff_e0)
// h002e, bit: 15
/* Histogram report section8*/
#define offset_of_mwe_reg_total_ff_e0_0 (0x5c)
#define mask_of_mwe_reg_total_ff_e0_0   (0xffff)
#define shift_of_mwe_reg_total_ff_e0_0  (0)
#define MWE_REG_TOTAL_FF_E0_0           (REG_MWE_BASE + offset_of_mwe_reg_total_ff_e0_0)
#define REG_MWE_2E_L                    (MWE_REG_TOTAL_FF_E0_0)
// h002f, bit: 3
/* Histogram report section8*/
#define offset_of_mwe_reg_total_ff_e0_1 (0x5e)
#define mask_of_mwe_reg_total_ff_e0_1   (0xf)
#define shift_of_mwe_reg_total_ff_e0_1  (0)
#define MWE_REG_TOTAL_FF_E0_1           (REG_MWE_BASE + offset_of_mwe_reg_total_ff_e0_1)
#define REG_MWE_2F_L                    (MWE_REG_TOTAL_FF_E0_1)
// h0030, bit: 0
/* Main window FCC region 1 enable*/
#define offset_of_mwe_reg_main_mwe_fcc_1t_en (0x60)
#define mask_of_mwe_reg_main_mwe_fcc_1t_en   (0x1)
#define shift_of_mwe_reg_main_mwe_fcc_1t_en  (0)
#define MWE_REG_MAIN_MWE_FCC_1T_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_fcc_1t_en)
#define REG_MWE_30_L                         (MWE_REG_MAIN_MWE_FCC_1T_EN)
// h0030, bit: 1
/* Main window FCC region 2 enable*/
#define offset_of_mwe_reg_main_mwe_fcc_2t_en (0x60)
#define mask_of_mwe_reg_main_mwe_fcc_2t_en   (0x2)
#define shift_of_mwe_reg_main_mwe_fcc_2t_en  (1)
#define MWE_REG_MAIN_MWE_FCC_2T_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_fcc_2t_en)
// h0030, bit: 2
/* Main window FCC region 3 enable*/
#define offset_of_mwe_reg_main_mwe_fcc_3t_en (0x60)
#define mask_of_mwe_reg_main_mwe_fcc_3t_en   (0x4)
#define shift_of_mwe_reg_main_mwe_fcc_3t_en  (2)
#define MWE_REG_MAIN_MWE_FCC_3T_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_fcc_3t_en)
// h0030, bit: 3
/* Main window FCC region 4 enable*/
#define offset_of_mwe_reg_main_mwe_fcc_4t_en (0x60)
#define mask_of_mwe_reg_main_mwe_fcc_4t_en   (0x8)
#define shift_of_mwe_reg_main_mwe_fcc_4t_en  (3)
#define MWE_REG_MAIN_MWE_FCC_4T_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_fcc_4t_en)
// h0030, bit: 4
/* Main window FCC region 5 enable*/
#define offset_of_mwe_reg_main_mwe_fcc_5t_en (0x60)
#define mask_of_mwe_reg_main_mwe_fcc_5t_en   (0x10)
#define shift_of_mwe_reg_main_mwe_fcc_5t_en  (4)
#define MWE_REG_MAIN_MWE_FCC_5T_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_fcc_5t_en)
// h0030, bit: 5
/* Main window FCC region 6 enable*/
#define offset_of_mwe_reg_main_mwe_fcc_6t_en (0x60)
#define mask_of_mwe_reg_main_mwe_fcc_6t_en   (0x20)
#define shift_of_mwe_reg_main_mwe_fcc_6t_en  (5)
#define MWE_REG_MAIN_MWE_FCC_6T_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_fcc_6t_en)
// h0030, bit: 6
/* Main window FCC region 7 enable*/
#define offset_of_mwe_reg_main_mwe_fcc_7t_en (0x60)
#define mask_of_mwe_reg_main_mwe_fcc_7t_en   (0x40)
#define shift_of_mwe_reg_main_mwe_fcc_7t_en  (6)
#define MWE_REG_MAIN_MWE_FCC_7T_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_fcc_7t_en)
// h0030, bit: 7
/* Main window FCC region 8 enable*/
#define offset_of_mwe_reg_main_mwe_fcc_8t_en (0x60)
#define mask_of_mwe_reg_main_mwe_fcc_8t_en   (0x80)
#define shift_of_mwe_reg_main_mwe_fcc_8t_en  (7)
#define MWE_REG_MAIN_MWE_FCC_8T_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_fcc_8t_en)
// h0030, bit: 8
/* Main window FCC window 9 enable*/
#define offset_of_mwe_reg_main_mwe_fcc_9t_en (0x60)
#define mask_of_mwe_reg_main_mwe_fcc_9t_en   (0x100)
#define shift_of_mwe_reg_main_mwe_fcc_9t_en  (8)
#define MWE_REG_MAIN_MWE_FCC_9T_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_fcc_9t_en)
// h0031, bit: 0
/* Main window 2D peaking enable*/
#define offset_of_mwe_reg_main_mwe_post_peaking_en (0x62)
#define mask_of_mwe_reg_main_mwe_post_peaking_en   (0x1)
#define shift_of_mwe_reg_main_mwe_post_peaking_en  (0)
#define MWE_REG_MAIN_MWE_POST_PEAKING_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_post_peaking_en)
#define REG_MWE_31_L                               (MWE_REG_MAIN_MWE_POST_PEAKING_EN)
// h0031, bit: 1
/* Main window Gaussian SNR enable*/
#define offset_of_mwe_reg_main_mwe_gauss_nr_en (0x62)
#define mask_of_mwe_reg_main_mwe_gauss_nr_en   (0x2)
#define shift_of_mwe_reg_main_mwe_gauss_nr_en  (1)
#define MWE_REG_MAIN_MWE_GAUSS_NR_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_gauss_nr_en)
// h0031, bit: 2
/* Main window edge enhance enable*/
#define offset_of_mwe_reg_main_mwe_ee_en (0x62)
#define mask_of_mwe_reg_main_mwe_ee_en   (0x4)
#define shift_of_mwe_reg_main_mwe_ee_en  (2)
#define MWE_REG_MAIN_MWE_EE_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_ee_en)
// h0031, bit: 3
/* Main window luma curve enable*/
#define offset_of_mwe_reg_main_mwe_curve_fit_en (0x62)
#define mask_of_mwe_reg_main_mwe_curve_fit_en   (0x8)
#define shift_of_mwe_reg_main_mwe_curve_fit_en  (3)
#define MWE_REG_MAIN_MWE_CURVE_FIT_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_curve_fit_en)
// h0031, bit: 4
/* Main window luma curve enable as PC(RGB) mode enable*/
#define offset_of_mwe_reg_main_mwe_curve_fit_rgb_en (0x62)
#define mask_of_mwe_reg_main_mwe_curve_fit_rgb_en   (0x10)
#define shift_of_mwe_reg_main_mwe_curve_fit_rgb_en  (4)
#define MWE_REG_MAIN_MWE_CURVE_FIT_RGB_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_curve_fit_rgb_en)
// h0031, bit: 5
/* Main window BLE/WLE enable*/
#define offset_of_mwe_reg_main_mwe_bw_en (0x62)
#define mask_of_mwe_reg_main_mwe_bw_en   (0x20)
#define shift_of_mwe_reg_main_mwe_bw_en  (5)
#define MWE_REG_MAIN_MWE_BW_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_bw_en)
// h0031, bit: 6
/* Main window lce  enable*/
#define offset_of_mwe_reg_main_mwe_lce_en (0x62)
#define mask_of_mwe_reg_main_mwe_lce_en   (0x40)
#define shift_of_mwe_reg_main_mwe_lce_en  (6)
#define MWE_REG_MAIN_MWE_LCE_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_lce_en)
// h0031, bit: 7
/* Main window 1D LTI enable*/
#define offset_of_mwe_reg_main_mwe_lti_filter_en (0x62)
#define mask_of_mwe_reg_main_mwe_lti_filter_en   (0x80)
#define shift_of_mwe_reg_main_mwe_lti_filter_en  (7)
#define MWE_REG_MAIN_MWE_LTI_FILTER_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_lti_filter_en)
// h0031, bit: 8
/* Main window ACK enable*/
#define offset_of_mwe_reg_main_mwe_ack_en (0x62)
#define mask_of_mwe_reg_main_mwe_ack_en   (0x100)
#define shift_of_mwe_reg_main_mwe_ack_en  (8)
#define MWE_REG_MAIN_MWE_ACK_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_ack_en)
// h0031, bit: 9
/* Main window Y switch enable*/
#define offset_of_mwe_reg_main_mwe_y_switch_en (0x62)
#define mask_of_mwe_reg_main_mwe_y_switch_en   (0x200)
#define shift_of_mwe_reg_main_mwe_y_switch_en  (9)
#define MWE_REG_MAIN_MWE_Y_SWITCH_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_y_switch_en)
// h0031, bit: 10
/* Main window IBC enable*/
#define offset_of_mwe_reg_main_mwe_ibc_en (0x62)
#define mask_of_mwe_reg_main_mwe_ibc_en   (0x400)
#define shift_of_mwe_reg_main_mwe_ibc_en  (10)
#define MWE_REG_MAIN_MWE_IBC_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_ibc_en)
// h0031, bit: 11
/* Main window ICC enable*/
#define offset_of_mwe_reg_main_mwe_icc_en (0x62)
#define mask_of_mwe_reg_main_mwe_icc_en   (0x800)
#define shift_of_mwe_reg_main_mwe_icc_en  (11)
#define MWE_REG_MAIN_MWE_ICC_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_icc_en)
// h0031, bit: 12
/* Main window IHC enable*/
#define offset_of_mwe_reg_main_mwe_ihc_en (0x62)
#define mask_of_mwe_reg_main_mwe_ihc_en   (0x1000)
#define shift_of_mwe_reg_main_mwe_ihc_en  (12)
#define MWE_REG_MAIN_MWE_IHC_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_ihc_en)
// h0031, bit: 13
/* Main window UV compensate enable*/
#define offset_of_mwe_reg_main_mwe_uvc_en (0x62)
#define mask_of_mwe_reg_main_mwe_uvc_en   (0x2000)
#define shift_of_mwe_reg_main_mwe_uvc_en  (13)
#define MWE_REG_MAIN_MWE_UVC_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_uvc_en)
// h0031, bit: 14
/* Main window CTI enable*/
#define offset_of_mwe_reg_main_mwe_cti_en (0x62)
#define mask_of_mwe_reg_main_mwe_cti_en   (0x4000)
#define shift_of_mwe_reg_main_mwe_cti_en  (14)
#define MWE_REG_MAIN_MWE_CTI_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_cti_en)
// h0031, bit: 15
/* Main window clamp enable*/
#define offset_of_mwe_reg_main_mwe_clamp_en (0x62)
#define mask_of_mwe_reg_main_mwe_clamp_en   (0x8000)
#define shift_of_mwe_reg_main_mwe_clamp_en  (15)
#define MWE_REG_MAIN_MWE_CLAMP_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_clamp_en)
// h0032, bit: 0
/* Main window Y band1 H_coring enable*/
#define offset_of_mwe_reg_main_mwe_y_band1_h_coring_en (0x64)
#define mask_of_mwe_reg_main_mwe_y_band1_h_coring_en   (0x1)
#define shift_of_mwe_reg_main_mwe_y_band1_h_coring_en  (0)
#define MWE_REG_MAIN_MWE_Y_BAND1_H_CORING_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_y_band1_h_coring_en)
#define REG_MWE_32_L                                   (MWE_REG_MAIN_MWE_Y_BAND1_H_CORING_EN)
// h0032, bit: 1
/* Main window Y band2 H_coring enable*/
#define offset_of_mwe_reg_main_mwe_y_band2_h_coring_en (0x64)
#define mask_of_mwe_reg_main_mwe_y_band2_h_coring_en   (0x2)
#define shift_of_mwe_reg_main_mwe_y_band2_h_coring_en  (1)
#define MWE_REG_MAIN_MWE_Y_BAND2_H_CORING_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_y_band2_h_coring_en)
// h0032, bit: 2
/* Main window C band1 H_coring enable*/
#define offset_of_mwe_reg_main_mwe_c_band1_h_coring_en (0x64)
#define mask_of_mwe_reg_main_mwe_c_band1_h_coring_en   (0x4)
#define shift_of_mwe_reg_main_mwe_c_band1_h_coring_en  (2)
#define MWE_REG_MAIN_MWE_C_BAND1_H_CORING_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_c_band1_h_coring_en)
// h0032, bit: 3
/* Main window C band2 H_coring enable*/
#define offset_of_mwe_reg_main_mwe_c_band2_h_coring_en (0x64)
#define mask_of_mwe_reg_main_mwe_c_band2_h_coring_en   (0x8)
#define shift_of_mwe_reg_main_mwe_c_band2_h_coring_en  (3)
#define MWE_REG_MAIN_MWE_C_BAND2_H_CORING_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_c_band2_h_coring_en)
// h0032, bit: 4
/* Main window horizontal Y noise-masking enable*/
#define offset_of_mwe_reg_main_mwe_y_noise_masking_en (0x64)
#define mask_of_mwe_reg_main_mwe_y_noise_masking_en   (0x10)
#define shift_of_mwe_reg_main_mwe_y_noise_masking_en  (4)
#define MWE_REG_MAIN_MWE_Y_NOISE_MASKING_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_y_noise_masking_en)
// h0032, bit: 5
/* Main window horizontal C noise-masking enable*/
#define offset_of_mwe_reg_main_mwe_c_noise_masking_en (0x64)
#define mask_of_mwe_reg_main_mwe_c_noise_masking_en   (0x20)
#define shift_of_mwe_reg_main_mwe_c_noise_masking_en  (5)
#define MWE_REG_MAIN_MWE_C_NOISE_MASKING_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_c_noise_masking_en)
// h0032, bit: 6
/* Main window vertical Y noise-masking enable*/
#define offset_of_mwe_reg_main_mwe_v_noise_masking_en (0x64)
#define mask_of_mwe_reg_main_mwe_v_noise_masking_en   (0x40)
#define shift_of_mwe_reg_main_mwe_v_noise_masking_en  (6)
#define MWE_REG_MAIN_MWE_V_NOISE_MASKING_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_v_noise_masking_en)
// h0033, bit: 2
/* Main window horizontal Y low pass filter coefficient*/
#define offset_of_mwe_reg_main_mwe_y_lpf_coef (0x66)
#define mask_of_mwe_reg_main_mwe_y_lpf_coef   (0x7)
#define shift_of_mwe_reg_main_mwe_y_lpf_coef  (0)
#define MWE_REG_MAIN_MWE_Y_LPF_COEF           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_y_lpf_coef)
#define REG_MWE_33_L                          (MWE_REG_MAIN_MWE_Y_LPF_COEF)
// h0033, bit: 10
/* Main window vertical up-dwon pixel Y LPF coefficient*/
#define offset_of_mwe_reg_main_mwe_v_lpf_coef_1 (0x66)
#define mask_of_mwe_reg_main_mwe_v_lpf_coef_1   (0x700)
#define shift_of_mwe_reg_main_mwe_v_lpf_coef_1  (8)
#define MWE_REG_MAIN_MWE_V_LPF_COEF_1           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_v_lpf_coef_1)
// h0033, bit: 14
/* Main window vertical central pixel Y LPF coefficient*/
#define offset_of_mwe_reg_main_mwe_v_lpf_coef_2 (0x66)
#define mask_of_mwe_reg_main_mwe_v_lpf_coef_2   (0x7000)
#define shift_of_mwe_reg_main_mwe_v_lpf_coef_2  (12)
#define MWE_REG_MAIN_MWE_V_LPF_COEF_2           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_v_lpf_coef_2)
// h0034, bit: 6
/* Main window Y gain MSB
y_gain_new(1.10) = {y_gain,y_gain_lsb}*/
#define offset_of_mwe_reg_main_mwe_y_gain (0x68)
#define mask_of_mwe_reg_main_mwe_y_gain   (0x7f)
#define shift_of_mwe_reg_main_mwe_y_gain  (0)
#define MWE_REG_MAIN_MWE_Y_GAIN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_y_gain)
#define REG_MWE_34_L                      (MWE_REG_MAIN_MWE_Y_GAIN)
// h0034, bit: 11
/* Main window Y gain LSB
y_gain_new(1.10) = {y_gain,y_gain_lsb}*/
#define offset_of_mwe_reg_main_mwe_y_gain_lsb (0x68)
#define mask_of_mwe_reg_main_mwe_y_gain_lsb   (0xf00)
#define shift_of_mwe_reg_main_mwe_y_gain_lsb  (8)
#define MWE_REG_MAIN_MWE_Y_GAIN_LSB           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_y_gain_lsb)
// h0035, bit: 6
/* Main window pre Y gain MSB
pre_y_gain_new(1.10) = {pre_y_gain,pre_y_gain_lsb}*/
#define offset_of_mwe_reg_main_mwe_pre_y_gain (0x6a)
#define mask_of_mwe_reg_main_mwe_pre_y_gain   (0x7f)
#define shift_of_mwe_reg_main_mwe_pre_y_gain  (0)
#define MWE_REG_MAIN_MWE_PRE_Y_GAIN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_pre_y_gain)
#define REG_MWE_35_L                          (MWE_REG_MAIN_MWE_PRE_Y_GAIN)
// h0035, bit: 11
/* Main window pre Y gain LSB
pre_y_gain_new(1.10) = {pre_y_gain,pre_y_gain_lsb}*/
#define offset_of_mwe_reg_main_mwe_pre_y_gain_lsb (0x6a)
#define mask_of_mwe_reg_main_mwe_pre_y_gain_lsb   (0xf00)
#define shift_of_mwe_reg_main_mwe_pre_y_gain_lsb  (8)
#define MWE_REG_MAIN_MWE_PRE_Y_GAIN_LSB           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_pre_y_gain_lsb)
// h0036, bit: 7
/* Main window Y adjust (2's complement)*/
#define offset_of_mwe_reg_main_mwe_bri_adjust (0x6c)
#define mask_of_mwe_reg_main_mwe_bri_adjust   (0xff)
#define shift_of_mwe_reg_main_mwe_bri_adjust  (0)
#define MWE_REG_MAIN_MWE_BRI_ADJUST           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_bri_adjust)
#define REG_MWE_36_L                          (MWE_REG_MAIN_MWE_BRI_ADJUST)
// h0036, bit: 9
/* Main window Y adjust low bit*/
#define offset_of_mwe_reg_main_mwe_bri_adjust_lsb (0x6c)
#define mask_of_mwe_reg_main_mwe_bri_adjust_lsb   (0x300)
#define shift_of_mwe_reg_main_mwe_bri_adjust_lsb  (8)
#define MWE_REG_MAIN_MWE_BRI_ADJUST_LSB           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_bri_adjust_lsb)
// h0037, bit: 7
/* Main window post Y adjust*/
#define offset_of_mwe_reg_main_mwe_post_bri_adjust (0x6e)
#define mask_of_mwe_reg_main_mwe_post_bri_adjust   (0xff)
#define shift_of_mwe_reg_main_mwe_post_bri_adjust  (0)
#define MWE_REG_MAIN_MWE_POST_BRI_ADJUST           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_post_bri_adjust)
#define REG_MWE_37_L                               (MWE_REG_MAIN_MWE_POST_BRI_ADJUST)
// h0037, bit: 9
/* Main window post Y adjust low bit (2's complement)*/
#define offset_of_mwe_reg_main_mwe_post_bri_adjust_lsb (0x6e)
#define mask_of_mwe_reg_main_mwe_post_bri_adjust_lsb   (0x300)
#define shift_of_mwe_reg_main_mwe_post_bri_adjust_lsb  (8)
#define MWE_REG_MAIN_MWE_POST_BRI_ADJUST_LSB           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_post_bri_adjust_lsb)
// h0038, bit: 7
/* main window second post Y adjust*/
#define offset_of_mwe_reg_main_mwe_second_post_bri_adjust (0x70)
#define mask_of_mwe_reg_main_mwe_second_post_bri_adjust   (0xff)
#define shift_of_mwe_reg_main_mwe_second_post_bri_adjust  (0)
#define MWE_REG_MAIN_MWE_SECOND_POST_BRI_ADJUST           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_second_post_bri_adjust)
#define REG_MWE_38_L                                      (MWE_REG_MAIN_MWE_SECOND_POST_BRI_ADJUST)
// h0038, bit: 9
/* Main window second post Y adjust low bit (2's complement)*/
#define offset_of_mwe_reg_main_mwe_second_post_bri_adjust_lsb (0x70)
#define mask_of_mwe_reg_main_mwe_second_post_bri_adjust_lsb   (0x300)
#define shift_of_mwe_reg_main_mwe_second_post_bri_adjust_lsb  (8)
#define MWE_REG_MAIN_MWE_SECOND_POST_BRI_ADJUST_LSB \
    (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_second_post_bri_adjust_lsb)
// h0039, bit: 7
/* Main window C gain*/
#define offset_of_mwe_reg_main_mwe_c_gain (0x72)
#define mask_of_mwe_reg_main_mwe_c_gain   (0xff)
#define shift_of_mwe_reg_main_mwe_c_gain  (0)
#define MWE_REG_MAIN_MWE_C_GAIN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_c_gain)
#define REG_MWE_39_L                      (MWE_REG_MAIN_MWE_C_GAIN)
// h0039, bit: 8
/* Main window fresh white enable*/
#define offset_of_mwe_reg_main_mwe_fwc_en (0x72)
#define mask_of_mwe_reg_main_mwe_fwc_en   (0x100)
#define shift_of_mwe_reg_main_mwe_fwc_en  (8)
#define MWE_REG_MAIN_MWE_FWC_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_fwc_en)
// h0039, bit: 9
/* Main window NLM enable*/
#define offset_of_mwe_reg_main_mwe_nlm_en (0x72)
#define mask_of_mwe_reg_main_mwe_nlm_en   (0x200)
#define shift_of_mwe_reg_main_mwe_nlm_en  (9)
#define MWE_REG_MAIN_MWE_NLM_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_nlm_en)
// h0039, bit: 10
/* Main window 2D LTI enable*/
#define offset_of_mwe_reg_main_mwe_lti_en (0x72)
#define mask_of_mwe_reg_main_mwe_lti_en   (0x400)
#define shift_of_mwe_reg_main_mwe_lti_en  (10)
#define MWE_REG_MAIN_MWE_LTI_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_lti_en)
// h0039, bit: 11
/* Main window post3x3 filter enable*/
#define offset_of_mwe_reg_main_mwe_post3x3pk_en (0x72)
#define mask_of_mwe_reg_main_mwe_post3x3pk_en   (0x800)
#define shift_of_mwe_reg_main_mwe_post3x3pk_en  (11)
#define MWE_REG_MAIN_MWE_POST3X3PK_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_mwe_post3x3pk_en)
#define REG_MWE_3A_L                            (REG_MWE_BASE + 0x74)
#define REG_MWE_3B_L                            (REG_MWE_BASE + 0x76)
#define REG_MWE_3C_L                            (REG_MWE_BASE + 0x78)
#define REG_MWE_3D_L                            (REG_MWE_BASE + 0x7a)
#define REG_MWE_3E_L                            (REG_MWE_BASE + 0x7c)
#define REG_MWE_3F_L                            (REG_MWE_BASE + 0x7e)
// h0040, bit: 0
/* Main window FCC adaptive window0 enable*/
#define offset_of_mwe_reg_main_fcc_adp_y_win0_en (0x80)
#define mask_of_mwe_reg_main_fcc_adp_y_win0_en   (0x1)
#define shift_of_mwe_reg_main_fcc_adp_y_win0_en  (0)
#define MWE_REG_MAIN_FCC_ADP_Y_WIN0_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_fcc_adp_y_win0_en)
#define REG_MWE_40_L                             (MWE_REG_MAIN_FCC_ADP_Y_WIN0_EN)
// h0040, bit: 1
/* Main window FCC adaptive window1 enable*/
#define offset_of_mwe_reg_main_fcc_adp_y_win1_en (0x80)
#define mask_of_mwe_reg_main_fcc_adp_y_win1_en   (0x2)
#define shift_of_mwe_reg_main_fcc_adp_y_win1_en  (1)
#define MWE_REG_MAIN_FCC_ADP_Y_WIN1_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_fcc_adp_y_win1_en)
// h0040, bit: 2
/* Main window FCC adaptive window2 enable*/
#define offset_of_mwe_reg_main_fcc_adp_y_win2_en (0x80)
#define mask_of_mwe_reg_main_fcc_adp_y_win2_en   (0x4)
#define shift_of_mwe_reg_main_fcc_adp_y_win2_en  (2)
#define MWE_REG_MAIN_FCC_ADP_Y_WIN2_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_fcc_adp_y_win2_en)
// h0040, bit: 3
/* Main window FCC adaptive window3 enable*/
#define offset_of_mwe_reg_main_fcc_adp_y_win3_en (0x80)
#define mask_of_mwe_reg_main_fcc_adp_y_win3_en   (0x8)
#define shift_of_mwe_reg_main_fcc_adp_y_win3_en  (3)
#define MWE_REG_MAIN_FCC_ADP_Y_WIN3_EN           (REG_MWE_BASE + offset_of_mwe_reg_main_fcc_adp_y_win3_en)
// h0041, bit: 3
/* Main window FCC adaptive window0 nmuber*/
#define offset_of_mwe_reg_main_fcc_adp_y_win0_num (0x82)
#define mask_of_mwe_reg_main_fcc_adp_y_win0_num   (0xf)
#define shift_of_mwe_reg_main_fcc_adp_y_win0_num  (0)
#define MWE_REG_MAIN_FCC_ADP_Y_WIN0_NUM           (REG_MWE_BASE + offset_of_mwe_reg_main_fcc_adp_y_win0_num)
#define REG_MWE_41_L                              (MWE_REG_MAIN_FCC_ADP_Y_WIN0_NUM)
// h0041, bit: 7
/* Main window FCC adaptive window1 nmuber*/
#define offset_of_mwe_reg_main_fcc_adp_y_win1_num (0x82)
#define mask_of_mwe_reg_main_fcc_adp_y_win1_num   (0xf0)
#define shift_of_mwe_reg_main_fcc_adp_y_win1_num  (4)
#define MWE_REG_MAIN_FCC_ADP_Y_WIN1_NUM           (REG_MWE_BASE + offset_of_mwe_reg_main_fcc_adp_y_win1_num)
// h0041, bit: 11
/* Main window FCC adaptive window2 nmuber*/
#define offset_of_mwe_reg_main_fcc_adp_y_win2_num (0x82)
#define mask_of_mwe_reg_main_fcc_adp_y_win2_num   (0xf00)
#define shift_of_mwe_reg_main_fcc_adp_y_win2_num  (8)
#define MWE_REG_MAIN_FCC_ADP_Y_WIN2_NUM           (REG_MWE_BASE + offset_of_mwe_reg_main_fcc_adp_y_win2_num)
// h0041, bit: 15
/* Main window FCC adaptive window3 nmuber*/
#define offset_of_mwe_reg_main_fcc_adp_y_win3_num (0x82)
#define mask_of_mwe_reg_main_fcc_adp_y_win3_num   (0xf000)
#define shift_of_mwe_reg_main_fcc_adp_y_win3_num  (12)
#define MWE_REG_MAIN_FCC_ADP_Y_WIN3_NUM           (REG_MWE_BASE + offset_of_mwe_reg_main_fcc_adp_y_win3_num)
#define REG_MWE_42_L                              (REG_MWE_BASE + 0x84)
#define REG_MWE_43_L                              (REG_MWE_BASE + 0x86)
// h0044, bit: 3
/* FCC adaptive y debug mode*/
#define offset_of_mwe_reg_fcc_adp_y_debug (0x88)
#define mask_of_mwe_reg_fcc_adp_y_debug   (0xf)
#define shift_of_mwe_reg_fcc_adp_y_debug  (0)
#define MWE_REG_FCC_ADP_Y_DEBUG           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_debug)
#define REG_MWE_44_L                      (MWE_REG_FCC_ADP_Y_DEBUG)
// h0045, bit: 5
/* FCC look up table window0_16 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_16 (0x8a)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_16   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_16  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_16           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_16)
#define REG_MWE_45_L                            (MWE_REG_FCC_ADP_Y_LUT_WIN0_16)
// h0045, bit: 13
/* FCC look up table window1_16 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_16 (0x8a)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_16   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_16  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_16           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_16)
// h0046, bit: 5
/* FCC look up table window3_16 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_16 (0x8c)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_16   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_16  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_16           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_16)
#define REG_MWE_46_L                            (MWE_REG_FCC_ADP_Y_LUT_WIN2_16)
// h0046, bit: 13
/* FCC look up table window3_16 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_16 (0x8c)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_16   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_16  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_16           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_16)
#define REG_MWE_47_L                            (REG_MWE_BASE + 0x8e)
// h0048, bit: 5
/* FCC look up table window0_0 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_0 (0x90)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_0   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_0  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_0           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_0)
#define REG_MWE_48_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN0_0)
// h0048, bit: 13
/* FCC look up table window0_1 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_1 (0x90)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_1   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_1  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_1           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_1)
// h0049, bit: 5
/* FCC look up table window0_2 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_2 (0x92)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_2   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_2  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_2           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_2)
#define REG_MWE_49_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN0_2)
// h0049, bit: 13
/* FCC look up table window0_3 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_3 (0x92)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_3   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_3  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_3           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_3)
// h004a, bit: 5
/* FCC look up table window0_4 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_4 (0x94)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_4   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_4  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_4           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_4)
#define REG_MWE_4A_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN0_4)
// h004a, bit: 13
/* FCC look up table window0_5 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_5 (0x94)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_5   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_5  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_5           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_5)
// h004b, bit: 5
/* FCC look up table window0_6 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_6 (0x96)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_6   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_6  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_6           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_6)
#define REG_MWE_4B_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN0_6)
// h004b, bit: 13
/* FCC look up table window0_7 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_7 (0x96)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_7   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_7  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_7           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_7)
// h004c, bit: 5
/* FCC look up table window0_8 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_8 (0x98)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_8   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_8  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_8           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_8)
#define REG_MWE_4C_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN0_8)
// h004c, bit: 13
/* FCC look up table window0_9 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_9 (0x98)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_9   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_9  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_9           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_9)
// h004d, bit: 5
/* FCC look up table window0_10 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_10 (0x9a)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_10   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_10  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_10           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_10)
#define REG_MWE_4D_L                            (MWE_REG_FCC_ADP_Y_LUT_WIN0_10)
// h004d, bit: 13
/* FCC look up table window0_11 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_11 (0x9a)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_11   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_11  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_11           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_11)
// h004e, bit: 5
/* FCC look up table window0_12 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_12 (0x9c)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_12   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_12  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_12           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_12)
#define REG_MWE_4E_L                            (MWE_REG_FCC_ADP_Y_LUT_WIN0_12)
// h004e, bit: 13
/* FCC look up table window0_13 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_13 (0x9c)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_13   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_13  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_13           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_13)
// h004f, bit: 5
/* FCC look up table window0_14 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_14 (0x9e)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_14   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_14  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_14           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_14)
#define REG_MWE_4F_L                            (MWE_REG_FCC_ADP_Y_LUT_WIN0_14)
// h004f, bit: 13
/* FCC look up table window0_15 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win0_15 (0x9e)
#define mask_of_mwe_reg_fcc_adp_y_lut_win0_15   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win0_15  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN0_15           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win0_15)
// h0050, bit: 5
/* FCC look up table window1_0 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_0 (0xa0)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_0   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_0  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_0           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_0)
#define REG_MWE_50_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN1_0)
// h0050, bit: 13
/* FCC look up table window1_1 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_1 (0xa0)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_1   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_1  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_1           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_1)
// h0051, bit: 5
/* FCC look up table window1_2 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_2 (0xa2)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_2   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_2  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_2           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_2)
#define REG_MWE_51_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN1_2)
// h0051, bit: 13
/* FCC look up table window1_3 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_3 (0xa2)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_3   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_3  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_3           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_3)
// h0052, bit: 5
/* FCC look up table window1_4 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_4 (0xa4)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_4   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_4  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_4           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_4)
#define REG_MWE_52_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN1_4)
// h0052, bit: 13
/* FCC look up table window1_5 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_5 (0xa4)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_5   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_5  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_5           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_5)
// h0053, bit: 5
/* FCC look up table window1_6 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_6 (0xa6)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_6   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_6  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_6           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_6)
#define REG_MWE_53_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN1_6)
// h0053, bit: 13
/* FCC look up table window1_7 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_7 (0xa6)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_7   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_7  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_7           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_7)
// h0054, bit: 5
/* FCC look up table window1_8 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_8 (0xa8)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_8   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_8  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_8           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_8)
#define REG_MWE_54_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN1_8)
// h0054, bit: 13
/* FCC look up table window1_9 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_9 (0xa8)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_9   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_9  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_9           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_9)
// h0055, bit: 5
/* FCC look up table window1_10 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_10 (0xaa)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_10   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_10  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_10           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_10)
#define REG_MWE_55_L                            (MWE_REG_FCC_ADP_Y_LUT_WIN1_10)
// h0055, bit: 13
/* FCC look up table window1_11 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_11 (0xaa)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_11   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_11  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_11           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_11)
// h0056, bit: 5
/* FCC look up table window1_12 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_12 (0xac)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_12   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_12  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_12           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_12)
#define REG_MWE_56_L                            (MWE_REG_FCC_ADP_Y_LUT_WIN1_12)
// h0056, bit: 13
/* FCC look up table window1_13 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_13 (0xac)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_13   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_13  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_13           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_13)
// h0057, bit: 5
/* FCC look up table window1_14 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_14 (0xae)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_14   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_14  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_14           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_14)
#define REG_MWE_57_L                            (MWE_REG_FCC_ADP_Y_LUT_WIN1_14)
// h0057, bit: 13
/* FCC look up table window1_15 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win1_15 (0xae)
#define mask_of_mwe_reg_fcc_adp_y_lut_win1_15   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win1_15  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN1_15           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win1_15)
// h0058, bit: 5
/* FCC look up table window2_0 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_0 (0xb0)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_0   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_0  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_0           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_0)
#define REG_MWE_58_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN2_0)
// h0058, bit: 13
/* FCC look up table window2_1 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_1 (0xb0)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_1   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_1  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_1           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_1)
// h0059, bit: 5
/* FCC look up table window2_2 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_2 (0xb2)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_2   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_2  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_2           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_2)
#define REG_MWE_59_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN2_2)
// h0059, bit: 13
/* FCC look up table window2_3 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_3 (0xb2)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_3   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_3  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_3           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_3)
// h005a, bit: 5
/* FCC look up table window2_4 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_4 (0xb4)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_4   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_4  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_4           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_4)
#define REG_MWE_5A_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN2_4)
// h005a, bit: 13
/* FCC look up table window2_5 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_5 (0xb4)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_5   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_5  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_5           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_5)
// h005b, bit: 5
/* FCC look up table window2_6 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_6 (0xb6)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_6   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_6  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_6           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_6)
#define REG_MWE_5B_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN2_6)
// h005b, bit: 13
/* FCC look up table window2_7 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_7 (0xb6)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_7   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_7  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_7           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_7)
// h005c, bit: 5
/* FCC look up table window2_8 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_8 (0xb8)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_8   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_8  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_8           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_8)
#define REG_MWE_5C_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN2_8)
// h005c, bit: 13
/* FCC look up table window2_9 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_9 (0xb8)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_9   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_9  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_9           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_9)
// h005d, bit: 5
/* FCC look up table window2_10 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_10 (0xba)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_10   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_10  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_10           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_10)
#define REG_MWE_5D_L                            (MWE_REG_FCC_ADP_Y_LUT_WIN2_10)
// h005d, bit: 13
/* FCC look up table window2_11 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_11 (0xba)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_11   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_11  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_11           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_11)
// h005e, bit: 5
/* FCC look up table window2_12 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_12 (0xbc)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_12   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_12  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_12           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_12)
#define REG_MWE_5E_L                            (MWE_REG_FCC_ADP_Y_LUT_WIN2_12)
// h005e, bit: 13
/* FCC look up table window2_13 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_13 (0xbc)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_13   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_13  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_13           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_13)
// h005f, bit: 5
/* FCC look up table window2_14 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_14 (0xbe)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_14   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_14  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_14           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_14)
#define REG_MWE_5F_L                            (MWE_REG_FCC_ADP_Y_LUT_WIN2_14)
// h005f, bit: 13
/* FCC look up table window2_15 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win2_15 (0xbe)
#define mask_of_mwe_reg_fcc_adp_y_lut_win2_15   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win2_15  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN2_15           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win2_15)
// h0060, bit: 5
/* FCC look up table window3_0 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_0 (0xc0)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_0   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_0  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_0           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_0)
#define REG_MWE_60_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN3_0)
// h0060, bit: 13
/* FCC look up table window3_1 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_1 (0xc0)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_1   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_1  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_1           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_1)
// h0061, bit: 5
/* FCC look up table window3_2 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_2 (0xc2)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_2   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_2  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_2           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_2)
#define REG_MWE_61_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN3_2)
// h0061, bit: 13
/* FCC look up table window3_3 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_3 (0xc2)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_3   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_3  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_3           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_3)
// h0062, bit: 5
/* FCC look up table window3_4 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_4 (0xc4)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_4   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_4  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_4           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_4)
#define REG_MWE_62_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN3_4)
// h0062, bit: 13
/* FCC look up table window3_5 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_5 (0xc4)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_5   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_5  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_5           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_5)
// h0063, bit: 5
/* FCC look up table window3_6 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_6 (0xc6)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_6   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_6  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_6           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_6)
#define REG_MWE_63_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN3_6)
// h0063, bit: 13
/* FCC look up table window3_7 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_7 (0xc6)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_7   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_7  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_7           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_7)
// h0064, bit: 5
/* FCC look up table window3_8 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_8 (0xc8)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_8   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_8  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_8           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_8)
#define REG_MWE_64_L                           (MWE_REG_FCC_ADP_Y_LUT_WIN3_8)
// h0064, bit: 13
/* FCC look up table window3_9 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_9 (0xc8)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_9   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_9  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_9           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_9)
// h0065, bit: 5
/* FCC look up table window3_10 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_10 (0xca)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_10   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_10  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_10           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_10)
#define REG_MWE_65_L                            (MWE_REG_FCC_ADP_Y_LUT_WIN3_10)
// h0065, bit: 13
/* FCC look up table window3_11 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_11 (0xca)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_11   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_11  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_11           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_11)
// h0066, bit: 5
/* FCC look up table window3_12 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_12 (0xcc)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_12   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_12  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_12           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_12)
#define REG_MWE_66_L                            (MWE_REG_FCC_ADP_Y_LUT_WIN3_12)
// h0066, bit: 13
/* FCC look up table window3_13 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_13 (0xcc)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_13   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_13  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_13           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_13)
// h0067, bit: 5
/* FCC look up table window3_14 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_14 (0xce)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_14   (0x3f)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_14  (0)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_14           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_14)
#define REG_MWE_67_L                            (MWE_REG_FCC_ADP_Y_LUT_WIN3_14)
// h0067, bit: 13
/* FCC look up table window3_15 (x.xxxxx)*/
#define offset_of_mwe_reg_fcc_adp_y_lut_win3_15 (0xce)
#define mask_of_mwe_reg_fcc_adp_y_lut_win3_15   (0x3f00)
#define shift_of_mwe_reg_fcc_adp_y_lut_win3_15  (8)
#define MWE_REG_FCC_ADP_Y_LUT_WIN3_15           (REG_MWE_BASE + offset_of_mwe_reg_fcc_adp_y_lut_win3_15)
#define REG_MWE_68_L                            (REG_MWE_BASE + 0xd0)
#define REG_MWE_69_L                            (REG_MWE_BASE + 0xd2)
#define REG_MWE_6A_L                            (REG_MWE_BASE + 0xd4)
#define REG_MWE_6B_L                            (REG_MWE_BASE + 0xd6)
#define REG_MWE_6C_L                            (REG_MWE_BASE + 0xd8)
#define REG_MWE_6D_L                            (REG_MWE_BASE + 0xda)
#define REG_MWE_6E_L                            (REG_MWE_BASE + 0xdc)
#define REG_MWE_6F_L                            (REG_MWE_BASE + 0xde)
// bigger than 16 bit case allh0070
#define offset_of_mwe_reg_sat_total_8 (0xe0)
#define mask_of_mwe_reg_sat_total_8   (0xfffff)
#define shift_of_mwe_reg_sat_total_8  (0)
#define MWE_REG_SAT_TOTAL_8           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8)
// h0070, bit: 15
/* Histogram report section_8_1 for saturation*/
#define offset_of_mwe_reg_sat_total_8_0_0 (0xe0)
#define mask_of_mwe_reg_sat_total_8_0_0   (0xffff)
#define shift_of_mwe_reg_sat_total_8_0_0  (0)
#define MWE_REG_SAT_TOTAL_8_0_0           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_0_0)
#define REG_MWE_70_L                      (MWE_REG_SAT_TOTAL_8_0_0)
// h0071, bit: 3
/* Histogram report section_8_1 for saturation*/
#define offset_of_mwe_reg_sat_total_8_0_1 (0xe2)
#define mask_of_mwe_reg_sat_total_8_0_1   (0xf)
#define shift_of_mwe_reg_sat_total_8_0_1  (0)
#define MWE_REG_SAT_TOTAL_8_0_1           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_0_1)
#define REG_MWE_71_L                      (MWE_REG_SAT_TOTAL_8_0_1)
// bigger than 16 bit case allh0072
#define offset_of_mwe_reg_sat_total_8_1 (0xe4)
#define mask_of_mwe_reg_sat_total_8_1   (0xfffff)
#define shift_of_mwe_reg_sat_total_8_1  (0)
#define MWE_REG_SAT_TOTAL_8_1           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_1)
// h0072, bit: 15
/* Histogram report section_8_2 for saturation*/
#define offset_of_mwe_reg_sat_total_8_1_0 (0xe4)
#define mask_of_mwe_reg_sat_total_8_1_0   (0xffff)
#define shift_of_mwe_reg_sat_total_8_1_0  (0)
#define MWE_REG_SAT_TOTAL_8_1_0           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_1_0)
#define REG_MWE_72_L                      (MWE_REG_SAT_TOTAL_8_1_0)
// h0073, bit: 3
/* Histogram report section_8_2 for saturation*/
#define offset_of_mwe_reg_sat_total_8_1_1 (0xe6)
#define mask_of_mwe_reg_sat_total_8_1_1   (0xf)
#define shift_of_mwe_reg_sat_total_8_1_1  (0)
#define MWE_REG_SAT_TOTAL_8_1_1           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_1_1)
#define REG_MWE_73_L                      (MWE_REG_SAT_TOTAL_8_1_1)
// bigger than 16 bit case allh0074
#define offset_of_mwe_reg_sat_total_8_2 (0xe8)
#define mask_of_mwe_reg_sat_total_8_2   (0xfffff)
#define shift_of_mwe_reg_sat_total_8_2  (0)
#define MWE_REG_SAT_TOTAL_8_2           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_2)
// h0074, bit: 15
/* Histogram report section_8_3 for saturation*/
#define offset_of_mwe_reg_sat_total_8_2_0 (0xe8)
#define mask_of_mwe_reg_sat_total_8_2_0   (0xffff)
#define shift_of_mwe_reg_sat_total_8_2_0  (0)
#define MWE_REG_SAT_TOTAL_8_2_0           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_2_0)
#define REG_MWE_74_L                      (MWE_REG_SAT_TOTAL_8_2_0)
// h0075, bit: 3
/* Histogram report section_8_3 for saturation*/
#define offset_of_mwe_reg_sat_total_8_2_1 (0xea)
#define mask_of_mwe_reg_sat_total_8_2_1   (0xf)
#define shift_of_mwe_reg_sat_total_8_2_1  (0)
#define MWE_REG_SAT_TOTAL_8_2_1           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_2_1)
#define REG_MWE_75_L                      (MWE_REG_SAT_TOTAL_8_2_1)
// bigger than 16 bit case allh0076
#define offset_of_mwe_reg_sat_total_8_3 (0xec)
#define mask_of_mwe_reg_sat_total_8_3   (0xfffff)
#define shift_of_mwe_reg_sat_total_8_3  (0)
#define MWE_REG_SAT_TOTAL_8_3           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_3)
// h0076, bit: 15
/* Histogram report section_8_4 for saturation*/
#define offset_of_mwe_reg_sat_total_8_3_0 (0xec)
#define mask_of_mwe_reg_sat_total_8_3_0   (0xffff)
#define shift_of_mwe_reg_sat_total_8_3_0  (0)
#define MWE_REG_SAT_TOTAL_8_3_0           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_3_0)
#define REG_MWE_76_L                      (MWE_REG_SAT_TOTAL_8_3_0)
// h0077, bit: 3
/* Histogram report section_8_4 for saturation*/
#define offset_of_mwe_reg_sat_total_8_3_1 (0xee)
#define mask_of_mwe_reg_sat_total_8_3_1   (0xf)
#define shift_of_mwe_reg_sat_total_8_3_1  (0)
#define MWE_REG_SAT_TOTAL_8_3_1           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_3_1)
#define REG_MWE_77_L                      (MWE_REG_SAT_TOTAL_8_3_1)
// bigger than 16 bit case allh0078
#define offset_of_mwe_reg_sat_total_8_4 (0xf0)
#define mask_of_mwe_reg_sat_total_8_4   (0xfffff)
#define shift_of_mwe_reg_sat_total_8_4  (0)
#define MWE_REG_SAT_TOTAL_8_4           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_4)
// h0078, bit: 15
/* Histogram report section_8_5 for saturation*/
#define offset_of_mwe_reg_sat_total_8_4_0 (0xf0)
#define mask_of_mwe_reg_sat_total_8_4_0   (0xffff)
#define shift_of_mwe_reg_sat_total_8_4_0  (0)
#define MWE_REG_SAT_TOTAL_8_4_0           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_4_0)
#define REG_MWE_78_L                      (MWE_REG_SAT_TOTAL_8_4_0)
// h0079, bit: 3
/* Histogram report section_8_5 for saturation*/
#define offset_of_mwe_reg_sat_total_8_4_1 (0xf2)
#define mask_of_mwe_reg_sat_total_8_4_1   (0xf)
#define shift_of_mwe_reg_sat_total_8_4_1  (0)
#define MWE_REG_SAT_TOTAL_8_4_1           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_4_1)
#define REG_MWE_79_L                      (MWE_REG_SAT_TOTAL_8_4_1)
// bigger than 16 bit case allh007a
#define offset_of_mwe_reg_sat_total_8_5 (0xf4)
#define mask_of_mwe_reg_sat_total_8_5   (0xfffff)
#define shift_of_mwe_reg_sat_total_8_5  (0)
#define MWE_REG_SAT_TOTAL_8_5           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_5)
// h007a, bit: 15
/* Histogram report section_8_6 for saturation*/
#define offset_of_mwe_reg_sat_total_8_5_0 (0xf4)
#define mask_of_mwe_reg_sat_total_8_5_0   (0xffff)
#define shift_of_mwe_reg_sat_total_8_5_0  (0)
#define MWE_REG_SAT_TOTAL_8_5_0           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_5_0)
#define REG_MWE_7A_L                      (MWE_REG_SAT_TOTAL_8_5_0)
// h007b, bit: 3
/* Histogram report section_8_6 for saturation*/
#define offset_of_mwe_reg_sat_total_8_5_1 (0xf6)
#define mask_of_mwe_reg_sat_total_8_5_1   (0xf)
#define shift_of_mwe_reg_sat_total_8_5_1  (0)
#define MWE_REG_SAT_TOTAL_8_5_1           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_5_1)
#define REG_MWE_7B_L                      (MWE_REG_SAT_TOTAL_8_5_1)
// bigger than 16 bit case allh007c
#define offset_of_mwe_reg_sat_total_8_6 (0xf8)
#define mask_of_mwe_reg_sat_total_8_6   (0xfffff)
#define shift_of_mwe_reg_sat_total_8_6  (0)
#define MWE_REG_SAT_TOTAL_8_6           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_6)
// h007c, bit: 15
/* Histogram report section_8_7 for saturation*/
#define offset_of_mwe_reg_sat_total_8_6_0 (0xf8)
#define mask_of_mwe_reg_sat_total_8_6_0   (0xffff)
#define shift_of_mwe_reg_sat_total_8_6_0  (0)
#define MWE_REG_SAT_TOTAL_8_6_0           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_6_0)
#define REG_MWE_7C_L                      (MWE_REG_SAT_TOTAL_8_6_0)
// h007d, bit: 3
/* Histogram report section_8_7 for saturation*/
#define offset_of_mwe_reg_sat_total_8_6_1 (0xfa)
#define mask_of_mwe_reg_sat_total_8_6_1   (0xf)
#define shift_of_mwe_reg_sat_total_8_6_1  (0)
#define MWE_REG_SAT_TOTAL_8_6_1           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_6_1)
#define REG_MWE_7D_L                      (MWE_REG_SAT_TOTAL_8_6_1)
// bigger than 16 bit case allh007e
#define offset_of_mwe_reg_sat_total_8_7 (0xfc)
#define mask_of_mwe_reg_sat_total_8_7   (0xfffff)
#define shift_of_mwe_reg_sat_total_8_7  (0)
#define MWE_REG_SAT_TOTAL_8_7           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_7)
// h007e, bit: 15
/* Histogram report section_8_8 for saturation*/
#define offset_of_mwe_reg_sat_total_8_7_0 (0xfc)
#define mask_of_mwe_reg_sat_total_8_7_0   (0xffff)
#define shift_of_mwe_reg_sat_total_8_7_0  (0)
#define MWE_REG_SAT_TOTAL_8_7_0           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_7_0)
#define REG_MWE_7E_L                      (MWE_REG_SAT_TOTAL_8_7_0)
// h007f, bit: 3
/* Histogram report section_8_8 for saturation*/
#define offset_of_mwe_reg_sat_total_8_7_1 (0xfe)
#define mask_of_mwe_reg_sat_total_8_7_1   (0xf)
#define shift_of_mwe_reg_sat_total_8_7_1  (0)
#define MWE_REG_SAT_TOTAL_8_7_1           (REG_MWE_BASE + offset_of_mwe_reg_sat_total_8_7_1)
#define REG_MWE_7F_L                      (MWE_REG_SAT_TOTAL_8_7_1)
#define REG_VPS_00_L                      (REG_VPS_BASE + 0x0)
#define REG_VPS_01_L                      (REG_VPS_BASE + 0x2)
#define REG_VPS_02_L                      (REG_VPS_BASE + 0x4)
#define REG_VPS_03_L                      (REG_VPS_BASE + 0x6)
#define REG_VPS_04_L                      (REG_VPS_BASE + 0x8)
#define REG_VPS_05_L                      (REG_VPS_BASE + 0xa)
#define REG_VPS_06_L                      (REG_VPS_BASE + 0xc)
#define REG_VPS_07_L                      (REG_VPS_BASE + 0xe)
#define REG_VPS_08_L                      (REG_VPS_BASE + 0x10)
#define REG_VPS_09_L                      (REG_VPS_BASE + 0x12)
#define REG_VPS_0A_L                      (REG_VPS_BASE + 0x14)
// h000b, bit: 0
/* peaking ac add in yee ,not in vip*/
#define offset_of_vps_reg_peaking_ac_yee_mode (0x16)
#define mask_of_vps_reg_peaking_ac_yee_mode   (0x1)
#define shift_of_vps_reg_peaking_ac_yee_mode  (0)
#define VPS_REG_PEAKING_AC_YEE_MODE           (REG_VPS_BASE + offset_of_vps_reg_peaking_ac_yee_mode)
#define REG_VPS_0B_L                          (VPS_REG_PEAKING_AC_YEE_MODE)
// h000b, bit: 14
/* Main window band6 filter select
#0 : filter diff
#1 : filter sum*/
#define offset_of_vps_reg_main_band6_dia_filter_sel (0x16)
#define mask_of_vps_reg_main_band6_dia_filter_sel   (0x4000)
#define shift_of_vps_reg_main_band6_dia_filter_sel  (14)
#define VPS_REG_MAIN_BAND6_DIA_FILTER_SEL           (REG_VPS_BASE + offset_of_vps_reg_main_band6_dia_filter_sel)
// h000c, bit: 0
/* Main window band9 peaking enable*/
#define offset_of_vps_reg_main_band9_peaking_en (0x18)
#define mask_of_vps_reg_main_band9_peaking_en   (0x1)
#define shift_of_vps_reg_main_band9_peaking_en  (0)
#define VPS_REG_MAIN_BAND9_PEAKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band9_peaking_en)
#define REG_VPS_0C_L                            (VPS_REG_MAIN_BAND9_PEAKING_EN)
// h000c, bit: 1
/* Main window band10 peaking enable*/
#define offset_of_vps_reg_main_band10_peaking_en (0x18)
#define mask_of_vps_reg_main_band10_peaking_en   (0x2)
#define shift_of_vps_reg_main_band10_peaking_en  (1)
#define VPS_REG_MAIN_BAND10_PEAKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band10_peaking_en)
// h000c, bit: 2
/* Main window band11 peaking enable*/
#define offset_of_vps_reg_main_band11_peaking_en (0x18)
#define mask_of_vps_reg_main_band11_peaking_en   (0x4)
#define shift_of_vps_reg_main_band11_peaking_en  (2)
#define VPS_REG_MAIN_BAND11_PEAKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band11_peaking_en)
// h000c, bit: 3
/* Main window band12 peaking enable*/
#define offset_of_vps_reg_main_band12_peaking_en (0x18)
#define mask_of_vps_reg_main_band12_peaking_en   (0x8)
#define shift_of_vps_reg_main_band12_peaking_en  (3)
#define VPS_REG_MAIN_BAND12_PEAKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band12_peaking_en)
// h000c, bit: 8
/* Main window band9 differential adaptive enable*/
#define offset_of_vps_reg_main_band9_adaptive_en (0x18)
#define mask_of_vps_reg_main_band9_adaptive_en   (0x100)
#define shift_of_vps_reg_main_band9_adaptive_en  (8)
#define VPS_REG_MAIN_BAND9_ADAPTIVE_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band9_adaptive_en)
// h000c, bit: 9
/* Main window band10 differential adaptive enable*/
#define offset_of_vps_reg_main_band10_adaptive_en (0x18)
#define mask_of_vps_reg_main_band10_adaptive_en   (0x200)
#define shift_of_vps_reg_main_band10_adaptive_en  (9)
#define VPS_REG_MAIN_BAND10_ADAPTIVE_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band10_adaptive_en)
// h000c, bit: 10
/* Main window band11 differential adaptive enable*/
#define offset_of_vps_reg_main_band11_adaptive_en (0x18)
#define mask_of_vps_reg_main_band11_adaptive_en   (0x400)
#define shift_of_vps_reg_main_band11_adaptive_en  (10)
#define VPS_REG_MAIN_BAND11_ADAPTIVE_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band11_adaptive_en)
// h000c, bit: 11
/* Main window band12 differential adaptive enable*/
#define offset_of_vps_reg_main_band12_adaptive_en (0x18)
#define mask_of_vps_reg_main_band12_adaptive_en   (0x800)
#define shift_of_vps_reg_main_band12_adaptive_en  (11)
#define VPS_REG_MAIN_BAND12_ADAPTIVE_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band12_adaptive_en)
#define REG_VPS_0D_L                              (REG_VPS_BASE + 0x1a)
// h000e, bit: 1
/* Main window band9 coefficient step*/
#define offset_of_vps_reg_main_band9_coef_step (0x1c)
#define mask_of_vps_reg_main_band9_coef_step   (0x3)
#define shift_of_vps_reg_main_band9_coef_step  (0)
#define VPS_REG_MAIN_BAND9_COEF_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_band9_coef_step)
#define REG_VPS_0E_L                           (VPS_REG_MAIN_BAND9_COEF_STEP)
// h000e, bit: 3
/* Main window band10 coefficient step*/
#define offset_of_vps_reg_main_band10_coef_step (0x1c)
#define mask_of_vps_reg_main_band10_coef_step   (0xc)
#define shift_of_vps_reg_main_band10_coef_step  (2)
#define VPS_REG_MAIN_BAND10_COEF_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_band10_coef_step)
// h000e, bit: 5
/* Main window band11 coefficient step*/
#define offset_of_vps_reg_main_band11_coef_step (0x1c)
#define mask_of_vps_reg_main_band11_coef_step   (0x30)
#define shift_of_vps_reg_main_band11_coef_step  (4)
#define VPS_REG_MAIN_BAND11_COEF_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_band11_coef_step)
// h000e, bit: 7
/* Main window band12 coefficient step*/
#define offset_of_vps_reg_main_band12_coef_step (0x1c)
#define mask_of_vps_reg_main_band12_coef_step   (0xc0)
#define shift_of_vps_reg_main_band12_coef_step  (6)
#define VPS_REG_MAIN_BAND12_COEF_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_band12_coef_step)
#define REG_VPS_0F_L                            (REG_VPS_BASE + 0x1e)
// h0010, bit: 0
/* Main window 2D peaking enable*/
#define offset_of_vps_reg_main_post_peaking_en (0x20)
#define mask_of_vps_reg_main_post_peaking_en   (0x1)
#define shift_of_vps_reg_main_post_peaking_en  (0)
#define VPS_REG_MAIN_POST_PEAKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_post_peaking_en)
#define REG_VPS_10_L                           (VPS_REG_MAIN_POST_PEAKING_EN)
// h0010, bit: 1
/* H Low pass filter dither bit enable     */
#define offset_of_vps_reg_hlpf_dither_en (0x20)
#define mask_of_vps_reg_hlpf_dither_en   (0x2)
#define shift_of_vps_reg_hlpf_dither_en  (1)
#define VPS_REG_HLPF_DITHER_EN           (REG_VPS_BASE + offset_of_vps_reg_hlpf_dither_en)
// h0010, bit: 2
/* Main window show edge mode*/
#define offset_of_vps_reg_main_show_edge_mode (0x20)
#define mask_of_vps_reg_main_show_edge_mode   (0x4)
#define shift_of_vps_reg_main_show_edge_mode  (2)
#define VPS_REG_MAIN_SHOW_EDGE_MODE           (REG_VPS_BASE + offset_of_vps_reg_main_show_edge_mode)
// h0010, bit: 6
/* Main window horizontal Y low pass filter coefficient*/
#define offset_of_vps_reg_main_y_lpf_coef (0x20)
#define mask_of_vps_reg_main_y_lpf_coef   (0x70)
#define shift_of_vps_reg_main_y_lpf_coef  (4)
#define VPS_REG_MAIN_Y_LPF_COEF           (REG_VPS_BASE + offset_of_vps_reg_main_y_lpf_coef)
// h0010, bit: 7
/* 2D peaking line-buffer sram active*/
#define offset_of_vps_reg_vps_sram_act (0x20)
#define mask_of_vps_reg_vps_sram_act   (0x80)
#define shift_of_vps_reg_vps_sram_act  (7)
#define VPS_REG_VPS_SRAM_ACT           (REG_VPS_BASE + offset_of_vps_reg_vps_sram_act)
// h0010, bit: 8
/* Main window band1 peaking enable*/
#define offset_of_vps_reg_main_band1_peaking_en (0x20)
#define mask_of_vps_reg_main_band1_peaking_en   (0x100)
#define shift_of_vps_reg_main_band1_peaking_en  (8)
#define VPS_REG_MAIN_BAND1_PEAKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band1_peaking_en)
// h0010, bit: 9
/* Main window band2 peaking enable*/
#define offset_of_vps_reg_main_band2_peaking_en (0x20)
#define mask_of_vps_reg_main_band2_peaking_en   (0x200)
#define shift_of_vps_reg_main_band2_peaking_en  (9)
#define VPS_REG_MAIN_BAND2_PEAKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band2_peaking_en)
// h0010, bit: 10
/* Main window band3 peaking enable*/
#define offset_of_vps_reg_main_band3_peaking_en (0x20)
#define mask_of_vps_reg_main_band3_peaking_en   (0x400)
#define shift_of_vps_reg_main_band3_peaking_en  (10)
#define VPS_REG_MAIN_BAND3_PEAKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band3_peaking_en)
// h0010, bit: 11
/* Main window band4 peaking enable*/
#define offset_of_vps_reg_main_band4_peaking_en (0x20)
#define mask_of_vps_reg_main_band4_peaking_en   (0x800)
#define shift_of_vps_reg_main_band4_peaking_en  (11)
#define VPS_REG_MAIN_BAND4_PEAKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band4_peaking_en)
// h0010, bit: 12
/* Main window band5 peaking enable*/
#define offset_of_vps_reg_main_band5_peaking_en (0x20)
#define mask_of_vps_reg_main_band5_peaking_en   (0x1000)
#define shift_of_vps_reg_main_band5_peaking_en  (12)
#define VPS_REG_MAIN_BAND5_PEAKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band5_peaking_en)
// h0010, bit: 13
/* Main window band6 peaking enable*/
#define offset_of_vps_reg_main_band6_peaking_en (0x20)
#define mask_of_vps_reg_main_band6_peaking_en   (0x2000)
#define shift_of_vps_reg_main_band6_peaking_en  (13)
#define VPS_REG_MAIN_BAND6_PEAKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band6_peaking_en)
// h0010, bit: 14
/* Main window band7 peaking enable*/
#define offset_of_vps_reg_main_band7_peaking_en (0x20)
#define mask_of_vps_reg_main_band7_peaking_en   (0x4000)
#define shift_of_vps_reg_main_band7_peaking_en  (14)
#define VPS_REG_MAIN_BAND7_PEAKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band7_peaking_en)
// h0010, bit: 15
/* Main window band8 peaking enable*/
#define offset_of_vps_reg_main_band8_peaking_en (0x20)
#define mask_of_vps_reg_main_band8_peaking_en   (0x8000)
#define shift_of_vps_reg_main_band8_peaking_en  (15)
#define VPS_REG_MAIN_BAND8_PEAKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band8_peaking_en)
// h0011, bit: 1
/* Main window band1 coefficient step*/
#define offset_of_vps_reg_main_band1_coef_step (0x22)
#define mask_of_vps_reg_main_band1_coef_step   (0x3)
#define shift_of_vps_reg_main_band1_coef_step  (0)
#define VPS_REG_MAIN_BAND1_COEF_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_band1_coef_step)
#define REG_VPS_11_L                           (VPS_REG_MAIN_BAND1_COEF_STEP)
// h0011, bit: 3
/* Main window band2 coefficient step*/
#define offset_of_vps_reg_main_band2_coef_step (0x22)
#define mask_of_vps_reg_main_band2_coef_step   (0xc)
#define shift_of_vps_reg_main_band2_coef_step  (2)
#define VPS_REG_MAIN_BAND2_COEF_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_band2_coef_step)
// h0011, bit: 5
/* Main window band3 coefficient step*/
#define offset_of_vps_reg_main_band3_coef_step (0x22)
#define mask_of_vps_reg_main_band3_coef_step   (0x30)
#define shift_of_vps_reg_main_band3_coef_step  (4)
#define VPS_REG_MAIN_BAND3_COEF_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_band3_coef_step)
// h0011, bit: 7
/* Main window band4 coefficient step*/
#define offset_of_vps_reg_main_band4_coef_step (0x22)
#define mask_of_vps_reg_main_band4_coef_step   (0xc0)
#define shift_of_vps_reg_main_band4_coef_step  (6)
#define VPS_REG_MAIN_BAND4_COEF_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_band4_coef_step)
// h0011, bit: 9
/* Main window band5 coefficient step*/
#define offset_of_vps_reg_main_band5_coef_step (0x22)
#define mask_of_vps_reg_main_band5_coef_step   (0x300)
#define shift_of_vps_reg_main_band5_coef_step  (8)
#define VPS_REG_MAIN_BAND5_COEF_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_band5_coef_step)
// h0011, bit: 11
/* Main window band6 coefficient step*/
#define offset_of_vps_reg_main_band6_coef_step (0x22)
#define mask_of_vps_reg_main_band6_coef_step   (0xc00)
#define shift_of_vps_reg_main_band6_coef_step  (10)
#define VPS_REG_MAIN_BAND6_COEF_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_band6_coef_step)
// h0011, bit: 13
/* Main window band7 coefficient step*/
#define offset_of_vps_reg_main_band7_coef_step (0x22)
#define mask_of_vps_reg_main_band7_coef_step   (0x3000)
#define shift_of_vps_reg_main_band7_coef_step  (12)
#define VPS_REG_MAIN_BAND7_COEF_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_band7_coef_step)
// h0011, bit: 15
/* Main window band8 coefficient step*/
#define offset_of_vps_reg_main_band8_coef_step (0x22)
#define mask_of_vps_reg_main_band8_coef_step   (0xc000)
#define shift_of_vps_reg_main_band8_coef_step  (14)
#define VPS_REG_MAIN_BAND8_COEF_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_band8_coef_step)
// h0012, bit: 5
/* Main window vertical Y noise-masking gain*/
#define offset_of_vps_reg_main_v_noise_mask_gain (0x24)
#define mask_of_vps_reg_main_v_noise_mask_gain   (0x3f)
#define shift_of_vps_reg_main_v_noise_mask_gain  (0)
#define VPS_REG_MAIN_V_NOISE_MASK_GAIN           (REG_VPS_BASE + offset_of_vps_reg_main_v_noise_mask_gain)
#define REG_VPS_12_L                             (VPS_REG_MAIN_V_NOISE_MASK_GAIN)
// h0012, bit: 6
/* reserved                     */
#define offset_of_vps_reg_main_v_resever1 (0x24)
#define mask_of_vps_reg_main_v_resever1   (0x40)
#define shift_of_vps_reg_main_v_resever1  (6)
#define VPS_REG_MAIN_V_RESEVER1           (REG_VPS_BASE + offset_of_vps_reg_main_v_resever1)
// h0012, bit: 7
/* Main window vertical Y noise-masking enable*/
#define offset_of_vps_reg_main_v_noise_masking_en (0x24)
#define mask_of_vps_reg_main_v_noise_masking_en   (0x80)
#define shift_of_vps_reg_main_v_noise_masking_en  (7)
#define VPS_REG_MAIN_V_NOISE_MASKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_v_noise_masking_en)
// h0012, bit: 10
/* Main window vertical up-dwon pixel Y LPF coefficient*/
#define offset_of_vps_reg_main_v_lpf_coef_1 (0x24)
#define mask_of_vps_reg_main_v_lpf_coef_1   (0x700)
#define shift_of_vps_reg_main_v_lpf_coef_1  (8)
#define VPS_REG_MAIN_V_LPF_COEF_1           (REG_VPS_BASE + offset_of_vps_reg_main_v_lpf_coef_1)
// h0012, bit: 14
/* Main window vertical central pixel Y LPF coefficient*/
#define offset_of_vps_reg_main_v_lpf_coef_2 (0x24)
#define mask_of_vps_reg_main_v_lpf_coef_2   (0x7000)
#define shift_of_vps_reg_main_v_lpf_coef_2  (12)
#define VPS_REG_MAIN_V_LPF_COEF_2           (REG_VPS_BASE + offset_of_vps_reg_main_v_lpf_coef_2)
// h0012, bit: 15
/* Vertical Low pass filter dither bit enable*/
#define offset_of_vps_reg_vlpf_dither_en (0x24)
#define mask_of_vps_reg_vlpf_dither_en   (0x8000)
#define shift_of_vps_reg_vlpf_dither_en  (15)
#define VPS_REG_VLPF_DITHER_EN           (REG_VPS_BASE + offset_of_vps_reg_vlpf_dither_en)
// h0013, bit: 3
/* Main window coring threshold 1*/
#define offset_of_vps_reg_main_coring_thrd_1 (0x26)
#define mask_of_vps_reg_main_coring_thrd_1   (0xf)
#define shift_of_vps_reg_main_coring_thrd_1  (0)
#define VPS_REG_MAIN_CORING_THRD_1           (REG_VPS_BASE + offset_of_vps_reg_main_coring_thrd_1)
#define REG_VPS_13_L                         (VPS_REG_MAIN_CORING_THRD_1)
// h0013, bit: 7
/* Main window coring threshold 2*/
#define offset_of_vps_reg_main_coring_thrd_2 (0x26)
#define mask_of_vps_reg_main_coring_thrd_2   (0xf0)
#define shift_of_vps_reg_main_coring_thrd_2  (4)
#define VPS_REG_MAIN_CORING_THRD_2           (REG_VPS_BASE + offset_of_vps_reg_main_coring_thrd_2)
// h0013, bit: 14
/* Main window user sharpness adjust (Sxx.xxxx)*/
#define offset_of_vps_reg_main_osd_sharpness_ctrl (0x26)
#define mask_of_vps_reg_main_osd_sharpness_ctrl   (0x7f00)
#define shift_of_vps_reg_main_osd_sharpness_ctrl  (8)
#define VPS_REG_MAIN_OSD_SHARPNESS_CTRL           (REG_VPS_BASE + offset_of_vps_reg_main_osd_sharpness_ctrl)
#define REG_VPS_14_L                              (REG_VPS_BASE + 0x28)
#define REG_VPS_15_L                              (REG_VPS_BASE + 0x2a)
#define REG_VPS_16_L                              (REG_VPS_BASE + 0x2c)
#define REG_VPS_17_L                              (REG_VPS_BASE + 0x2e)
// h0018, bit: 6
/* Main window band1 coefficient (Sxxx.xxx)*/
#define offset_of_vps_reg_main_band1_coef (0x30)
#define mask_of_vps_reg_main_band1_coef   (0x7f)
#define shift_of_vps_reg_main_band1_coef  (0)
#define VPS_REG_MAIN_BAND1_COEF           (REG_VPS_BASE + offset_of_vps_reg_main_band1_coef)
#define REG_VPS_18_L                      (VPS_REG_MAIN_BAND1_COEF)
// h0018, bit: 14
/* Main window band2 coefficient (Sxxx.xxx)*/
#define offset_of_vps_reg_main_band2_coef (0x30)
#define mask_of_vps_reg_main_band2_coef   (0x7f00)
#define shift_of_vps_reg_main_band2_coef  (8)
#define VPS_REG_MAIN_BAND2_COEF           (REG_VPS_BASE + offset_of_vps_reg_main_band2_coef)
// h0019, bit: 6
/* Main window band3 coefficient (Sxxx.xxx)*/
#define offset_of_vps_reg_main_band3_coef (0x32)
#define mask_of_vps_reg_main_band3_coef   (0x7f)
#define shift_of_vps_reg_main_band3_coef  (0)
#define VPS_REG_MAIN_BAND3_COEF           (REG_VPS_BASE + offset_of_vps_reg_main_band3_coef)
#define REG_VPS_19_L                      (VPS_REG_MAIN_BAND3_COEF)
// h0019, bit: 14
/* Main window band4 coefficient (Sxxx.xxx)*/
#define offset_of_vps_reg_main_band4_coef (0x32)
#define mask_of_vps_reg_main_band4_coef   (0x7f00)
#define shift_of_vps_reg_main_band4_coef  (8)
#define VPS_REG_MAIN_BAND4_COEF           (REG_VPS_BASE + offset_of_vps_reg_main_band4_coef)
// h001a, bit: 6
/* Main window band5 coefficient (Sxxx.xxx)*/
#define offset_of_vps_reg_main_band5_coef (0x34)
#define mask_of_vps_reg_main_band5_coef   (0x7f)
#define shift_of_vps_reg_main_band5_coef  (0)
#define VPS_REG_MAIN_BAND5_COEF           (REG_VPS_BASE + offset_of_vps_reg_main_band5_coef)
#define REG_VPS_1A_L                      (VPS_REG_MAIN_BAND5_COEF)
// h001a, bit: 14
/* Main window band6 coefficient (Sxxx.xxx)*/
#define offset_of_vps_reg_main_band6_coef (0x34)
#define mask_of_vps_reg_main_band6_coef   (0x7f00)
#define shift_of_vps_reg_main_band6_coef  (8)
#define VPS_REG_MAIN_BAND6_COEF           (REG_VPS_BASE + offset_of_vps_reg_main_band6_coef)
// h001b, bit: 6
/* Main window band7 coefficient (Sxxx.xxx)*/
#define offset_of_vps_reg_main_band7_coef (0x36)
#define mask_of_vps_reg_main_band7_coef   (0x7f)
#define shift_of_vps_reg_main_band7_coef  (0)
#define VPS_REG_MAIN_BAND7_COEF           (REG_VPS_BASE + offset_of_vps_reg_main_band7_coef)
#define REG_VPS_1B_L                      (VPS_REG_MAIN_BAND7_COEF)
// h001b, bit: 14
/* Main window band8 coefficient (Sxxx.xxx)*/
#define offset_of_vps_reg_main_band8_coef (0x36)
#define mask_of_vps_reg_main_band8_coef   (0x7f00)
#define shift_of_vps_reg_main_band8_coef  (8)
#define VPS_REG_MAIN_BAND8_COEF           (REG_VPS_BASE + offset_of_vps_reg_main_band8_coef)
// h001c, bit: 3
/* Main window peaking term1 select*/
#define offset_of_vps_reg_main_peaking_term1_select (0x38)
#define mask_of_vps_reg_main_peaking_term1_select   (0xf)
#define shift_of_vps_reg_main_peaking_term1_select  (0)
#define VPS_REG_MAIN_PEAKING_TERM1_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term1_select)
#define REG_VPS_1C_L                                (VPS_REG_MAIN_PEAKING_TERM1_SELECT)
// h001c, bit: 7
/* Main window peaking term2 select*/
#define offset_of_vps_reg_main_peaking_term2_select (0x38)
#define mask_of_vps_reg_main_peaking_term2_select   (0xf0)
#define shift_of_vps_reg_main_peaking_term2_select  (4)
#define VPS_REG_MAIN_PEAKING_TERM2_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term2_select)
// h001c, bit: 11
/* Main window peaking term3 select*/
#define offset_of_vps_reg_main_peaking_term3_select (0x38)
#define mask_of_vps_reg_main_peaking_term3_select   (0xf00)
#define shift_of_vps_reg_main_peaking_term3_select  (8)
#define VPS_REG_MAIN_PEAKING_TERM3_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term3_select)
// h001c, bit: 15
/* Main window peaking term4 select*/
#define offset_of_vps_reg_main_peaking_term4_select (0x38)
#define mask_of_vps_reg_main_peaking_term4_select   (0xf000)
#define shift_of_vps_reg_main_peaking_term4_select  (12)
#define VPS_REG_MAIN_PEAKING_TERM4_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term4_select)
// h001d, bit: 3
/* Main window peaking term5 select*/
#define offset_of_vps_reg_main_peaking_term5_select (0x3a)
#define mask_of_vps_reg_main_peaking_term5_select   (0xf)
#define shift_of_vps_reg_main_peaking_term5_select  (0)
#define VPS_REG_MAIN_PEAKING_TERM5_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term5_select)
#define REG_VPS_1D_L                                (VPS_REG_MAIN_PEAKING_TERM5_SELECT)
// h001d, bit: 7
/* Main window peaking term6 select*/
#define offset_of_vps_reg_main_peaking_term6_select (0x3a)
#define mask_of_vps_reg_main_peaking_term6_select   (0xf0)
#define shift_of_vps_reg_main_peaking_term6_select  (4)
#define VPS_REG_MAIN_PEAKING_TERM6_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term6_select)
// h001d, bit: 11
/* Main window peaking term7 select*/
#define offset_of_vps_reg_main_peaking_term7_select (0x3a)
#define mask_of_vps_reg_main_peaking_term7_select   (0xf00)
#define shift_of_vps_reg_main_peaking_term7_select  (8)
#define VPS_REG_MAIN_PEAKING_TERM7_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term7_select)
// h001d, bit: 15
/* Main window peaking term8 select*/
#define offset_of_vps_reg_main_peaking_term8_select (0x3a)
#define mask_of_vps_reg_main_peaking_term8_select   (0xf000)
#define shift_of_vps_reg_main_peaking_term8_select  (12)
#define VPS_REG_MAIN_PEAKING_TERM8_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term8_select)
// h001e, bit: 3
/* Main window peaking term9 select*/
#define offset_of_vps_reg_main_peaking_term9_select (0x3c)
#define mask_of_vps_reg_main_peaking_term9_select   (0xf)
#define shift_of_vps_reg_main_peaking_term9_select  (0)
#define VPS_REG_MAIN_PEAKING_TERM9_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term9_select)
#define REG_VPS_1E_L                                (VPS_REG_MAIN_PEAKING_TERM9_SELECT)
// h001e, bit: 7
/* Main window peaking term10 select*/
#define offset_of_vps_reg_main_peaking_term10_select (0x3c)
#define mask_of_vps_reg_main_peaking_term10_select   (0xf0)
#define shift_of_vps_reg_main_peaking_term10_select  (4)
#define VPS_REG_MAIN_PEAKING_TERM10_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term10_select)
// h001e, bit: 11
/* Main window peaking term11 select*/
#define offset_of_vps_reg_main_peaking_term11_select (0x3c)
#define mask_of_vps_reg_main_peaking_term11_select   (0xf00)
#define shift_of_vps_reg_main_peaking_term11_select  (8)
#define VPS_REG_MAIN_PEAKING_TERM11_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term11_select)
// h001e, bit: 15
/* Main window peaking term12 select*/
#define offset_of_vps_reg_main_peaking_term12_select (0x3c)
#define mask_of_vps_reg_main_peaking_term12_select   (0xf000)
#define shift_of_vps_reg_main_peaking_term12_select  (12)
#define VPS_REG_MAIN_PEAKING_TERM12_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term12_select)
// h001f, bit: 3
/* Main window peaking term13 select*/
#define offset_of_vps_reg_main_peaking_term13_select (0x3e)
#define mask_of_vps_reg_main_peaking_term13_select   (0xf)
#define shift_of_vps_reg_main_peaking_term13_select  (0)
#define VPS_REG_MAIN_PEAKING_TERM13_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term13_select)
#define REG_VPS_1F_L                                 (VPS_REG_MAIN_PEAKING_TERM13_SELECT)
// h001f, bit: 7
/* Main window peaking term14 select*/
#define offset_of_vps_reg_main_peaking_term14_select (0x3e)
#define mask_of_vps_reg_main_peaking_term14_select   (0xf0)
#define shift_of_vps_reg_main_peaking_term14_select  (4)
#define VPS_REG_MAIN_PEAKING_TERM14_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term14_select)
// h001f, bit: 11
/* Main window peaking term15 select*/
#define offset_of_vps_reg_main_peaking_term15_select (0x3e)
#define mask_of_vps_reg_main_peaking_term15_select   (0xf00)
#define shift_of_vps_reg_main_peaking_term15_select  (8)
#define VPS_REG_MAIN_PEAKING_TERM15_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term15_select)
// h001f, bit: 15
/* Main window peaking term16 select*/
#define offset_of_vps_reg_main_peaking_term16_select (0x3e)
#define mask_of_vps_reg_main_peaking_term16_select   (0xf000)
#define shift_of_vps_reg_main_peaking_term16_select  (12)
#define VPS_REG_MAIN_PEAKING_TERM16_SELECT           (REG_VPS_BASE + offset_of_vps_reg_main_peaking_term16_select)
// h0020, bit: 7
/* window band1 overshoot limit*/
#define offset_of_vps_reg_band1_overshoot_limit (0x40)
#define mask_of_vps_reg_band1_overshoot_limit   (0xff)
#define shift_of_vps_reg_band1_overshoot_limit  (0)
#define VPS_REG_BAND1_OVERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band1_overshoot_limit)
#define REG_VPS_20_L                            (VPS_REG_BAND1_OVERSHOOT_LIMIT)
// h0020, bit: 15
/* window band2 overshoot limit*/
#define offset_of_vps_reg_band2_overshoot_limit (0x40)
#define mask_of_vps_reg_band2_overshoot_limit   (0xff00)
#define shift_of_vps_reg_band2_overshoot_limit  (8)
#define VPS_REG_BAND2_OVERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band2_overshoot_limit)
// h0021, bit: 7
/* window band3 overshoot limit*/
#define offset_of_vps_reg_band3_overshoot_limit (0x42)
#define mask_of_vps_reg_band3_overshoot_limit   (0xff)
#define shift_of_vps_reg_band3_overshoot_limit  (0)
#define VPS_REG_BAND3_OVERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band3_overshoot_limit)
#define REG_VPS_21_L                            (VPS_REG_BAND3_OVERSHOOT_LIMIT)
// h0021, bit: 15
/* window band4 overshoot limit*/
#define offset_of_vps_reg_band4_overshoot_limit (0x42)
#define mask_of_vps_reg_band4_overshoot_limit   (0xff00)
#define shift_of_vps_reg_band4_overshoot_limit  (8)
#define VPS_REG_BAND4_OVERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band4_overshoot_limit)
// h0022, bit: 7
/* window band5 overshoot limit*/
#define offset_of_vps_reg_band5_overshoot_limit (0x44)
#define mask_of_vps_reg_band5_overshoot_limit   (0xff)
#define shift_of_vps_reg_band5_overshoot_limit  (0)
#define VPS_REG_BAND5_OVERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band5_overshoot_limit)
#define REG_VPS_22_L                            (VPS_REG_BAND5_OVERSHOOT_LIMIT)
// h0022, bit: 15
/* window band6 overshoot limit*/
#define offset_of_vps_reg_band6_overshoot_limit (0x44)
#define mask_of_vps_reg_band6_overshoot_limit   (0xff00)
#define shift_of_vps_reg_band6_overshoot_limit  (8)
#define VPS_REG_BAND6_OVERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band6_overshoot_limit)
// h0023, bit: 7
/* window band7 overshoot limit*/
#define offset_of_vps_reg_band7_overshoot_limit (0x46)
#define mask_of_vps_reg_band7_overshoot_limit   (0xff)
#define shift_of_vps_reg_band7_overshoot_limit  (0)
#define VPS_REG_BAND7_OVERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band7_overshoot_limit)
#define REG_VPS_23_L                            (VPS_REG_BAND7_OVERSHOOT_LIMIT)
// h0023, bit: 15
/* window band8 overshoot limit*/
#define offset_of_vps_reg_band8_overshoot_limit (0x46)
#define mask_of_vps_reg_band8_overshoot_limit   (0xff00)
#define shift_of_vps_reg_band8_overshoot_limit  (8)
#define VPS_REG_BAND8_OVERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band8_overshoot_limit)
// h0024, bit: 7
/* window band1 undershoot limit*/
#define offset_of_vps_reg_band1_undershoot_limit (0x48)
#define mask_of_vps_reg_band1_undershoot_limit   (0xff)
#define shift_of_vps_reg_band1_undershoot_limit  (0)
#define VPS_REG_BAND1_UNDERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band1_undershoot_limit)
#define REG_VPS_24_L                             (VPS_REG_BAND1_UNDERSHOOT_LIMIT)
// h0024, bit: 15
/* window band2 undershoot limit*/
#define offset_of_vps_reg_band2_undershoot_limit (0x48)
#define mask_of_vps_reg_band2_undershoot_limit   (0xff00)
#define shift_of_vps_reg_band2_undershoot_limit  (8)
#define VPS_REG_BAND2_UNDERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band2_undershoot_limit)
// h0025, bit: 7
/* window band3 undershoot limit*/
#define offset_of_vps_reg_band3_undershoot_limit (0x4a)
#define mask_of_vps_reg_band3_undershoot_limit   (0xff)
#define shift_of_vps_reg_band3_undershoot_limit  (0)
#define VPS_REG_BAND3_UNDERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band3_undershoot_limit)
#define REG_VPS_25_L                             (VPS_REG_BAND3_UNDERSHOOT_LIMIT)
// h0025, bit: 15
/* window band4 undershoot limit*/
#define offset_of_vps_reg_band4_undershoot_limit (0x4a)
#define mask_of_vps_reg_band4_undershoot_limit   (0xff00)
#define shift_of_vps_reg_band4_undershoot_limit  (8)
#define VPS_REG_BAND4_UNDERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band4_undershoot_limit)
// h0026, bit: 7
/* window band5 undershoot limit*/
#define offset_of_vps_reg_band5_undershoot_limit (0x4c)
#define mask_of_vps_reg_band5_undershoot_limit   (0xff)
#define shift_of_vps_reg_band5_undershoot_limit  (0)
#define VPS_REG_BAND5_UNDERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band5_undershoot_limit)
#define REG_VPS_26_L                             (VPS_REG_BAND5_UNDERSHOOT_LIMIT)
// h0026, bit: 15
/* window band6 undershoot limit*/
#define offset_of_vps_reg_band6_undershoot_limit (0x4c)
#define mask_of_vps_reg_band6_undershoot_limit   (0xff00)
#define shift_of_vps_reg_band6_undershoot_limit  (8)
#define VPS_REG_BAND6_UNDERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band6_undershoot_limit)
// h0027, bit: 7
/* window band7 undershoot limit*/
#define offset_of_vps_reg_band7_undershoot_limit (0x4e)
#define mask_of_vps_reg_band7_undershoot_limit   (0xff)
#define shift_of_vps_reg_band7_undershoot_limit  (0)
#define VPS_REG_BAND7_UNDERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band7_undershoot_limit)
#define REG_VPS_27_L                             (VPS_REG_BAND7_UNDERSHOOT_LIMIT)
// h0027, bit: 15
/* window band8 undershoot limit*/
#define offset_of_vps_reg_band8_undershoot_limit (0x4e)
#define mask_of_vps_reg_band8_undershoot_limit   (0xff00)
#define shift_of_vps_reg_band8_undershoot_limit  (8)
#define VPS_REG_BAND8_UNDERSHOOT_LIMIT           (REG_VPS_BASE + offset_of_vps_reg_band8_undershoot_limit)
#define REG_VPS_28_L                             (REG_VPS_BASE + 0x50)
#define REG_VPS_29_L                             (REG_VPS_BASE + 0x52)
#define REG_VPS_2A_L                             (REG_VPS_BASE + 0x54)
#define REG_VPS_2B_L                             (REG_VPS_BASE + 0x56)
#define REG_VPS_2C_L                             (REG_VPS_BASE + 0x58)
#define REG_VPS_2D_L                             (REG_VPS_BASE + 0x5a)
#define REG_VPS_2E_L                             (REG_VPS_BASE + 0x5c)
#define REG_VPS_2F_L                             (REG_VPS_BASE + 0x5e)
// h0030, bit: 0
/* Main window peaking color factor control separate enable*/
#define offset_of_vps_reg_main_pk_color_ctrl_sep_en (0x60)
#define mask_of_vps_reg_main_pk_color_ctrl_sep_en   (0x1)
#define shift_of_vps_reg_main_pk_color_ctrl_sep_en  (0)
#define VPS_REG_MAIN_PK_COLOR_CTRL_SEP_EN           (REG_VPS_BASE + offset_of_vps_reg_main_pk_color_ctrl_sep_en)
#define REG_VPS_30_L                                (VPS_REG_MAIN_PK_COLOR_CTRL_SEP_EN)
// h0030, bit: 6
/* reserved                     */
#define offset_of_vps_reg_main_color_reversed (0x60)
#define mask_of_vps_reg_main_color_reversed   (0x40)
#define shift_of_vps_reg_main_color_reversed  (6)
#define VPS_REG_MAIN_COLOR_REVERSED           (REG_VPS_BASE + offset_of_vps_reg_main_color_reversed)
// h0030, bit: 7
/* Main window color adaptive peaking enable*/
#define offset_of_vps_reg_main_color_peaking_en (0x60)
#define mask_of_vps_reg_main_color_peaking_en   (0x80)
#define shift_of_vps_reg_main_color_peaking_en  (7)
#define VPS_REG_MAIN_COLOR_PEAKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_color_peaking_en)
// h0030, bit: 13
/* Main window coring step*/
#define offset_of_vps_reg_main_coring_thrd_step (0x60)
#define mask_of_vps_reg_main_coring_thrd_step   (0x3000)
#define shift_of_vps_reg_main_coring_thrd_step  (12)
#define VPS_REG_MAIN_CORING_THRD_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_coring_thrd_step)
// h0030, bit: 15
/* Main window color adaptive coring enable*/
#define offset_of_vps_reg_main_color_coring_en (0x60)
#define mask_of_vps_reg_main_color_coring_en   (0x8000)
#define shift_of_vps_reg_main_color_coring_en  (15)
#define VPS_REG_MAIN_COLOR_CORING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_color_coring_en)
// h0031, bit: 0
/* Main window band1 differential adaptive enable*/
#define offset_of_vps_reg_main_band1_adaptive_en (0x62)
#define mask_of_vps_reg_main_band1_adaptive_en   (0x1)
#define shift_of_vps_reg_main_band1_adaptive_en  (0)
#define VPS_REG_MAIN_BAND1_ADAPTIVE_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band1_adaptive_en)
#define REG_VPS_31_L                             (VPS_REG_MAIN_BAND1_ADAPTIVE_EN)
// h0031, bit: 1
/* Main window band2 differential adaptive enable*/
#define offset_of_vps_reg_main_band2_adaptive_en (0x62)
#define mask_of_vps_reg_main_band2_adaptive_en   (0x2)
#define shift_of_vps_reg_main_band2_adaptive_en  (1)
#define VPS_REG_MAIN_BAND2_ADAPTIVE_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band2_adaptive_en)
// h0031, bit: 2
/* Main window band3 differential adaptive enable*/
#define offset_of_vps_reg_main_band3_adaptive_en (0x62)
#define mask_of_vps_reg_main_band3_adaptive_en   (0x4)
#define shift_of_vps_reg_main_band3_adaptive_en  (2)
#define VPS_REG_MAIN_BAND3_ADAPTIVE_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band3_adaptive_en)
// h0031, bit: 3
/* Main window band4 differential adaptive enable*/
#define offset_of_vps_reg_main_band4_adaptive_en (0x62)
#define mask_of_vps_reg_main_band4_adaptive_en   (0x8)
#define shift_of_vps_reg_main_band4_adaptive_en  (3)
#define VPS_REG_MAIN_BAND4_ADAPTIVE_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band4_adaptive_en)
// h0031, bit: 4
/* Main window band5 differential adaptive enable*/
#define offset_of_vps_reg_main_band5_adaptive_en (0x62)
#define mask_of_vps_reg_main_band5_adaptive_en   (0x10)
#define shift_of_vps_reg_main_band5_adaptive_en  (4)
#define VPS_REG_MAIN_BAND5_ADAPTIVE_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band5_adaptive_en)
// h0031, bit: 5
/* Main window band6 differential adaptive enable*/
#define offset_of_vps_reg_main_band6_adaptive_en (0x62)
#define mask_of_vps_reg_main_band6_adaptive_en   (0x20)
#define shift_of_vps_reg_main_band6_adaptive_en  (5)
#define VPS_REG_MAIN_BAND6_ADAPTIVE_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band6_adaptive_en)
// h0031, bit: 6
/* Main window band7 differential adaptive enable*/
#define offset_of_vps_reg_main_band7_adaptive_en (0x62)
#define mask_of_vps_reg_main_band7_adaptive_en   (0x40)
#define shift_of_vps_reg_main_band7_adaptive_en  (6)
#define VPS_REG_MAIN_BAND7_ADAPTIVE_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band7_adaptive_en)
// h0031, bit: 7
/* Main window band8 differential adaptive enable*/
#define offset_of_vps_reg_main_band8_adaptive_en (0x62)
#define mask_of_vps_reg_main_band8_adaptive_en   (0x80)
#define shift_of_vps_reg_main_band8_adaptive_en  (7)
#define VPS_REG_MAIN_BAND8_ADAPTIVE_EN           (REG_VPS_BASE + offset_of_vps_reg_main_band8_adaptive_en)
#define REG_VPS_32_L                             (REG_VPS_BASE + 0x64)
// h0033, bit: 3
/* Main window band1 coring threshold*/
#define offset_of_vps_reg_main_band1_coring_thrd (0x66)
#define mask_of_vps_reg_main_band1_coring_thrd   (0xf)
#define shift_of_vps_reg_main_band1_coring_thrd  (0)
#define VPS_REG_MAIN_BAND1_CORING_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_band1_coring_thrd)
#define REG_VPS_33_L                             (VPS_REG_MAIN_BAND1_CORING_THRD)
// h0033, bit: 7
/* Main window band2 coring threshold*/
#define offset_of_vps_reg_main_band2_coring_thrd (0x66)
#define mask_of_vps_reg_main_band2_coring_thrd   (0xf0)
#define shift_of_vps_reg_main_band2_coring_thrd  (4)
#define VPS_REG_MAIN_BAND2_CORING_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_band2_coring_thrd)
// h0033, bit: 11
/* Main window band3 coring threshold*/
#define offset_of_vps_reg_main_band3_coring_thrd (0x66)
#define mask_of_vps_reg_main_band3_coring_thrd   (0xf00)
#define shift_of_vps_reg_main_band3_coring_thrd  (8)
#define VPS_REG_MAIN_BAND3_CORING_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_band3_coring_thrd)
// h0033, bit: 15
/* Main window band4 coring threshold*/
#define offset_of_vps_reg_main_band4_coring_thrd (0x66)
#define mask_of_vps_reg_main_band4_coring_thrd   (0xf000)
#define shift_of_vps_reg_main_band4_coring_thrd  (12)
#define VPS_REG_MAIN_BAND4_CORING_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_band4_coring_thrd)
// h0034, bit: 3
/* Main window band5 coring threshold*/
#define offset_of_vps_reg_main_band5_coring_thrd (0x68)
#define mask_of_vps_reg_main_band5_coring_thrd   (0xf)
#define shift_of_vps_reg_main_band5_coring_thrd  (0)
#define VPS_REG_MAIN_BAND5_CORING_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_band5_coring_thrd)
#define REG_VPS_34_L                             (VPS_REG_MAIN_BAND5_CORING_THRD)
// h0034, bit: 7
/* Main window band6 coring threshold*/
#define offset_of_vps_reg_main_band6_coring_thrd (0x68)
#define mask_of_vps_reg_main_band6_coring_thrd   (0xf0)
#define shift_of_vps_reg_main_band6_coring_thrd  (4)
#define VPS_REG_MAIN_BAND6_CORING_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_band6_coring_thrd)
// h0034, bit: 11
/* Main window band7 coring threshold*/
#define offset_of_vps_reg_main_band7_coring_thrd (0x68)
#define mask_of_vps_reg_main_band7_coring_thrd   (0xf00)
#define shift_of_vps_reg_main_band7_coring_thrd  (8)
#define VPS_REG_MAIN_BAND7_CORING_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_band7_coring_thrd)
// h0034, bit: 15
/* Main window band8 coring threshold*/
#define offset_of_vps_reg_main_band8_coring_thrd (0x68)
#define mask_of_vps_reg_main_band8_coring_thrd   (0xf000)
#define shift_of_vps_reg_main_band8_coring_thrd  (12)
#define VPS_REG_MAIN_BAND8_CORING_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_band8_coring_thrd)
#define REG_VPS_35_L                             (REG_VPS_BASE + 0x6a)
#define REG_VPS_36_L                             (REG_VPS_BASE + 0x6c)
// h0037, bit: 5
/* Main window color coring limit*/
#define offset_of_vps_reg_main_coring_thrd_sec (0x6e)
#define mask_of_vps_reg_main_coring_thrd_sec   (0x3f)
#define shift_of_vps_reg_main_coring_thrd_sec  (0)
#define VPS_REG_MAIN_CORING_THRD_SEC           (REG_VPS_BASE + offset_of_vps_reg_main_coring_thrd_sec)
#define REG_VPS_37_L                           (VPS_REG_MAIN_CORING_THRD_SEC)
// h0038, bit: 7
/* Main window diagonal mode alpha threshold*/
#define offset_of_vps_reg_main_alpha_thrd (0x70)
#define mask_of_vps_reg_main_alpha_thrd   (0xff)
#define shift_of_vps_reg_main_alpha_thrd  (0)
#define VPS_REG_MAIN_ALPHA_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_alpha_thrd)
#define REG_VPS_38_L                      (VPS_REG_MAIN_ALPHA_THRD)
// h0039, bit: 3
/* Main window vertical Y noise_masking max value threshold*/
#define offset_of_vps_reg_main_y_v_nm_max_thrd (0x72)
#define mask_of_vps_reg_main_y_v_nm_max_thrd   (0xf)
#define shift_of_vps_reg_main_y_v_nm_max_thrd  (0)
#define VPS_REG_MAIN_Y_V_NM_MAX_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_y_v_nm_max_thrd)
#define REG_VPS_39_L                           (VPS_REG_MAIN_Y_V_NM_MAX_THRD)
// h0039, bit: 7
/* Main window vertical Y noise_masking min value threshold*/
#define offset_of_vps_reg_main_y_v_nm_min_thrd (0x72)
#define mask_of_vps_reg_main_y_v_nm_min_thrd   (0xf0)
#define shift_of_vps_reg_main_y_v_nm_min_thrd  (4)
#define VPS_REG_MAIN_Y_V_NM_MIN_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_y_v_nm_min_thrd)
#define REG_VPS_3A_L                           (REG_VPS_BASE + 0x74)
// h003b, bit: 0
/* Main window yc delay enable*/
#define offset_of_vps_reg_main_yc_delay_en (0x76)
#define mask_of_vps_reg_main_yc_delay_en   (0x1)
#define shift_of_vps_reg_main_yc_delay_en  (0)
#define VPS_REG_MAIN_YC_DELAY_EN           (REG_VPS_BASE + offset_of_vps_reg_main_yc_delay_en)
#define REG_VPS_3B_L                       (VPS_REG_MAIN_YC_DELAY_EN)
// h003b, bit: 5
/* Main window cr delay number
#0: no delay
#1: delay 1T
#2: delay 2T
#3: delay 3T*/
#define offset_of_vps_reg_main_cr_delay_num (0x76)
#define mask_of_vps_reg_main_cr_delay_num   (0x30)
#define shift_of_vps_reg_main_cr_delay_num  (4)
#define VPS_REG_MAIN_CR_DELAY_NUM           (REG_VPS_BASE + offset_of_vps_reg_main_cr_delay_num)
// h003b, bit: 9
/* Main window y delay number
#0: no delay
#1: delay 1T
#2: delay 2T
#3: delay 3T*/
#define offset_of_vps_reg_main_y_delay_num (0x76)
#define mask_of_vps_reg_main_y_delay_num   (0x300)
#define shift_of_vps_reg_main_y_delay_num  (8)
#define VPS_REG_MAIN_Y_DELAY_NUM           (REG_VPS_BASE + offset_of_vps_reg_main_y_delay_num)
// h003b, bit: 11
/* Main window cb delay number
#0: no delay
#1: delay 1T
#2: delay 2T
#3: delay 3T*/
#define offset_of_vps_reg_main_cb_delay_num (0x76)
#define mask_of_vps_reg_main_cb_delay_num   (0xc00)
#define shift_of_vps_reg_main_cb_delay_num  (10)
#define VPS_REG_MAIN_CB_DELAY_NUM           (REG_VPS_BASE + offset_of_vps_reg_main_cb_delay_num)
// h003c, bit: 3
/* Main window band1 coring threshold*/
#define offset_of_vps_reg_main_band9_coring_thrd (0x78)
#define mask_of_vps_reg_main_band9_coring_thrd   (0xf)
#define shift_of_vps_reg_main_band9_coring_thrd  (0)
#define VPS_REG_MAIN_BAND9_CORING_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_band9_coring_thrd)
#define REG_VPS_3C_L                             (VPS_REG_MAIN_BAND9_CORING_THRD)
// h003c, bit: 7
/* Main window band2 coring threshold*/
#define offset_of_vps_reg_main_band10_coring_thrd (0x78)
#define mask_of_vps_reg_main_band10_coring_thrd   (0xf0)
#define shift_of_vps_reg_main_band10_coring_thrd  (4)
#define VPS_REG_MAIN_BAND10_CORING_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_band10_coring_thrd)
// h003c, bit: 11
/* Main window band3 coring threshold*/
#define offset_of_vps_reg_main_band11_coring_thrd (0x78)
#define mask_of_vps_reg_main_band11_coring_thrd   (0xf00)
#define shift_of_vps_reg_main_band11_coring_thrd  (8)
#define VPS_REG_MAIN_BAND11_CORING_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_band11_coring_thrd)
// h003c, bit: 15
/* Main window band4 coring threshold*/
#define offset_of_vps_reg_main_band12_coring_thrd (0x78)
#define mask_of_vps_reg_main_band12_coring_thrd   (0xf000)
#define shift_of_vps_reg_main_band12_coring_thrd  (12)
#define VPS_REG_MAIN_BAND12_CORING_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_band12_coring_thrd)
#define REG_VPS_3D_L                              (REG_VPS_BASE + 0x7a)
// h003e, bit: 6
/* Main window user sharpness horizontal adjust (Sxx.xxxx)*/
#define offset_of_vps_reg_main_osd_sharpness_ctrl_h (0x7c)
#define mask_of_vps_reg_main_osd_sharpness_ctrl_h   (0x7f)
#define shift_of_vps_reg_main_osd_sharpness_ctrl_h  (0)
#define VPS_REG_MAIN_OSD_SHARPNESS_CTRL_H           (REG_VPS_BASE + offset_of_vps_reg_main_osd_sharpness_ctrl_h)
#define REG_VPS_3E_L                                (VPS_REG_MAIN_OSD_SHARPNESS_CTRL_H)
// h003e, bit: 7
/* Main window user sharpness separate HV enable*/
#define offset_of_vps_reg_main_osd_sharpness_sep_hv_en (0x7c)
#define mask_of_vps_reg_main_osd_sharpness_sep_hv_en   (0x80)
#define shift_of_vps_reg_main_osd_sharpness_sep_hv_en  (7)
#define VPS_REG_MAIN_OSD_SHARPNESS_SEP_HV_EN           (REG_VPS_BASE + offset_of_vps_reg_main_osd_sharpness_sep_hv_en)
// h003e, bit: 14
/* Main window user sharpness vertical adjust (Sxx.xxxx)*/
#define offset_of_vps_reg_main_osd_sharpness_ctrl_v (0x7c)
#define mask_of_vps_reg_main_osd_sharpness_ctrl_v   (0x7f00)
#define shift_of_vps_reg_main_osd_sharpness_ctrl_v  (8)
#define VPS_REG_MAIN_OSD_SHARPNESS_CTRL_V           (REG_VPS_BASE + offset_of_vps_reg_main_osd_sharpness_ctrl_v)
#define REG_VPS_3F_L                                (REG_VPS_BASE + 0x7e)
// h0040, bit: 5
/* Horizontal differential adaptive LUT 0*/
#define offset_of_vps_reg_hor_lut_0 (0x80)
#define mask_of_vps_reg_hor_lut_0   (0x3f)
#define shift_of_vps_reg_hor_lut_0  (0)
#define VPS_REG_HOR_LUT_0           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_0)
#define REG_VPS_40_L                (VPS_REG_HOR_LUT_0)
// h0040, bit: 13
/* Horizontal differential adaptive LUT 1*/
#define offset_of_vps_reg_hor_lut_1 (0x80)
#define mask_of_vps_reg_hor_lut_1   (0x3f00)
#define shift_of_vps_reg_hor_lut_1  (8)
#define VPS_REG_HOR_LUT_1           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_1)
// h0041, bit: 5
/* Horizontal differential adaptive LUT 2*/
#define offset_of_vps_reg_hor_lut_2 (0x82)
#define mask_of_vps_reg_hor_lut_2   (0x3f)
#define shift_of_vps_reg_hor_lut_2  (0)
#define VPS_REG_HOR_LUT_2           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_2)
#define REG_VPS_41_L                (VPS_REG_HOR_LUT_2)
// h0041, bit: 13
/* Horizontal differential adaptive LUT 3*/
#define offset_of_vps_reg_hor_lut_3 (0x82)
#define mask_of_vps_reg_hor_lut_3   (0x3f00)
#define shift_of_vps_reg_hor_lut_3  (8)
#define VPS_REG_HOR_LUT_3           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_3)
// h0042, bit: 5
/* Horizontal differential adaptive LUT 4*/
#define offset_of_vps_reg_hor_lut_4 (0x84)
#define mask_of_vps_reg_hor_lut_4   (0x3f)
#define shift_of_vps_reg_hor_lut_4  (0)
#define VPS_REG_HOR_LUT_4           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_4)
#define REG_VPS_42_L                (VPS_REG_HOR_LUT_4)
// h0042, bit: 13
/* Horizontal differential adaptive LUT 5*/
#define offset_of_vps_reg_hor_lut_5 (0x84)
#define mask_of_vps_reg_hor_lut_5   (0x3f00)
#define shift_of_vps_reg_hor_lut_5  (8)
#define VPS_REG_HOR_LUT_5           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_5)
// h0043, bit: 5
/* Horizontal differential adaptive LUT 6*/
#define offset_of_vps_reg_hor_lut_6 (0x86)
#define mask_of_vps_reg_hor_lut_6   (0x3f)
#define shift_of_vps_reg_hor_lut_6  (0)
#define VPS_REG_HOR_LUT_6           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_6)
#define REG_VPS_43_L                (VPS_REG_HOR_LUT_6)
// h0043, bit: 13
/* Horizontal differential adaptive LUT 7*/
#define offset_of_vps_reg_hor_lut_7 (0x86)
#define mask_of_vps_reg_hor_lut_7   (0x3f00)
#define shift_of_vps_reg_hor_lut_7  (8)
#define VPS_REG_HOR_LUT_7           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_7)
// h0044, bit: 5
/* Horizontal differential adaptive LUT 8*/
#define offset_of_vps_reg_hor_lut_8 (0x88)
#define mask_of_vps_reg_hor_lut_8   (0x3f)
#define shift_of_vps_reg_hor_lut_8  (0)
#define VPS_REG_HOR_LUT_8           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_8)
#define REG_VPS_44_L                (VPS_REG_HOR_LUT_8)
// h0044, bit: 13
/* Horizontal differential adaptive LUT 9*/
#define offset_of_vps_reg_hor_lut_9 (0x88)
#define mask_of_vps_reg_hor_lut_9   (0x3f00)
#define shift_of_vps_reg_hor_lut_9  (8)
#define VPS_REG_HOR_LUT_9           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_9)
// h0045, bit: 5
/* Horizontal differential adaptive LUT 10*/
#define offset_of_vps_reg_hor_lut_10 (0x8a)
#define mask_of_vps_reg_hor_lut_10   (0x3f)
#define shift_of_vps_reg_hor_lut_10  (0)
#define VPS_REG_HOR_LUT_10           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_10)
#define REG_VPS_45_L                 (VPS_REG_HOR_LUT_10)
// h0045, bit: 13
/* Horizontal differential adaptive LUT 11*/
#define offset_of_vps_reg_hor_lut_11 (0x8a)
#define mask_of_vps_reg_hor_lut_11   (0x3f00)
#define shift_of_vps_reg_hor_lut_11  (8)
#define VPS_REG_HOR_LUT_11           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_11)
// h0046, bit: 5
/* Horizontal differential adaptive LUT 12*/
#define offset_of_vps_reg_hor_lut_12 (0x8c)
#define mask_of_vps_reg_hor_lut_12   (0x3f)
#define shift_of_vps_reg_hor_lut_12  (0)
#define VPS_REG_HOR_LUT_12           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_12)
#define REG_VPS_46_L                 (VPS_REG_HOR_LUT_12)
// h0046, bit: 13
/* Horizontal differential adaptive LUT 13*/
#define offset_of_vps_reg_hor_lut_13 (0x8c)
#define mask_of_vps_reg_hor_lut_13   (0x3f00)
#define shift_of_vps_reg_hor_lut_13  (8)
#define VPS_REG_HOR_LUT_13           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_13)
// h0047, bit: 5
/* Horizontal differential adaptive LUT 14*/
#define offset_of_vps_reg_hor_lut_14 (0x8e)
#define mask_of_vps_reg_hor_lut_14   (0x3f)
#define shift_of_vps_reg_hor_lut_14  (0)
#define VPS_REG_HOR_LUT_14           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_14)
#define REG_VPS_47_L                 (VPS_REG_HOR_LUT_14)
// h0047, bit: 13
/* Horizontal differential adaptive LUT 15*/
#define offset_of_vps_reg_hor_lut_15 (0x8e)
#define mask_of_vps_reg_hor_lut_15   (0x3f00)
#define shift_of_vps_reg_hor_lut_15  (8)
#define VPS_REG_HOR_LUT_15           (REG_VPS_BASE + offset_of_vps_reg_hor_lut_15)
// h0048, bit: 5
/* Vertical differential adaptive LUT 0 */
#define offset_of_vps_reg_ver_lut_0 (0x90)
#define mask_of_vps_reg_ver_lut_0   (0x3f)
#define shift_of_vps_reg_ver_lut_0  (0)
#define VPS_REG_VER_LUT_0           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_0)
#define REG_VPS_48_L                (VPS_REG_VER_LUT_0)
// h0048, bit: 13
/* Vertical differential adaptive LUT 1 */
#define offset_of_vps_reg_ver_lut_1 (0x90)
#define mask_of_vps_reg_ver_lut_1   (0x3f00)
#define shift_of_vps_reg_ver_lut_1  (8)
#define VPS_REG_VER_LUT_1           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_1)
// h0049, bit: 5
/* Vertical differential adaptive LUT 2 */
#define offset_of_vps_reg_ver_lut_2 (0x92)
#define mask_of_vps_reg_ver_lut_2   (0x3f)
#define shift_of_vps_reg_ver_lut_2  (0)
#define VPS_REG_VER_LUT_2           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_2)
#define REG_VPS_49_L                (VPS_REG_VER_LUT_2)
// h0049, bit: 13
/* Vertical differential adaptive LUT 3 */
#define offset_of_vps_reg_ver_lut_3 (0x92)
#define mask_of_vps_reg_ver_lut_3   (0x3f00)
#define shift_of_vps_reg_ver_lut_3  (8)
#define VPS_REG_VER_LUT_3           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_3)
// h004a, bit: 5
/* Vertical differential adaptive LUT 4 */
#define offset_of_vps_reg_ver_lut_4 (0x94)
#define mask_of_vps_reg_ver_lut_4   (0x3f)
#define shift_of_vps_reg_ver_lut_4  (0)
#define VPS_REG_VER_LUT_4           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_4)
#define REG_VPS_4A_L                (VPS_REG_VER_LUT_4)
// h004a, bit: 13
/* Vertical differential adaptive LUT 5 */
#define offset_of_vps_reg_ver_lut_5 (0x94)
#define mask_of_vps_reg_ver_lut_5   (0x3f00)
#define shift_of_vps_reg_ver_lut_5  (8)
#define VPS_REG_VER_LUT_5           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_5)
// h004b, bit: 5
/* Vertical differential adaptive LUT 6 */
#define offset_of_vps_reg_ver_lut_6 (0x96)
#define mask_of_vps_reg_ver_lut_6   (0x3f)
#define shift_of_vps_reg_ver_lut_6  (0)
#define VPS_REG_VER_LUT_6           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_6)
#define REG_VPS_4B_L                (VPS_REG_VER_LUT_6)
// h004b, bit: 13
/* Vertical differential adaptive LUT 7 */
#define offset_of_vps_reg_ver_lut_7 (0x96)
#define mask_of_vps_reg_ver_lut_7   (0x3f00)
#define shift_of_vps_reg_ver_lut_7  (8)
#define VPS_REG_VER_LUT_7           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_7)
// h004c, bit: 5
/* Vertical differential adaptive LUT 8 */
#define offset_of_vps_reg_ver_lut_8 (0x98)
#define mask_of_vps_reg_ver_lut_8   (0x3f)
#define shift_of_vps_reg_ver_lut_8  (0)
#define VPS_REG_VER_LUT_8           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_8)
#define REG_VPS_4C_L                (VPS_REG_VER_LUT_8)
// h004c, bit: 13
/* Vertical differential adaptive LUT 9 */
#define offset_of_vps_reg_ver_lut_9 (0x98)
#define mask_of_vps_reg_ver_lut_9   (0x3f00)
#define shift_of_vps_reg_ver_lut_9  (8)
#define VPS_REG_VER_LUT_9           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_9)
// h004d, bit: 5
/* Vertical differential adaptive LUT 10*/
#define offset_of_vps_reg_ver_lut_10 (0x9a)
#define mask_of_vps_reg_ver_lut_10   (0x3f)
#define shift_of_vps_reg_ver_lut_10  (0)
#define VPS_REG_VER_LUT_10           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_10)
#define REG_VPS_4D_L                 (VPS_REG_VER_LUT_10)
// h004d, bit: 13
/* Vertical differential adaptive LUT 11*/
#define offset_of_vps_reg_ver_lut_11 (0x9a)
#define mask_of_vps_reg_ver_lut_11   (0x3f00)
#define shift_of_vps_reg_ver_lut_11  (8)
#define VPS_REG_VER_LUT_11           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_11)
// h004e, bit: 5
/* Vertical differential adaptive LUT 12*/
#define offset_of_vps_reg_ver_lut_12 (0x9c)
#define mask_of_vps_reg_ver_lut_12   (0x3f)
#define shift_of_vps_reg_ver_lut_12  (0)
#define VPS_REG_VER_LUT_12           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_12)
#define REG_VPS_4E_L                 (VPS_REG_VER_LUT_12)
// h004e, bit: 13
/* Vertical differential adaptive LUT 13*/
#define offset_of_vps_reg_ver_lut_13 (0x9c)
#define mask_of_vps_reg_ver_lut_13   (0x3f00)
#define shift_of_vps_reg_ver_lut_13  (8)
#define VPS_REG_VER_LUT_13           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_13)
// h004f, bit: 5
/* Vertical differential adaptive LUT 14*/
#define offset_of_vps_reg_ver_lut_14 (0x9e)
#define mask_of_vps_reg_ver_lut_14   (0x3f)
#define shift_of_vps_reg_ver_lut_14  (0)
#define VPS_REG_VER_LUT_14           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_14)
#define REG_VPS_4F_L                 (VPS_REG_VER_LUT_14)
// h004f, bit: 13
/* Vertical differential adaptive LUT 15*/
#define offset_of_vps_reg_ver_lut_15 (0x9e)
#define mask_of_vps_reg_ver_lut_15   (0x3f00)
#define shift_of_vps_reg_ver_lut_15  (8)
#define VPS_REG_VER_LUT_15           (REG_VPS_BASE + offset_of_vps_reg_ver_lut_15)
// h0050, bit: 15
/* reserved                     */
#define offset_of_vps_reg_reserved_v_color_range (0xa0)
#define mask_of_vps_reg_reserved_v_color_range   (0xffff)
#define shift_of_vps_reg_reserved_v_color_range  (0)
#define VPS_REG_RESERVED_V_COLOR_RANGE           (REG_VPS_BASE + offset_of_vps_reg_reserved_v_color_range)
#define REG_VPS_50_L                             (VPS_REG_RESERVED_V_COLOR_RANGE)
#define REG_VPS_51_L                             (REG_VPS_BASE + 0xa2)
#define REG_VPS_52_L                             (REG_VPS_BASE + 0xa4)
#define REG_VPS_53_L                             (REG_VPS_BASE + 0xa6)
#define REG_VPS_54_L                             (REG_VPS_BASE + 0xa8)
// h0055, bit: 0
/* Main window peaking adaptive y enable*/
#define offset_of_vps_reg_main_pk_adp_y_en (0xaa)
#define mask_of_vps_reg_main_pk_adp_y_en   (0x1)
#define shift_of_vps_reg_main_pk_adp_y_en  (0)
#define VPS_REG_MAIN_PK_ADP_Y_EN           (REG_VPS_BASE + offset_of_vps_reg_main_pk_adp_y_en)
#define REG_VPS_55_L                       (VPS_REG_MAIN_PK_ADP_Y_EN)
// h0055, bit: 1
/* Main window peaking adaptive y alpha low pass filter enable*/
#define offset_of_vps_reg_main_pk_adp_y_alpha_lpf_en (0xaa)
#define mask_of_vps_reg_main_pk_adp_y_alpha_lpf_en   (0x2)
#define shift_of_vps_reg_main_pk_adp_y_alpha_lpf_en  (1)
#define VPS_REG_MAIN_PK_ADP_Y_ALPHA_LPF_EN           (REG_VPS_BASE + offset_of_vps_reg_main_pk_adp_y_alpha_lpf_en)
// h0055, bit: 5
/* Main window peaking adaptive y alpha step*/
#define offset_of_vps_reg_main_pk_adp_y_step (0xaa)
#define mask_of_vps_reg_main_pk_adp_y_step   (0x30)
#define shift_of_vps_reg_main_pk_adp_y_step  (4)
#define VPS_REG_MAIN_PK_ADP_Y_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_pk_adp_y_step)
// h0055, bit: 15
/* Main window peaking adaptive y low threshold */
#define offset_of_vps_reg_main_pk_y_low_thrd (0xaa)
#define mask_of_vps_reg_main_pk_y_low_thrd   (0xff00)
#define shift_of_vps_reg_main_pk_y_low_thrd  (8)
#define VPS_REG_MAIN_PK_Y_LOW_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_pk_y_low_thrd)
// h0056, bit: 3
/* Main window peaking adaptive y alpha LUT 0*/
#define offset_of_vps_reg_main_pk_adp_y_alpha_lut_0 (0xac)
#define mask_of_vps_reg_main_pk_adp_y_alpha_lut_0   (0xf)
#define shift_of_vps_reg_main_pk_adp_y_alpha_lut_0  (0)
#define VPS_REG_MAIN_PK_ADP_Y_ALPHA_LUT_0           (REG_VPS_BASE + offset_of_vps_reg_main_pk_adp_y_alpha_lut_0)
#define REG_VPS_56_L                                (VPS_REG_MAIN_PK_ADP_Y_ALPHA_LUT_0)
// h0056, bit: 7
/* Main window peaking adaptive y alpha LUT 1*/
#define offset_of_vps_reg_main_pk_adp_y_alpha_lut_1 (0xac)
#define mask_of_vps_reg_main_pk_adp_y_alpha_lut_1   (0xf0)
#define shift_of_vps_reg_main_pk_adp_y_alpha_lut_1  (4)
#define VPS_REG_MAIN_PK_ADP_Y_ALPHA_LUT_1           (REG_VPS_BASE + offset_of_vps_reg_main_pk_adp_y_alpha_lut_1)
// h0056, bit: 11
/* Main window peaking adaptive y alpha LUT 2*/
#define offset_of_vps_reg_main_pk_adp_y_alpha_lut_2 (0xac)
#define mask_of_vps_reg_main_pk_adp_y_alpha_lut_2   (0xf00)
#define shift_of_vps_reg_main_pk_adp_y_alpha_lut_2  (8)
#define VPS_REG_MAIN_PK_ADP_Y_ALPHA_LUT_2           (REG_VPS_BASE + offset_of_vps_reg_main_pk_adp_y_alpha_lut_2)
// h0056, bit: 15
/* Main window peaking adaptive y alpha LUT 3*/
#define offset_of_vps_reg_main_pk_adp_y_alpha_lut_3 (0xac)
#define mask_of_vps_reg_main_pk_adp_y_alpha_lut_3   (0xf000)
#define shift_of_vps_reg_main_pk_adp_y_alpha_lut_3  (12)
#define VPS_REG_MAIN_PK_ADP_Y_ALPHA_LUT_3           (REG_VPS_BASE + offset_of_vps_reg_main_pk_adp_y_alpha_lut_3)
// h0057, bit: 3
/* Main window peaking adaptive y alpha LUT 4*/
#define offset_of_vps_reg_main_pk_adp_y_alpha_lut_4 (0xae)
#define mask_of_vps_reg_main_pk_adp_y_alpha_lut_4   (0xf)
#define shift_of_vps_reg_main_pk_adp_y_alpha_lut_4  (0)
#define VPS_REG_MAIN_PK_ADP_Y_ALPHA_LUT_4           (REG_VPS_BASE + offset_of_vps_reg_main_pk_adp_y_alpha_lut_4)
#define REG_VPS_57_L                                (VPS_REG_MAIN_PK_ADP_Y_ALPHA_LUT_4)
// h0057, bit: 7
/* Main window peaking adaptive y alpha LUT 5*/
#define offset_of_vps_reg_main_pk_adp_y_alpha_lut_5 (0xae)
#define mask_of_vps_reg_main_pk_adp_y_alpha_lut_5   (0xf0)
#define shift_of_vps_reg_main_pk_adp_y_alpha_lut_5  (4)
#define VPS_REG_MAIN_PK_ADP_Y_ALPHA_LUT_5           (REG_VPS_BASE + offset_of_vps_reg_main_pk_adp_y_alpha_lut_5)
// h0057, bit: 11
/* Main window peaking adaptive y alpha LUT 6*/
#define offset_of_vps_reg_main_pk_adp_y_alpha_lut_6 (0xae)
#define mask_of_vps_reg_main_pk_adp_y_alpha_lut_6   (0xf00)
#define shift_of_vps_reg_main_pk_adp_y_alpha_lut_6  (8)
#define VPS_REG_MAIN_PK_ADP_Y_ALPHA_LUT_6           (REG_VPS_BASE + offset_of_vps_reg_main_pk_adp_y_alpha_lut_6)
// h0057, bit: 15
/* Main window peaking adaptive y alpha LUT 7*/
#define offset_of_vps_reg_main_pk_adp_y_alpha_lut_7 (0xae)
#define mask_of_vps_reg_main_pk_adp_y_alpha_lut_7   (0xf000)
#define shift_of_vps_reg_main_pk_adp_y_alpha_lut_7  (12)
#define VPS_REG_MAIN_PK_ADP_Y_ALPHA_LUT_7           (REG_VPS_BASE + offset_of_vps_reg_main_pk_adp_y_alpha_lut_7)
// h0058, bit: 0
/* reserved                     */
#define offset_of_vps_reg_reserved_v_color_range2 (0xb0)
#define mask_of_vps_reg_reserved_v_color_range2   (0x1)
#define shift_of_vps_reg_reserved_v_color_range2  (0)
#define VPS_REG_RESERVED_V_COLOR_RANGE2           (REG_VPS_BASE + offset_of_vps_reg_reserved_v_color_range2)
#define REG_VPS_58_L                              (VPS_REG_RESERVED_V_COLOR_RANGE2)
// h0059, bit: 6
/* Main window user sharpness adjust offset (Sxx.xxxx)*/
#define offset_of_vps_reg_main_osd_sharpness_ctrl_offset (0xb2)
#define mask_of_vps_reg_main_osd_sharpness_ctrl_offset   (0x7f)
#define shift_of_vps_reg_main_osd_sharpness_ctrl_offset  (0)
#define VPS_REG_MAIN_OSD_SHARPNESS_CTRL_OFFSET           (REG_VPS_BASE + offset_of_vps_reg_main_osd_sharpness_ctrl_offset)
#define REG_VPS_59_L                                     (VPS_REG_MAIN_OSD_SHARPNESS_CTRL_OFFSET)
// h005a, bit: 6
/* Main window user sharpness horizontal adjust offset (Sxx.xxxx)*/
#define offset_of_vps_reg_main_osd_sharpness_ctrl_h_offset (0xb4)
#define mask_of_vps_reg_main_osd_sharpness_ctrl_h_offset   (0x7f)
#define shift_of_vps_reg_main_osd_sharpness_ctrl_h_offset  (0)
#define VPS_REG_MAIN_OSD_SHARPNESS_CTRL_H_OFFSET           (REG_VPS_BASE + offset_of_vps_reg_main_osd_sharpness_ctrl_h_offset)
#define REG_VPS_5A_L                                       (VPS_REG_MAIN_OSD_SHARPNESS_CTRL_H_OFFSET)
// h005b, bit: 6
/* Main window user sharpness vertical adjust offset (Sxx.xxxx)*/
#define offset_of_vps_reg_main_osd_sharpness_ctrl_v_offset (0xb6)
#define mask_of_vps_reg_main_osd_sharpness_ctrl_v_offset   (0x7f)
#define shift_of_vps_reg_main_osd_sharpness_ctrl_v_offset  (0)
#define VPS_REG_MAIN_OSD_SHARPNESS_CTRL_V_OFFSET           (REG_VPS_BASE + offset_of_vps_reg_main_osd_sharpness_ctrl_v_offset)
#define REG_VPS_5B_L                                       (VPS_REG_MAIN_OSD_SHARPNESS_CTRL_V_OFFSET)
#define REG_VPS_5C_L                                       (REG_VPS_BASE + 0xb8)
#define REG_VPS_5D_L                                       (REG_VPS_BASE + 0xba)
#define REG_VPS_5E_L                                       (REG_VPS_BASE + 0xbc)
#define REG_VPS_5F_L                                       (REG_VPS_BASE + 0xbe)
// h0060, bit: 0
/* Main window Gaussian SNR enable*/
#define offset_of_vps_reg_main_gauss_nr_en (0xc0)
#define mask_of_vps_reg_main_gauss_nr_en   (0x1)
#define shift_of_vps_reg_main_gauss_nr_en  (0)
#define VPS_REG_MAIN_GAUSS_NR_EN           (REG_VPS_BASE + offset_of_vps_reg_main_gauss_nr_en)
#define REG_VPS_60_L                       (VPS_REG_MAIN_GAUSS_NR_EN)
// h0060, bit: 1
/* Main window Gaussian SNR adaptive factor enable*/
#define offset_of_vps_reg_main_gauss_adj_en (0xc0)
#define mask_of_vps_reg_main_gauss_adj_en   (0x2)
#define shift_of_vps_reg_main_gauss_adj_en  (1)
#define VPS_REG_MAIN_GAUSS_ADJ_EN           (REG_VPS_BASE + offset_of_vps_reg_main_gauss_adj_en)
// h0060, bit: 5
/* Main window Gaussian SNR LUT step*/
#define offset_of_vps_reg_main_gauss_lut_step (0xc0)
#define mask_of_vps_reg_main_gauss_lut_step   (0x30)
#define shift_of_vps_reg_main_gauss_lut_step  (4)
#define VPS_REG_MAIN_GAUSS_LUT_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_gauss_lut_step)
// h0060, bit: 12
/* Main window Gaussian SNR threshold*/
#define offset_of_vps_reg_main_gauss_thrd (0xc0)
#define mask_of_vps_reg_main_gauss_thrd   (0x1f00)
#define shift_of_vps_reg_main_gauss_thrd  (8)
#define VPS_REG_MAIN_GAUSS_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_gauss_thrd)
#define REG_VPS_61_L                      (REG_VPS_BASE + 0xc2)
#define REG_VPS_62_L                      (REG_VPS_BASE + 0xc4)
#define REG_VPS_63_L                      (REG_VPS_BASE + 0xc6)
// h0064, bit: 7
/* Gaussian SNR Table 0*/
#define offset_of_vps_reg_snr_lut_0 (0xc8)
#define mask_of_vps_reg_snr_lut_0   (0xff)
#define shift_of_vps_reg_snr_lut_0  (0)
#define VPS_REG_SNR_LUT_0           (REG_VPS_BASE + offset_of_vps_reg_snr_lut_0)
#define REG_VPS_64_L                (VPS_REG_SNR_LUT_0)
// h0064, bit: 15
/* Gaussian SNR Table 1*/
#define offset_of_vps_reg_snr_lut_1 (0xc8)
#define mask_of_vps_reg_snr_lut_1   (0xff00)
#define shift_of_vps_reg_snr_lut_1  (8)
#define VPS_REG_SNR_LUT_1           (REG_VPS_BASE + offset_of_vps_reg_snr_lut_1)
// h0065, bit: 7
/* Gaussian SNR Table 2*/
#define offset_of_vps_reg_snr_lut_2 (0xca)
#define mask_of_vps_reg_snr_lut_2   (0xff)
#define shift_of_vps_reg_snr_lut_2  (0)
#define VPS_REG_SNR_LUT_2           (REG_VPS_BASE + offset_of_vps_reg_snr_lut_2)
#define REG_VPS_65_L                (VPS_REG_SNR_LUT_2)
// h0065, bit: 15
/* Gaussian SNR Table 3*/
#define offset_of_vps_reg_snr_lut_3 (0xca)
#define mask_of_vps_reg_snr_lut_3   (0xff00)
#define shift_of_vps_reg_snr_lut_3  (8)
#define VPS_REG_SNR_LUT_3           (REG_VPS_BASE + offset_of_vps_reg_snr_lut_3)
// h0066, bit: 7
/* Gaussian SNR Table 4*/
#define offset_of_vps_reg_snr_lut_4 (0xcc)
#define mask_of_vps_reg_snr_lut_4   (0xff)
#define shift_of_vps_reg_snr_lut_4  (0)
#define VPS_REG_SNR_LUT_4           (REG_VPS_BASE + offset_of_vps_reg_snr_lut_4)
#define REG_VPS_66_L                (VPS_REG_SNR_LUT_4)
// h0066, bit: 15
/* Gaussian SNR Table 5*/
#define offset_of_vps_reg_snr_lut_5 (0xcc)
#define mask_of_vps_reg_snr_lut_5   (0xff00)
#define shift_of_vps_reg_snr_lut_5  (8)
#define VPS_REG_SNR_LUT_5           (REG_VPS_BASE + offset_of_vps_reg_snr_lut_5)
// h0067, bit: 7
/* Gaussian SNR Table 6*/
#define offset_of_vps_reg_snr_lut_6 (0xce)
#define mask_of_vps_reg_snr_lut_6   (0xff)
#define shift_of_vps_reg_snr_lut_6  (0)
#define VPS_REG_SNR_LUT_6           (REG_VPS_BASE + offset_of_vps_reg_snr_lut_6)
#define REG_VPS_67_L                (VPS_REG_SNR_LUT_6)
// h0067, bit: 15
/* Gaussian SNR Table 7*/
#define offset_of_vps_reg_snr_lut_7 (0xce)
#define mask_of_vps_reg_snr_lut_7   (0xff00)
#define shift_of_vps_reg_snr_lut_7  (8)
#define VPS_REG_SNR_LUT_7           (REG_VPS_BASE + offset_of_vps_reg_snr_lut_7)
// h0068, bit: 5
/* diagonal differential adaptive LUT 0*/
#define offset_of_vps_reg_dia_lut_0 (0xd0)
#define mask_of_vps_reg_dia_lut_0   (0x3f)
#define shift_of_vps_reg_dia_lut_0  (0)
#define VPS_REG_DIA_LUT_0           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_0)
#define REG_VPS_68_L                (VPS_REG_DIA_LUT_0)
// h0068, bit: 13
/* diagonal differential adaptive LUT 1*/
#define offset_of_vps_reg_dia_lut_1 (0xd0)
#define mask_of_vps_reg_dia_lut_1   (0x3f00)
#define shift_of_vps_reg_dia_lut_1  (8)
#define VPS_REG_DIA_LUT_1           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_1)
// h0069, bit: 5
/* diagonal differential adaptive LUT 2*/
#define offset_of_vps_reg_dia_lut_2 (0xd2)
#define mask_of_vps_reg_dia_lut_2   (0x3f)
#define shift_of_vps_reg_dia_lut_2  (0)
#define VPS_REG_DIA_LUT_2           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_2)
#define REG_VPS_69_L                (VPS_REG_DIA_LUT_2)
// h0069, bit: 13
/* diagonal differential adaptive LUT 3*/
#define offset_of_vps_reg_dia_lut_3 (0xd2)
#define mask_of_vps_reg_dia_lut_3   (0x3f00)
#define shift_of_vps_reg_dia_lut_3  (8)
#define VPS_REG_DIA_LUT_3           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_3)
// h006a, bit: 5
/* diagonal differential adaptive LUT 4*/
#define offset_of_vps_reg_dia_lut_4 (0xd4)
#define mask_of_vps_reg_dia_lut_4   (0x3f)
#define shift_of_vps_reg_dia_lut_4  (0)
#define VPS_REG_DIA_LUT_4           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_4)
#define REG_VPS_6A_L                (VPS_REG_DIA_LUT_4)
// h006a, bit: 13
/* diagonal differential adaptive LUT 5*/
#define offset_of_vps_reg_dia_lut_5 (0xd4)
#define mask_of_vps_reg_dia_lut_5   (0x3f00)
#define shift_of_vps_reg_dia_lut_5  (8)
#define VPS_REG_DIA_LUT_5           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_5)
// h006b, bit: 5
/* diagonal differential adaptive LUT 6*/
#define offset_of_vps_reg_dia_lut_6 (0xd6)
#define mask_of_vps_reg_dia_lut_6   (0x3f)
#define shift_of_vps_reg_dia_lut_6  (0)
#define VPS_REG_DIA_LUT_6           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_6)
#define REG_VPS_6B_L                (VPS_REG_DIA_LUT_6)
// h006b, bit: 13
/* diagonal differential adaptive LUT 7*/
#define offset_of_vps_reg_dia_lut_7 (0xd6)
#define mask_of_vps_reg_dia_lut_7   (0x3f00)
#define shift_of_vps_reg_dia_lut_7  (8)
#define VPS_REG_DIA_LUT_7           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_7)
// h006c, bit: 5
/* diagonal differential adaptive LUT 8*/
#define offset_of_vps_reg_dia_lut_8 (0xd8)
#define mask_of_vps_reg_dia_lut_8   (0x3f)
#define shift_of_vps_reg_dia_lut_8  (0)
#define VPS_REG_DIA_LUT_8           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_8)
#define REG_VPS_6C_L                (VPS_REG_DIA_LUT_8)
// h006c, bit: 13
/* diagonal differential adaptive LUT 9*/
#define offset_of_vps_reg_dia_lut_9 (0xd8)
#define mask_of_vps_reg_dia_lut_9   (0x3f00)
#define shift_of_vps_reg_dia_lut_9  (8)
#define VPS_REG_DIA_LUT_9           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_9)
// h006d, bit: 5
/* diagonal differential adaptive LUT 10*/
#define offset_of_vps_reg_dia_lut_10 (0xda)
#define mask_of_vps_reg_dia_lut_10   (0x3f)
#define shift_of_vps_reg_dia_lut_10  (0)
#define VPS_REG_DIA_LUT_10           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_10)
#define REG_VPS_6D_L                 (VPS_REG_DIA_LUT_10)
// h006d, bit: 13
/* diagonal differential adaptive LUT 11*/
#define offset_of_vps_reg_dia_lut_11 (0xda)
#define mask_of_vps_reg_dia_lut_11   (0x3f00)
#define shift_of_vps_reg_dia_lut_11  (8)
#define VPS_REG_DIA_LUT_11           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_11)
// h006e, bit: 5
/* diagonal differential adaptive LUT 12*/
#define offset_of_vps_reg_dia_lut_12 (0xdc)
#define mask_of_vps_reg_dia_lut_12   (0x3f)
#define shift_of_vps_reg_dia_lut_12  (0)
#define VPS_REG_DIA_LUT_12           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_12)
#define REG_VPS_6E_L                 (VPS_REG_DIA_LUT_12)
// h006e, bit: 13
/* diagonal differential adaptive LUT 13*/
#define offset_of_vps_reg_dia_lut_13 (0xdc)
#define mask_of_vps_reg_dia_lut_13   (0x3f00)
#define shift_of_vps_reg_dia_lut_13  (8)
#define VPS_REG_DIA_LUT_13           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_13)
// h006f, bit: 5
/* diagonal differential adaptive LUT 14*/
#define offset_of_vps_reg_dia_lut_14 (0xde)
#define mask_of_vps_reg_dia_lut_14   (0x3f)
#define shift_of_vps_reg_dia_lut_14  (0)
#define VPS_REG_DIA_LUT_14           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_14)
#define REG_VPS_6F_L                 (VPS_REG_DIA_LUT_14)
// h006f, bit: 13
/* diagonal differential adaptive LUT 15*/
#define offset_of_vps_reg_dia_lut_15 (0xde)
#define mask_of_vps_reg_dia_lut_15   (0x3f00)
#define shift_of_vps_reg_dia_lut_15  (8)
#define VPS_REG_DIA_LUT_15           (REG_VPS_BASE + offset_of_vps_reg_dia_lut_15)
// h0070, bit: 5
/* Main window horizontal Y noise-masking gain (xxxx.xx)*/
#define offset_of_vps_reg_main_y_noise_mask_gain (0xe0)
#define mask_of_vps_reg_main_y_noise_mask_gain   (0x3f)
#define shift_of_vps_reg_main_y_noise_mask_gain  (0)
#define VPS_REG_MAIN_Y_NOISE_MASK_GAIN           (REG_VPS_BASE + offset_of_vps_reg_main_y_noise_mask_gain)
#define REG_VPS_70_L                             (VPS_REG_MAIN_Y_NOISE_MASK_GAIN)
// h0070, bit: 6
/* Main window horizontal Y noise-masking color adaptive enable*/
#define offset_of_vps_reg_main_y_color_noise_masking_en (0xe0)
#define mask_of_vps_reg_main_y_color_noise_masking_en   (0x40)
#define shift_of_vps_reg_main_y_color_noise_masking_en  (6)
#define VPS_REG_MAIN_Y_COLOR_NOISE_MASKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_y_color_noise_masking_en)
// h0070, bit: 7
/* Main window horizontal Y noise-masking enable*/
#define offset_of_vps_reg_main_y_noise_masking_en (0xe0)
#define mask_of_vps_reg_main_y_noise_masking_en   (0x80)
#define shift_of_vps_reg_main_y_noise_masking_en  (7)
#define VPS_REG_MAIN_Y_NOISE_MASKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_y_noise_masking_en)
// h0070, bit: 13
/* Main window horizontal C noise-masking gain (xxxx.xx)*/
#define offset_of_vps_reg_main_c_noise_mask_gain (0xe0)
#define mask_of_vps_reg_main_c_noise_mask_gain   (0x3f00)
#define shift_of_vps_reg_main_c_noise_mask_gain  (8)
#define VPS_REG_MAIN_C_NOISE_MASK_GAIN           (REG_VPS_BASE + offset_of_vps_reg_main_c_noise_mask_gain)
// h0070, bit: 14
/* Main window horizontal C noise-masking color adaptive enable*/
#define offset_of_vps_reg_main_c_color_noise_masking_en (0xe0)
#define mask_of_vps_reg_main_c_color_noise_masking_en   (0x4000)
#define shift_of_vps_reg_main_c_color_noise_masking_en  (14)
#define VPS_REG_MAIN_C_COLOR_NOISE_MASKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_c_color_noise_masking_en)
// h0070, bit: 15
/* Main window horizontal C noise-masking enable*/
#define offset_of_vps_reg_main_c_noise_masking_en (0xe0)
#define mask_of_vps_reg_main_c_noise_masking_en   (0x8000)
#define shift_of_vps_reg_main_c_noise_masking_en  (15)
#define VPS_REG_MAIN_C_NOISE_MASKING_EN           (REG_VPS_BASE + offset_of_vps_reg_main_c_noise_masking_en)
// h0071, bit: 3
/* Main window Y noise_masking max value threshold*/
#define offset_of_vps_reg_main_y_nm_max_thrd (0xe2)
#define mask_of_vps_reg_main_y_nm_max_thrd   (0xf)
#define shift_of_vps_reg_main_y_nm_max_thrd  (0)
#define VPS_REG_MAIN_Y_NM_MAX_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_y_nm_max_thrd)
#define REG_VPS_71_L                         (VPS_REG_MAIN_Y_NM_MAX_THRD)
// h0071, bit: 7
/* Main window Y noise_masking min value threshold*/
#define offset_of_vps_reg_main_y_nm_min_thrd (0xe2)
#define mask_of_vps_reg_main_y_nm_min_thrd   (0xf0)
#define shift_of_vps_reg_main_y_nm_min_thrd  (4)
#define VPS_REG_MAIN_Y_NM_MIN_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_y_nm_min_thrd)
// h0071, bit: 11
/* Main window C noise_masking max value threshold*/
#define offset_of_vps_reg_main_c_nm_max_thrd (0xe2)
#define mask_of_vps_reg_main_c_nm_max_thrd   (0xf00)
#define shift_of_vps_reg_main_c_nm_max_thrd  (8)
#define VPS_REG_MAIN_C_NM_MAX_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_c_nm_max_thrd)
// h0071, bit: 15
/* Main window C noise_masking min value threshold*/
#define offset_of_vps_reg_main_c_nm_min_thrd (0xe2)
#define mask_of_vps_reg_main_c_nm_min_thrd   (0xf000)
#define shift_of_vps_reg_main_c_nm_min_thrd  (12)
#define VPS_REG_MAIN_C_NM_MIN_THRD           (REG_VPS_BASE + offset_of_vps_reg_main_c_nm_min_thrd)
// h0072, bit: 1
/* Main window color noise_masking step*/
#define offset_of_vps_reg_main_color_nm_step (0xe4)
#define mask_of_vps_reg_main_color_nm_step   (0x3)
#define shift_of_vps_reg_main_color_nm_step  (0)
#define VPS_REG_MAIN_COLOR_NM_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_color_nm_step)
#define REG_VPS_72_L                         (VPS_REG_MAIN_COLOR_NM_STEP)
// h0072, bit: 3
/* reversed*/
#define offset_of_vps_reg_nm_reserved_2 (0xe4)
#define mask_of_vps_reg_nm_reserved_2   (0xc)
#define shift_of_vps_reg_nm_reserved_2  (2)
#define VPS_REG_NM_RESERVED_2           (REG_VPS_BASE + offset_of_vps_reg_nm_reserved_2)
// h0072, bit: 7
/* Flesh color adaptive noise masking strength (x.xxx)*/
#define offset_of_vps_reg_color_pk_win1_nm_entry_value (0xe4)
#define mask_of_vps_reg_color_pk_win1_nm_entry_value   (0xf0)
#define shift_of_vps_reg_color_pk_win1_nm_entry_value  (4)
#define VPS_REG_COLOR_PK_WIN1_NM_ENTRY_VALUE           (REG_VPS_BASE + offset_of_vps_reg_color_pk_win1_nm_entry_value)
// h0072, bit: 11
/* reversed*/
#define offset_of_vps_reg_nm_reserved_3 (0xe4)
#define mask_of_vps_reg_nm_reserved_3   (0xc00)
#define shift_of_vps_reg_nm_reserved_3  (10)
#define VPS_REG_NM_RESERVED_3           (REG_VPS_BASE + offset_of_vps_reg_nm_reserved_3)
// h0072, bit: 15
/* Blue color adaptive noise masking strength (x.xxx)*/
#define offset_of_vps_reg_color_pk_win2_nm_entry_value (0xe4)
#define mask_of_vps_reg_color_pk_win2_nm_entry_value   (0xf000)
#define shift_of_vps_reg_color_pk_win2_nm_entry_value  (12)
#define VPS_REG_COLOR_PK_WIN2_NM_ENTRY_VALUE           (REG_VPS_BASE + offset_of_vps_reg_color_pk_win2_nm_entry_value)
// h0073, bit: 0
/* As panel_de less than hde */
#define offset_of_vps_reg_hde_ref_panel_de_en (0xe6)
#define mask_of_vps_reg_hde_ref_panel_de_en   (0x1)
#define shift_of_vps_reg_hde_ref_panel_de_en  (0)
#define VPS_REG_HDE_REF_PANEL_DE_EN           (REG_VPS_BASE + offset_of_vps_reg_hde_ref_panel_de_en)
#define REG_VPS_73_L                          (VPS_REG_HDE_REF_PANEL_DE_EN)
// h0073, bit: 1
/* As pseudo hde enable */
#define offset_of_vps_reg_pseudo_hde_en (0xe6)
#define mask_of_vps_reg_pseudo_hde_en   (0x2)
#define shift_of_vps_reg_pseudo_hde_en  (1)
#define VPS_REG_PSEUDO_HDE_EN           (REG_VPS_BASE + offset_of_vps_reg_pseudo_hde_en)
// h0073, bit: 3
/* reversed*/
#define offset_of_vps_reg_reserved_top (0xe6)
#define mask_of_vps_reg_reserved_top   (0xc)
#define shift_of_vps_reg_reserved_top  (2)
#define VPS_REG_RESERVED_TOP           (REG_VPS_BASE + offset_of_vps_reg_reserved_top)
// h0073, bit: 15
/* reserved*/
#define offset_of_vps_reg_nm_reserved_1 (0xe6)
#define mask_of_vps_reg_nm_reserved_1   (0xff00)
#define shift_of_vps_reg_nm_reserved_1  (8)
#define VPS_REG_NM_RESERVED_1           (REG_VPS_BASE + offset_of_vps_reg_nm_reserved_1)
// h0074, bit: 0
/* Main window mosquito noise low y mode enable*/
#define offset_of_vps_reg_main_nm_low_y_en (0xe8)
#define mask_of_vps_reg_main_nm_low_y_en   (0x1)
#define shift_of_vps_reg_main_nm_low_y_en  (0)
#define VPS_REG_MAIN_NM_LOW_Y_EN           (REG_VPS_BASE + offset_of_vps_reg_main_nm_low_y_en)
#define REG_VPS_74_L                       (VPS_REG_MAIN_NM_LOW_Y_EN)
// h0074, bit: 3
/* reserved*/
#define offset_of_vps_reg_nm_reserved_4 (0xe8)
#define mask_of_vps_reg_nm_reserved_4   (0xe)
#define shift_of_vps_reg_nm_reserved_4  (1)
#define VPS_REG_NM_RESERVED_4           (REG_VPS_BASE + offset_of_vps_reg_nm_reserved_4)
// h0074, bit: 15
/* reserved*/
#define offset_of_vps_reg_nm_reserved_5 (0xe8)
#define mask_of_vps_reg_nm_reserved_5   (0xff00)
#define shift_of_vps_reg_nm_reserved_5  (8)
#define VPS_REG_NM_RESERVED_5           (REG_VPS_BASE + offset_of_vps_reg_nm_reserved_5)
// h0075, bit: 7
/* Main window  mosquito noise low y mode threshold*/
#define offset_of_vps_reg_main_nm_low_y_th (0xea)
#define mask_of_vps_reg_main_nm_low_y_th   (0xff)
#define shift_of_vps_reg_main_nm_low_y_th  (0)
#define VPS_REG_MAIN_NM_LOW_Y_TH           (REG_VPS_BASE + offset_of_vps_reg_main_nm_low_y_th)
#define REG_VPS_75_L                       (VPS_REG_MAIN_NM_LOW_Y_TH)
// h0076, bit: 5
/* Main window mosquito noise low y mode gain*/
#define offset_of_vps_reg_main_nm_low_y_gain (0xec)
#define mask_of_vps_reg_main_nm_low_y_gain   (0x3f)
#define shift_of_vps_reg_main_nm_low_y_gain  (0)
#define VPS_REG_MAIN_NM_LOW_Y_GAIN           (REG_VPS_BASE + offset_of_vps_reg_main_nm_low_y_gain)
#define REG_VPS_76_L                         (VPS_REG_MAIN_NM_LOW_Y_GAIN)
// h0076, bit: 9
/* Main window mosquito noise low y mode step*/
#define offset_of_vps_reg_main_nm_low_y_step (0xec)
#define mask_of_vps_reg_main_nm_low_y_step   (0x300)
#define shift_of_vps_reg_main_nm_low_y_step  (8)
#define VPS_REG_MAIN_NM_LOW_Y_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_nm_low_y_step)
// h0076, bit: 15
/* reserved*/
#define offset_of_vps_reg_nm_reserved_6 (0xec)
#define mask_of_vps_reg_nm_reserved_6   (0xfc00)
#define shift_of_vps_reg_nm_reserved_6  (10)
#define VPS_REG_NM_RESERVED_6           (REG_VPS_BASE + offset_of_vps_reg_nm_reserved_6)
#define REG_VPS_77_L                    (REG_VPS_BASE + 0xee)
// h0078, bit: 0
/* pseudo return to initial value by vclear enable*/
#define offset_of_vps_reg_pseudo_vclr_en (0xf0)
#define mask_of_vps_reg_pseudo_vclr_en   (0x1)
#define shift_of_vps_reg_pseudo_vclr_en  (0)
#define VPS_REG_PSEUDO_VCLR_EN           (REG_VPS_BASE + offset_of_vps_reg_pseudo_vclr_en)
#define REG_VPS_78_L                     (VPS_REG_PSEUDO_VCLR_EN)
// h0078, bit: 2
/* pseudo return to initial value frame numbers
#2'b00 : 1 frame initial
#2'b01 : 2 frame initial
#2'b10 : 4 frame initial
#2'b11 : 8 frame initial*/
#define offset_of_vps_reg_pseudo_vclr_no (0xf0)
#define mask_of_vps_reg_pseudo_vclr_no   (0x6)
#define shift_of_vps_reg_pseudo_vclr_no  (1)
#define VPS_REG_PSEUDO_VCLR_NO           (REG_VPS_BASE + offset_of_vps_reg_pseudo_vclr_no)
// h0079, bit: 3
/* Main window dering data low pass filter coefficient
# >=8 : lpf strong
# 1~7 : median
# 0 : no lpf*/
#define offset_of_vps_reg_main_dering_lpf_coef (0xf2)
#define mask_of_vps_reg_main_dering_lpf_coef   (0xf)
#define shift_of_vps_reg_main_dering_lpf_coef  (0)
#define VPS_REG_MAIN_DERING_LPF_COEF           (REG_VPS_BASE + offset_of_vps_reg_main_dering_lpf_coef)
#define REG_VPS_79_L                           (VPS_REG_MAIN_DERING_LPF_COEF)
#define REG_VPS_7A_L                           (REG_VPS_BASE + 0xf4)
// h007b, bit: 0
/* Main window vertical mosquito noise low y mode enable*/
#define offset_of_vps_reg_main_v_nm_low_y_en (0xf6)
#define mask_of_vps_reg_main_v_nm_low_y_en   (0x1)
#define shift_of_vps_reg_main_v_nm_low_y_en  (0)
#define VPS_REG_MAIN_V_NM_LOW_Y_EN           (REG_VPS_BASE + offset_of_vps_reg_main_v_nm_low_y_en)
#define REG_VPS_7B_L                         (VPS_REG_MAIN_V_NM_LOW_Y_EN)
// h007b, bit: 3
/* reserved*/
#define offset_of_vps_reg_pk_reserved_6 (0xf6)
#define mask_of_vps_reg_pk_reserved_6   (0xe)
#define shift_of_vps_reg_pk_reserved_6  (1)
#define VPS_REG_PK_RESERVED_6           (REG_VPS_BASE + offset_of_vps_reg_pk_reserved_6)
// h007b, bit: 15
/* reserved*/
#define offset_of_vps_reg_pk_reserved_7 (0xf6)
#define mask_of_vps_reg_pk_reserved_7   (0xff00)
#define shift_of_vps_reg_pk_reserved_7  (8)
#define VPS_REG_PK_RESERVED_7           (REG_VPS_BASE + offset_of_vps_reg_pk_reserved_7)
// h007c, bit: 7
/* Main window vertical mosquito noise low y mode threshold*/
#define offset_of_vps_reg_main_v_nm_low_y_th (0xf8)
#define mask_of_vps_reg_main_v_nm_low_y_th   (0xff)
#define shift_of_vps_reg_main_v_nm_low_y_th  (0)
#define VPS_REG_MAIN_V_NM_LOW_Y_TH           (REG_VPS_BASE + offset_of_vps_reg_main_v_nm_low_y_th)
#define REG_VPS_7C_L                         (VPS_REG_MAIN_V_NM_LOW_Y_TH)
// h007d, bit: 5
/* Main window vertical mosquito noise low y mode gain*/
#define offset_of_vps_reg_main_v_nm_low_y_gain (0xfa)
#define mask_of_vps_reg_main_v_nm_low_y_gain   (0x3f)
#define shift_of_vps_reg_main_v_nm_low_y_gain  (0)
#define VPS_REG_MAIN_V_NM_LOW_Y_GAIN           (REG_VPS_BASE + offset_of_vps_reg_main_v_nm_low_y_gain)
#define REG_VPS_7D_L                           (VPS_REG_MAIN_V_NM_LOW_Y_GAIN)
// h007d, bit: 9
/* Main window vertical mosquito noise low y mode step*/
#define offset_of_vps_reg_main_v_nm_low_y_step (0xfa)
#define mask_of_vps_reg_main_v_nm_low_y_step   (0x300)
#define shift_of_vps_reg_main_v_nm_low_y_step  (8)
#define VPS_REG_MAIN_V_NM_LOW_Y_STEP           (REG_VPS_BASE + offset_of_vps_reg_main_v_nm_low_y_step)
// h007d, bit: 15
/* reserved*/
#define offset_of_vps_reg_pk_reserved_8 (0xfa)
#define mask_of_vps_reg_pk_reserved_8   (0xfc00)
#define shift_of_vps_reg_pk_reserved_8  (10)
#define VPS_REG_PK_RESERVED_8           (REG_VPS_BASE + offset_of_vps_reg_pk_reserved_8)
#define REG_VPS_7E_L                    (REG_VPS_BASE + 0xfc)
#define REG_VPS_7F_L                    (REG_VPS_BASE + 0xfe)
#define REG_ACE2_2_00_L                 (REG_ACE2_2_BASE + 0x0)
#define REG_ACE2_2_01_L                 (REG_ACE2_2_BASE + 0x2)
#define REG_ACE2_2_02_L                 (REG_ACE2_2_BASE + 0x4)
#define REG_ACE2_2_03_L                 (REG_ACE2_2_BASE + 0x6)
#define REG_ACE2_2_04_L                 (REG_ACE2_2_BASE + 0x8)
#define REG_ACE2_2_05_L                 (REG_ACE2_2_BASE + 0xa)
#define REG_ACE2_2_06_L                 (REG_ACE2_2_BASE + 0xc)
#define REG_ACE2_2_07_L                 (REG_ACE2_2_BASE + 0xe)
#define REG_ACE2_2_08_L                 (REG_ACE2_2_BASE + 0x10)
#define REG_ACE2_2_09_L                 (REG_ACE2_2_BASE + 0x12)
#define REG_ACE2_2_0A_L                 (REG_ACE2_2_BASE + 0x14)
#define REG_ACE2_2_0B_L                 (REG_ACE2_2_BASE + 0x16)
#define REG_ACE2_2_0C_L                 (REG_ACE2_2_BASE + 0x18)
#define REG_ACE2_2_0D_L                 (REG_ACE2_2_BASE + 0x1a)
#define REG_ACE2_2_0E_L                 (REG_ACE2_2_BASE + 0x1c)
#define REG_ACE2_2_0F_L                 (REG_ACE2_2_BASE + 0x1e)
// h0010, bit: 3
/* IBC coring threshold*/
#define offset_of_ace2_2_reg_ibc_coring_thrd (0x20)
#define mask_of_ace2_2_reg_ibc_coring_thrd   (0xf)
#define shift_of_ace2_2_reg_ibc_coring_thrd  (0)
#define ACE2_2_REG_IBC_CORING_THRD           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_ibc_coring_thrd)
#define REG_ACE2_2_10_L                      (ACE2_2_REG_IBC_CORING_THRD)
// h0010, bit: 4
/* IBC dither bit enable*/
#define offset_of_ace2_2_reg_ibc_dither_en (0x20)
#define mask_of_ace2_2_reg_ibc_dither_en   (0x10)
#define shift_of_ace2_2_reg_ibc_dither_en  (4)
#define ACE2_2_REG_IBC_DITHER_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_ibc_dither_en)
// h0010, bit: 5
/* IBC Y adjust LPF enable*/
#define offset_of_ace2_2_reg_ibc_y_adjust_lpf_en (0x20)
#define mask_of_ace2_2_reg_ibc_y_adjust_lpf_en   (0x20)
#define shift_of_ace2_2_reg_ibc_y_adjust_lpf_en  (5)
#define ACE2_2_REG_IBC_Y_ADJUST_LPF_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_ibc_y_adjust_lpf_en)
// h0010, bit: 7
/* Main window IBC enable*/
#define offset_of_ace2_2_reg_main_ibc_en (0x20)
#define mask_of_ace2_2_reg_main_ibc_en   (0x80)
#define shift_of_ace2_2_reg_main_ibc_en  (7)
#define ACE2_2_REG_MAIN_IBC_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ibc_en)
// h0011, bit: 5
/* Main window IBC Y adjustment of color0*/
#define offset_of_ace2_2_reg_main_ycolor0_adj (0x22)
#define mask_of_ace2_2_reg_main_ycolor0_adj   (0x3f)
#define shift_of_ace2_2_reg_main_ycolor0_adj  (0)
#define ACE2_2_REG_MAIN_YCOLOR0_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor0_adj)
#define REG_ACE2_2_11_L                       (ACE2_2_REG_MAIN_YCOLOR0_ADJ)
// h0011, bit: 13
/* Main window IBC Y adjustment of color1*/
#define offset_of_ace2_2_reg_main_ycolor1_adj (0x22)
#define mask_of_ace2_2_reg_main_ycolor1_adj   (0x3f00)
#define shift_of_ace2_2_reg_main_ycolor1_adj  (8)
#define ACE2_2_REG_MAIN_YCOLOR1_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor1_adj)
// h0012, bit: 5
/* Main window IBC Y adjustment of color2*/
#define offset_of_ace2_2_reg_main_ycolor2_adj (0x24)
#define mask_of_ace2_2_reg_main_ycolor2_adj   (0x3f)
#define shift_of_ace2_2_reg_main_ycolor2_adj  (0)
#define ACE2_2_REG_MAIN_YCOLOR2_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor2_adj)
#define REG_ACE2_2_12_L                       (ACE2_2_REG_MAIN_YCOLOR2_ADJ)
// h0012, bit: 13
/* Main window IBC Y adjustment of color3*/
#define offset_of_ace2_2_reg_main_ycolor3_adj (0x24)
#define mask_of_ace2_2_reg_main_ycolor3_adj   (0x3f00)
#define shift_of_ace2_2_reg_main_ycolor3_adj  (8)
#define ACE2_2_REG_MAIN_YCOLOR3_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor3_adj)
// h0013, bit: 5
/* Main window IBC Y adjustment of color4*/
#define offset_of_ace2_2_reg_main_ycolor4_adj (0x26)
#define mask_of_ace2_2_reg_main_ycolor4_adj   (0x3f)
#define shift_of_ace2_2_reg_main_ycolor4_adj  (0)
#define ACE2_2_REG_MAIN_YCOLOR4_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor4_adj)
#define REG_ACE2_2_13_L                       (ACE2_2_REG_MAIN_YCOLOR4_ADJ)
// h0013, bit: 13
/* Main window IBC Y adjustment of color5*/
#define offset_of_ace2_2_reg_main_ycolor5_adj (0x26)
#define mask_of_ace2_2_reg_main_ycolor5_adj   (0x3f00)
#define shift_of_ace2_2_reg_main_ycolor5_adj  (8)
#define ACE2_2_REG_MAIN_YCOLOR5_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor5_adj)
// h0014, bit: 5
/* Main window IBC Y adjustment of color6*/
#define offset_of_ace2_2_reg_main_ycolor6_adj (0x28)
#define mask_of_ace2_2_reg_main_ycolor6_adj   (0x3f)
#define shift_of_ace2_2_reg_main_ycolor6_adj  (0)
#define ACE2_2_REG_MAIN_YCOLOR6_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor6_adj)
#define REG_ACE2_2_14_L                       (ACE2_2_REG_MAIN_YCOLOR6_ADJ)
// h0014, bit: 13
/* Main window IBC Y adjustment of color7*/
#define offset_of_ace2_2_reg_main_ycolor7_adj (0x28)
#define mask_of_ace2_2_reg_main_ycolor7_adj   (0x3f00)
#define shift_of_ace2_2_reg_main_ycolor7_adj  (8)
#define ACE2_2_REG_MAIN_YCOLOR7_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor7_adj)
// h0015, bit: 5
/* Main window IBC Y adjustment of color8*/
#define offset_of_ace2_2_reg_main_ycolor8_adj (0x2a)
#define mask_of_ace2_2_reg_main_ycolor8_adj   (0x3f)
#define shift_of_ace2_2_reg_main_ycolor8_adj  (0)
#define ACE2_2_REG_MAIN_YCOLOR8_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor8_adj)
#define REG_ACE2_2_15_L                       (ACE2_2_REG_MAIN_YCOLOR8_ADJ)
// h0015, bit: 13
/* Main window IBC Y adjustment of color9*/
#define offset_of_ace2_2_reg_main_ycolor9_adj (0x2a)
#define mask_of_ace2_2_reg_main_ycolor9_adj   (0x3f00)
#define shift_of_ace2_2_reg_main_ycolor9_adj  (8)
#define ACE2_2_REG_MAIN_YCOLOR9_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor9_adj)
// h0016, bit: 5
/* Main window IBC Y adjustment of color10*/
#define offset_of_ace2_2_reg_main_ycolor10_adj (0x2c)
#define mask_of_ace2_2_reg_main_ycolor10_adj   (0x3f)
#define shift_of_ace2_2_reg_main_ycolor10_adj  (0)
#define ACE2_2_REG_MAIN_YCOLOR10_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor10_adj)
#define REG_ACE2_2_16_L                        (ACE2_2_REG_MAIN_YCOLOR10_ADJ)
// h0016, bit: 13
/* Main window IBC Y adjustment of color11*/
#define offset_of_ace2_2_reg_main_ycolor11_adj (0x2c)
#define mask_of_ace2_2_reg_main_ycolor11_adj   (0x3f00)
#define shift_of_ace2_2_reg_main_ycolor11_adj  (8)
#define ACE2_2_REG_MAIN_YCOLOR11_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor11_adj)
// h0017, bit: 5
/* Main window IBC Y adjustment of color12*/
#define offset_of_ace2_2_reg_main_ycolor12_adj (0x2e)
#define mask_of_ace2_2_reg_main_ycolor12_adj   (0x3f)
#define shift_of_ace2_2_reg_main_ycolor12_adj  (0)
#define ACE2_2_REG_MAIN_YCOLOR12_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor12_adj)
#define REG_ACE2_2_17_L                        (ACE2_2_REG_MAIN_YCOLOR12_ADJ)
// h0017, bit: 13
/* Main window IBC Y adjustment of color13*/
#define offset_of_ace2_2_reg_main_ycolor13_adj (0x2e)
#define mask_of_ace2_2_reg_main_ycolor13_adj   (0x3f00)
#define shift_of_ace2_2_reg_main_ycolor13_adj  (8)
#define ACE2_2_REG_MAIN_YCOLOR13_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor13_adj)
// h0018, bit: 5
/* Main window IBC Y adjustment of color14*/
#define offset_of_ace2_2_reg_main_ycolor14_adj (0x30)
#define mask_of_ace2_2_reg_main_ycolor14_adj   (0x3f)
#define shift_of_ace2_2_reg_main_ycolor14_adj  (0)
#define ACE2_2_REG_MAIN_YCOLOR14_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor14_adj)
#define REG_ACE2_2_18_L                        (ACE2_2_REG_MAIN_YCOLOR14_ADJ)
// h0018, bit: 13
/* Main window IBC Y adjustment of color15*/
#define offset_of_ace2_2_reg_main_ycolor15_adj (0x30)
#define mask_of_ace2_2_reg_main_ycolor15_adj   (0x3f00)
#define shift_of_ace2_2_reg_main_ycolor15_adj  (8)
#define ACE2_2_REG_MAIN_YCOLOR15_ADJ           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ycolor15_adj)
#define REG_ACE2_2_19_L                        (REG_ACE2_2_BASE + 0x32)
#define REG_ACE2_2_1A_L                        (REG_ACE2_2_BASE + 0x34)
#define REG_ACE2_2_1B_L                        (REG_ACE2_2_BASE + 0x36)
#define REG_ACE2_2_1C_L                        (REG_ACE2_2_BASE + 0x38)
#define REG_ACE2_2_1D_L                        (REG_ACE2_2_BASE + 0x3a)
#define REG_ACE2_2_1E_L                        (REG_ACE2_2_BASE + 0x3c)
#define REG_ACE2_2_1F_L                        (REG_ACE2_2_BASE + 0x3e)
#define REG_ACE2_2_20_L                        (REG_ACE2_2_BASE + 0x40)
// h0021, bit: 11
/* IBC c wieght min limlit*/
#define offset_of_ace2_2_reg_weight_c_min_limit (0x42)
#define mask_of_ace2_2_reg_weight_c_min_limit   (0xf00)
#define shift_of_ace2_2_reg_weight_c_min_limit  (8)
#define ACE2_2_REG_WEIGHT_C_MIN_LIMIT           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_weight_c_min_limit)
#define REG_ACE2_2_21_L                         (ACE2_2_REG_WEIGHT_C_MIN_LIMIT)
// h0021, bit: 15
/* IBC y wieght min limlit*/
#define offset_of_ace2_2_reg_weight_y_min_limit (0x42)
#define mask_of_ace2_2_reg_weight_y_min_limit   (0xf000)
#define shift_of_ace2_2_reg_weight_y_min_limit  (12)
#define ACE2_2_REG_WEIGHT_Y_MIN_LIMIT           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_weight_y_min_limit)
#define REG_ACE2_2_22_L                         (REG_ACE2_2_BASE + 0x44)
#define REG_ACE2_2_23_L                         (REG_ACE2_2_BASE + 0x46)
// h0024, bit: 5
/* IHC dither bit enable*/
#define offset_of_ace2_2_reg_ihc_dither_en (0x48)
#define mask_of_ace2_2_reg_ihc_dither_en   (0x20)
#define shift_of_ace2_2_reg_ihc_dither_en  (5)
#define ACE2_2_REG_IHC_DITHER_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_ihc_dither_en)
#define REG_ACE2_2_24_L                    (ACE2_2_REG_IHC_DITHER_EN)
// h0024, bit: 7
/* Main window IHC enable*/
#define offset_of_ace2_2_reg_main_ihc_en (0x48)
#define mask_of_ace2_2_reg_main_ihc_en   (0x80)
#define shift_of_ace2_2_reg_main_ihc_en  (7)
#define ACE2_2_REG_MAIN_IHC_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ihc_en)
// h0024, bit: 15
/* reserved*/
#define offset_of_ace2_2_reg_ihc_reserved_2 (0x48)
#define mask_of_ace2_2_reg_ihc_reserved_2   (0xfe00)
#define shift_of_ace2_2_reg_ihc_reserved_2  (9)
#define ACE2_2_REG_IHC_RESERVED_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_ihc_reserved_2)
// h0025, bit: 6
/* Main window IHC hue adjustment of color0*/
#define offset_of_ace2_2_reg_main_hue_user_color0 (0x4a)
#define mask_of_ace2_2_reg_main_hue_user_color0   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color0  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color0)
#define REG_ACE2_2_25_L                           (ACE2_2_REG_MAIN_HUE_USER_COLOR0)
// h0025, bit: 14
/* Main window IHC hue adjustment of color1 */
#define offset_of_ace2_2_reg_main_hue_user_color1 (0x4a)
#define mask_of_ace2_2_reg_main_hue_user_color1   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color1  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color1)
// h0026, bit: 6
/* Main window IHC hue adjustment of color2 */
#define offset_of_ace2_2_reg_main_hue_user_color2 (0x4c)
#define mask_of_ace2_2_reg_main_hue_user_color2   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color2  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color2)
#define REG_ACE2_2_26_L                           (ACE2_2_REG_MAIN_HUE_USER_COLOR2)
// h0026, bit: 14
/* Main window IHC hue adjustment of color3 */
#define offset_of_ace2_2_reg_main_hue_user_color3 (0x4c)
#define mask_of_ace2_2_reg_main_hue_user_color3   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color3  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR3           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color3)
// h0027, bit: 6
/* Main window IHC hue adjustment of color4 */
#define offset_of_ace2_2_reg_main_hue_user_color4 (0x4e)
#define mask_of_ace2_2_reg_main_hue_user_color4   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color4  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR4           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color4)
#define REG_ACE2_2_27_L                           (ACE2_2_REG_MAIN_HUE_USER_COLOR4)
// h0027, bit: 14
/* Main window IHC hue adjustment of color5 */
#define offset_of_ace2_2_reg_main_hue_user_color5 (0x4e)
#define mask_of_ace2_2_reg_main_hue_user_color5   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color5  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR5           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color5)
// h0028, bit: 6
/* Main window IHC hue adjustment of color6 */
#define offset_of_ace2_2_reg_main_hue_user_color6 (0x50)
#define mask_of_ace2_2_reg_main_hue_user_color6   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color6  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR6           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color6)
#define REG_ACE2_2_28_L                           (ACE2_2_REG_MAIN_HUE_USER_COLOR6)
// h0028, bit: 14
/* Main window IHC hue adjustment of color7*/
#define offset_of_ace2_2_reg_main_hue_user_color7 (0x50)
#define mask_of_ace2_2_reg_main_hue_user_color7   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color7  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR7           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color7)
// h0029, bit: 6
/* Main window IHC hue adjustment of color8*/
#define offset_of_ace2_2_reg_main_hue_user_color8 (0x52)
#define mask_of_ace2_2_reg_main_hue_user_color8   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color8  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR8           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color8)
#define REG_ACE2_2_29_L                           (ACE2_2_REG_MAIN_HUE_USER_COLOR8)
// h0029, bit: 14
/* Main window IHC hue adjustment of color9*/
#define offset_of_ace2_2_reg_main_hue_user_color9 (0x52)
#define mask_of_ace2_2_reg_main_hue_user_color9   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color9  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR9           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color9)
// h002a, bit: 6
/* Main window IHC hue adjustment of color10 */
#define offset_of_ace2_2_reg_main_hue_user_color10 (0x54)
#define mask_of_ace2_2_reg_main_hue_user_color10   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color10  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR10           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color10)
#define REG_ACE2_2_2A_L                            (ACE2_2_REG_MAIN_HUE_USER_COLOR10)
// h002a, bit: 14
/* Main window IHC hue adjustment of color11 */
#define offset_of_ace2_2_reg_main_hue_user_color11 (0x54)
#define mask_of_ace2_2_reg_main_hue_user_color11   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color11  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR11           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color11)
// h002b, bit: 6
/* Main window IHC hue adjustment of color12 */
#define offset_of_ace2_2_reg_main_hue_user_color12 (0x56)
#define mask_of_ace2_2_reg_main_hue_user_color12   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color12  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR12           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color12)
#define REG_ACE2_2_2B_L                            (ACE2_2_REG_MAIN_HUE_USER_COLOR12)
// h002b, bit: 14
/* Main window IHC hue adjustment of color13 */
#define offset_of_ace2_2_reg_main_hue_user_color13 (0x56)
#define mask_of_ace2_2_reg_main_hue_user_color13   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color13  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR13           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color13)
// h002c, bit: 6
/* Main window IHC hue adjustment of color14 */
#define offset_of_ace2_2_reg_main_hue_user_color14 (0x58)
#define mask_of_ace2_2_reg_main_hue_user_color14   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color14  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR14           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color14)
#define REG_ACE2_2_2C_L                            (ACE2_2_REG_MAIN_HUE_USER_COLOR14)
// h002c, bit: 14
/* Main window IHC hue adjustment of color15 */
#define offset_of_ace2_2_reg_main_hue_user_color15 (0x58)
#define mask_of_ace2_2_reg_main_hue_user_color15   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color15  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR15           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color15)
#define REG_ACE2_2_2D_L                            (REG_ACE2_2_BASE + 0x5a)
#define REG_ACE2_2_2E_L                            (REG_ACE2_2_BASE + 0x5c)
#define REG_ACE2_2_2F_L                            (REG_ACE2_2_BASE + 0x5e)
#define REG_ACE2_2_30_L                            (REG_ACE2_2_BASE + 0x60)
#define REG_ACE2_2_31_L                            (REG_ACE2_2_BASE + 0x62)
#define REG_ACE2_2_32_L                            (REG_ACE2_2_BASE + 0x64)
#define REG_ACE2_2_33_L                            (REG_ACE2_2_BASE + 0x66)
#define REG_ACE2_2_34_L                            (REG_ACE2_2_BASE + 0x68)
#define REG_ACE2_2_35_L                            (REG_ACE2_2_BASE + 0x6a)
// h0036, bit: 7
/* Main window IHC , ICC  adaptive Y in section 0*/
#define offset_of_ace2_2_reg_main_ihc_icc_y_0 (0x6c)
#define mask_of_ace2_2_reg_main_ihc_icc_y_0   (0xff)
#define shift_of_ace2_2_reg_main_ihc_icc_y_0  (0)
#define ACE2_2_REG_MAIN_IHC_ICC_Y_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ihc_icc_y_0)
#define REG_ACE2_2_36_L                       (ACE2_2_REG_MAIN_IHC_ICC_Y_0)
// h0036, bit: 15
/* Main window IHC , ICC  adaptive Y in section 1*/
#define offset_of_ace2_2_reg_main_ihc_icc_y_1 (0x6c)
#define mask_of_ace2_2_reg_main_ihc_icc_y_1   (0xff00)
#define shift_of_ace2_2_reg_main_ihc_icc_y_1  (8)
#define ACE2_2_REG_MAIN_IHC_ICC_Y_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ihc_icc_y_1)
// h0037, bit: 7
/* Main window IHC , ICC  adaptive Y in section 2*/
#define offset_of_ace2_2_reg_main_ihc_icc_y_2 (0x6e)
#define mask_of_ace2_2_reg_main_ihc_icc_y_2   (0xff)
#define shift_of_ace2_2_reg_main_ihc_icc_y_2  (0)
#define ACE2_2_REG_MAIN_IHC_ICC_Y_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ihc_icc_y_2)
#define REG_ACE2_2_37_L                       (ACE2_2_REG_MAIN_IHC_ICC_Y_2)
// h0037, bit: 15
/* Main window IHC , ICC  adaptive Y in section 3*/
#define offset_of_ace2_2_reg_main_ihc_icc_y_3 (0x6e)
#define mask_of_ace2_2_reg_main_ihc_icc_y_3   (0xff00)
#define shift_of_ace2_2_reg_main_ihc_icc_y_3  (8)
#define ACE2_2_REG_MAIN_IHC_ICC_Y_3           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ihc_icc_y_3)
// h0038, bit: 6
/* Main window IHC hue adjustment of color0 in section 0 */
#define offset_of_ace2_2_reg_main_hue_user_color0_0 (0x70)
#define mask_of_ace2_2_reg_main_hue_user_color0_0   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color0_0  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR0_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color0_0)
#define REG_ACE2_2_38_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR0_0)
// h0038, bit: 14
/* Main window IHC hue adjustment of color1 in section 0 */
#define offset_of_ace2_2_reg_main_hue_user_color1_0 (0x70)
#define mask_of_ace2_2_reg_main_hue_user_color1_0   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color1_0  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR1_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color1_0)
// h0039, bit: 6
/* Main window IHC hue adjustment of color2 in section 0 */
#define offset_of_ace2_2_reg_main_hue_user_color2_0 (0x72)
#define mask_of_ace2_2_reg_main_hue_user_color2_0   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color2_0  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR2_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color2_0)
#define REG_ACE2_2_39_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR2_0)
// h0039, bit: 14
/* Main window IHC hue adjustment of color3 in section 0 */
#define offset_of_ace2_2_reg_main_hue_user_color3_0 (0x72)
#define mask_of_ace2_2_reg_main_hue_user_color3_0   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color3_0  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR3_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color3_0)
// h003a, bit: 6
/* Main window IHC hue adjustment of color4 in section 0 */
#define offset_of_ace2_2_reg_main_hue_user_color4_0 (0x74)
#define mask_of_ace2_2_reg_main_hue_user_color4_0   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color4_0  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR4_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color4_0)
#define REG_ACE2_2_3A_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR4_0)
// h003a, bit: 14
/* Main window IHC hue adjustment of color5 in section 0 */
#define offset_of_ace2_2_reg_main_hue_user_color5_0 (0x74)
#define mask_of_ace2_2_reg_main_hue_user_color5_0   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color5_0  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR5_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color5_0)
// h003b, bit: 6
/* Main window IHC hue adjustment of color6 in section 0 */
#define offset_of_ace2_2_reg_main_hue_user_color6_0 (0x76)
#define mask_of_ace2_2_reg_main_hue_user_color6_0   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color6_0  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR6_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color6_0)
#define REG_ACE2_2_3B_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR6_0)
// h003b, bit: 14
/* Main window IHC hue adjustment of color7 in section 0*/
#define offset_of_ace2_2_reg_main_hue_user_color7_0 (0x76)
#define mask_of_ace2_2_reg_main_hue_user_color7_0   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color7_0  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR7_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color7_0)
// h003c, bit: 6
/* Main window IHC hue adjustment of color8 in section 0 */
#define offset_of_ace2_2_reg_main_hue_user_color8_0 (0x78)
#define mask_of_ace2_2_reg_main_hue_user_color8_0   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color8_0  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR8_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color8_0)
#define REG_ACE2_2_3C_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR8_0)
// h003c, bit: 14
/* Main window IHC hue adjustment of color9 in section 0*/
#define offset_of_ace2_2_reg_main_hue_user_color9_0 (0x78)
#define mask_of_ace2_2_reg_main_hue_user_color9_0   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color9_0  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR9_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color9_0)
// h003d, bit: 6
/* Main window IHC hue adjustment of color10 in section 0*/
#define offset_of_ace2_2_reg_main_hue_user_color10_0 (0x7a)
#define mask_of_ace2_2_reg_main_hue_user_color10_0   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color10_0  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR10_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color10_0)
#define REG_ACE2_2_3D_L                              (ACE2_2_REG_MAIN_HUE_USER_COLOR10_0)
// h003d, bit: 14
/* Main window IHC hue adjustment of color11 in section 0*/
#define offset_of_ace2_2_reg_main_hue_user_color11_0 (0x7a)
#define mask_of_ace2_2_reg_main_hue_user_color11_0   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color11_0  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR11_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color11_0)
// h003e, bit: 6
/* Main window IHC hue adjustment of color12 in section 0 */
#define offset_of_ace2_2_reg_main_hue_user_color12_0 (0x7c)
#define mask_of_ace2_2_reg_main_hue_user_color12_0   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color12_0  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR12_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color12_0)
#define REG_ACE2_2_3E_L                              (ACE2_2_REG_MAIN_HUE_USER_COLOR12_0)
// h003e, bit: 14
/* Main window IHC hue adjustment of color13 in section 0 */
#define offset_of_ace2_2_reg_main_hue_user_color13_0 (0x7c)
#define mask_of_ace2_2_reg_main_hue_user_color13_0   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color13_0  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR13_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color13_0)
// h003f, bit: 6
/* Main window IHC hue adjustment of color14 in section 0 */
#define offset_of_ace2_2_reg_main_hue_user_color14_0 (0x7e)
#define mask_of_ace2_2_reg_main_hue_user_color14_0   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color14_0  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR14_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color14_0)
#define REG_ACE2_2_3F_L                              (ACE2_2_REG_MAIN_HUE_USER_COLOR14_0)
// h003f, bit: 14
/* Main window IHC hue adjustment of color15 in section 0  */
#define offset_of_ace2_2_reg_main_hue_user_color15_0 (0x7e)
#define mask_of_ace2_2_reg_main_hue_user_color15_0   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color15_0  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR15_0           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color15_0)
// h0040, bit: 6
/* Main window IHC hue adjustment of color0 in section 1 */
#define offset_of_ace2_2_reg_main_hue_user_color0_1 (0x80)
#define mask_of_ace2_2_reg_main_hue_user_color0_1   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color0_1  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR0_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color0_1)
#define REG_ACE2_2_40_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR0_1)
// h0040, bit: 14
/* Main window IHC hue adjustment of color1 in section 1 */
#define offset_of_ace2_2_reg_main_hue_user_color1_1 (0x80)
#define mask_of_ace2_2_reg_main_hue_user_color1_1   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color1_1  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR1_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color1_1)
// h0041, bit: 6
/* Main window IHC hue adjustment of color2 in section 1 */
#define offset_of_ace2_2_reg_main_hue_user_color2_1 (0x82)
#define mask_of_ace2_2_reg_main_hue_user_color2_1   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color2_1  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR2_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color2_1)
#define REG_ACE2_2_41_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR2_1)
// h0041, bit: 14
/* Main window IHC hue adjustment of color3 in section 1 */
#define offset_of_ace2_2_reg_main_hue_user_color3_1 (0x82)
#define mask_of_ace2_2_reg_main_hue_user_color3_1   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color3_1  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR3_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color3_1)
// h0042, bit: 6
/* Main window IHC hue adjustment of color4 in section 1 */
#define offset_of_ace2_2_reg_main_hue_user_color4_1 (0x84)
#define mask_of_ace2_2_reg_main_hue_user_color4_1   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color4_1  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR4_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color4_1)
#define REG_ACE2_2_42_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR4_1)
// h0042, bit: 14
/* Main window IHC hue adjustment of color5 in section 1 */
#define offset_of_ace2_2_reg_main_hue_user_color5_1 (0x84)
#define mask_of_ace2_2_reg_main_hue_user_color5_1   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color5_1  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR5_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color5_1)
// h0043, bit: 6
/* Main window IHC hue adjustment of color6 in section 1 */
#define offset_of_ace2_2_reg_main_hue_user_color6_1 (0x86)
#define mask_of_ace2_2_reg_main_hue_user_color6_1   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color6_1  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR6_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color6_1)
#define REG_ACE2_2_43_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR6_1)
// h0043, bit: 14
/* Main window IHC hue adjustment of color7 in section 1*/
#define offset_of_ace2_2_reg_main_hue_user_color7_1 (0x86)
#define mask_of_ace2_2_reg_main_hue_user_color7_1   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color7_1  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR7_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color7_1)
// h0044, bit: 6
/* Main window IHC hue adjustment of color8 in section 1 */
#define offset_of_ace2_2_reg_main_hue_user_color8_1 (0x88)
#define mask_of_ace2_2_reg_main_hue_user_color8_1   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color8_1  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR8_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color8_1)
#define REG_ACE2_2_44_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR8_1)
// h0044, bit: 14
/* Main window IHC hue adjustment of color9 in section 1*/
#define offset_of_ace2_2_reg_main_hue_user_color9_1 (0x88)
#define mask_of_ace2_2_reg_main_hue_user_color9_1   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color9_1  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR9_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color9_1)
// h0045, bit: 6
/* Main window IHC hue adjustment of color10 in section 1*/
#define offset_of_ace2_2_reg_main_hue_user_color10_1 (0x8a)
#define mask_of_ace2_2_reg_main_hue_user_color10_1   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color10_1  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR10_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color10_1)
#define REG_ACE2_2_45_L                              (ACE2_2_REG_MAIN_HUE_USER_COLOR10_1)
// h0045, bit: 14
/* Main window IHC hue adjustment of color11 in section 1*/
#define offset_of_ace2_2_reg_main_hue_user_color11_1 (0x8a)
#define mask_of_ace2_2_reg_main_hue_user_color11_1   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color11_1  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR11_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color11_1)
// h0046, bit: 6
/* Main window IHC hue adjustment of color12 in section 1 */
#define offset_of_ace2_2_reg_main_hue_user_color12_1 (0x8c)
#define mask_of_ace2_2_reg_main_hue_user_color12_1   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color12_1  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR12_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color12_1)
#define REG_ACE2_2_46_L                              (ACE2_2_REG_MAIN_HUE_USER_COLOR12_1)
// h0046, bit: 14
/* Main window IHC hue adjustment of color13 in section 1 */
#define offset_of_ace2_2_reg_main_hue_user_color13_1 (0x8c)
#define mask_of_ace2_2_reg_main_hue_user_color13_1   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color13_1  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR13_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color13_1)
// h0047, bit: 6
/* Main window IHC hue adjustment of color14 in section 1 */
#define offset_of_ace2_2_reg_main_hue_user_color14_1 (0x8e)
#define mask_of_ace2_2_reg_main_hue_user_color14_1   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color14_1  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR14_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color14_1)
#define REG_ACE2_2_47_L                              (ACE2_2_REG_MAIN_HUE_USER_COLOR14_1)
// h0047, bit: 14
/* Main window IHC hue adjustment of color15 in section 1  */
#define offset_of_ace2_2_reg_main_hue_user_color15_1 (0x8e)
#define mask_of_ace2_2_reg_main_hue_user_color15_1   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color15_1  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR15_1           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color15_1)
// h0048, bit: 6
/* Main window IHC hue adjustment of color0 in section 2 */
#define offset_of_ace2_2_reg_main_hue_user_color0_2 (0x90)
#define mask_of_ace2_2_reg_main_hue_user_color0_2   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color0_2  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR0_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color0_2)
#define REG_ACE2_2_48_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR0_2)
// h0048, bit: 14
/* Main window IHC hue adjustment of color1 in section 2 */
#define offset_of_ace2_2_reg_main_hue_user_color1_2 (0x90)
#define mask_of_ace2_2_reg_main_hue_user_color1_2   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color1_2  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR1_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color1_2)
// h0049, bit: 6
/* Main window IHC hue adjustment of color2 in section 2 */
#define offset_of_ace2_2_reg_main_hue_user_color2_2 (0x92)
#define mask_of_ace2_2_reg_main_hue_user_color2_2   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color2_2  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR2_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color2_2)
#define REG_ACE2_2_49_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR2_2)
// h0049, bit: 14
/* Main window IHC hue adjustment of color3 in section 2 */
#define offset_of_ace2_2_reg_main_hue_user_color3_2 (0x92)
#define mask_of_ace2_2_reg_main_hue_user_color3_2   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color3_2  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR3_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color3_2)
// h004a, bit: 6
/* Main window IHC hue adjustment of color4 in section 2 */
#define offset_of_ace2_2_reg_main_hue_user_color4_2 (0x94)
#define mask_of_ace2_2_reg_main_hue_user_color4_2   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color4_2  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR4_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color4_2)
#define REG_ACE2_2_4A_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR4_2)
// h004a, bit: 14
/* Main window IHC hue adjustment of color5 in section 2 */
#define offset_of_ace2_2_reg_main_hue_user_color5_2 (0x94)
#define mask_of_ace2_2_reg_main_hue_user_color5_2   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color5_2  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR5_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color5_2)
// h004b, bit: 6
/* Main window IHC hue adjustment of color6 in section 2 */
#define offset_of_ace2_2_reg_main_hue_user_color6_2 (0x96)
#define mask_of_ace2_2_reg_main_hue_user_color6_2   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color6_2  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR6_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color6_2)
#define REG_ACE2_2_4B_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR6_2)
// h004b, bit: 14
/* Main window IHC hue adjustment of color7 in section 2*/
#define offset_of_ace2_2_reg_main_hue_user_color7_2 (0x96)
#define mask_of_ace2_2_reg_main_hue_user_color7_2   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color7_2  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR7_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color7_2)
// h004c, bit: 6
/* Main window IHC hue adjustment of color8 in section 2 */
#define offset_of_ace2_2_reg_main_hue_user_color8_2 (0x98)
#define mask_of_ace2_2_reg_main_hue_user_color8_2   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color8_2  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR8_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color8_2)
#define REG_ACE2_2_4C_L                             (ACE2_2_REG_MAIN_HUE_USER_COLOR8_2)
// h004c, bit: 14
/* Main window IHC hue adjustment of color9 in section 2*/
#define offset_of_ace2_2_reg_main_hue_user_color9_2 (0x98)
#define mask_of_ace2_2_reg_main_hue_user_color9_2   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color9_2  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR9_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color9_2)
// h004d, bit: 6
/* Main window IHC hue adjustment of color10 in section 2*/
#define offset_of_ace2_2_reg_main_hue_user_color10_2 (0x9a)
#define mask_of_ace2_2_reg_main_hue_user_color10_2   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color10_2  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR10_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color10_2)
#define REG_ACE2_2_4D_L                              (ACE2_2_REG_MAIN_HUE_USER_COLOR10_2)
// h004d, bit: 14
/* Main window IHC hue adjustment of color11 in section 2*/
#define offset_of_ace2_2_reg_main_hue_user_color11_2 (0x9a)
#define mask_of_ace2_2_reg_main_hue_user_color11_2   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color11_2  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR11_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color11_2)
// h004e, bit: 6
/* Main window IHC hue adjustment of color12 in section 2 */
#define offset_of_ace2_2_reg_main_hue_user_color12_2 (0x9c)
#define mask_of_ace2_2_reg_main_hue_user_color12_2   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color12_2  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR12_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color12_2)
#define REG_ACE2_2_4E_L                              (ACE2_2_REG_MAIN_HUE_USER_COLOR12_2)
// h004e, bit: 14
/* Main window IHC hue adjustment of color13 in section 2 */
#define offset_of_ace2_2_reg_main_hue_user_color13_2 (0x9c)
#define mask_of_ace2_2_reg_main_hue_user_color13_2   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color13_2  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR13_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color13_2)
// h004f, bit: 6
/* Main window IHC hue adjustment of color14 in section 2 */
#define offset_of_ace2_2_reg_main_hue_user_color14_2 (0x9e)
#define mask_of_ace2_2_reg_main_hue_user_color14_2   (0x7f)
#define shift_of_ace2_2_reg_main_hue_user_color14_2  (0)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR14_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color14_2)
#define REG_ACE2_2_4F_L                              (ACE2_2_REG_MAIN_HUE_USER_COLOR14_2)
// h004f, bit: 14
/* Main window IHC hue adjustment of color15 in section 2  */
#define offset_of_ace2_2_reg_main_hue_user_color15_2 (0x9e)
#define mask_of_ace2_2_reg_main_hue_user_color15_2   (0x7f00)
#define shift_of_ace2_2_reg_main_hue_user_color15_2  (8)
#define ACE2_2_REG_MAIN_HUE_USER_COLOR15_2           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_hue_user_color15_2)
#define REG_ACE2_2_50_L                              (REG_ACE2_2_BASE + 0xa0)
#define REG_ACE2_2_51_L                              (REG_ACE2_2_BASE + 0xa2)
#define REG_ACE2_2_52_L                              (REG_ACE2_2_BASE + 0xa4)
#define REG_ACE2_2_53_L                              (REG_ACE2_2_BASE + 0xa6)
#define REG_ACE2_2_54_L                              (REG_ACE2_2_BASE + 0xa8)
#define REG_ACE2_2_55_L                              (REG_ACE2_2_BASE + 0xaa)
#define REG_ACE2_2_56_L                              (REG_ACE2_2_BASE + 0xac)
#define REG_ACE2_2_57_L                              (REG_ACE2_2_BASE + 0xae)
#define REG_ACE2_2_58_L                              (REG_ACE2_2_BASE + 0xb0)
#define REG_ACE2_2_59_L                              (REG_ACE2_2_BASE + 0xb2)
#define REG_ACE2_2_5A_L                              (REG_ACE2_2_BASE + 0xb4)
#define REG_ACE2_2_5B_L                              (REG_ACE2_2_BASE + 0xb6)
#define REG_ACE2_2_5C_L                              (REG_ACE2_2_BASE + 0xb8)
#define REG_ACE2_2_5D_L                              (REG_ACE2_2_BASE + 0xba)
#define REG_ACE2_2_5E_L                              (REG_ACE2_2_BASE + 0xbc)
#define REG_ACE2_2_5F_L                              (REG_ACE2_2_BASE + 0xbe)
#define REG_ACE2_2_60_L                              (REG_ACE2_2_BASE + 0xc0)
#define REG_ACE2_2_61_L                              (REG_ACE2_2_BASE + 0xc2)
#define REG_ACE2_2_62_L                              (REG_ACE2_2_BASE + 0xc4)
#define REG_ACE2_2_63_L                              (REG_ACE2_2_BASE + 0xc6)
#define REG_ACE2_2_64_L                              (REG_ACE2_2_BASE + 0xc8)
#define REG_ACE2_2_65_L                              (REG_ACE2_2_BASE + 0xca)
#define REG_ACE2_2_66_L                              (REG_ACE2_2_BASE + 0xcc)
#define REG_ACE2_2_67_L                              (REG_ACE2_2_BASE + 0xce)
// h0068, bit: 1
/* Main window IHC adaptive Y mode  in different color enable*/
#define offset_of_ace2_2_reg_main_ihc_y_mode_diff_color_en (0xd0)
#define mask_of_ace2_2_reg_main_ihc_y_mode_diff_color_en   (0x2)
#define shift_of_ace2_2_reg_main_ihc_y_mode_diff_color_en  (1)
#define ACE2_2_REG_MAIN_IHC_Y_MODE_DIFF_COLOR_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ihc_y_mode_diff_color_en)
#define REG_ACE2_2_68_L                                    (ACE2_2_REG_MAIN_IHC_Y_MODE_DIFF_COLOR_EN)
// h0068, bit: 7
/* Main window IHC adaptive Y mode enable*/
#define offset_of_ace2_2_reg_main_ihc_y_mode_en (0xd0)
#define mask_of_ace2_2_reg_main_ihc_y_mode_en   (0x80)
#define shift_of_ace2_2_reg_main_ihc_y_mode_en  (7)
#define ACE2_2_REG_MAIN_IHC_Y_MODE_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_main_ihc_y_mode_en)
// h0069, bit: 0
/* Bnad1 adaptive debug mode enable*/
#define offset_of_ace2_2_reg_band1_adaptive_debug_en (0xd2)
#define mask_of_ace2_2_reg_band1_adaptive_debug_en   (0x1)
#define shift_of_ace2_2_reg_band1_adaptive_debug_en  (0)
#define ACE2_2_REG_BAND1_ADAPTIVE_DEBUG_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band1_adaptive_debug_en)
#define REG_ACE2_2_69_L                              (ACE2_2_REG_BAND1_ADAPTIVE_DEBUG_EN)
// h0069, bit: 1
/* Bnad2 adaptive debug mode enable*/
#define offset_of_ace2_2_reg_band2_adaptive_debug_en (0xd2)
#define mask_of_ace2_2_reg_band2_adaptive_debug_en   (0x2)
#define shift_of_ace2_2_reg_band2_adaptive_debug_en  (1)
#define ACE2_2_REG_BAND2_ADAPTIVE_DEBUG_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band2_adaptive_debug_en)
// h0069, bit: 2
/* Bnad3 adaptive debug mode enable*/
#define offset_of_ace2_2_reg_band3_adaptive_debug_en (0xd2)
#define mask_of_ace2_2_reg_band3_adaptive_debug_en   (0x4)
#define shift_of_ace2_2_reg_band3_adaptive_debug_en  (2)
#define ACE2_2_REG_BAND3_ADAPTIVE_DEBUG_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band3_adaptive_debug_en)
// h0069, bit: 3
/* Bnad4 adaptive debug mode enable*/
#define offset_of_ace2_2_reg_band4_adaptive_debug_en (0xd2)
#define mask_of_ace2_2_reg_band4_adaptive_debug_en   (0x8)
#define shift_of_ace2_2_reg_band4_adaptive_debug_en  (3)
#define ACE2_2_REG_BAND4_ADAPTIVE_DEBUG_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band4_adaptive_debug_en)
// h0069, bit: 4
/* Bnad5 adaptive debug mode enable*/
#define offset_of_ace2_2_reg_band5_adaptive_debug_en (0xd2)
#define mask_of_ace2_2_reg_band5_adaptive_debug_en   (0x10)
#define shift_of_ace2_2_reg_band5_adaptive_debug_en  (4)
#define ACE2_2_REG_BAND5_ADAPTIVE_DEBUG_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band5_adaptive_debug_en)
// h0069, bit: 5
/* Bnad6 adaptive debug mode enable*/
#define offset_of_ace2_2_reg_band6_adaptive_debug_en (0xd2)
#define mask_of_ace2_2_reg_band6_adaptive_debug_en   (0x20)
#define shift_of_ace2_2_reg_band6_adaptive_debug_en  (5)
#define ACE2_2_REG_BAND6_ADAPTIVE_DEBUG_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band6_adaptive_debug_en)
// h0069, bit: 6
/* Bnad7 adaptive debug mode enable*/
#define offset_of_ace2_2_reg_band7_adaptive_debug_en (0xd2)
#define mask_of_ace2_2_reg_band7_adaptive_debug_en   (0x40)
#define shift_of_ace2_2_reg_band7_adaptive_debug_en  (6)
#define ACE2_2_REG_BAND7_ADAPTIVE_DEBUG_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band7_adaptive_debug_en)
// h0069, bit: 7
/* Bnad8 adaptive debug mode enable*/
#define offset_of_ace2_2_reg_band8_adaptive_debug_en (0xd2)
#define mask_of_ace2_2_reg_band8_adaptive_debug_en   (0x80)
#define shift_of_ace2_2_reg_band8_adaptive_debug_en  (7)
#define ACE2_2_REG_BAND8_ADAPTIVE_DEBUG_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band8_adaptive_debug_en)
// h0069, bit: 8
/* Bnad9 adaptive debug mode enable*/
#define offset_of_ace2_2_reg_band9_adaptive_debug_en (0xd2)
#define mask_of_ace2_2_reg_band9_adaptive_debug_en   (0x100)
#define shift_of_ace2_2_reg_band9_adaptive_debug_en  (8)
#define ACE2_2_REG_BAND9_ADAPTIVE_DEBUG_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band9_adaptive_debug_en)
// h0069, bit: 9
/* Bnad10 adaptive debug mode enable*/
#define offset_of_ace2_2_reg_band10_adaptive_debug_en (0xd2)
#define mask_of_ace2_2_reg_band10_adaptive_debug_en   (0x200)
#define shift_of_ace2_2_reg_band10_adaptive_debug_en  (9)
#define ACE2_2_REG_BAND10_ADAPTIVE_DEBUG_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band10_adaptive_debug_en)
// h0069, bit: 10
/* Bnad11 adaptive debug mode enable*/
#define offset_of_ace2_2_reg_band11_adaptive_debug_en (0xd2)
#define mask_of_ace2_2_reg_band11_adaptive_debug_en   (0x400)
#define shift_of_ace2_2_reg_band11_adaptive_debug_en  (10)
#define ACE2_2_REG_BAND11_ADAPTIVE_DEBUG_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band11_adaptive_debug_en)
// h0069, bit: 11
/* Bnad12 adaptive debug mode enable*/
#define offset_of_ace2_2_reg_band12_adaptive_debug_en (0xd2)
#define mask_of_ace2_2_reg_band12_adaptive_debug_en   (0x800)
#define shift_of_ace2_2_reg_band12_adaptive_debug_en  (11)
#define ACE2_2_REG_BAND12_ADAPTIVE_DEBUG_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band12_adaptive_debug_en)
// h006a, bit: 4
/* Bnad1 low difference threshold*/
#define offset_of_ace2_2_reg_band1_low_diff_thrd (0xd4)
#define mask_of_ace2_2_reg_band1_low_diff_thrd   (0x1f)
#define shift_of_ace2_2_reg_band1_low_diff_thrd  (0)
#define ACE2_2_REG_BAND1_LOW_DIFF_THRD           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band1_low_diff_thrd)
#define REG_ACE2_2_6A_L                          (ACE2_2_REG_BAND1_LOW_DIFF_THRD)
// h006a, bit: 7
/* Band1 differential adaptive gain step*/
#define offset_of_ace2_2_reg_band1_adaptive_gain_step (0xd4)
#define mask_of_ace2_2_reg_band1_adaptive_gain_step   (0xe0)
#define shift_of_ace2_2_reg_band1_adaptive_gain_step  (5)
#define ACE2_2_REG_BAND1_ADAPTIVE_GAIN_STEP           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band1_adaptive_gain_step)
// h006a, bit: 12
/* Bnad2 low difference threshold*/
#define offset_of_ace2_2_reg_band2_low_diff_thrd (0xd4)
#define mask_of_ace2_2_reg_band2_low_diff_thrd   (0x1f00)
#define shift_of_ace2_2_reg_band2_low_diff_thrd  (8)
#define ACE2_2_REG_BAND2_LOW_DIFF_THRD           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band2_low_diff_thrd)
// h006a, bit: 15
/* Band2 differential adaptive gain step*/
#define offset_of_ace2_2_reg_band2_adaptive_gain_step (0xd4)
#define mask_of_ace2_2_reg_band2_adaptive_gain_step   (0xe000)
#define shift_of_ace2_2_reg_band2_adaptive_gain_step  (13)
#define ACE2_2_REG_BAND2_ADAPTIVE_GAIN_STEP           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band2_adaptive_gain_step)
// h006b, bit: 4
/* Bnad3 low difference threshold*/
#define offset_of_ace2_2_reg_band3_low_diff_thrd (0xd6)
#define mask_of_ace2_2_reg_band3_low_diff_thrd   (0x1f)
#define shift_of_ace2_2_reg_band3_low_diff_thrd  (0)
#define ACE2_2_REG_BAND3_LOW_DIFF_THRD           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band3_low_diff_thrd)
#define REG_ACE2_2_6B_L                          (ACE2_2_REG_BAND3_LOW_DIFF_THRD)
// h006b, bit: 7
/* Band3 differential adaptive gain step*/
#define offset_of_ace2_2_reg_band3_adaptive_gain_step (0xd6)
#define mask_of_ace2_2_reg_band3_adaptive_gain_step   (0xe0)
#define shift_of_ace2_2_reg_band3_adaptive_gain_step  (5)
#define ACE2_2_REG_BAND3_ADAPTIVE_GAIN_STEP           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band3_adaptive_gain_step)
// h006b, bit: 12
/* Bnad4 low difference threshold*/
#define offset_of_ace2_2_reg_band4_low_diff_thrd (0xd6)
#define mask_of_ace2_2_reg_band4_low_diff_thrd   (0x1f00)
#define shift_of_ace2_2_reg_band4_low_diff_thrd  (8)
#define ACE2_2_REG_BAND4_LOW_DIFF_THRD           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band4_low_diff_thrd)
// h006b, bit: 15
/* Band4 differential adaptive gain step*/
#define offset_of_ace2_2_reg_band4_adaptive_gain_step (0xd6)
#define mask_of_ace2_2_reg_band4_adaptive_gain_step   (0xe000)
#define shift_of_ace2_2_reg_band4_adaptive_gain_step  (13)
#define ACE2_2_REG_BAND4_ADAPTIVE_GAIN_STEP           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band4_adaptive_gain_step)
// h006c, bit: 4
/* Bnad5 low difference threshold*/
#define offset_of_ace2_2_reg_band5_low_diff_thrd (0xd8)
#define mask_of_ace2_2_reg_band5_low_diff_thrd   (0x1f)
#define shift_of_ace2_2_reg_band5_low_diff_thrd  (0)
#define ACE2_2_REG_BAND5_LOW_DIFF_THRD           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band5_low_diff_thrd)
#define REG_ACE2_2_6C_L                          (ACE2_2_REG_BAND5_LOW_DIFF_THRD)
// h006c, bit: 7
/* Band5 differential adaptive gain step*/
#define offset_of_ace2_2_reg_band5_adaptive_gain_step (0xd8)
#define mask_of_ace2_2_reg_band5_adaptive_gain_step   (0xe0)
#define shift_of_ace2_2_reg_band5_adaptive_gain_step  (5)
#define ACE2_2_REG_BAND5_ADAPTIVE_GAIN_STEP           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band5_adaptive_gain_step)
// h006c, bit: 12
/* Bnad6 low difference threshold*/
#define offset_of_ace2_2_reg_band6_low_diff_thrd (0xd8)
#define mask_of_ace2_2_reg_band6_low_diff_thrd   (0x1f00)
#define shift_of_ace2_2_reg_band6_low_diff_thrd  (8)
#define ACE2_2_REG_BAND6_LOW_DIFF_THRD           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band6_low_diff_thrd)
// h006c, bit: 15
/* Band6 differential adaptive gain step*/
#define offset_of_ace2_2_reg_band6_adaptive_gain_step (0xd8)
#define mask_of_ace2_2_reg_band6_adaptive_gain_step   (0xe000)
#define shift_of_ace2_2_reg_band6_adaptive_gain_step  (13)
#define ACE2_2_REG_BAND6_ADAPTIVE_GAIN_STEP           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band6_adaptive_gain_step)
// h006d, bit: 4
/* Bnad7 low difference threshold*/
#define offset_of_ace2_2_reg_band7_low_diff_thrd (0xda)
#define mask_of_ace2_2_reg_band7_low_diff_thrd   (0x1f)
#define shift_of_ace2_2_reg_band7_low_diff_thrd  (0)
#define ACE2_2_REG_BAND7_LOW_DIFF_THRD           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band7_low_diff_thrd)
#define REG_ACE2_2_6D_L                          (ACE2_2_REG_BAND7_LOW_DIFF_THRD)
// h006d, bit: 7
/* Band7 differential adaptive gain step*/
#define offset_of_ace2_2_reg_band7_adaptive_gain_step (0xda)
#define mask_of_ace2_2_reg_band7_adaptive_gain_step   (0xe0)
#define shift_of_ace2_2_reg_band7_adaptive_gain_step  (5)
#define ACE2_2_REG_BAND7_ADAPTIVE_GAIN_STEP           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band7_adaptive_gain_step)
// h006d, bit: 12
/* Bnad8 low difference threshold*/
#define offset_of_ace2_2_reg_band8_low_diff_thrd (0xda)
#define mask_of_ace2_2_reg_band8_low_diff_thrd   (0x1f00)
#define shift_of_ace2_2_reg_band8_low_diff_thrd  (8)
#define ACE2_2_REG_BAND8_LOW_DIFF_THRD           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band8_low_diff_thrd)
// h006d, bit: 15
/* Band8 differential adaptive gain step*/
#define offset_of_ace2_2_reg_band8_adaptive_gain_step (0xda)
#define mask_of_ace2_2_reg_band8_adaptive_gain_step   (0xe000)
#define shift_of_ace2_2_reg_band8_adaptive_gain_step  (13)
#define ACE2_2_REG_BAND8_ADAPTIVE_GAIN_STEP           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band8_adaptive_gain_step)
// h006e, bit: 4
/* Bnad9 low difference threshold*/
#define offset_of_ace2_2_reg_band9_low_diff_thrd (0xdc)
#define mask_of_ace2_2_reg_band9_low_diff_thrd   (0x1f)
#define shift_of_ace2_2_reg_band9_low_diff_thrd  (0)
#define ACE2_2_REG_BAND9_LOW_DIFF_THRD           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band9_low_diff_thrd)
#define REG_ACE2_2_6E_L                          (ACE2_2_REG_BAND9_LOW_DIFF_THRD)
// h006e, bit: 7
/* Band9 differential adaptive gain step*/
#define offset_of_ace2_2_reg_band9_adaptive_gain_step (0xdc)
#define mask_of_ace2_2_reg_band9_adaptive_gain_step   (0xe0)
#define shift_of_ace2_2_reg_band9_adaptive_gain_step  (5)
#define ACE2_2_REG_BAND9_ADAPTIVE_GAIN_STEP           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band9_adaptive_gain_step)
// h006e, bit: 12
/* Bnad10 low difference threshold*/
#define offset_of_ace2_2_reg_band10_low_diff_thrd (0xdc)
#define mask_of_ace2_2_reg_band10_low_diff_thrd   (0x1f00)
#define shift_of_ace2_2_reg_band10_low_diff_thrd  (8)
#define ACE2_2_REG_BAND10_LOW_DIFF_THRD           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band10_low_diff_thrd)
// h006e, bit: 15
/* Band10 differential adaptive gain step*/
#define offset_of_ace2_2_reg_band10_adaptive_gain_step (0xdc)
#define mask_of_ace2_2_reg_band10_adaptive_gain_step   (0xe000)
#define shift_of_ace2_2_reg_band10_adaptive_gain_step  (13)
#define ACE2_2_REG_BAND10_ADAPTIVE_GAIN_STEP           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band10_adaptive_gain_step)
// h006f, bit: 4
/* Bnad11 low difference threshold*/
#define offset_of_ace2_2_reg_band11_low_diff_thrd (0xde)
#define mask_of_ace2_2_reg_band11_low_diff_thrd   (0x1f)
#define shift_of_ace2_2_reg_band11_low_diff_thrd  (0)
#define ACE2_2_REG_BAND11_LOW_DIFF_THRD           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band11_low_diff_thrd)
#define REG_ACE2_2_6F_L                           (ACE2_2_REG_BAND11_LOW_DIFF_THRD)
// h006f, bit: 7
/* Band11 differential adaptive gain step*/
#define offset_of_ace2_2_reg_band11_adaptive_gain_step (0xde)
#define mask_of_ace2_2_reg_band11_adaptive_gain_step   (0xe0)
#define shift_of_ace2_2_reg_band11_adaptive_gain_step  (5)
#define ACE2_2_REG_BAND11_ADAPTIVE_GAIN_STEP           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band11_adaptive_gain_step)
// h006f, bit: 12
/* Bnad12 low difference threshold*/
#define offset_of_ace2_2_reg_band12_low_diff_thrd (0xde)
#define mask_of_ace2_2_reg_band12_low_diff_thrd   (0x1f00)
#define shift_of_ace2_2_reg_band12_low_diff_thrd  (8)
#define ACE2_2_REG_BAND12_LOW_DIFF_THRD           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band12_low_diff_thrd)
// h006f, bit: 15
/* Band12 differential adaptive gain step*/
#define offset_of_ace2_2_reg_band12_adaptive_gain_step (0xde)
#define mask_of_ace2_2_reg_band12_adaptive_gain_step   (0xe000)
#define shift_of_ace2_2_reg_band12_adaptive_gain_step  (13)
#define ACE2_2_REG_BAND12_ADAPTIVE_GAIN_STEP           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_band12_adaptive_gain_step)
#define REG_ACE2_2_70_L                                (REG_ACE2_2_BASE + 0xe0)
#define REG_ACE2_2_71_L                                (REG_ACE2_2_BASE + 0xe2)
#define REG_ACE2_2_72_L                                (REG_ACE2_2_BASE + 0xe4)
#define REG_ACE2_2_73_L                                (REG_ACE2_2_BASE + 0xe6)
#define REG_ACE2_2_74_L                                (REG_ACE2_2_BASE + 0xe8)
#define REG_ACE2_2_75_L                                (REG_ACE2_2_BASE + 0xea)
#define REG_ACE2_2_76_L                                (REG_ACE2_2_BASE + 0xec)
#define REG_ACE2_2_77_L                                (REG_ACE2_2_BASE + 0xee)
// h0078, bit: 0
/* ICC sram IO enable*/
#define offset_of_ace2_2_reg_icc_sram_io_en (0xf0)
#define mask_of_ace2_2_reg_icc_sram_io_en   (0x1)
#define shift_of_ace2_2_reg_icc_sram_io_en  (0)
#define ACE2_2_REG_ICC_SRAM_IO_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_icc_sram_io_en)
#define REG_ACE2_2_78_L                     (ACE2_2_REG_ICC_SRAM_IO_EN)
// h0078, bit: 2
/* ICC io select*/
#define offset_of_ace2_2_reg_icc_sram_io_select (0xf0)
#define mask_of_ace2_2_reg_icc_sram_io_select   (0x6)
#define shift_of_ace2_2_reg_icc_sram_io_select  (1)
#define ACE2_2_REG_ICC_SRAM_IO_SELECT           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_icc_sram_io_select)
// h0079, bit: 8
/* ICC io address*/
#define offset_of_ace2_2_reg_icc_ioaddr (0xf2)
#define mask_of_ace2_2_reg_icc_ioaddr   (0x1ff)
#define shift_of_ace2_2_reg_icc_ioaddr  (0)
#define ACE2_2_REG_ICC_IOADDR           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_icc_ioaddr)
#define REG_ACE2_2_79_L                 (ACE2_2_REG_ICC_IOADDR)
// h0079, bit: 15
/* ICC io read enable*/
#define offset_of_ace2_2_reg_icc_iore (0xf2)
#define mask_of_ace2_2_reg_icc_iore   (0x8000)
#define shift_of_ace2_2_reg_icc_iore  (15)
#define ACE2_2_REG_ICC_IORE           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_icc_iore)
// h007a, bit: 8
/* ICC io write data*/
#define offset_of_ace2_2_reg_icc_iowdata (0xf4)
#define mask_of_ace2_2_reg_icc_iowdata   (0x1ff)
#define shift_of_ace2_2_reg_icc_iowdata  (0)
#define ACE2_2_REG_ICC_IOWDATA           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_icc_iowdata)
#define REG_ACE2_2_7A_L                  (ACE2_2_REG_ICC_IOWDATA)
// h007a, bit: 15
/* ICC io write enable*/
#define offset_of_ace2_2_reg_icc_iowe (0xf4)
#define mask_of_ace2_2_reg_icc_iowe   (0x8000)
#define shift_of_ace2_2_reg_icc_iowe  (15)
#define ACE2_2_REG_ICC_IOWE           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_icc_iowe)
// h007b, bit: 8
/* ICC io read data*/
#define offset_of_ace2_2_reg_icc_iordata (0xf6)
#define mask_of_ace2_2_reg_icc_iordata   (0x1ff)
#define shift_of_ace2_2_reg_icc_iordata  (0)
#define ACE2_2_REG_ICC_IORDATA           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_icc_iordata)
#define REG_ACE2_2_7B_L                  (ACE2_2_REG_ICC_IORDATA)
// h007c, bit: 0
/* IHC sram IO enable*/
#define offset_of_ace2_2_reg_ihc_sram_io_en (0xf8)
#define mask_of_ace2_2_reg_ihc_sram_io_en   (0x1)
#define shift_of_ace2_2_reg_ihc_sram_io_en  (0)
#define ACE2_2_REG_IHC_SRAM_IO_EN           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_ihc_sram_io_en)
#define REG_ACE2_2_7C_L                     (ACE2_2_REG_IHC_SRAM_IO_EN)
// h007c, bit: 2
/* IHC sram IO select*/
#define offset_of_ace2_2_reg_ihc_sram_io_select (0xf8)
#define mask_of_ace2_2_reg_ihc_sram_io_select   (0x6)
#define shift_of_ace2_2_reg_ihc_sram_io_select  (1)
#define ACE2_2_REG_IHC_SRAM_IO_SELECT           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_ihc_sram_io_select)
// h007d, bit: 8
/* IHC io address*/
#define offset_of_ace2_2_reg_ihc_ioaddr (0xfa)
#define mask_of_ace2_2_reg_ihc_ioaddr   (0x1ff)
#define shift_of_ace2_2_reg_ihc_ioaddr  (0)
#define ACE2_2_REG_IHC_IOADDR           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_ihc_ioaddr)
#define REG_ACE2_2_7D_L                 (ACE2_2_REG_IHC_IOADDR)
// h007d, bit: 15
/* IHC io read enable*/
#define offset_of_ace2_2_reg_ihc_iore (0xfa)
#define mask_of_ace2_2_reg_ihc_iore   (0x8000)
#define shift_of_ace2_2_reg_ihc_iore  (15)
#define ACE2_2_REG_IHC_IORE           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_ihc_iore)
// h007e, bit: 9
/* IHC io write data*/
#define offset_of_ace2_2_reg_ihc_iowdata (0xfc)
#define mask_of_ace2_2_reg_ihc_iowdata   (0x3ff)
#define shift_of_ace2_2_reg_ihc_iowdata  (0)
#define ACE2_2_REG_IHC_IOWDATA           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_ihc_iowdata)
#define REG_ACE2_2_7E_L                  (ACE2_2_REG_IHC_IOWDATA)
// h007e, bit: 15
/* IHC io write enable*/
#define offset_of_ace2_2_reg_ihc_iowe (0xfc)
#define mask_of_ace2_2_reg_ihc_iowe   (0x8000)
#define shift_of_ace2_2_reg_ihc_iowe  (15)
#define ACE2_2_REG_IHC_IOWE           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_ihc_iowe)
// h007f, bit: 9
/* IHC io read data*/
#define offset_of_ace2_2_reg_ihc_iordata (0xfe)
#define mask_of_ace2_2_reg_ihc_iordata   (0x3ff)
#define shift_of_ace2_2_reg_ihc_iordata  (0)
#define ACE2_2_REG_IHC_IORDATA           (REG_ACE2_2_BASE + offset_of_ace2_2_reg_ihc_iordata)
#define REG_ACE2_2_7F_L                  (ACE2_2_REG_IHC_IORDATA)
#define REG_ACE3_2_00_L                  (REG_ACE3_2_BASE + 0x0)
#define REG_ACE3_2_01_L                  (REG_ACE3_2_BASE + 0x2)
#define REG_ACE3_2_02_L                  (REG_ACE3_2_BASE + 0x4)
#define REG_ACE3_2_03_L                  (REG_ACE3_2_BASE + 0x6)
#define REG_ACE3_2_04_L                  (REG_ACE3_2_BASE + 0x8)
#define REG_ACE3_2_05_L                  (REG_ACE3_2_BASE + 0xa)
#define REG_ACE3_2_06_L                  (REG_ACE3_2_BASE + 0xc)
#define REG_ACE3_2_07_L                  (REG_ACE3_2_BASE + 0xe)
// h0008, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color0*/
#define offset_of_ace3_2_reg_main_ihc_icc_color0_y_0 (0x10)
#define mask_of_ace3_2_reg_main_ihc_icc_color0_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color0_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR0_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color0_y_0)
#define REG_ACE3_2_08_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR0_Y_0)
// h0008, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color0*/
#define offset_of_ace3_2_reg_main_ihc_icc_color0_y_1 (0x10)
#define mask_of_ace3_2_reg_main_ihc_icc_color0_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color0_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR0_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color0_y_1)
// h0009, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color0*/
#define offset_of_ace3_2_reg_main_ihc_icc_color0_y_2 (0x12)
#define mask_of_ace3_2_reg_main_ihc_icc_color0_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color0_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR0_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color0_y_2)
#define REG_ACE3_2_09_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR0_Y_2)
// h0009, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color0*/
#define offset_of_ace3_2_reg_main_ihc_icc_color0_y_3 (0x12)
#define mask_of_ace3_2_reg_main_ihc_icc_color0_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color0_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR0_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color0_y_3)
// h000a, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color1*/
#define offset_of_ace3_2_reg_main_ihc_icc_color1_y_0 (0x14)
#define mask_of_ace3_2_reg_main_ihc_icc_color1_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color1_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR1_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color1_y_0)
#define REG_ACE3_2_0A_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR1_Y_0)
// h000a, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color1*/
#define offset_of_ace3_2_reg_main_ihc_icc_color1_y_1 (0x14)
#define mask_of_ace3_2_reg_main_ihc_icc_color1_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color1_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR1_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color1_y_1)
// h000b, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color1*/
#define offset_of_ace3_2_reg_main_ihc_icc_color1_y_2 (0x16)
#define mask_of_ace3_2_reg_main_ihc_icc_color1_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color1_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR1_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color1_y_2)
#define REG_ACE3_2_0B_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR1_Y_2)
// h000b, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color1*/
#define offset_of_ace3_2_reg_main_ihc_icc_color1_y_3 (0x16)
#define mask_of_ace3_2_reg_main_ihc_icc_color1_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color1_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR1_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color1_y_3)
// h000c, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color2*/
#define offset_of_ace3_2_reg_main_ihc_icc_color2_y_0 (0x18)
#define mask_of_ace3_2_reg_main_ihc_icc_color2_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color2_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR2_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color2_y_0)
#define REG_ACE3_2_0C_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR2_Y_0)
// h000c, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color2*/
#define offset_of_ace3_2_reg_main_ihc_icc_color2_y_1 (0x18)
#define mask_of_ace3_2_reg_main_ihc_icc_color2_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color2_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR2_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color2_y_1)
// h000d, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color2*/
#define offset_of_ace3_2_reg_main_ihc_icc_color2_y_2 (0x1a)
#define mask_of_ace3_2_reg_main_ihc_icc_color2_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color2_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR2_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color2_y_2)
#define REG_ACE3_2_0D_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR2_Y_2)
// h000d, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color2*/
#define offset_of_ace3_2_reg_main_ihc_icc_color2_y_3 (0x1a)
#define mask_of_ace3_2_reg_main_ihc_icc_color2_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color2_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR2_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color2_y_3)
// h000e, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color3*/
#define offset_of_ace3_2_reg_main_ihc_icc_color3_y_0 (0x1c)
#define mask_of_ace3_2_reg_main_ihc_icc_color3_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color3_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR3_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color3_y_0)
#define REG_ACE3_2_0E_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR3_Y_0)
// h000e, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color3*/
#define offset_of_ace3_2_reg_main_ihc_icc_color3_y_1 (0x1c)
#define mask_of_ace3_2_reg_main_ihc_icc_color3_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color3_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR3_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color3_y_1)
// h000f, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color3*/
#define offset_of_ace3_2_reg_main_ihc_icc_color3_y_2 (0x1e)
#define mask_of_ace3_2_reg_main_ihc_icc_color3_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color3_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR3_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color3_y_2)
#define REG_ACE3_2_0F_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR3_Y_2)
// h000f, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color3*/
#define offset_of_ace3_2_reg_main_ihc_icc_color3_y_3 (0x1e)
#define mask_of_ace3_2_reg_main_ihc_icc_color3_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color3_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR3_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color3_y_3)
// h0010, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color4*/
#define offset_of_ace3_2_reg_main_ihc_icc_color4_y_0 (0x20)
#define mask_of_ace3_2_reg_main_ihc_icc_color4_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color4_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR4_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color4_y_0)
#define REG_ACE3_2_10_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR4_Y_0)
// h0010, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color4*/
#define offset_of_ace3_2_reg_main_ihc_icc_color4_y_1 (0x20)
#define mask_of_ace3_2_reg_main_ihc_icc_color4_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color4_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR4_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color4_y_1)
// h0011, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color4*/
#define offset_of_ace3_2_reg_main_ihc_icc_color4_y_2 (0x22)
#define mask_of_ace3_2_reg_main_ihc_icc_color4_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color4_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR4_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color4_y_2)
#define REG_ACE3_2_11_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR4_Y_2)
// h0011, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color4*/
#define offset_of_ace3_2_reg_main_ihc_icc_color4_y_3 (0x22)
#define mask_of_ace3_2_reg_main_ihc_icc_color4_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color4_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR4_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color4_y_3)
// h0012, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color5*/
#define offset_of_ace3_2_reg_main_ihc_icc_color5_y_0 (0x24)
#define mask_of_ace3_2_reg_main_ihc_icc_color5_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color5_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR5_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color5_y_0)
#define REG_ACE3_2_12_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR5_Y_0)
// h0012, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color5*/
#define offset_of_ace3_2_reg_main_ihc_icc_color5_y_1 (0x24)
#define mask_of_ace3_2_reg_main_ihc_icc_color5_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color5_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR5_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color5_y_1)
// h0013, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color5*/
#define offset_of_ace3_2_reg_main_ihc_icc_color5_y_2 (0x26)
#define mask_of_ace3_2_reg_main_ihc_icc_color5_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color5_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR5_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color5_y_2)
#define REG_ACE3_2_13_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR5_Y_2)
// h0013, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color5*/
#define offset_of_ace3_2_reg_main_ihc_icc_color5_y_3 (0x26)
#define mask_of_ace3_2_reg_main_ihc_icc_color5_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color5_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR5_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color5_y_3)
// h0014, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color6*/
#define offset_of_ace3_2_reg_main_ihc_icc_color6_y_0 (0x28)
#define mask_of_ace3_2_reg_main_ihc_icc_color6_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color6_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR6_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color6_y_0)
#define REG_ACE3_2_14_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR6_Y_0)
// h0014, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color6*/
#define offset_of_ace3_2_reg_main_ihc_icc_color6_y_1 (0x28)
#define mask_of_ace3_2_reg_main_ihc_icc_color6_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color6_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR6_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color6_y_1)
// h0015, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color6*/
#define offset_of_ace3_2_reg_main_ihc_icc_color6_y_2 (0x2a)
#define mask_of_ace3_2_reg_main_ihc_icc_color6_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color6_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR6_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color6_y_2)
#define REG_ACE3_2_15_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR6_Y_2)
// h0015, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color6*/
#define offset_of_ace3_2_reg_main_ihc_icc_color6_y_3 (0x2a)
#define mask_of_ace3_2_reg_main_ihc_icc_color6_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color6_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR6_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color6_y_3)
// h0016, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color7*/
#define offset_of_ace3_2_reg_main_ihc_icc_color7_y_0 (0x2c)
#define mask_of_ace3_2_reg_main_ihc_icc_color7_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color7_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR7_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color7_y_0)
#define REG_ACE3_2_16_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR7_Y_0)
// h0016, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color7*/
#define offset_of_ace3_2_reg_main_ihc_icc_color7_y_1 (0x2c)
#define mask_of_ace3_2_reg_main_ihc_icc_color7_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color7_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR7_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color7_y_1)
// h0017, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color7*/
#define offset_of_ace3_2_reg_main_ihc_icc_color7_y_2 (0x2e)
#define mask_of_ace3_2_reg_main_ihc_icc_color7_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color7_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR7_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color7_y_2)
#define REG_ACE3_2_17_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR7_Y_2)
// h0017, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color7*/
#define offset_of_ace3_2_reg_main_ihc_icc_color7_y_3 (0x2e)
#define mask_of_ace3_2_reg_main_ihc_icc_color7_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color7_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR7_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color7_y_3)
// h0018, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color8*/
#define offset_of_ace3_2_reg_main_ihc_icc_color8_y_0 (0x30)
#define mask_of_ace3_2_reg_main_ihc_icc_color8_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color8_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR8_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color8_y_0)
#define REG_ACE3_2_18_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR8_Y_0)
// h0018, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color8*/
#define offset_of_ace3_2_reg_main_ihc_icc_color8_y_1 (0x30)
#define mask_of_ace3_2_reg_main_ihc_icc_color8_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color8_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR8_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color8_y_1)
// h0019, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color8*/
#define offset_of_ace3_2_reg_main_ihc_icc_color8_y_2 (0x32)
#define mask_of_ace3_2_reg_main_ihc_icc_color8_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color8_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR8_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color8_y_2)
#define REG_ACE3_2_19_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR8_Y_2)
// h0019, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color8*/
#define offset_of_ace3_2_reg_main_ihc_icc_color8_y_3 (0x32)
#define mask_of_ace3_2_reg_main_ihc_icc_color8_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color8_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR8_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color8_y_3)
// h001a, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color9*/
#define offset_of_ace3_2_reg_main_ihc_icc_color9_y_0 (0x34)
#define mask_of_ace3_2_reg_main_ihc_icc_color9_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color9_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR9_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color9_y_0)
#define REG_ACE3_2_1A_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR9_Y_0)
// h001a, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color9*/
#define offset_of_ace3_2_reg_main_ihc_icc_color9_y_1 (0x34)
#define mask_of_ace3_2_reg_main_ihc_icc_color9_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color9_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR9_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color9_y_1)
// h001b, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color9*/
#define offset_of_ace3_2_reg_main_ihc_icc_color9_y_2 (0x36)
#define mask_of_ace3_2_reg_main_ihc_icc_color9_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color9_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR9_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color9_y_2)
#define REG_ACE3_2_1B_L                              (ACE3_2_REG_MAIN_IHC_ICC_COLOR9_Y_2)
// h001b, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color9*/
#define offset_of_ace3_2_reg_main_ihc_icc_color9_y_3 (0x36)
#define mask_of_ace3_2_reg_main_ihc_icc_color9_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color9_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR9_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color9_y_3)
// h001c, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color10*/
#define offset_of_ace3_2_reg_main_ihc_icc_color10_y_0 (0x38)
#define mask_of_ace3_2_reg_main_ihc_icc_color10_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color10_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR10_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color10_y_0)
#define REG_ACE3_2_1C_L                               (ACE3_2_REG_MAIN_IHC_ICC_COLOR10_Y_0)
// h001c, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color10*/
#define offset_of_ace3_2_reg_main_ihc_icc_color10_y_1 (0x38)
#define mask_of_ace3_2_reg_main_ihc_icc_color10_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color10_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR10_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color10_y_1)
// h001d, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color10*/
#define offset_of_ace3_2_reg_main_ihc_icc_color10_y_2 (0x3a)
#define mask_of_ace3_2_reg_main_ihc_icc_color10_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color10_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR10_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color10_y_2)
#define REG_ACE3_2_1D_L                               (ACE3_2_REG_MAIN_IHC_ICC_COLOR10_Y_2)
// h001d, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color10*/
#define offset_of_ace3_2_reg_main_ihc_icc_color10_y_3 (0x3a)
#define mask_of_ace3_2_reg_main_ihc_icc_color10_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color10_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR10_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color10_y_3)
// h001e, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color11*/
#define offset_of_ace3_2_reg_main_ihc_icc_color11_y_0 (0x3c)
#define mask_of_ace3_2_reg_main_ihc_icc_color11_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color11_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR11_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color11_y_0)
#define REG_ACE3_2_1E_L                               (ACE3_2_REG_MAIN_IHC_ICC_COLOR11_Y_0)
// h001e, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color11*/
#define offset_of_ace3_2_reg_main_ihc_icc_color11_y_1 (0x3c)
#define mask_of_ace3_2_reg_main_ihc_icc_color11_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color11_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR11_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color11_y_1)
// h001f, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color11*/
#define offset_of_ace3_2_reg_main_ihc_icc_color11_y_2 (0x3e)
#define mask_of_ace3_2_reg_main_ihc_icc_color11_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color11_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR11_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color11_y_2)
#define REG_ACE3_2_1F_L                               (ACE3_2_REG_MAIN_IHC_ICC_COLOR11_Y_2)
// h001f, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color11*/
#define offset_of_ace3_2_reg_main_ihc_icc_color11_y_3 (0x3e)
#define mask_of_ace3_2_reg_main_ihc_icc_color11_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color11_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR11_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color11_y_3)
// h0020, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color12*/
#define offset_of_ace3_2_reg_main_ihc_icc_color12_y_0 (0x40)
#define mask_of_ace3_2_reg_main_ihc_icc_color12_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color12_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR12_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color12_y_0)
#define REG_ACE3_2_20_L                               (ACE3_2_REG_MAIN_IHC_ICC_COLOR12_Y_0)
// h0020, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color12*/
#define offset_of_ace3_2_reg_main_ihc_icc_color12_y_1 (0x40)
#define mask_of_ace3_2_reg_main_ihc_icc_color12_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color12_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR12_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color12_y_1)
// h0021, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color12*/
#define offset_of_ace3_2_reg_main_ihc_icc_color12_y_2 (0x42)
#define mask_of_ace3_2_reg_main_ihc_icc_color12_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color12_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR12_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color12_y_2)
#define REG_ACE3_2_21_L                               (ACE3_2_REG_MAIN_IHC_ICC_COLOR12_Y_2)
// h0021, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color12*/
#define offset_of_ace3_2_reg_main_ihc_icc_color12_y_3 (0x42)
#define mask_of_ace3_2_reg_main_ihc_icc_color12_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color12_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR12_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color12_y_3)
// h0022, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color13*/
#define offset_of_ace3_2_reg_main_ihc_icc_color13_y_0 (0x44)
#define mask_of_ace3_2_reg_main_ihc_icc_color13_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color13_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR13_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color13_y_0)
#define REG_ACE3_2_22_L                               (ACE3_2_REG_MAIN_IHC_ICC_COLOR13_Y_0)
// h0022, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color13*/
#define offset_of_ace3_2_reg_main_ihc_icc_color13_y_1 (0x44)
#define mask_of_ace3_2_reg_main_ihc_icc_color13_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color13_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR13_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color13_y_1)
// h0023, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color13*/
#define offset_of_ace3_2_reg_main_ihc_icc_color13_y_2 (0x46)
#define mask_of_ace3_2_reg_main_ihc_icc_color13_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color13_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR13_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color13_y_2)
#define REG_ACE3_2_23_L                               (ACE3_2_REG_MAIN_IHC_ICC_COLOR13_Y_2)
// h0023, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color13*/
#define offset_of_ace3_2_reg_main_ihc_icc_color13_y_3 (0x46)
#define mask_of_ace3_2_reg_main_ihc_icc_color13_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color13_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR13_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color13_y_3)
// h0024, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color14*/
#define offset_of_ace3_2_reg_main_ihc_icc_color14_y_0 (0x48)
#define mask_of_ace3_2_reg_main_ihc_icc_color14_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color14_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR14_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color14_y_0)
#define REG_ACE3_2_24_L                               (ACE3_2_REG_MAIN_IHC_ICC_COLOR14_Y_0)
// h0024, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color14*/
#define offset_of_ace3_2_reg_main_ihc_icc_color14_y_1 (0x48)
#define mask_of_ace3_2_reg_main_ihc_icc_color14_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color14_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR14_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color14_y_1)
// h0025, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color14*/
#define offset_of_ace3_2_reg_main_ihc_icc_color14_y_2 (0x4a)
#define mask_of_ace3_2_reg_main_ihc_icc_color14_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color14_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR14_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color14_y_2)
#define REG_ACE3_2_25_L                               (ACE3_2_REG_MAIN_IHC_ICC_COLOR14_Y_2)
// h0025, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color14*/
#define offset_of_ace3_2_reg_main_ihc_icc_color14_y_3 (0x4a)
#define mask_of_ace3_2_reg_main_ihc_icc_color14_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color14_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR14_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color14_y_3)
// h0026, bit: 7
/* main window IHC , ICC  adaptive Y in section 0 for color15*/
#define offset_of_ace3_2_reg_main_ihc_icc_color15_y_0 (0x4c)
#define mask_of_ace3_2_reg_main_ihc_icc_color15_y_0   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color15_y_0  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR15_Y_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color15_y_0)
#define REG_ACE3_2_26_L                               (ACE3_2_REG_MAIN_IHC_ICC_COLOR15_Y_0)
// h0026, bit: 15
/* main window IHC , ICC  adaptive Y in section 1 for color15*/
#define offset_of_ace3_2_reg_main_ihc_icc_color15_y_1 (0x4c)
#define mask_of_ace3_2_reg_main_ihc_icc_color15_y_1   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color15_y_1  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR15_Y_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color15_y_1)
// h0027, bit: 7
/* main window IHC , ICC  adaptive Y in section 2 for color15*/
#define offset_of_ace3_2_reg_main_ihc_icc_color15_y_2 (0x4e)
#define mask_of_ace3_2_reg_main_ihc_icc_color15_y_2   (0xff)
#define shift_of_ace3_2_reg_main_ihc_icc_color15_y_2  (0)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR15_Y_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color15_y_2)
#define REG_ACE3_2_27_L                               (ACE3_2_REG_MAIN_IHC_ICC_COLOR15_Y_2)
// h0027, bit: 15
/* main window IHC , ICC  adaptive Y in section 3 for color15*/
#define offset_of_ace3_2_reg_main_ihc_icc_color15_y_3 (0x4e)
#define mask_of_ace3_2_reg_main_ihc_icc_color15_y_3   (0xff00)
#define shift_of_ace3_2_reg_main_ihc_icc_color15_y_3  (8)
#define ACE3_2_REG_MAIN_IHC_ICC_COLOR15_Y_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_ihc_icc_color15_y_3)
#define REG_ACE3_2_28_L                               (REG_ACE3_2_BASE + 0x50)
#define REG_ACE3_2_29_L                               (REG_ACE3_2_BASE + 0x52)
#define REG_ACE3_2_2A_L                               (REG_ACE3_2_BASE + 0x54)
#define REG_ACE3_2_2B_L                               (REG_ACE3_2_BASE + 0x56)
#define REG_ACE3_2_2C_L                               (REG_ACE3_2_BASE + 0x58)
#define REG_ACE3_2_2D_L                               (REG_ACE3_2_BASE + 0x5a)
#define REG_ACE3_2_2E_L                               (REG_ACE3_2_BASE + 0x5c)
#define REG_ACE3_2_2F_L                               (REG_ACE3_2_BASE + 0x5e)
#define REG_ACE3_2_30_L                               (REG_ACE3_2_BASE + 0x60)
#define REG_ACE3_2_31_L                               (REG_ACE3_2_BASE + 0x62)
#define REG_ACE3_2_32_L                               (REG_ACE3_2_BASE + 0x64)
#define REG_ACE3_2_33_L                               (REG_ACE3_2_BASE + 0x66)
#define REG_ACE3_2_34_L                               (REG_ACE3_2_BASE + 0x68)
#define REG_ACE3_2_35_L                               (REG_ACE3_2_BASE + 0x6a)
#define REG_ACE3_2_36_L                               (REG_ACE3_2_BASE + 0x6c)
#define REG_ACE3_2_37_L                               (REG_ACE3_2_BASE + 0x6e)
// h0038, bit: 3
/* Main window  ICC saturation adjustment of color0 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color0_0 (0x70)
#define mask_of_ace3_2_reg_main_sa_user_color0_0   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color0_0  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR0_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color0_0)
#define REG_ACE3_2_38_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR0_0)
// h0038, bit: 11
/* Main window  ICC saturation adjustment of color1 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color1_0 (0x70)
#define mask_of_ace3_2_reg_main_sa_user_color1_0   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color1_0  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR1_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color1_0)
// h0039, bit: 3
/* Main window  ICC saturation adjustment of color2 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color2_0 (0x72)
#define mask_of_ace3_2_reg_main_sa_user_color2_0   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color2_0  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR2_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color2_0)
#define REG_ACE3_2_39_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR2_0)
// h0039, bit: 11
/* Main window  ICC saturation adjustment of color3 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color3_0 (0x72)
#define mask_of_ace3_2_reg_main_sa_user_color3_0   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color3_0  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR3_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color3_0)
// h003a, bit: 3
/* Main window  ICC saturation adjustment of color4 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color4_0 (0x74)
#define mask_of_ace3_2_reg_main_sa_user_color4_0   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color4_0  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR4_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color4_0)
#define REG_ACE3_2_3A_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR4_0)
// h003a, bit: 11
/* Main window  ICC saturation adjustment of color5 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color5_0 (0x74)
#define mask_of_ace3_2_reg_main_sa_user_color5_0   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color5_0  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR5_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color5_0)
// h003b, bit: 3
/* Main window  ICC saturation adjustment of color6 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color6_0 (0x76)
#define mask_of_ace3_2_reg_main_sa_user_color6_0   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color6_0  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR6_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color6_0)
#define REG_ACE3_2_3B_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR6_0)
// h003b, bit: 11
/* Main window  ICC saturation adjustment of color7 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color7_0 (0x76)
#define mask_of_ace3_2_reg_main_sa_user_color7_0   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color7_0  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR7_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color7_0)
// h003c, bit: 3
/* Main window  ICC saturation adjustment of color8 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color8_0 (0x78)
#define mask_of_ace3_2_reg_main_sa_user_color8_0   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color8_0  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR8_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color8_0)
#define REG_ACE3_2_3C_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR8_0)
// h003c, bit: 11
/* Main window  ICC saturation adjustment of color9 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color9_0 (0x78)
#define mask_of_ace3_2_reg_main_sa_user_color9_0   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color9_0  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR9_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color9_0)
// h003d, bit: 3
/* Main window  ICC saturation adjustment of color10 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color10_0 (0x7a)
#define mask_of_ace3_2_reg_main_sa_user_color10_0   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color10_0  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR10_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color10_0)
#define REG_ACE3_2_3D_L                             (ACE3_2_REG_MAIN_SA_USER_COLOR10_0)
// h003d, bit: 11
/* Main window  ICC saturation adjustment of color11 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color11_0 (0x7a)
#define mask_of_ace3_2_reg_main_sa_user_color11_0   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color11_0  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR11_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color11_0)
// h003e, bit: 3
/* Main window  ICC saturation adjustment of color12 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color12_0 (0x7c)
#define mask_of_ace3_2_reg_main_sa_user_color12_0   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color12_0  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR12_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color12_0)
#define REG_ACE3_2_3E_L                             (ACE3_2_REG_MAIN_SA_USER_COLOR12_0)
// h003e, bit: 11
/* Main window  ICC saturation adjustment of color13 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color13_0 (0x7c)
#define mask_of_ace3_2_reg_main_sa_user_color13_0   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color13_0  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR13_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color13_0)
// h003f, bit: 3
/* Main window  ICC saturation adjustment of color14 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color14_0 (0x7e)
#define mask_of_ace3_2_reg_main_sa_user_color14_0   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color14_0  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR14_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color14_0)
#define REG_ACE3_2_3F_L                             (ACE3_2_REG_MAIN_SA_USER_COLOR14_0)
// h003f, bit: 11
/* Main window  ICC saturation adjustment of color15 in section 0 */
#define offset_of_ace3_2_reg_main_sa_user_color15_0 (0x7e)
#define mask_of_ace3_2_reg_main_sa_user_color15_0   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color15_0  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR15_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color15_0)
// h0040, bit: 3
/* Main window  ICC saturation adjustment of color0 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color0_1 (0x80)
#define mask_of_ace3_2_reg_main_sa_user_color0_1   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color0_1  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR0_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color0_1)
#define REG_ACE3_2_40_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR0_1)
// h0040, bit: 11
/* Main window  ICC saturation adjustment of color1 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color1_1 (0x80)
#define mask_of_ace3_2_reg_main_sa_user_color1_1   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color1_1  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR1_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color1_1)
// h0041, bit: 3
/* Main window  ICC saturation adjustment of color2 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color2_1 (0x82)
#define mask_of_ace3_2_reg_main_sa_user_color2_1   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color2_1  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR2_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color2_1)
#define REG_ACE3_2_41_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR2_1)
// h0041, bit: 11
/* Main window  ICC saturation adjustment of color3 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color3_1 (0x82)
#define mask_of_ace3_2_reg_main_sa_user_color3_1   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color3_1  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR3_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color3_1)
// h0042, bit: 3
/* Main window  ICC saturation adjustment of color4 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color4_1 (0x84)
#define mask_of_ace3_2_reg_main_sa_user_color4_1   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color4_1  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR4_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color4_1)
#define REG_ACE3_2_42_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR4_1)
// h0042, bit: 11
/* Main window  ICC saturation adjustment of color5 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color5_1 (0x84)
#define mask_of_ace3_2_reg_main_sa_user_color5_1   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color5_1  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR5_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color5_1)
// h0043, bit: 3
/* Main window  ICC saturation adjustment of color6 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color6_1 (0x86)
#define mask_of_ace3_2_reg_main_sa_user_color6_1   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color6_1  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR6_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color6_1)
#define REG_ACE3_2_43_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR6_1)
// h0043, bit: 11
/* Main window  ICC saturation adjustment of color7 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color7_1 (0x86)
#define mask_of_ace3_2_reg_main_sa_user_color7_1   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color7_1  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR7_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color7_1)
// h0044, bit: 3
/* Main window  ICC saturation adjustment of color8 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color8_1 (0x88)
#define mask_of_ace3_2_reg_main_sa_user_color8_1   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color8_1  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR8_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color8_1)
#define REG_ACE3_2_44_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR8_1)
// h0044, bit: 11
/* Main window  ICC saturation adjustment of color9 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color9_1 (0x88)
#define mask_of_ace3_2_reg_main_sa_user_color9_1   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color9_1  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR9_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color9_1)
// h0045, bit: 3
/* Main window  ICC saturation adjustment of color10 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color10_1 (0x8a)
#define mask_of_ace3_2_reg_main_sa_user_color10_1   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color10_1  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR10_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color10_1)
#define REG_ACE3_2_45_L                             (ACE3_2_REG_MAIN_SA_USER_COLOR10_1)
// h0045, bit: 11
/* Main window  ICC saturation adjustment of color11 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color11_1 (0x8a)
#define mask_of_ace3_2_reg_main_sa_user_color11_1   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color11_1  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR11_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color11_1)
// h0046, bit: 3
/* Main window  ICC saturation adjustment of color12 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color12_1 (0x8c)
#define mask_of_ace3_2_reg_main_sa_user_color12_1   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color12_1  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR12_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color12_1)
#define REG_ACE3_2_46_L                             (ACE3_2_REG_MAIN_SA_USER_COLOR12_1)
// h0046, bit: 11
/* Main window  ICC saturation adjustment of color13 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color13_1 (0x8c)
#define mask_of_ace3_2_reg_main_sa_user_color13_1   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color13_1  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR13_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color13_1)
// h0047, bit: 3
/* Main window  ICC saturation adjustment of color14 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color14_1 (0x8e)
#define mask_of_ace3_2_reg_main_sa_user_color14_1   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color14_1  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR14_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color14_1)
#define REG_ACE3_2_47_L                             (ACE3_2_REG_MAIN_SA_USER_COLOR14_1)
// h0047, bit: 11
/* Main window  ICC saturation adjustment of color15 in section 1 */
#define offset_of_ace3_2_reg_main_sa_user_color15_1 (0x8e)
#define mask_of_ace3_2_reg_main_sa_user_color15_1   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color15_1  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR15_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color15_1)
// h0048, bit: 3
/* Main window  ICC saturation adjustment of color0 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color0_2 (0x90)
#define mask_of_ace3_2_reg_main_sa_user_color0_2   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color0_2  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR0_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color0_2)
#define REG_ACE3_2_48_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR0_2)
// h0048, bit: 11
/* Main window  ICC saturation adjustment of color1 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color1_2 (0x90)
#define mask_of_ace3_2_reg_main_sa_user_color1_2   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color1_2  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR1_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color1_2)
// h0049, bit: 3
/* Main window  ICC saturation adjustment of color2 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color2_2 (0x92)
#define mask_of_ace3_2_reg_main_sa_user_color2_2   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color2_2  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR2_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color2_2)
#define REG_ACE3_2_49_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR2_2)
// h0049, bit: 11
/* Main window  ICC saturation adjustment of color3 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color3_2 (0x92)
#define mask_of_ace3_2_reg_main_sa_user_color3_2   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color3_2  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR3_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color3_2)
// h004a, bit: 3
/* Main window  ICC saturation adjustment of color4 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color4_2 (0x94)
#define mask_of_ace3_2_reg_main_sa_user_color4_2   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color4_2  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR4_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color4_2)
#define REG_ACE3_2_4A_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR4_2)
// h004a, bit: 11
/* Main window  ICC saturation adjustment of color5 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color5_2 (0x94)
#define mask_of_ace3_2_reg_main_sa_user_color5_2   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color5_2  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR5_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color5_2)
// h004b, bit: 3
/* Main window  ICC saturation adjustment of color6 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color6_2 (0x96)
#define mask_of_ace3_2_reg_main_sa_user_color6_2   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color6_2  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR6_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color6_2)
#define REG_ACE3_2_4B_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR6_2)
// h004b, bit: 11
/* Main window  ICC saturation adjustment of color7 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color7_2 (0x96)
#define mask_of_ace3_2_reg_main_sa_user_color7_2   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color7_2  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR7_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color7_2)
// h004c, bit: 3
/* Main window  ICC saturation adjustment of color8 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color8_2 (0x98)
#define mask_of_ace3_2_reg_main_sa_user_color8_2   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color8_2  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR8_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color8_2)
#define REG_ACE3_2_4C_L                            (ACE3_2_REG_MAIN_SA_USER_COLOR8_2)
// h004c, bit: 11
/* Main window  ICC saturation adjustment of color9 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color9_2 (0x98)
#define mask_of_ace3_2_reg_main_sa_user_color9_2   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color9_2  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR9_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color9_2)
// h004d, bit: 3
/* Main window  ICC saturation adjustment of color10 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color10_2 (0x9a)
#define mask_of_ace3_2_reg_main_sa_user_color10_2   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color10_2  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR10_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color10_2)
#define REG_ACE3_2_4D_L                             (ACE3_2_REG_MAIN_SA_USER_COLOR10_2)
// h004d, bit: 11
/* Main window  ICC saturation adjustment of color11 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color11_2 (0x9a)
#define mask_of_ace3_2_reg_main_sa_user_color11_2   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color11_2  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR11_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color11_2)
// h004e, bit: 3
/* Main window  ICC saturation adjustment of color12 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color12_2 (0x9c)
#define mask_of_ace3_2_reg_main_sa_user_color12_2   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color12_2  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR12_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color12_2)
#define REG_ACE3_2_4E_L                             (ACE3_2_REG_MAIN_SA_USER_COLOR12_2)
// h004e, bit: 11
/* Main window  ICC saturation adjustment of color13 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color13_2 (0x9c)
#define mask_of_ace3_2_reg_main_sa_user_color13_2   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color13_2  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR13_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color13_2)
// h004f, bit: 3
/* Main window  ICC saturation adjustment of color14 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color14_2 (0x9e)
#define mask_of_ace3_2_reg_main_sa_user_color14_2   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color14_2  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR14_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color14_2)
#define REG_ACE3_2_4F_L                             (ACE3_2_REG_MAIN_SA_USER_COLOR14_2)
// h004f, bit: 11
/* Main window  ICC saturation adjustment of color15 in section 2 */
#define offset_of_ace3_2_reg_main_sa_user_color15_2 (0x9e)
#define mask_of_ace3_2_reg_main_sa_user_color15_2   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color15_2  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR15_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color15_2)
// h0050, bit: 1
/* Main window ICC adaptive Y mode  in different color enable*/
#define offset_of_ace3_2_reg_main_icc_y_mode_diff_color_en (0xa0)
#define mask_of_ace3_2_reg_main_icc_y_mode_diff_color_en   (0x2)
#define shift_of_ace3_2_reg_main_icc_y_mode_diff_color_en  (1)
#define ACE3_2_REG_MAIN_ICC_Y_MODE_DIFF_COLOR_EN           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_icc_y_mode_diff_color_en)
#define REG_ACE3_2_50_L                                    (ACE3_2_REG_MAIN_ICC_Y_MODE_DIFF_COLOR_EN)
// h0050, bit: 7
/* Main window ICC adaptive Y mode enable*/
#define offset_of_ace3_2_reg_main_icc_y_mode_en (0xa0)
#define mask_of_ace3_2_reg_main_icc_y_mode_en   (0x80)
#define shift_of_ace3_2_reg_main_icc_y_mode_en  (7)
#define ACE3_2_REG_MAIN_ICC_Y_MODE_EN           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_icc_y_mode_en)
// h0051, bit: 15
/* Main window ICC decrease saturation  in section 0,
 */
#define offset_of_ace3_2_reg_main_sign_sa_user_0 (0xa2)
#define mask_of_ace3_2_reg_main_sign_sa_user_0   (0xffff)
#define shift_of_ace3_2_reg_main_sign_sa_user_0  (0)
#define ACE3_2_REG_MAIN_SIGN_SA_USER_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sign_sa_user_0)
#define REG_ACE3_2_51_L                          (ACE3_2_REG_MAIN_SIGN_SA_USER_0)
#define REG_ACE3_2_52_L                          (REG_ACE3_2_BASE + 0xa4)
// h0053, bit: 15
/* Main window ICC decrease saturation in section 1 ,
 */
#define offset_of_ace3_2_reg_main_sign_sa_user_1 (0xa6)
#define mask_of_ace3_2_reg_main_sign_sa_user_1   (0xffff)
#define shift_of_ace3_2_reg_main_sign_sa_user_1  (0)
#define ACE3_2_REG_MAIN_SIGN_SA_USER_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sign_sa_user_1)
#define REG_ACE3_2_53_L                          (ACE3_2_REG_MAIN_SIGN_SA_USER_1)
#define REG_ACE3_2_54_L                          (REG_ACE3_2_BASE + 0xa8)
// h0055, bit: 15
/* Main window ICC decrease saturation in section 2,
 */
#define offset_of_ace3_2_reg_main_sign_sa_user_2 (0xaa)
#define mask_of_ace3_2_reg_main_sign_sa_user_2   (0xffff)
#define shift_of_ace3_2_reg_main_sign_sa_user_2  (0)
#define ACE3_2_REG_MAIN_SIGN_SA_USER_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sign_sa_user_2)
#define REG_ACE3_2_55_L                          (ACE3_2_REG_MAIN_SIGN_SA_USER_2)
#define REG_ACE3_2_56_L                          (REG_ACE3_2_BASE + 0xac)
#define REG_ACE3_2_57_L                          (REG_ACE3_2_BASE + 0xae)
// h0058, bit: 15
/* IHC color test mode,
16 colors [15:0]*/
#define offset_of_ace3_2_reg_ihc_color_test (0xb0)
#define mask_of_ace3_2_reg_ihc_color_test   (0xffff)
#define shift_of_ace3_2_reg_ihc_color_test  (0)
#define ACE3_2_REG_IHC_COLOR_TEST           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_ihc_color_test)
#define REG_ACE3_2_58_L                     (ACE3_2_REG_IHC_COLOR_TEST)
// h0059, bit: 15
/* ICC color test mode,
16 colors [15:0]*/
#define offset_of_ace3_2_reg_icc_color_test (0xb2)
#define mask_of_ace3_2_reg_icc_color_test   (0xffff)
#define shift_of_ace3_2_reg_icc_color_test  (0)
#define ACE3_2_REG_ICC_COLOR_TEST           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_icc_color_test)
#define REG_ACE3_2_59_L                     (ACE3_2_REG_ICC_COLOR_TEST)
#define REG_ACE3_2_5A_L                     (REG_ACE3_2_BASE + 0xb4)
#define REG_ACE3_2_5B_L                     (REG_ACE3_2_BASE + 0xb6)
#define REG_ACE3_2_5C_L                     (REG_ACE3_2_BASE + 0xb8)
#define REG_ACE3_2_5D_L                     (REG_ACE3_2_BASE + 0xba)
#define REG_ACE3_2_5E_L                     (REG_ACE3_2_BASE + 0xbc)
#define REG_ACE3_2_5F_L                     (REG_ACE3_2_BASE + 0xbe)
// h0060, bit: 0
/* ICC dither enable*/
#define offset_of_ace3_2_reg_icc_dither_en (0xc0)
#define mask_of_ace3_2_reg_icc_dither_en   (0x1)
#define shift_of_ace3_2_reg_icc_dither_en  (0)
#define ACE3_2_REG_ICC_DITHER_EN           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_icc_dither_en)
#define REG_ACE3_2_60_L                    (ACE3_2_REG_ICC_DITHER_EN)
// h0060, bit: 1
/* reserved*/
#define offset_of_ace3_2_reg_icc_low_reserve1 (0xc0)
#define mask_of_ace3_2_reg_icc_low_reserve1   (0x2)
#define shift_of_ace3_2_reg_icc_low_reserve1  (1)
#define ACE3_2_REG_ICC_LOW_RESERVE1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_icc_low_reserve1)
// h0060, bit: 5
/* reserved*/
#define offset_of_ace3_2_reg_icc_low_reserve2 (0xc0)
#define mask_of_ace3_2_reg_icc_low_reserve2   (0x30)
#define shift_of_ace3_2_reg_icc_low_reserve2  (4)
#define ACE3_2_REG_ICC_LOW_RESERVE2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_icc_low_reserve2)
// h0060, bit: 6
/* Main window ICC enable*/
#define offset_of_ace3_2_reg_main_icc_en (0xc0)
#define mask_of_ace3_2_reg_main_icc_en   (0x40)
#define shift_of_ace3_2_reg_main_icc_en  (6)
#define ACE3_2_REG_MAIN_ICC_EN           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_icc_en)
// h0060, bit: 7
/* Main window cbcr to uv enable*/
#define offset_of_ace3_2_reg_main_cbcr_to_uv (0xc0)
#define mask_of_ace3_2_reg_main_cbcr_to_uv   (0x80)
#define shift_of_ace3_2_reg_main_cbcr_to_uv  (7)
#define ACE3_2_REG_MAIN_CBCR_TO_UV           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_cbcr_to_uv)
// h0060, bit: 15
/* reserved*/
#define offset_of_ace3_2_reg_icc_reserved (0xc0)
#define mask_of_ace3_2_reg_icc_reserved   (0xff00)
#define shift_of_ace3_2_reg_icc_reserved  (8)
#define ACE3_2_REG_ICC_RESERVED           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_icc_reserved)
// h0061, bit: 3
/* Main window  ICC saturation adjustment of color 0 */
#define offset_of_ace3_2_reg_main_sa_user_color0 (0xc2)
#define mask_of_ace3_2_reg_main_sa_user_color0   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color0  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color0)
#define REG_ACE3_2_61_L                          (ACE3_2_REG_MAIN_SA_USER_COLOR0)
// h0061, bit: 11
/* Main window  ICC saturation adjustment of color 1 */
#define offset_of_ace3_2_reg_main_sa_user_color1 (0xc2)
#define mask_of_ace3_2_reg_main_sa_user_color1   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color1  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color1)
// h0062, bit: 3
/* Main window  ICC saturation adjustment of color 2 */
#define offset_of_ace3_2_reg_main_sa_user_color2 (0xc4)
#define mask_of_ace3_2_reg_main_sa_user_color2   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color2  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color2)
#define REG_ACE3_2_62_L                          (ACE3_2_REG_MAIN_SA_USER_COLOR2)
// h0062, bit: 11
/* Main window  ICC saturation adjustment of color 3 */
#define offset_of_ace3_2_reg_main_sa_user_color3 (0xc4)
#define mask_of_ace3_2_reg_main_sa_user_color3   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color3  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color3)
// h0063, bit: 3
/* Main window  ICC saturation adjustment of color 4 */
#define offset_of_ace3_2_reg_main_sa_user_color4 (0xc6)
#define mask_of_ace3_2_reg_main_sa_user_color4   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color4  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR4           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color4)
#define REG_ACE3_2_63_L                          (ACE3_2_REG_MAIN_SA_USER_COLOR4)
// h0063, bit: 11
/* Main window  ICC saturation adjustment of color 5 */
#define offset_of_ace3_2_reg_main_sa_user_color5 (0xc6)
#define mask_of_ace3_2_reg_main_sa_user_color5   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color5  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR5           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color5)
// h0064, bit: 3
/* Main window  ICC saturation adjustment of color 6 */
#define offset_of_ace3_2_reg_main_sa_user_color6 (0xc8)
#define mask_of_ace3_2_reg_main_sa_user_color6   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color6  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR6           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color6)
#define REG_ACE3_2_64_L                          (ACE3_2_REG_MAIN_SA_USER_COLOR6)
// h0064, bit: 11
/* Main window  ICC saturation adjustment of color 7 */
#define offset_of_ace3_2_reg_main_sa_user_color7 (0xc8)
#define mask_of_ace3_2_reg_main_sa_user_color7   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color7  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR7           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color7)
// h0065, bit: 3
/* Main window  ICC saturation adjustment of color 8*/
#define offset_of_ace3_2_reg_main_sa_user_color8 (0xca)
#define mask_of_ace3_2_reg_main_sa_user_color8   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color8  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR8           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color8)
#define REG_ACE3_2_65_L                          (ACE3_2_REG_MAIN_SA_USER_COLOR8)
// h0065, bit: 11
/* Main window  ICC saturation adjustment of color 9 */
#define offset_of_ace3_2_reg_main_sa_user_color9 (0xca)
#define mask_of_ace3_2_reg_main_sa_user_color9   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color9  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR9           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color9)
// h0066, bit: 3
/* Main window  ICC saturation adjustment of color 10*/
#define offset_of_ace3_2_reg_main_sa_user_color10 (0xcc)
#define mask_of_ace3_2_reg_main_sa_user_color10   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color10  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR10           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color10)
#define REG_ACE3_2_66_L                           (ACE3_2_REG_MAIN_SA_USER_COLOR10)
// h0066, bit: 11
/* Main window  ICC saturation adjustment of color 11*/
#define offset_of_ace3_2_reg_main_sa_user_color11 (0xcc)
#define mask_of_ace3_2_reg_main_sa_user_color11   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color11  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR11           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color11)
// h0067, bit: 3
/* Main window  ICC saturation adjustment of color 12 */
#define offset_of_ace3_2_reg_main_sa_user_color12 (0xce)
#define mask_of_ace3_2_reg_main_sa_user_color12   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color12  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR12           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color12)
#define REG_ACE3_2_67_L                           (ACE3_2_REG_MAIN_SA_USER_COLOR12)
// h0067, bit: 11
/* Main window  ICC saturation adjustment of color 13 */
#define offset_of_ace3_2_reg_main_sa_user_color13 (0xce)
#define mask_of_ace3_2_reg_main_sa_user_color13   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color13  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR13           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color13)
// h0068, bit: 3
/* Main window  ICC saturation adjustment of color 14 */
#define offset_of_ace3_2_reg_main_sa_user_color14 (0xd0)
#define mask_of_ace3_2_reg_main_sa_user_color14   (0xf)
#define shift_of_ace3_2_reg_main_sa_user_color14  (0)
#define ACE3_2_REG_MAIN_SA_USER_COLOR14           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color14)
#define REG_ACE3_2_68_L                           (ACE3_2_REG_MAIN_SA_USER_COLOR14)
// h0068, bit: 11
/* Main window  ICC saturation adjustment of color 15 */
#define offset_of_ace3_2_reg_main_sa_user_color15 (0xd0)
#define mask_of_ace3_2_reg_main_sa_user_color15   (0xf00)
#define shift_of_ace3_2_reg_main_sa_user_color15  (8)
#define ACE3_2_REG_MAIN_SA_USER_COLOR15           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sa_user_color15)
// h0069, bit: 15
/* Main window ICC decrease saturation,
 */
#define offset_of_ace3_2_reg_main_sign_sa_user (0xd2)
#define mask_of_ace3_2_reg_main_sign_sa_user   (0xffff)
#define shift_of_ace3_2_reg_main_sign_sa_user  (0)
#define ACE3_2_REG_MAIN_SIGN_SA_USER           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_sign_sa_user)
#define REG_ACE3_2_69_L                        (ACE3_2_REG_MAIN_SIGN_SA_USER)
#define REG_ACE3_2_6A_L                        (REG_ACE3_2_BASE + 0xd4)
// h006b, bit: 4
/* ICC decrease saturation common gain,
.XXXXX*/
#define offset_of_ace3_2_reg_common_minus_gain (0xd6)
#define mask_of_ace3_2_reg_common_minus_gain   (0x1f)
#define shift_of_ace3_2_reg_common_minus_gain  (0)
#define ACE3_2_REG_COMMON_MINUS_GAIN           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_common_minus_gain)
#define REG_ACE3_2_6B_L                        (ACE3_2_REG_COMMON_MINUS_GAIN)
// h006b, bit: 14
/* ICC decrease saturation minimum threshold,
.XXXXXXX*/
#define offset_of_ace3_2_reg_sa_min (0xd6)
#define mask_of_ace3_2_reg_sa_min   (0x7f00)
#define shift_of_ace3_2_reg_sa_min  (8)
#define ACE3_2_REG_SA_MIN           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_sa_min)
// h006c, bit: 15
/* Main window ICC step, dafualt=0, one is user_gain x2
 */
#define offset_of_ace3_2_reg_main_step_sa_user (0xd8)
#define mask_of_ace3_2_reg_main_step_sa_user   (0xffff)
#define shift_of_ace3_2_reg_main_step_sa_user  (0)
#define ACE3_2_REG_MAIN_STEP_SA_USER           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_step_sa_user)
#define REG_ACE3_2_6C_L                        (ACE3_2_REG_MAIN_STEP_SA_USER)
#define REG_ACE3_2_6D_L                        (REG_ACE3_2_BASE + 0xda)
// h006e, bit: 15
/* reserved*/
#define offset_of_ace3_2_reg_reserved_icc_low_y (0xdc)
#define mask_of_ace3_2_reg_reserved_icc_low_y   (0xffff)
#define shift_of_ace3_2_reg_reserved_icc_low_y  (0)
#define ACE3_2_REG_RESERVED_ICC_LOW_Y           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_reserved_icc_low_y)
#define REG_ACE3_2_6E_L                         (ACE3_2_REG_RESERVED_ICC_LOW_Y)
#define REG_ACE3_2_6F_L                         (REG_ACE3_2_BASE + 0xde)
// h0070, bit: 0
/* Main window coring adaptive y enable*/
#define offset_of_ace3_2_reg_main_coring_adp_y_en (0xe0)
#define mask_of_ace3_2_reg_main_coring_adp_y_en   (0x1)
#define shift_of_ace3_2_reg_main_coring_adp_y_en  (0)
#define ACE3_2_REG_MAIN_CORING_ADP_Y_EN           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_coring_adp_y_en)
#define REG_ACE3_2_70_L                           (ACE3_2_REG_MAIN_CORING_ADP_Y_EN)
// h0070, bit: 1
/* Main window coring adaptive y alpha low pass filter enable*/
#define offset_of_ace3_2_reg_main_coring_adp_y_alpha_lpf_en (0xe0)
#define mask_of_ace3_2_reg_main_coring_adp_y_alpha_lpf_en   (0x2)
#define shift_of_ace3_2_reg_main_coring_adp_y_alpha_lpf_en  (1)
#define ACE3_2_REG_MAIN_CORING_ADP_Y_ALPHA_LPF_EN \
    (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_coring_adp_y_alpha_lpf_en)
// h0070, bit: 5
/* Main window coring adaptive y alpha step*/
#define offset_of_ace3_2_reg_main_coring_adp_y_step (0xe0)
#define mask_of_ace3_2_reg_main_coring_adp_y_step   (0x30)
#define shift_of_ace3_2_reg_main_coring_adp_y_step  (4)
#define ACE3_2_REG_MAIN_CORING_ADP_Y_STEP           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_coring_adp_y_step)
// h0070, bit: 15
/* Main window coring adaptive y low threshold */
#define offset_of_ace3_2_reg_main_coring_y_low_thrd (0xe0)
#define mask_of_ace3_2_reg_main_coring_y_low_thrd   (0xff00)
#define shift_of_ace3_2_reg_main_coring_y_low_thrd  (8)
#define ACE3_2_REG_MAIN_CORING_Y_LOW_THRD           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_coring_y_low_thrd)
// h0071, bit: 5
/* Main window coring adaptive y alpha LUT 0*/
#define offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_0 (0xe2)
#define mask_of_ace3_2_reg_main_coring_adp_y_alpha_lut_0   (0x3f)
#define shift_of_ace3_2_reg_main_coring_adp_y_alpha_lut_0  (0)
#define ACE3_2_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_0           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_0)
#define REG_ACE3_2_71_L                                    (ACE3_2_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_0)
// h0071, bit: 13
/* Main window coring adaptive y alpha LUT 1*/
#define offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_1 (0xe2)
#define mask_of_ace3_2_reg_main_coring_adp_y_alpha_lut_1   (0x3f00)
#define shift_of_ace3_2_reg_main_coring_adp_y_alpha_lut_1  (8)
#define ACE3_2_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_1           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_1)
// h0072, bit: 5
/* Main window coring adaptive y alpha LUT 2*/
#define offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_2 (0xe4)
#define mask_of_ace3_2_reg_main_coring_adp_y_alpha_lut_2   (0x3f)
#define shift_of_ace3_2_reg_main_coring_adp_y_alpha_lut_2  (0)
#define ACE3_2_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_2           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_2)
#define REG_ACE3_2_72_L                                    (ACE3_2_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_2)
// h0072, bit: 13
/* Main window coring adaptive y alpha LUT 3*/
#define offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_3 (0xe4)
#define mask_of_ace3_2_reg_main_coring_adp_y_alpha_lut_3   (0x3f00)
#define shift_of_ace3_2_reg_main_coring_adp_y_alpha_lut_3  (8)
#define ACE3_2_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_3           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_3)
// h0073, bit: 5
/* Main window coring adaptive y alpha LUT 4*/
#define offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_4 (0xe6)
#define mask_of_ace3_2_reg_main_coring_adp_y_alpha_lut_4   (0x3f)
#define shift_of_ace3_2_reg_main_coring_adp_y_alpha_lut_4  (0)
#define ACE3_2_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_4           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_4)
#define REG_ACE3_2_73_L                                    (ACE3_2_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_4)
// h0073, bit: 13
/* Main window coring adaptive y alpha LUT 5*/
#define offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_5 (0xe6)
#define mask_of_ace3_2_reg_main_coring_adp_y_alpha_lut_5   (0x3f00)
#define shift_of_ace3_2_reg_main_coring_adp_y_alpha_lut_5  (8)
#define ACE3_2_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_5           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_5)
// h0074, bit: 5
/* Main window coring adaptive y alpha LUT 6*/
#define offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_6 (0xe8)
#define mask_of_ace3_2_reg_main_coring_adp_y_alpha_lut_6   (0x3f)
#define shift_of_ace3_2_reg_main_coring_adp_y_alpha_lut_6  (0)
#define ACE3_2_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_6           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_6)
#define REG_ACE3_2_74_L                                    (ACE3_2_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_6)
// h0074, bit: 13
/* Main window coring adaptive y alpha LUT 7*/
#define offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_7 (0xe8)
#define mask_of_ace3_2_reg_main_coring_adp_y_alpha_lut_7   (0x3f00)
#define shift_of_ace3_2_reg_main_coring_adp_y_alpha_lut_7  (8)
#define ACE3_2_REG_MAIN_CORING_ADP_Y_ALPHA_LUT_7           (REG_ACE3_2_BASE + offset_of_ace3_2_reg_main_coring_adp_y_alpha_lut_7)
#define REG_ACE3_2_75_L                                    (REG_ACE3_2_BASE + 0xea)
#define REG_ACE3_2_76_L                                    (REG_ACE3_2_BASE + 0xec)
#define REG_ACE3_2_77_L                                    (REG_ACE3_2_BASE + 0xee)
#define REG_ACE3_2_78_L                                    (REG_ACE3_2_BASE + 0xf0)
#define REG_ACE3_2_79_L                                    (REG_ACE3_2_BASE + 0xf2)
#define REG_ACE3_2_7A_L                                    (REG_ACE3_2_BASE + 0xf4)
#define REG_ACE3_2_7B_L                                    (REG_ACE3_2_BASE + 0xf6)
#define REG_ACE3_2_7C_L                                    (REG_ACE3_2_BASE + 0xf8)
#define REG_ACE3_2_7D_L                                    (REG_ACE3_2_BASE + 0xfa)
#define REG_ACE3_2_7E_L                                    (REG_ACE3_2_BASE + 0xfc)
#define REG_ACE3_2_7F_L                                    (REG_ACE3_2_BASE + 0xfe)
#define REG_ACE_2_00_L                                     (REG_ACE_2_BASE + 0x0)
#define REG_ACE_2_01_L                                     (REG_ACE_2_BASE + 0x2)
#define REG_ACE_2_02_L                                     (REG_ACE_2_BASE + 0x4)
#define REG_ACE_2_03_L                                     (REG_ACE_2_BASE + 0x6)
#define REG_ACE_2_04_L                                     (REG_ACE_2_BASE + 0x8)
#define REG_ACE_2_05_L                                     (REG_ACE_2_BASE + 0xa)
#define REG_ACE_2_06_L                                     (REG_ACE_2_BASE + 0xc)
#define REG_ACE_2_07_L                                     (REG_ACE_2_BASE + 0xe)
#define REG_ACE_2_08_L                                     (REG_ACE_2_BASE + 0x10)
#define REG_ACE_2_09_L                                     (REG_ACE_2_BASE + 0x12)
#define REG_ACE_2_0A_L                                     (REG_ACE_2_BASE + 0x14)
#define REG_ACE_2_0B_L                                     (REG_ACE_2_BASE + 0x16)
#define REG_ACE_2_0C_L                                     (REG_ACE_2_BASE + 0x18)
#define REG_ACE_2_0D_L                                     (REG_ACE_2_BASE + 0x1a)
#define REG_ACE_2_0E_L                                     (REG_ACE_2_BASE + 0x1c)
#define REG_ACE_2_0F_L                                     (REG_ACE_2_BASE + 0x1e)
// h0010, bit: 0
/* Main window FCC region 1 enable*/
#define offset_of_ace_2_reg_main_fcc_1t_en (0x20)
#define mask_of_ace_2_reg_main_fcc_1t_en   (0x1)
#define shift_of_ace_2_reg_main_fcc_1t_en  (0)
#define ACE_2_REG_MAIN_FCC_1T_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_fcc_1t_en)
#define REG_ACE_2_10_L                     (ACE_2_REG_MAIN_FCC_1T_EN)
// h0010, bit: 1
/* Main window FCC region 2 enable*/
#define offset_of_ace_2_reg_main_fcc_2t_en (0x20)
#define mask_of_ace_2_reg_main_fcc_2t_en   (0x2)
#define shift_of_ace_2_reg_main_fcc_2t_en  (1)
#define ACE_2_REG_MAIN_FCC_2T_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_fcc_2t_en)
// h0010, bit: 2
/* Main window FCC region 3 enable*/
#define offset_of_ace_2_reg_main_fcc_3t_en (0x20)
#define mask_of_ace_2_reg_main_fcc_3t_en   (0x4)
#define shift_of_ace_2_reg_main_fcc_3t_en  (2)
#define ACE_2_REG_MAIN_FCC_3T_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_fcc_3t_en)
// h0010, bit: 3
/* Main window FCC region 4 enable*/
#define offset_of_ace_2_reg_main_fcc_4t_en (0x20)
#define mask_of_ace_2_reg_main_fcc_4t_en   (0x8)
#define shift_of_ace_2_reg_main_fcc_4t_en  (3)
#define ACE_2_REG_MAIN_FCC_4T_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_fcc_4t_en)
// h0010, bit: 4
/* Main window FCC region 5 enable*/
#define offset_of_ace_2_reg_main_fcc_5t_en (0x20)
#define mask_of_ace_2_reg_main_fcc_5t_en   (0x10)
#define shift_of_ace_2_reg_main_fcc_5t_en  (4)
#define ACE_2_REG_MAIN_FCC_5T_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_fcc_5t_en)
// h0010, bit: 5
/* Main window FCC region 6 enable*/
#define offset_of_ace_2_reg_main_fcc_6t_en (0x20)
#define mask_of_ace_2_reg_main_fcc_6t_en   (0x20)
#define shift_of_ace_2_reg_main_fcc_6t_en  (5)
#define ACE_2_REG_MAIN_FCC_6T_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_fcc_6t_en)
// h0010, bit: 6
/* Main window FCC region 7 enable*/
#define offset_of_ace_2_reg_main_fcc_7t_en (0x20)
#define mask_of_ace_2_reg_main_fcc_7t_en   (0x40)
#define shift_of_ace_2_reg_main_fcc_7t_en  (6)
#define ACE_2_REG_MAIN_FCC_7T_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_fcc_7t_en)
// h0010, bit: 7
/* Main window FCC region 8 enable*/
#define offset_of_ace_2_reg_main_fcc_8t_en (0x20)
#define mask_of_ace_2_reg_main_fcc_8t_en   (0x80)
#define shift_of_ace_2_reg_main_fcc_8t_en  (7)
#define ACE_2_REG_MAIN_FCC_8T_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_fcc_8t_en)
// h0010, bit: 8
/* Main window FCC window 9 enable*/
#define offset_of_ace_2_reg_main_fcc_9t_en (0x20)
#define mask_of_ace_2_reg_main_fcc_9t_en   (0x100)
#define shift_of_ace_2_reg_main_fcc_9t_en  (8)
#define ACE_2_REG_MAIN_FCC_9T_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_fcc_9t_en)
// h0010, bit: 9
/* Main window FCC window 9 priority one enable*/
#define offset_of_ace_2_reg_main_fcc_9t_first_en (0x20)
#define mask_of_ace_2_reg_main_fcc_9t_first_en   (0x200)
#define shift_of_ace_2_reg_main_fcc_9t_first_en  (9)
#define ACE_2_REG_MAIN_FCC_9T_FIRST_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_fcc_9t_first_en)
// h0010, bit: 13
/* reserved*/
#define offset_of_ace_2_reg_fcc_reserved_1 (0x20)
#define mask_of_ace_2_reg_fcc_reserved_1   (0x3c00)
#define shift_of_ace_2_reg_fcc_reserved_1  (10)
#define ACE_2_REG_FCC_RESERVED_1           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_reserved_1)
// h0010, bit: 14
/* FCC dither bit enable*/
#define offset_of_ace_2_reg_fcc_dither_en (0x20)
#define mask_of_ace_2_reg_fcc_dither_en   (0x4000)
#define shift_of_ace_2_reg_fcc_dither_en  (14)
#define ACE_2_REG_FCC_DITHER_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_dither_en)
// h0010, bit: 15
/* Region 1 dark mode enable*/
#define offset_of_ace_2_reg_fcc_win1_dark_mode_en (0x20)
#define mask_of_ace_2_reg_fcc_win1_dark_mode_en   (0x8000)
#define shift_of_ace_2_reg_fcc_win1_dark_mode_en  (15)
#define ACE_2_REG_FCC_WIN1_DARK_MODE_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win1_dark_mode_en)
// h0011, bit: 15
/* reserved*/
#define offset_of_ace_2_reg_fcc_reserved_2 (0x22)
#define mask_of_ace_2_reg_fcc_reserved_2   (0xfc00)
#define shift_of_ace_2_reg_fcc_reserved_2  (10)
#define ACE_2_REG_FCC_RESERVED_2           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_reserved_2)
#define REG_ACE_2_11_L                     (ACE_2_REG_FCC_RESERVED_2)
// h0012, bit: 1
/* Main window FCC boundary limit distance
#0 : disable
#1: x4
#2: x2
#3: x1*/
#define offset_of_ace_2_reg_main_fcc_bdry_dist (0x24)
#define mask_of_ace_2_reg_main_fcc_bdry_dist   (0x3)
#define shift_of_ace_2_reg_main_fcc_bdry_dist  (0)
#define ACE_2_REG_MAIN_FCC_BDRY_DIST           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_fcc_bdry_dist)
#define REG_ACE_2_12_L                         (ACE_2_REG_MAIN_FCC_BDRY_DIST)
// h0013, bit: 7
/* FCC region 1 cb target, when Y=10*/
#define offset_of_ace_2_reg_fcc_cb_t1_y_10 (0x26)
#define mask_of_ace_2_reg_fcc_cb_t1_y_10   (0xff)
#define shift_of_ace_2_reg_fcc_cb_t1_y_10  (0)
#define ACE_2_REG_FCC_CB_T1_Y_10           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cb_t1_y_10)
#define REG_ACE_2_13_L                     (ACE_2_REG_FCC_CB_T1_Y_10)
// h0013, bit: 15
/* FCC region 1 cr target, when Y=10*/
#define offset_of_ace_2_reg_fcc_cr_t1_y_10 (0x26)
#define mask_of_ace_2_reg_fcc_cr_t1_y_10   (0xff00)
#define shift_of_ace_2_reg_fcc_cr_t1_y_10  (8)
#define ACE_2_REG_FCC_CR_T1_Y_10           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cr_t1_y_10)
// h0014, bit: 7
/* FCC region 1 cb target, when Y=20*/
#define offset_of_ace_2_reg_fcc_cb_t1_y_20 (0x28)
#define mask_of_ace_2_reg_fcc_cb_t1_y_20   (0xff)
#define shift_of_ace_2_reg_fcc_cb_t1_y_20  (0)
#define ACE_2_REG_FCC_CB_T1_Y_20           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cb_t1_y_20)
#define REG_ACE_2_14_L                     (ACE_2_REG_FCC_CB_T1_Y_20)
// h0014, bit: 15
/* FCC region 1 cr target, when Y=20*/
#define offset_of_ace_2_reg_fcc_cr_t1_y_20 (0x28)
#define mask_of_ace_2_reg_fcc_cr_t1_y_20   (0xff00)
#define shift_of_ace_2_reg_fcc_cr_t1_y_20  (8)
#define ACE_2_REG_FCC_CR_T1_Y_20           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cr_t1_y_20)
// h0015, bit: 7
/* FCC region 1 cb target, when Y=30*/
#define offset_of_ace_2_reg_fcc_cb_t1_y_30 (0x2a)
#define mask_of_ace_2_reg_fcc_cb_t1_y_30   (0xff)
#define shift_of_ace_2_reg_fcc_cb_t1_y_30  (0)
#define ACE_2_REG_FCC_CB_T1_Y_30           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cb_t1_y_30)
#define REG_ACE_2_15_L                     (ACE_2_REG_FCC_CB_T1_Y_30)
// h0015, bit: 15
/* FCC region 1 cr target, when Y=30*/
#define offset_of_ace_2_reg_fcc_cr_t1_y_30 (0x2a)
#define mask_of_ace_2_reg_fcc_cr_t1_y_30   (0xff00)
#define shift_of_ace_2_reg_fcc_cr_t1_y_30  (8)
#define ACE_2_REG_FCC_CR_T1_Y_30           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cr_t1_y_30)
// h0016, bit: 7
/* FCC region 1 cb target, when Y=40*/
#define offset_of_ace_2_reg_fcc_cb_t1_y_40 (0x2c)
#define mask_of_ace_2_reg_fcc_cb_t1_y_40   (0xff)
#define shift_of_ace_2_reg_fcc_cb_t1_y_40  (0)
#define ACE_2_REG_FCC_CB_T1_Y_40           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cb_t1_y_40)
#define REG_ACE_2_16_L                     (ACE_2_REG_FCC_CB_T1_Y_40)
// h0016, bit: 15
/* FCC region 1 cr target, when Y=40*/
#define offset_of_ace_2_reg_fcc_cr_t1_y_40 (0x2c)
#define mask_of_ace_2_reg_fcc_cr_t1_y_40   (0xff00)
#define shift_of_ace_2_reg_fcc_cr_t1_y_40  (8)
#define ACE_2_REG_FCC_CR_T1_Y_40           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cr_t1_y_40)
// h0017, bit: 7
/* FCC region 1 cb target, when Y=50*/
#define offset_of_ace_2_reg_fcc_cb_t1_y_50 (0x2e)
#define mask_of_ace_2_reg_fcc_cb_t1_y_50   (0xff)
#define shift_of_ace_2_reg_fcc_cb_t1_y_50  (0)
#define ACE_2_REG_FCC_CB_T1_Y_50           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cb_t1_y_50)
#define REG_ACE_2_17_L                     (ACE_2_REG_FCC_CB_T1_Y_50)
// h0017, bit: 15
/* FCC region 1 cr target, when Y=50*/
#define offset_of_ace_2_reg_fcc_cr_t1_y_50 (0x2e)
#define mask_of_ace_2_reg_fcc_cr_t1_y_50   (0xff00)
#define shift_of_ace_2_reg_fcc_cr_t1_y_50  (8)
#define ACE_2_REG_FCC_CR_T1_Y_50           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cr_t1_y_50)
// h0018, bit: 7
/* FCC region 1 cb target*/
#define offset_of_ace_2_reg_fcc_cb_t1 (0x30)
#define mask_of_ace_2_reg_fcc_cb_t1   (0xff)
#define shift_of_ace_2_reg_fcc_cb_t1  (0)
#define ACE_2_REG_FCC_CB_T1           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cb_t1)
#define REG_ACE_2_18_L                (ACE_2_REG_FCC_CB_T1)
// h0018, bit: 15
/* FCC region 1 cr target*/
#define offset_of_ace_2_reg_fcc_cr_t1 (0x30)
#define mask_of_ace_2_reg_fcc_cr_t1   (0xff00)
#define shift_of_ace_2_reg_fcc_cr_t1  (8)
#define ACE_2_REG_FCC_CR_T1           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cr_t1)
// h0019, bit: 7
/* FCC region 2 cb target*/
#define offset_of_ace_2_reg_fcc_cb_t2 (0x32)
#define mask_of_ace_2_reg_fcc_cb_t2   (0xff)
#define shift_of_ace_2_reg_fcc_cb_t2  (0)
#define ACE_2_REG_FCC_CB_T2           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cb_t2)
#define REG_ACE_2_19_L                (ACE_2_REG_FCC_CB_T2)
// h0019, bit: 15
/* FCC region 2 cr target*/
#define offset_of_ace_2_reg_fcc_cr_t2 (0x32)
#define mask_of_ace_2_reg_fcc_cr_t2   (0xff00)
#define shift_of_ace_2_reg_fcc_cr_t2  (8)
#define ACE_2_REG_FCC_CR_T2           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cr_t2)
// h001a, bit: 7
/* FCC region 3 cb target*/
#define offset_of_ace_2_reg_fcc_cb_t3 (0x34)
#define mask_of_ace_2_reg_fcc_cb_t3   (0xff)
#define shift_of_ace_2_reg_fcc_cb_t3  (0)
#define ACE_2_REG_FCC_CB_T3           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cb_t3)
#define REG_ACE_2_1A_L                (ACE_2_REG_FCC_CB_T3)
// h001a, bit: 15
/* FCC region 3 cr target*/
#define offset_of_ace_2_reg_fcc_cr_t3 (0x34)
#define mask_of_ace_2_reg_fcc_cr_t3   (0xff00)
#define shift_of_ace_2_reg_fcc_cr_t3  (8)
#define ACE_2_REG_FCC_CR_T3           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cr_t3)
// h001b, bit: 7
/* FCC region 4 cb target*/
#define offset_of_ace_2_reg_fcc_cb_t4 (0x36)
#define mask_of_ace_2_reg_fcc_cb_t4   (0xff)
#define shift_of_ace_2_reg_fcc_cb_t4  (0)
#define ACE_2_REG_FCC_CB_T4           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cb_t4)
#define REG_ACE_2_1B_L                (ACE_2_REG_FCC_CB_T4)
// h001b, bit: 15
/* FCC region 4 cr target*/
#define offset_of_ace_2_reg_fcc_cr_t4 (0x36)
#define mask_of_ace_2_reg_fcc_cr_t4   (0xff00)
#define shift_of_ace_2_reg_fcc_cr_t4  (8)
#define ACE_2_REG_FCC_CR_T4           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cr_t4)
// h001c, bit: 7
/* FCC region 5 cb target*/
#define offset_of_ace_2_reg_fcc_cb_t5 (0x38)
#define mask_of_ace_2_reg_fcc_cb_t5   (0xff)
#define shift_of_ace_2_reg_fcc_cb_t5  (0)
#define ACE_2_REG_FCC_CB_T5           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cb_t5)
#define REG_ACE_2_1C_L                (ACE_2_REG_FCC_CB_T5)
// h001c, bit: 15
/* FCC region 5 cr target*/
#define offset_of_ace_2_reg_fcc_cr_t5 (0x38)
#define mask_of_ace_2_reg_fcc_cr_t5   (0xff00)
#define shift_of_ace_2_reg_fcc_cr_t5  (8)
#define ACE_2_REG_FCC_CR_T5           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cr_t5)
// h001d, bit: 7
/* FCC region 6 cb target*/
#define offset_of_ace_2_reg_fcc_cb_t6 (0x3a)
#define mask_of_ace_2_reg_fcc_cb_t6   (0xff)
#define shift_of_ace_2_reg_fcc_cb_t6  (0)
#define ACE_2_REG_FCC_CB_T6           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cb_t6)
#define REG_ACE_2_1D_L                (ACE_2_REG_FCC_CB_T6)
// h001d, bit: 15
/* FCC region 6 cr target*/
#define offset_of_ace_2_reg_fcc_cr_t6 (0x3a)
#define mask_of_ace_2_reg_fcc_cr_t6   (0xff00)
#define shift_of_ace_2_reg_fcc_cr_t6  (8)
#define ACE_2_REG_FCC_CR_T6           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cr_t6)
// h001e, bit: 7
/* FCC region 7 cb target*/
#define offset_of_ace_2_reg_fcc_cb_t7 (0x3c)
#define mask_of_ace_2_reg_fcc_cb_t7   (0xff)
#define shift_of_ace_2_reg_fcc_cb_t7  (0)
#define ACE_2_REG_FCC_CB_T7           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cb_t7)
#define REG_ACE_2_1E_L                (ACE_2_REG_FCC_CB_T7)
// h001e, bit: 15
/* FCC region 7 cr target*/
#define offset_of_ace_2_reg_fcc_cr_t7 (0x3c)
#define mask_of_ace_2_reg_fcc_cr_t7   (0xff00)
#define shift_of_ace_2_reg_fcc_cr_t7  (8)
#define ACE_2_REG_FCC_CR_T7           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cr_t7)
// h001f, bit: 7
/* FCC region 8 cb target*/
#define offset_of_ace_2_reg_fcc_cb_t8 (0x3e)
#define mask_of_ace_2_reg_fcc_cb_t8   (0xff)
#define shift_of_ace_2_reg_fcc_cb_t8  (0)
#define ACE_2_REG_FCC_CB_T8           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cb_t8)
#define REG_ACE_2_1F_L                (ACE_2_REG_FCC_CB_T8)
// h001f, bit: 15
/* FCC region 8 cr target*/
#define offset_of_ace_2_reg_fcc_cr_t8 (0x3e)
#define mask_of_ace_2_reg_fcc_cr_t8   (0xff00)
#define shift_of_ace_2_reg_fcc_cr_t8  (8)
#define ACE_2_REG_FCC_CR_T8           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_cr_t8)
// h0020, bit: 3
/* FCC region 1 strength*/
#define offset_of_ace_2_reg_fcc_k_1t (0x40)
#define mask_of_ace_2_reg_fcc_k_1t   (0xf)
#define shift_of_ace_2_reg_fcc_k_1t  (0)
#define ACE_2_REG_FCC_K_1T           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_k_1t)
#define REG_ACE_2_20_L               (ACE_2_REG_FCC_K_1T)
// h0020, bit: 7
/* FCC region 2 strength */
#define offset_of_ace_2_reg_fcc_k_2t (0x40)
#define mask_of_ace_2_reg_fcc_k_2t   (0xf0)
#define shift_of_ace_2_reg_fcc_k_2t  (4)
#define ACE_2_REG_FCC_K_2T           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_k_2t)
// h0020, bit: 11
/* FCC region 3 strength*/
#define offset_of_ace_2_reg_fcc_k_3t (0x40)
#define mask_of_ace_2_reg_fcc_k_3t   (0xf00)
#define shift_of_ace_2_reg_fcc_k_3t  (8)
#define ACE_2_REG_FCC_K_3T           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_k_3t)
// h0020, bit: 15
/* FCC region 4 strength */
#define offset_of_ace_2_reg_fcc_k_4t (0x40)
#define mask_of_ace_2_reg_fcc_k_4t   (0xf000)
#define shift_of_ace_2_reg_fcc_k_4t  (12)
#define ACE_2_REG_FCC_K_4T           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_k_4t)
// h0021, bit: 3
/* FCC region 5 strength*/
#define offset_of_ace_2_reg_fcc_k_5t (0x42)
#define mask_of_ace_2_reg_fcc_k_5t   (0xf)
#define shift_of_ace_2_reg_fcc_k_5t  (0)
#define ACE_2_REG_FCC_K_5T           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_k_5t)
#define REG_ACE_2_21_L               (ACE_2_REG_FCC_K_5T)
// h0021, bit: 7
/* FCC region 6 strength*/
#define offset_of_ace_2_reg_fcc_k_6t (0x42)
#define mask_of_ace_2_reg_fcc_k_6t   (0xf0)
#define shift_of_ace_2_reg_fcc_k_6t  (4)
#define ACE_2_REG_FCC_K_6T           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_k_6t)
// h0021, bit: 11
/* FCC region 7 strength*/
#define offset_of_ace_2_reg_fcc_k_7t (0x42)
#define mask_of_ace_2_reg_fcc_k_7t   (0xf00)
#define shift_of_ace_2_reg_fcc_k_7t  (8)
#define ACE_2_REG_FCC_K_7T           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_k_7t)
// h0021, bit: 15
/* FCC region 8 strength*/
#define offset_of_ace_2_reg_fcc_k_8t (0x42)
#define mask_of_ace_2_reg_fcc_k_8t   (0xf000)
#define shift_of_ace_2_reg_fcc_k_8t  (12)
#define ACE_2_REG_FCC_K_8T           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_k_8t)
// h0022, bit: 3
/* FCC region 9 strength*/
#define offset_of_ace_2_reg_fcc_k_9t (0x44)
#define mask_of_ace_2_reg_fcc_k_9t   (0xf)
#define shift_of_ace_2_reg_fcc_k_9t  (0)
#define ACE_2_REG_FCC_K_9T           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_k_9t)
#define REG_ACE_2_22_L               (ACE_2_REG_FCC_K_9T)
#define REG_ACE_2_23_L               (REG_ACE_2_BASE + 0x46)
// h0024, bit: 1
/* FCC region 1 target cr down distance   */
#define offset_of_ace_2_reg_fcc_win1_cr_down (0x48)
#define mask_of_ace_2_reg_fcc_win1_cr_down   (0x3)
#define shift_of_ace_2_reg_fcc_win1_cr_down  (0)
#define ACE_2_REG_FCC_WIN1_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win1_cr_down)
#define REG_ACE_2_24_L                       (ACE_2_REG_FCC_WIN1_CR_DOWN)
// h0024, bit: 3
/* FCC region 1 target cr up distance     */
#define offset_of_ace_2_reg_fcc_win1_cr_up (0x48)
#define mask_of_ace_2_reg_fcc_win1_cr_up   (0xc)
#define shift_of_ace_2_reg_fcc_win1_cr_up  (2)
#define ACE_2_REG_FCC_WIN1_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win1_cr_up)
// h0024, bit: 5
/* FCC region 1 target cb down distance   */
#define offset_of_ace_2_reg_fcc_win1_cb_down (0x48)
#define mask_of_ace_2_reg_fcc_win1_cb_down   (0x30)
#define shift_of_ace_2_reg_fcc_win1_cb_down  (4)
#define ACE_2_REG_FCC_WIN1_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win1_cb_down)
// h0024, bit: 7
/* FCC region 1 target cb up distance     */
#define offset_of_ace_2_reg_fcc_win1_cb_up (0x48)
#define mask_of_ace_2_reg_fcc_win1_cb_up   (0xc0)
#define shift_of_ace_2_reg_fcc_win1_cb_up  (6)
#define ACE_2_REG_FCC_WIN1_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win1_cb_up)
// h0024, bit: 9
/* FCC region 2 target cr down distance   */
#define offset_of_ace_2_reg_fcc_win2_cr_down (0x48)
#define mask_of_ace_2_reg_fcc_win2_cr_down   (0x300)
#define shift_of_ace_2_reg_fcc_win2_cr_down  (8)
#define ACE_2_REG_FCC_WIN2_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win2_cr_down)
// h0024, bit: 11
/* FCC region 2 target cr up distance     */
#define offset_of_ace_2_reg_fcc_win2_cr_up (0x48)
#define mask_of_ace_2_reg_fcc_win2_cr_up   (0xc00)
#define shift_of_ace_2_reg_fcc_win2_cr_up  (10)
#define ACE_2_REG_FCC_WIN2_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win2_cr_up)
// h0024, bit: 13
/* FCC region 2 target cb down distance   */
#define offset_of_ace_2_reg_fcc_win2_cb_down (0x48)
#define mask_of_ace_2_reg_fcc_win2_cb_down   (0x3000)
#define shift_of_ace_2_reg_fcc_win2_cb_down  (12)
#define ACE_2_REG_FCC_WIN2_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win2_cb_down)
// h0024, bit: 15
/* FCC region 2 target cb up distance     */
#define offset_of_ace_2_reg_fcc_win2_cb_up (0x48)
#define mask_of_ace_2_reg_fcc_win2_cb_up   (0xc000)
#define shift_of_ace_2_reg_fcc_win2_cb_up  (14)
#define ACE_2_REG_FCC_WIN2_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win2_cb_up)
// h0025, bit: 1
/* FCC region 3 target cr down distance   */
#define offset_of_ace_2_reg_fcc_win3_cr_down (0x4a)
#define mask_of_ace_2_reg_fcc_win3_cr_down   (0x3)
#define shift_of_ace_2_reg_fcc_win3_cr_down  (0)
#define ACE_2_REG_FCC_WIN3_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win3_cr_down)
#define REG_ACE_2_25_L                       (ACE_2_REG_FCC_WIN3_CR_DOWN)
// h0025, bit: 3
/* FCC region 3 target cr up distance   */
#define offset_of_ace_2_reg_fcc_win3_cr_up (0x4a)
#define mask_of_ace_2_reg_fcc_win3_cr_up   (0xc)
#define shift_of_ace_2_reg_fcc_win3_cr_up  (2)
#define ACE_2_REG_FCC_WIN3_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win3_cr_up)
// h0025, bit: 5
/* FCC region 3 target cb down distance   */
#define offset_of_ace_2_reg_fcc_win3_cb_down (0x4a)
#define mask_of_ace_2_reg_fcc_win3_cb_down   (0x30)
#define shift_of_ace_2_reg_fcc_win3_cb_down  (4)
#define ACE_2_REG_FCC_WIN3_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win3_cb_down)
// h0025, bit: 7
/* FCC region 3 target cb up distance     */
#define offset_of_ace_2_reg_fcc_win3_cb_up (0x4a)
#define mask_of_ace_2_reg_fcc_win3_cb_up   (0xc0)
#define shift_of_ace_2_reg_fcc_win3_cb_up  (6)
#define ACE_2_REG_FCC_WIN3_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win3_cb_up)
// h0025, bit: 9
/* FCC region 4 target cr down distance   */
#define offset_of_ace_2_reg_fcc_win4_cr_down (0x4a)
#define mask_of_ace_2_reg_fcc_win4_cr_down   (0x300)
#define shift_of_ace_2_reg_fcc_win4_cr_down  (8)
#define ACE_2_REG_FCC_WIN4_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win4_cr_down)
// h0025, bit: 11
/* FCC region 4 target cr up distance     */
#define offset_of_ace_2_reg_fcc_win4_cr_up (0x4a)
#define mask_of_ace_2_reg_fcc_win4_cr_up   (0xc00)
#define shift_of_ace_2_reg_fcc_win4_cr_up  (10)
#define ACE_2_REG_FCC_WIN4_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win4_cr_up)
// h0025, bit: 13
/* FCC region 4 target cb down distance   */
#define offset_of_ace_2_reg_fcc_win4_cb_down (0x4a)
#define mask_of_ace_2_reg_fcc_win4_cb_down   (0x3000)
#define shift_of_ace_2_reg_fcc_win4_cb_down  (12)
#define ACE_2_REG_FCC_WIN4_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win4_cb_down)
// h0025, bit: 15
/* FCC region 4 target cb up distance     */
#define offset_of_ace_2_reg_fcc_win4_cb_up (0x4a)
#define mask_of_ace_2_reg_fcc_win4_cb_up   (0xc000)
#define shift_of_ace_2_reg_fcc_win4_cb_up  (14)
#define ACE_2_REG_FCC_WIN4_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win4_cb_up)
// h0026, bit: 1
/* FCC region 5 target cr down distance   */
#define offset_of_ace_2_reg_fcc_win5_cr_down (0x4c)
#define mask_of_ace_2_reg_fcc_win5_cr_down   (0x3)
#define shift_of_ace_2_reg_fcc_win5_cr_down  (0)
#define ACE_2_REG_FCC_WIN5_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win5_cr_down)
#define REG_ACE_2_26_L                       (ACE_2_REG_FCC_WIN5_CR_DOWN)
// h0026, bit: 3
/* FCC region 5 target cr up distance     */
#define offset_of_ace_2_reg_fcc_win5_cr_up (0x4c)
#define mask_of_ace_2_reg_fcc_win5_cr_up   (0xc)
#define shift_of_ace_2_reg_fcc_win5_cr_up  (2)
#define ACE_2_REG_FCC_WIN5_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win5_cr_up)
// h0026, bit: 5
/* FCC region 5 target cb down distance   */
#define offset_of_ace_2_reg_fcc_win5_cb_down (0x4c)
#define mask_of_ace_2_reg_fcc_win5_cb_down   (0x30)
#define shift_of_ace_2_reg_fcc_win5_cb_down  (4)
#define ACE_2_REG_FCC_WIN5_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win5_cb_down)
// h0026, bit: 7
/* FCC region 5 target cb up distance     */
#define offset_of_ace_2_reg_fcc_win5_cb_up (0x4c)
#define mask_of_ace_2_reg_fcc_win5_cb_up   (0xc0)
#define shift_of_ace_2_reg_fcc_win5_cb_up  (6)
#define ACE_2_REG_FCC_WIN5_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win5_cb_up)
// h0026, bit: 9
/* FCC region 6 target cr down distance   */
#define offset_of_ace_2_reg_fcc_win6_cr_down (0x4c)
#define mask_of_ace_2_reg_fcc_win6_cr_down   (0x300)
#define shift_of_ace_2_reg_fcc_win6_cr_down  (8)
#define ACE_2_REG_FCC_WIN6_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win6_cr_down)
// h0026, bit: 11
/* FCC region 6 target cr up distance     */
#define offset_of_ace_2_reg_fcc_win6_cr_up (0x4c)
#define mask_of_ace_2_reg_fcc_win6_cr_up   (0xc00)
#define shift_of_ace_2_reg_fcc_win6_cr_up  (10)
#define ACE_2_REG_FCC_WIN6_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win6_cr_up)
// h0026, bit: 13
/* FCC region 6 target cb down distance   */
#define offset_of_ace_2_reg_fcc_win6_cb_down (0x4c)
#define mask_of_ace_2_reg_fcc_win6_cb_down   (0x3000)
#define shift_of_ace_2_reg_fcc_win6_cb_down  (12)
#define ACE_2_REG_FCC_WIN6_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win6_cb_down)
// h0026, bit: 15
/* FCC region 6 target cb up distance     */
#define offset_of_ace_2_reg_fcc_win6_cb_up (0x4c)
#define mask_of_ace_2_reg_fcc_win6_cb_up   (0xc000)
#define shift_of_ace_2_reg_fcc_win6_cb_up  (14)
#define ACE_2_REG_FCC_WIN6_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win6_cb_up)
// h0027, bit: 1
/* FCC region 7 target cr down distance   */
#define offset_of_ace_2_reg_fcc_win7_cr_down (0x4e)
#define mask_of_ace_2_reg_fcc_win7_cr_down   (0x3)
#define shift_of_ace_2_reg_fcc_win7_cr_down  (0)
#define ACE_2_REG_FCC_WIN7_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win7_cr_down)
#define REG_ACE_2_27_L                       (ACE_2_REG_FCC_WIN7_CR_DOWN)
// h0027, bit: 3
/* FCC region 7 target cr up distance     */
#define offset_of_ace_2_reg_fcc_win7_cr_up (0x4e)
#define mask_of_ace_2_reg_fcc_win7_cr_up   (0xc)
#define shift_of_ace_2_reg_fcc_win7_cr_up  (2)
#define ACE_2_REG_FCC_WIN7_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win7_cr_up)
// h0027, bit: 5
/* FCC region 7 target cb down distance   */
#define offset_of_ace_2_reg_fcc_win7_cb_down (0x4e)
#define mask_of_ace_2_reg_fcc_win7_cb_down   (0x30)
#define shift_of_ace_2_reg_fcc_win7_cb_down  (4)
#define ACE_2_REG_FCC_WIN7_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win7_cb_down)
// h0027, bit: 7
/* FCC region 7 target cb up distance     */
#define offset_of_ace_2_reg_fcc_win7_cb_up (0x4e)
#define mask_of_ace_2_reg_fcc_win7_cb_up   (0xc0)
#define shift_of_ace_2_reg_fcc_win7_cb_up  (6)
#define ACE_2_REG_FCC_WIN7_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win7_cb_up)
// h0027, bit: 9
/* FCC region 8 target cr down distance   */
#define offset_of_ace_2_reg_fcc_win8_cr_down (0x4e)
#define mask_of_ace_2_reg_fcc_win8_cr_down   (0x300)
#define shift_of_ace_2_reg_fcc_win8_cr_down  (8)
#define ACE_2_REG_FCC_WIN8_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win8_cr_down)
// h0027, bit: 11
/* FCC region 8 target cr up distance     */
#define offset_of_ace_2_reg_fcc_win8_cr_up (0x4e)
#define mask_of_ace_2_reg_fcc_win8_cr_up   (0xc00)
#define shift_of_ace_2_reg_fcc_win8_cr_up  (10)
#define ACE_2_REG_FCC_WIN8_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win8_cr_up)
// h0027, bit: 13
/* FCC region 8 target cb down distance   */
#define offset_of_ace_2_reg_fcc_win8_cb_down (0x4e)
#define mask_of_ace_2_reg_fcc_win8_cb_down   (0x3000)
#define shift_of_ace_2_reg_fcc_win8_cb_down  (12)
#define ACE_2_REG_FCC_WIN8_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win8_cb_down)
// h0027, bit: 15
/* FCC region 8 target cb up distance     */
#define offset_of_ace_2_reg_fcc_win8_cb_up (0x4e)
#define mask_of_ace_2_reg_fcc_win8_cb_up   (0xc000)
#define shift_of_ace_2_reg_fcc_win8_cb_up  (14)
#define ACE_2_REG_FCC_WIN8_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win8_cb_up)
// h0028, bit: 2
/* FCC region 9 target cr distance      */
#define offset_of_ace_2_reg_fcc_win9_cr (0x50)
#define mask_of_ace_2_reg_fcc_win9_cr   (0x7)
#define shift_of_ace_2_reg_fcc_win9_cr  (0)
#define ACE_2_REG_FCC_WIN9_CR           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win9_cr)
#define REG_ACE_2_28_L                  (ACE_2_REG_FCC_WIN9_CR)
// h0028, bit: 5
/* FCC region 9 target cb distance        */
#define offset_of_ace_2_reg_fcc_win9_cb (0x50)
#define mask_of_ace_2_reg_fcc_win9_cb   (0x38)
#define shift_of_ace_2_reg_fcc_win9_cb  (3)
#define ACE_2_REG_FCC_WIN9_CB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_win9_cb)
// h0028, bit: 15
/* FCC test mode enable*/
#define offset_of_ace_2_reg_fcc_test_mode (0x50)
#define mask_of_ace_2_reg_fcc_test_mode   (0xff00)
#define shift_of_ace_2_reg_fcc_test_mode  (8)
#define ACE_2_REG_FCC_TEST_MODE           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_test_mode)
#define REG_ACE_2_29_L                    (REG_ACE_2_BASE + 0x52)
#define REG_ACE_2_2A_L                    (REG_ACE_2_BASE + 0x54)
#define REG_ACE_2_2B_L                    (REG_ACE_2_BASE + 0x56)
#define REG_ACE_2_2C_L                    (REG_ACE_2_BASE + 0x58)
#define REG_ACE_2_2D_L                    (REG_ACE_2_BASE + 0x5a)
#define REG_ACE_2_2E_L                    (REG_ACE_2_BASE + 0x5c)
#define REG_ACE_2_2F_L                    (REG_ACE_2_BASE + 0x5e)
#define REG_ACE_2_30_L                    (REG_ACE_2_BASE + 0x60)
#define REG_ACE_2_31_L                    (REG_ACE_2_BASE + 0x62)
#define REG_ACE_2_32_L                    (REG_ACE_2_BASE + 0x64)
#define REG_ACE_2_33_L                    (REG_ACE_2_BASE + 0x66)
#define REG_ACE_2_34_L                    (REG_ACE_2_BASE + 0x68)
#define REG_ACE_2_35_L                    (REG_ACE_2_BASE + 0x6a)
#define REG_ACE_2_36_L                    (REG_ACE_2_BASE + 0x6c)
#define REG_ACE_2_37_L                    (REG_ACE_2_BASE + 0x6e)
// h0038, bit: 0
/* reserved*/
#define offset_of_ace_2_reg_ack_reserved_1 (0x70)
#define mask_of_ace_2_reg_ack_reserved_1   (0x1)
#define shift_of_ace_2_reg_ack_reserved_1  (0)
#define ACE_2_REG_ACK_RESERVED_1           (REG_ACE_2_BASE + offset_of_ace_2_reg_ack_reserved_1)
#define REG_ACE_2_38_L                     (ACE_2_REG_ACK_RESERVED_1)
// h0038, bit: 1
/* BLE/WLE dither enable*/
#define offset_of_ace_2_reg_bw_dither_en (0x70)
#define mask_of_ace_2_reg_bw_dither_en   (0x2)
#define shift_of_ace_2_reg_bw_dither_en  (1)
#define ACE_2_REG_BW_DITHER_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_bw_dither_en)
// h0038, bit: 4
/* Y switch dither bit enable*/
#define offset_of_ace_2_reg_y_switch_dither_en (0x70)
#define mask_of_ace_2_reg_y_switch_dither_en   (0x10)
#define shift_of_ace_2_reg_y_switch_dither_en  (4)
#define ACE_2_REG_Y_SWITCH_DITHER_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_y_switch_dither_en)
// h0038, bit: 5
/* ACK dither enable*/
#define offset_of_ace_2_reg_ack_dither_en (0x70)
#define mask_of_ace_2_reg_ack_dither_en   (0x20)
#define shift_of_ace_2_reg_ack_dither_en  (5)
#define ACE_2_REG_ACK_DITHER_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_ack_dither_en)
// h0038, bit: 6
/* Main window ACK enable*/
#define offset_of_ace_2_reg_main_ack_en (0x70)
#define mask_of_ace_2_reg_main_ack_en   (0x40)
#define shift_of_ace_2_reg_main_ack_en  (6)
#define ACE_2_REG_MAIN_ACK_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_ack_en)
// h0038, bit: 7
/* Main window Y switch enable*/
#define offset_of_ace_2_reg_main_y_switch_en (0x70)
#define mask_of_ace_2_reg_main_y_switch_en   (0x80)
#define shift_of_ace_2_reg_main_y_switch_en  (7)
#define ACE_2_REG_MAIN_Y_SWITCH_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_y_switch_en)
// h0039, bit: 5
/* U coefficent for Y switch*/
#define offset_of_ace_2_reg_u_switch_coef (0x72)
#define mask_of_ace_2_reg_u_switch_coef   (0x3f)
#define shift_of_ace_2_reg_u_switch_coef  (0)
#define ACE_2_REG_U_SWITCH_COEF           (REG_ACE_2_BASE + offset_of_ace_2_reg_u_switch_coef)
#define REG_ACE_2_39_L                    (ACE_2_REG_U_SWITCH_COEF)
// h0039, bit: 13
/* V coefficent for Y switch*/
#define offset_of_ace_2_reg_v_switch_coef (0x72)
#define mask_of_ace_2_reg_v_switch_coef   (0x3f00)
#define shift_of_ace_2_reg_v_switch_coef  (8)
#define ACE_2_REG_V_SWITCH_COEF           (REG_ACE_2_BASE + offset_of_ace_2_reg_v_switch_coef)
// h003a, bit: 3
/* Ack Y threshold*/
#define offset_of_ace_2_reg_ack_y_thrd (0x74)
#define mask_of_ace_2_reg_ack_y_thrd   (0xf)
#define shift_of_ace_2_reg_ack_y_thrd  (0)
#define ACE_2_REG_ACK_Y_THRD           (REG_ACE_2_BASE + offset_of_ace_2_reg_ack_y_thrd)
#define REG_ACE_2_3A_L                 (ACE_2_REG_ACK_Y_THRD)
// h003a, bit: 7
/* Ack offset*/
#define offset_of_ace_2_reg_ack_offset (0x74)
#define mask_of_ace_2_reg_ack_offset   (0xf0)
#define shift_of_ace_2_reg_ack_offset  (4)
#define ACE_2_REG_ACK_OFFSET           (REG_ACE_2_BASE + offset_of_ace_2_reg_ack_offset)
// h003a, bit: 12
/* Ack y slop*/
#define offset_of_ace_2_reg_ack_y_slop (0x74)
#define mask_of_ace_2_reg_ack_y_slop   (0x1f00)
#define shift_of_ace_2_reg_ack_y_slop  (8)
#define ACE_2_REG_ACK_Y_SLOP           (REG_ACE_2_BASE + offset_of_ace_2_reg_ack_y_slop)
// h003b, bit: 6
/* Ack limit*/
#define offset_of_ace_2_reg_ack_limit (0x76)
#define mask_of_ace_2_reg_ack_limit   (0x7f)
#define shift_of_ace_2_reg_ack_limit  (0)
#define ACE_2_REG_ACK_LIMIT           (REG_ACE_2_BASE + offset_of_ace_2_reg_ack_limit)
#define REG_ACE_2_3B_L                (ACE_2_REG_ACK_LIMIT)
// h003b, bit: 7
/* Ack chroma compensate enable*/
#define offset_of_ace_2_reg_ack_c_comp_en (0x76)
#define mask_of_ace_2_reg_ack_c_comp_en   (0x80)
#define shift_of_ace_2_reg_ack_c_comp_en  (7)
#define ACE_2_REG_ACK_C_COMP_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_ack_c_comp_en)
// h003b, bit: 11
/* Ack chroma threshold*/
#define offset_of_ace_2_reg_ack_c_thrd (0x76)
#define mask_of_ace_2_reg_ack_c_thrd   (0xf00)
#define shift_of_ace_2_reg_ack_c_thrd  (8)
#define ACE_2_REG_ACK_C_THRD           (REG_ACE_2_BASE + offset_of_ace_2_reg_ack_c_thrd)
// h003b, bit: 12
/* reserved*/
#define offset_of_ace_2_reg_ack_reserved_3 (0x76)
#define mask_of_ace_2_reg_ack_reserved_3   (0x1000)
#define shift_of_ace_2_reg_ack_reserved_3  (12)
#define ACE_2_REG_ACK_RESERVED_3           (REG_ACE_2_BASE + offset_of_ace_2_reg_ack_reserved_3)
// h003b, bit: 14
/* Ack chroma range*/
#define offset_of_ace_2_reg_ack_c_range (0x76)
#define mask_of_ace_2_reg_ack_c_range   (0x6000)
#define shift_of_ace_2_reg_ack_c_range  (13)
#define ACE_2_REG_ACK_C_RANGE           (REG_ACE_2_BASE + offset_of_ace_2_reg_ack_c_range)
// h003b, bit: 15
/* reserved*/
#define offset_of_ace_2_reg_ack_reserved_4 (0x76)
#define mask_of_ace_2_reg_ack_reserved_4   (0x8000)
#define shift_of_ace_2_reg_ack_reserved_4  (15)
#define ACE_2_REG_ACK_RESERVED_4           (REG_ACE_2_BASE + offset_of_ace_2_reg_ack_reserved_4)
#define REG_ACE_2_3C_L                     (REG_ACE_2_BASE + 0x78)
#define REG_ACE_2_3D_L                     (REG_ACE_2_BASE + 0x7a)
#define REG_ACE_2_3E_L                     (REG_ACE_2_BASE + 0x7c)
#define REG_ACE_2_3F_L                     (REG_ACE_2_BASE + 0x7e)
// h0040, bit: 0
/* Main window FCC region 1 enable for full range*/
#define offset_of_ace_2_reg_main_fcc_fr_en (0x80)
#define mask_of_ace_2_reg_main_fcc_fr_en   (0x1)
#define shift_of_ace_2_reg_main_fcc_fr_en  (0)
#define ACE_2_REG_MAIN_FCC_FR_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_fcc_fr_en)
#define REG_ACE_2_40_L                     (ACE_2_REG_MAIN_FCC_FR_EN)
// h0041, bit: 1
/* FCC region 1 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cb_t1_lsb (0x82)
#define mask_of_ace_2_reg_fcc_fr_cb_t1_lsb   (0x3)
#define shift_of_ace_2_reg_fcc_fr_cb_t1_lsb  (0)
#define ACE_2_REG_FCC_FR_CB_T1_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cb_t1_lsb)
#define REG_ACE_2_41_L                       (ACE_2_REG_FCC_FR_CB_T1_LSB)
// h0041, bit: 3
/* FCC region 1 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cr_t1_lsb (0x82)
#define mask_of_ace_2_reg_fcc_fr_cr_t1_lsb   (0xc)
#define shift_of_ace_2_reg_fcc_fr_cr_t1_lsb  (2)
#define ACE_2_REG_FCC_FR_CR_T1_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cr_t1_lsb)
// h0041, bit: 5
/* FCC region 2 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cb_t2_lsb (0x82)
#define mask_of_ace_2_reg_fcc_fr_cb_t2_lsb   (0x30)
#define shift_of_ace_2_reg_fcc_fr_cb_t2_lsb  (4)
#define ACE_2_REG_FCC_FR_CB_T2_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cb_t2_lsb)
// h0041, bit: 7
/* FCC region 2 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cr_t2_lsb (0x82)
#define mask_of_ace_2_reg_fcc_fr_cr_t2_lsb   (0xc0)
#define shift_of_ace_2_reg_fcc_fr_cr_t2_lsb  (6)
#define ACE_2_REG_FCC_FR_CR_T2_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cr_t2_lsb)
// h0041, bit: 9
/* FCC region 3 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cb_t3_lsb (0x82)
#define mask_of_ace_2_reg_fcc_fr_cb_t3_lsb   (0x300)
#define shift_of_ace_2_reg_fcc_fr_cb_t3_lsb  (8)
#define ACE_2_REG_FCC_FR_CB_T3_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cb_t3_lsb)
// h0041, bit: 11
/* FCC region 3 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cr_t3_lsb (0x82)
#define mask_of_ace_2_reg_fcc_fr_cr_t3_lsb   (0xc00)
#define shift_of_ace_2_reg_fcc_fr_cr_t3_lsb  (10)
#define ACE_2_REG_FCC_FR_CR_T3_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cr_t3_lsb)
// h0041, bit: 13
/* FCC region 4 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cb_t4_lsb (0x82)
#define mask_of_ace_2_reg_fcc_fr_cb_t4_lsb   (0x3000)
#define shift_of_ace_2_reg_fcc_fr_cb_t4_lsb  (12)
#define ACE_2_REG_FCC_FR_CB_T4_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cb_t4_lsb)
// h0041, bit: 15
/* FCC region 4 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cr_t4_lsb (0x82)
#define mask_of_ace_2_reg_fcc_fr_cr_t4_lsb   (0xc000)
#define shift_of_ace_2_reg_fcc_fr_cr_t4_lsb  (14)
#define ACE_2_REG_FCC_FR_CR_T4_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cr_t4_lsb)
// h0042, bit: 1
/* FCC region 5 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cb_t5_lsb (0x84)
#define mask_of_ace_2_reg_fcc_fr_cb_t5_lsb   (0x3)
#define shift_of_ace_2_reg_fcc_fr_cb_t5_lsb  (0)
#define ACE_2_REG_FCC_FR_CB_T5_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cb_t5_lsb)
#define REG_ACE_2_42_L                       (ACE_2_REG_FCC_FR_CB_T5_LSB)
// h0042, bit: 3
/* FCC region 5 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cr_t5_lsb (0x84)
#define mask_of_ace_2_reg_fcc_fr_cr_t5_lsb   (0xc)
#define shift_of_ace_2_reg_fcc_fr_cr_t5_lsb  (2)
#define ACE_2_REG_FCC_FR_CR_T5_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cr_t5_lsb)
// h0042, bit: 5
/* FCC region 6 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cb_t6_lsb (0x84)
#define mask_of_ace_2_reg_fcc_fr_cb_t6_lsb   (0x30)
#define shift_of_ace_2_reg_fcc_fr_cb_t6_lsb  (4)
#define ACE_2_REG_FCC_FR_CB_T6_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cb_t6_lsb)
// h0042, bit: 7
/* FCC region 6 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cr_t6_lsb (0x84)
#define mask_of_ace_2_reg_fcc_fr_cr_t6_lsb   (0xc0)
#define shift_of_ace_2_reg_fcc_fr_cr_t6_lsb  (6)
#define ACE_2_REG_FCC_FR_CR_T6_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cr_t6_lsb)
// h0042, bit: 9
/* FCC region 7 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cb_t7_lsb (0x84)
#define mask_of_ace_2_reg_fcc_fr_cb_t7_lsb   (0x300)
#define shift_of_ace_2_reg_fcc_fr_cb_t7_lsb  (8)
#define ACE_2_REG_FCC_FR_CB_T7_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cb_t7_lsb)
// h0042, bit: 11
/* FCC region 7 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cr_t7_lsb (0x84)
#define mask_of_ace_2_reg_fcc_fr_cr_t7_lsb   (0xc00)
#define shift_of_ace_2_reg_fcc_fr_cr_t7_lsb  (10)
#define ACE_2_REG_FCC_FR_CR_T7_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cr_t7_lsb)
// h0042, bit: 13
/* FCC region 8 cb target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cb_t8_lsb (0x84)
#define mask_of_ace_2_reg_fcc_fr_cb_t8_lsb   (0x3000)
#define shift_of_ace_2_reg_fcc_fr_cb_t8_lsb  (12)
#define ACE_2_REG_FCC_FR_CB_T8_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cb_t8_lsb)
// h0042, bit: 15
/* FCC region 8 cr target for full range, LSB
reg_fcc_fr_cb_t1 = {reg_fcc_cb_t1,reg_fcc_fr_cb_t1_lsb}*/
#define offset_of_ace_2_reg_fcc_fr_cr_t8_lsb (0x84)
#define mask_of_ace_2_reg_fcc_fr_cr_t8_lsb   (0xc000)
#define shift_of_ace_2_reg_fcc_fr_cr_t8_lsb  (14)
#define ACE_2_REG_FCC_FR_CR_T8_LSB           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cr_t8_lsb)
// h0043, bit: 9
/* FCC region 9 cb target for full range*/
#define offset_of_ace_2_reg_fcc_fr_cb_t9 (0x86)
#define mask_of_ace_2_reg_fcc_fr_cb_t9   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_cb_t9  (0)
#define ACE_2_REG_FCC_FR_CB_T9           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cb_t9)
#define REG_ACE_2_43_L                   (ACE_2_REG_FCC_FR_CB_T9)
// h0044, bit: 9
/* FCC region 9 cr target for full range*/
#define offset_of_ace_2_reg_fcc_fr_cr_t9 (0x88)
#define mask_of_ace_2_reg_fcc_fr_cr_t9   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_cr_t9  (0)
#define ACE_2_REG_FCC_FR_CR_T9           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_cr_t9)
#define REG_ACE_2_44_L                   (ACE_2_REG_FCC_FR_CR_T9)
// h0045, bit: 9
/* FCC region 1 target cr down distance  for full range,*/
#define offset_of_ace_2_reg_fcc_fr_win1_cr_down (0x8a)
#define mask_of_ace_2_reg_fcc_fr_win1_cr_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win1_cr_down  (0)
#define ACE_2_REG_FCC_FR_WIN1_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win1_cr_down)
#define REG_ACE_2_45_L                          (ACE_2_REG_FCC_FR_WIN1_CR_DOWN)
// h0046, bit: 9
/* FCC region 1 target cr up distance for full range*/
#define offset_of_ace_2_reg_fcc_fr_win1_cr_up (0x8c)
#define mask_of_ace_2_reg_fcc_fr_win1_cr_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win1_cr_up  (0)
#define ACE_2_REG_FCC_FR_WIN1_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win1_cr_up)
#define REG_ACE_2_46_L                        (ACE_2_REG_FCC_FR_WIN1_CR_UP)
// h0047, bit: 9
/* FCC region 1 target cb down distance  for full range */
#define offset_of_ace_2_reg_fcc_fr_win1_cb_down (0x8e)
#define mask_of_ace_2_reg_fcc_fr_win1_cb_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win1_cb_down  (0)
#define ACE_2_REG_FCC_FR_WIN1_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win1_cb_down)
#define REG_ACE_2_47_L                          (ACE_2_REG_FCC_FR_WIN1_CB_DOWN)
// h0048, bit: 9
/* FCC region 1 target cb up distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win1_cb_up (0x90)
#define mask_of_ace_2_reg_fcc_fr_win1_cb_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win1_cb_up  (0)
#define ACE_2_REG_FCC_FR_WIN1_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win1_cb_up)
#define REG_ACE_2_48_L                        (ACE_2_REG_FCC_FR_WIN1_CB_UP)
// h0049, bit: 9
/* FCC region 2 target cr down distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win2_cr_down (0x92)
#define mask_of_ace_2_reg_fcc_fr_win2_cr_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win2_cr_down  (0)
#define ACE_2_REG_FCC_FR_WIN2_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win2_cr_down)
#define REG_ACE_2_49_L                          (ACE_2_REG_FCC_FR_WIN2_CR_DOWN)
// h004a, bit: 9
/* FCC region 2 target cr up distance for full range    */
#define offset_of_ace_2_reg_fcc_fr_win2_cr_up (0x94)
#define mask_of_ace_2_reg_fcc_fr_win2_cr_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win2_cr_up  (0)
#define ACE_2_REG_FCC_FR_WIN2_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win2_cr_up)
#define REG_ACE_2_4A_L                        (ACE_2_REG_FCC_FR_WIN2_CR_UP)
// h004b, bit: 9
/* FCC region 2 target cb down distance  for full range */
#define offset_of_ace_2_reg_fcc_fr_win2_cb_down (0x96)
#define mask_of_ace_2_reg_fcc_fr_win2_cb_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win2_cb_down  (0)
#define ACE_2_REG_FCC_FR_WIN2_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win2_cb_down)
#define REG_ACE_2_4B_L                          (ACE_2_REG_FCC_FR_WIN2_CB_DOWN)
// h004c, bit: 9
/* FCC region 2 target cb up distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win2_cb_up (0x98)
#define mask_of_ace_2_reg_fcc_fr_win2_cb_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win2_cb_up  (0)
#define ACE_2_REG_FCC_FR_WIN2_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win2_cb_up)
#define REG_ACE_2_4C_L                        (ACE_2_REG_FCC_FR_WIN2_CB_UP)
// h004d, bit: 9
/* FCC region 3 target cr down distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win3_cr_down (0x9a)
#define mask_of_ace_2_reg_fcc_fr_win3_cr_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win3_cr_down  (0)
#define ACE_2_REG_FCC_FR_WIN3_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win3_cr_down)
#define REG_ACE_2_4D_L                          (ACE_2_REG_FCC_FR_WIN3_CR_DOWN)
// h004e, bit: 9
/* FCC region 3 target cr up distance for full range    */
#define offset_of_ace_2_reg_fcc_fr_win3_cr_up (0x9c)
#define mask_of_ace_2_reg_fcc_fr_win3_cr_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win3_cr_up  (0)
#define ACE_2_REG_FCC_FR_WIN3_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win3_cr_up)
#define REG_ACE_2_4E_L                        (ACE_2_REG_FCC_FR_WIN3_CR_UP)
// h004f, bit: 9
/* FCC region 3 target cb down distance  for full range */
#define offset_of_ace_2_reg_fcc_fr_win3_cb_down (0x9e)
#define mask_of_ace_2_reg_fcc_fr_win3_cb_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win3_cb_down  (0)
#define ACE_2_REG_FCC_FR_WIN3_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win3_cb_down)
#define REG_ACE_2_4F_L                          (ACE_2_REG_FCC_FR_WIN3_CB_DOWN)
// h0050, bit: 9
/* FCC region 3 target cb up distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win3_cb_up (0xa0)
#define mask_of_ace_2_reg_fcc_fr_win3_cb_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win3_cb_up  (0)
#define ACE_2_REG_FCC_FR_WIN3_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win3_cb_up)
#define REG_ACE_2_50_L                        (ACE_2_REG_FCC_FR_WIN3_CB_UP)
// h0051, bit: 9
/* FCC region 4 target cr down distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win4_cr_down (0xa2)
#define mask_of_ace_2_reg_fcc_fr_win4_cr_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win4_cr_down  (0)
#define ACE_2_REG_FCC_FR_WIN4_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win4_cr_down)
#define REG_ACE_2_51_L                          (ACE_2_REG_FCC_FR_WIN4_CR_DOWN)
// h0052, bit: 9
/* FCC region 4 target cr up distance for full range    */
#define offset_of_ace_2_reg_fcc_fr_win4_cr_up (0xa4)
#define mask_of_ace_2_reg_fcc_fr_win4_cr_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win4_cr_up  (0)
#define ACE_2_REG_FCC_FR_WIN4_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win4_cr_up)
#define REG_ACE_2_52_L                        (ACE_2_REG_FCC_FR_WIN4_CR_UP)
// h0053, bit: 9
/* FCC region 4 target cb down distance  for full range */
#define offset_of_ace_2_reg_fcc_fr_win4_cb_down (0xa6)
#define mask_of_ace_2_reg_fcc_fr_win4_cb_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win4_cb_down  (0)
#define ACE_2_REG_FCC_FR_WIN4_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win4_cb_down)
#define REG_ACE_2_53_L                          (ACE_2_REG_FCC_FR_WIN4_CB_DOWN)
// h0054, bit: 9
/* FCC region 4 target cb up distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win4_cb_up (0xa8)
#define mask_of_ace_2_reg_fcc_fr_win4_cb_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win4_cb_up  (0)
#define ACE_2_REG_FCC_FR_WIN4_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win4_cb_up)
#define REG_ACE_2_54_L                        (ACE_2_REG_FCC_FR_WIN4_CB_UP)
// h0055, bit: 9
/* FCC region 5 target cr down distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win5_cr_down (0xaa)
#define mask_of_ace_2_reg_fcc_fr_win5_cr_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win5_cr_down  (0)
#define ACE_2_REG_FCC_FR_WIN5_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win5_cr_down)
#define REG_ACE_2_55_L                          (ACE_2_REG_FCC_FR_WIN5_CR_DOWN)
// h0056, bit: 9
/* FCC region 5 target cr up distance for full range    */
#define offset_of_ace_2_reg_fcc_fr_win5_cr_up (0xac)
#define mask_of_ace_2_reg_fcc_fr_win5_cr_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win5_cr_up  (0)
#define ACE_2_REG_FCC_FR_WIN5_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win5_cr_up)
#define REG_ACE_2_56_L                        (ACE_2_REG_FCC_FR_WIN5_CR_UP)
// h0057, bit: 9
/* FCC region 5 target cb down distance  for full range */
#define offset_of_ace_2_reg_fcc_fr_win5_cb_down (0xae)
#define mask_of_ace_2_reg_fcc_fr_win5_cb_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win5_cb_down  (0)
#define ACE_2_REG_FCC_FR_WIN5_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win5_cb_down)
#define REG_ACE_2_57_L                          (ACE_2_REG_FCC_FR_WIN5_CB_DOWN)
// h0058, bit: 9
/* FCC region 5 target cb up distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win5_cb_up (0xb0)
#define mask_of_ace_2_reg_fcc_fr_win5_cb_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win5_cb_up  (0)
#define ACE_2_REG_FCC_FR_WIN5_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win5_cb_up)
#define REG_ACE_2_58_L                        (ACE_2_REG_FCC_FR_WIN5_CB_UP)
// h0059, bit: 9
/* FCC region 6 target cr down distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win6_cr_down (0xb2)
#define mask_of_ace_2_reg_fcc_fr_win6_cr_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win6_cr_down  (0)
#define ACE_2_REG_FCC_FR_WIN6_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win6_cr_down)
#define REG_ACE_2_59_L                          (ACE_2_REG_FCC_FR_WIN6_CR_DOWN)
#define REG_ACE_2_5A_L                          (REG_ACE_2_BASE + 0xb4)
#define REG_ACE_2_5B_L                          (REG_ACE_2_BASE + 0xb6)
#define REG_ACE_2_5C_L                          (REG_ACE_2_BASE + 0xb8)
#define REG_ACE_2_5D_L                          (REG_ACE_2_BASE + 0xba)
#define REG_ACE_2_5E_L                          (REG_ACE_2_BASE + 0xbc)
#define REG_ACE_2_5F_L                          (REG_ACE_2_BASE + 0xbe)
// h0060, bit: 9
/* FCC region 6 target cr up distance for full range    */
#define offset_of_ace_2_reg_fcc_fr_win6_cr_up (0xc0)
#define mask_of_ace_2_reg_fcc_fr_win6_cr_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win6_cr_up  (0)
#define ACE_2_REG_FCC_FR_WIN6_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win6_cr_up)
#define REG_ACE_2_60_L                        (ACE_2_REG_FCC_FR_WIN6_CR_UP)
// h0061, bit: 9
/* FCC region 6 target cb down distance  for full range */
#define offset_of_ace_2_reg_fcc_fr_win6_cb_down (0xc2)
#define mask_of_ace_2_reg_fcc_fr_win6_cb_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win6_cb_down  (0)
#define ACE_2_REG_FCC_FR_WIN6_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win6_cb_down)
#define REG_ACE_2_61_L                          (ACE_2_REG_FCC_FR_WIN6_CB_DOWN)
// h0062, bit: 9
/* FCC region 6target cb up distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win6_cb_up (0xc4)
#define mask_of_ace_2_reg_fcc_fr_win6_cb_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win6_cb_up  (0)
#define ACE_2_REG_FCC_FR_WIN6_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win6_cb_up)
#define REG_ACE_2_62_L                        (ACE_2_REG_FCC_FR_WIN6_CB_UP)
// h0063, bit: 9
/* FCC region 7 target cr down distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win7_cr_down (0xc6)
#define mask_of_ace_2_reg_fcc_fr_win7_cr_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win7_cr_down  (0)
#define ACE_2_REG_FCC_FR_WIN7_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win7_cr_down)
#define REG_ACE_2_63_L                          (ACE_2_REG_FCC_FR_WIN7_CR_DOWN)
// h0064, bit: 9
/* FCC region 7 target cr up distance for full range    */
#define offset_of_ace_2_reg_fcc_fr_win7_cr_up (0xc8)
#define mask_of_ace_2_reg_fcc_fr_win7_cr_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win7_cr_up  (0)
#define ACE_2_REG_FCC_FR_WIN7_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win7_cr_up)
#define REG_ACE_2_64_L                        (ACE_2_REG_FCC_FR_WIN7_CR_UP)
// h0065, bit: 9
/* FCC region 7 target cb down distance  for full range */
#define offset_of_ace_2_reg_fcc_fr_win7_cb_down (0xca)
#define mask_of_ace_2_reg_fcc_fr_win7_cb_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win7_cb_down  (0)
#define ACE_2_REG_FCC_FR_WIN7_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win7_cb_down)
#define REG_ACE_2_65_L                          (ACE_2_REG_FCC_FR_WIN7_CB_DOWN)
// h0066, bit: 9
/* FCC region 7 target cb up distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win7_cb_up (0xcc)
#define mask_of_ace_2_reg_fcc_fr_win7_cb_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win7_cb_up  (0)
#define ACE_2_REG_FCC_FR_WIN7_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win7_cb_up)
#define REG_ACE_2_66_L                        (ACE_2_REG_FCC_FR_WIN7_CB_UP)
// h0067, bit: 9
/* FCC region 8 target cr down distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win8_cr_down (0xce)
#define mask_of_ace_2_reg_fcc_fr_win8_cr_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win8_cr_down  (0)
#define ACE_2_REG_FCC_FR_WIN8_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win8_cr_down)
#define REG_ACE_2_67_L                          (ACE_2_REG_FCC_FR_WIN8_CR_DOWN)
// h0068, bit: 9
/* FCC region 8 target cr up distance for full range    */
#define offset_of_ace_2_reg_fcc_fr_win8_cr_up (0xd0)
#define mask_of_ace_2_reg_fcc_fr_win8_cr_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win8_cr_up  (0)
#define ACE_2_REG_FCC_FR_WIN8_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win8_cr_up)
#define REG_ACE_2_68_L                        (ACE_2_REG_FCC_FR_WIN8_CR_UP)
// h0069, bit: 9
/* FCC region 8 target cb down distance  for full range */
#define offset_of_ace_2_reg_fcc_fr_win8_cb_down (0xd2)
#define mask_of_ace_2_reg_fcc_fr_win8_cb_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win8_cb_down  (0)
#define ACE_2_REG_FCC_FR_WIN8_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win8_cb_down)
#define REG_ACE_2_69_L                          (ACE_2_REG_FCC_FR_WIN8_CB_DOWN)
// h006a, bit: 9
/* FCC region 8 target cb up distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win8_cb_up (0xd4)
#define mask_of_ace_2_reg_fcc_fr_win8_cb_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win8_cb_up  (0)
#define ACE_2_REG_FCC_FR_WIN8_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win8_cb_up)
#define REG_ACE_2_6A_L                        (ACE_2_REG_FCC_FR_WIN8_CB_UP)
// h006b, bit: 9
/* FCC region 9 target cr down distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win9_cr_down (0xd6)
#define mask_of_ace_2_reg_fcc_fr_win9_cr_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win9_cr_down  (0)
#define ACE_2_REG_FCC_FR_WIN9_CR_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win9_cr_down)
#define REG_ACE_2_6B_L                          (ACE_2_REG_FCC_FR_WIN9_CR_DOWN)
// h006c, bit: 9
/* FCC region 9 target cr up distance for full range    */
#define offset_of_ace_2_reg_fcc_fr_win9_cr_up (0xd8)
#define mask_of_ace_2_reg_fcc_fr_win9_cr_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win9_cr_up  (0)
#define ACE_2_REG_FCC_FR_WIN9_CR_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win9_cr_up)
#define REG_ACE_2_6C_L                        (ACE_2_REG_FCC_FR_WIN9_CR_UP)
// h006d, bit: 9
/* FCC region 9 target cb down distance  for full range */
#define offset_of_ace_2_reg_fcc_fr_win9_cb_down (0xda)
#define mask_of_ace_2_reg_fcc_fr_win9_cb_down   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win9_cb_down  (0)
#define ACE_2_REG_FCC_FR_WIN9_CB_DOWN           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win9_cb_down)
#define REG_ACE_2_6D_L                          (ACE_2_REG_FCC_FR_WIN9_CB_DOWN)
// h006e, bit: 9
/* FCC region 9 target cb up distance  for full range  */
#define offset_of_ace_2_reg_fcc_fr_win9_cb_up (0xdc)
#define mask_of_ace_2_reg_fcc_fr_win9_cb_up   (0x3ff)
#define shift_of_ace_2_reg_fcc_fr_win9_cb_up  (0)
#define ACE_2_REG_FCC_FR_WIN9_CB_UP           (REG_ACE_2_BASE + offset_of_ace_2_reg_fcc_fr_win9_cb_up)
#define REG_ACE_2_6E_L                        (ACE_2_REG_FCC_FR_WIN9_CB_UP)
#define REG_ACE_2_6F_L                        (REG_ACE_2_BASE + 0xde)
#define REG_ACE_2_70_L                        (REG_ACE_2_BASE + 0xe0)
#define REG_ACE_2_71_L                        (REG_ACE_2_BASE + 0xe2)
#define REG_ACE_2_72_L                        (REG_ACE_2_BASE + 0xe4)
#define REG_ACE_2_73_L                        (REG_ACE_2_BASE + 0xe6)
#define REG_ACE_2_74_L                        (REG_ACE_2_BASE + 0xe8)
#define REG_ACE_2_75_L                        (REG_ACE_2_BASE + 0xea)
#define REG_ACE_2_76_L                        (REG_ACE_2_BASE + 0xec)
#define REG_ACE_2_77_L                        (REG_ACE_2_BASE + 0xee)
// h0078, bit: 0
/* vip main window clamp enable*/
#define offset_of_ace_2_reg_vip_main_clamp_en (0xf0)
#define mask_of_ace_2_reg_vip_main_clamp_en   (0x1)
#define shift_of_ace_2_reg_vip_main_clamp_en  (0)
#define ACE_2_REG_VIP_MAIN_CLAMP_EN           (REG_ACE_2_BASE + offset_of_ace_2_reg_vip_main_clamp_en)
#define REG_ACE_2_78_L                        (ACE_2_REG_VIP_MAIN_CLAMP_EN)
// h0079, bit: 9
/* Main window y maximum clamp*/
#define offset_of_ace_2_reg_main_y_max_clamp (0xf2)
#define mask_of_ace_2_reg_main_y_max_clamp   (0x3ff)
#define shift_of_ace_2_reg_main_y_max_clamp  (0)
#define ACE_2_REG_MAIN_Y_MAX_CLAMP           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_y_max_clamp)
#define REG_ACE_2_79_L                       (ACE_2_REG_MAIN_Y_MAX_CLAMP)
// h007a, bit: 9
/* Main window y minimum clamp*/
#define offset_of_ace_2_reg_main_y_min_clamp (0xf4)
#define mask_of_ace_2_reg_main_y_min_clamp   (0x3ff)
#define shift_of_ace_2_reg_main_y_min_clamp  (0)
#define ACE_2_REG_MAIN_Y_MIN_CLAMP           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_y_min_clamp)
#define REG_ACE_2_7A_L                       (ACE_2_REG_MAIN_Y_MIN_CLAMP)
// h007b, bit: 9
/* Main window cb maximum clamp*/
#define offset_of_ace_2_reg_main_cb_max_clamp (0xf6)
#define mask_of_ace_2_reg_main_cb_max_clamp   (0x3ff)
#define shift_of_ace_2_reg_main_cb_max_clamp  (0)
#define ACE_2_REG_MAIN_CB_MAX_CLAMP           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_cb_max_clamp)
#define REG_ACE_2_7B_L                        (ACE_2_REG_MAIN_CB_MAX_CLAMP)
// h007c, bit: 9
/* Main window cb minimum clamp*/
#define offset_of_ace_2_reg_main_cb_min_clamp (0xf8)
#define mask_of_ace_2_reg_main_cb_min_clamp   (0x3ff)
#define shift_of_ace_2_reg_main_cb_min_clamp  (0)
#define ACE_2_REG_MAIN_CB_MIN_CLAMP           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_cb_min_clamp)
#define REG_ACE_2_7C_L                        (ACE_2_REG_MAIN_CB_MIN_CLAMP)
// h007d, bit: 9
/* Main window cr maximum clamp*/
#define offset_of_ace_2_reg_main_cr_max_clamp (0xfa)
#define mask_of_ace_2_reg_main_cr_max_clamp   (0x3ff)
#define shift_of_ace_2_reg_main_cr_max_clamp  (0)
#define ACE_2_REG_MAIN_CR_MAX_CLAMP           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_cr_max_clamp)
#define REG_ACE_2_7D_L                        (ACE_2_REG_MAIN_CR_MAX_CLAMP)
// h007e, bit: 9
/* Main window cr minimum clamp*/
#define offset_of_ace_2_reg_main_cr_min_clamp (0xfc)
#define mask_of_ace_2_reg_main_cr_min_clamp   (0x3ff)
#define shift_of_ace_2_reg_main_cr_min_clamp  (0)
#define ACE_2_REG_MAIN_CR_MIN_CLAMP           (REG_ACE_2_BASE + offset_of_ace_2_reg_main_cr_min_clamp)
#define REG_ACE_2_7E_L                        (ACE_2_REG_MAIN_CR_MIN_CLAMP)
#define REG_ACE_2_7F_L                        (REG_ACE_2_BASE + 0xfe)
#define REG_DLC_2_00_L                        (REG_DLC_2_BASE + 0x0)
#define REG_DLC_2_01_L                        (REG_DLC_2_BASE + 0x2)
// h0002, bit: 3
/* Main window Y gain LSB
y_gain_new(1.10) = {y_gain,y_gain_lsb}*/
#define offset_of_dlc_2_reg_main_y_gain_lsb (0x4)
#define mask_of_dlc_2_reg_main_y_gain_lsb   (0xf)
#define shift_of_dlc_2_reg_main_y_gain_lsb  (0)
#define DLC_2_REG_MAIN_Y_GAIN_LSB           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_y_gain_lsb)
#define REG_DLC_2_02_L                      (DLC_2_REG_MAIN_Y_GAIN_LSB)
// h0002, bit: 7
/* Main window pre Y gain LSB
pre_y_gain_new(1.10) = {pre_y_gain,pre_y_gain_lsb}*/
#define offset_of_dlc_2_reg_main_pre_y_gain_lsb (0x4)
#define mask_of_dlc_2_reg_main_pre_y_gain_lsb   (0xf0)
#define shift_of_dlc_2_reg_main_pre_y_gain_lsb  (4)
#define DLC_2_REG_MAIN_PRE_Y_GAIN_LSB           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_pre_y_gain_lsb)
// h0003, bit: 2
/* */
#define offset_of_dlc_2_reg_histrpt_sft (0x6)
#define mask_of_dlc_2_reg_histrpt_sft   (0x7)
#define shift_of_dlc_2_reg_histrpt_sft  (0)
#define DLC_2_REG_HISTRPT_SFT           (REG_DLC_2_BASE + offset_of_dlc_2_reg_histrpt_sft)
#define REG_DLC_2_03_L                  (DLC_2_REG_HISTRPT_SFT)
// h0004, bit: 1
/* Main window statistic enable*/
#define offset_of_dlc_2_reg_main_statistic_en (0x8)
#define mask_of_dlc_2_reg_main_statistic_en   (0x2)
#define shift_of_dlc_2_reg_main_statistic_en  (1)
#define DLC_2_REG_MAIN_STATISTIC_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_statistic_en)
#define REG_DLC_2_04_L                        (DLC_2_REG_MAIN_STATISTIC_EN)
// h0004, bit: 3
/* Histogram Acknowledge*/
#define offset_of_dlc_2_reg_statistic_ack (0x8)
#define mask_of_dlc_2_reg_statistic_ack   (0x8)
#define shift_of_dlc_2_reg_statistic_ack  (3)
#define DLC_2_REG_STATISTIC_ACK           (REG_DLC_2_BASE + offset_of_dlc_2_reg_statistic_ack)
// h0004, bit: 4
/*   0 : 3 section
  1 : 8 section*/
#define offset_of_dlc_2_reg_histogram_mode (0x8)
#define mask_of_dlc_2_reg_histogram_mode   (0x10)
#define shift_of_dlc_2_reg_histogram_mode  (4)
#define DLC_2_REG_HISTOGRAM_MODE           (REG_DLC_2_BASE + offset_of_dlc_2_reg_histogram_mode)
// h0004, bit: 5
/* Y curve fit dither enable*/
#define offset_of_dlc_2_reg_ycv_dither_en (0x8)
#define mask_of_dlc_2_reg_ycv_dither_en   (0x20)
#define shift_of_dlc_2_reg_ycv_dither_en  (5)
#define DLC_2_REG_YCV_DITHER_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_ycv_dither_en)
// h0004, bit: 7
/* Main window luma curve enable*/
#define offset_of_dlc_2_reg_main_curve_fit_en (0x8)
#define mask_of_dlc_2_reg_main_curve_fit_en   (0x80)
#define shift_of_dlc_2_reg_main_curve_fit_en  (7)
#define DLC_2_REG_MAIN_CURVE_FIT_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_en)
// h0004, bit: 8
/* Variable 8 section of histogram enable  */
#define offset_of_dlc_2_reg_variable_range_en (0x8)
#define mask_of_dlc_2_reg_variable_range_en   (0x100)
#define shift_of_dlc_2_reg_variable_range_en  (8)
#define DLC_2_REG_VARIABLE_RANGE_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_variable_range_en)
// h0004, bit: 10
/* Histogram Y report as PC(RGB) mode enable*/
#define offset_of_dlc_2_reg_his_y_rgb_mode_en (0x8)
#define mask_of_dlc_2_reg_his_y_rgb_mode_en   (0x400)
#define shift_of_dlc_2_reg_his_y_rgb_mode_en  (10)
#define DLC_2_REG_HIS_Y_RGB_MODE_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_his_y_rgb_mode_en)
// h0004, bit: 11
/* pre- brightness adjust dither bit enable*/
#define offset_of_dlc_2_reg_pre_bri_dither_en (0x8)
#define mask_of_dlc_2_reg_pre_bri_dither_en   (0x800)
#define shift_of_dlc_2_reg_pre_bri_dither_en  (11)
#define DLC_2_REG_PRE_BRI_DITHER_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_pre_bri_dither_en)
// h0004, bit: 13
/* Main window luma curve enable as PC(RGB) mode enable*/
#define offset_of_dlc_2_reg_main_curve_fit_rgb_en (0x8)
#define mask_of_dlc_2_reg_main_curve_fit_rgb_en   (0x2000)
#define shift_of_dlc_2_reg_main_curve_fit_rgb_en  (13)
#define DLC_2_REG_MAIN_CURVE_FIT_RGB_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_rgb_en)
// h0005, bit: 7
/* Dark level for 3 section histogram*/
#define offset_of_dlc_2_reg_dark_level (0xa)
#define mask_of_dlc_2_reg_dark_level   (0xff)
#define shift_of_dlc_2_reg_dark_level  (0)
#define DLC_2_REG_DARK_LEVEL           (REG_DLC_2_BASE + offset_of_dlc_2_reg_dark_level)
#define REG_DLC_2_05_L                 (DLC_2_REG_DARK_LEVEL)
// h0005, bit: 15
/* Light level for 3 section histogram*/
#define offset_of_dlc_2_reg_light_level (0xa)
#define mask_of_dlc_2_reg_light_level   (0xff00)
#define shift_of_dlc_2_reg_light_level  (8)
#define DLC_2_REG_LIGHT_LEVEL           (REG_DLC_2_BASE + offset_of_dlc_2_reg_light_level)
#define REG_DLC_2_06_L                  (REG_DLC_2_BASE + 0xc)
#define REG_DLC_2_07_L                  (REG_DLC_2_BASE + 0xe)
// h0008, bit: 5
/* Firmware main window white level extension enable*/
#define offset_of_dlc_2_reg_main_wle_en (0x10)
#define mask_of_dlc_2_reg_main_wle_en   (0x20)
#define shift_of_dlc_2_reg_main_wle_en  (5)
#define DLC_2_REG_MAIN_WLE_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_wle_en)
#define REG_DLC_2_08_L                  (DLC_2_REG_MAIN_WLE_EN)
// h0008, bit: 6
/* Firmware main window black level extension enable*/
#define offset_of_dlc_2_reg_main_ble_en (0x10)
#define mask_of_dlc_2_reg_main_ble_en   (0x40)
#define shift_of_dlc_2_reg_main_ble_en  (6)
#define DLC_2_REG_MAIN_BLE_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_ble_en)
// h0008, bit: 7
/* Main window histogram range enable*/
#define offset_of_dlc_2_reg_main_range_en (0x10)
#define mask_of_dlc_2_reg_main_range_en   (0x80)
#define shift_of_dlc_2_reg_main_range_en  (7)
#define DLC_2_REG_MAIN_RANGE_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_range_en)
// h0008, bit: 8
/* Main window UV compensate enable*/
#define offset_of_dlc_2_reg_main_uvc_en (0x10)
#define mask_of_dlc_2_reg_main_uvc_en   (0x100)
#define shift_of_dlc_2_reg_main_uvc_en  (8)
#define DLC_2_REG_MAIN_UVC_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_uvc_en)
// h0008, bit: 9
/* Main window UV compensate reference location
 //0: after ble/wle
 //1: after curve fit0*/
#define offset_of_dlc_2_reg_main_uvc_locate (0x10)
#define mask_of_dlc_2_reg_main_uvc_locate   (0x200)
#define shift_of_dlc_2_reg_main_uvc_locate  (9)
#define DLC_2_REG_MAIN_UVC_LOCATE           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_uvc_locate)
// h0008, bit: 14
/* reserved                     */
#define offset_of_dlc_2_reg_reserved_pw_left_sign_en (0x10)
#define mask_of_dlc_2_reg_reserved_pw_left_sign_en   (0x4000)
#define shift_of_dlc_2_reg_reserved_pw_left_sign_en  (14)
#define DLC_2_REG_RESERVED_PW_LEFT_SIGN_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_reserved_pw_left_sign_en)
// h0008, bit: 15
/* UV compensate dither enable*/
#define offset_of_dlc_2_reg_uvc_dither_en (0x10)
#define mask_of_dlc_2_reg_uvc_dither_en   (0x8000)
#define shift_of_dlc_2_reg_uvc_dither_en  (15)
#define DLC_2_REG_UVC_DITHER_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_uvc_dither_en)
#define REG_DLC_2_09_L                    (REG_DLC_2_BASE + 0x12)
#define REG_DLC_2_0A_L                    (REG_DLC_2_BASE + 0x14)
#define REG_DLC_2_0B_L                    (REG_DLC_2_BASE + 0x16)
// h000c, bit: 7
/* Variable 8 section of histogram range 1*/
#define offset_of_dlc_2_reg_histogram_range1 (0x18)
#define mask_of_dlc_2_reg_histogram_range1   (0xff)
#define shift_of_dlc_2_reg_histogram_range1  (0)
#define DLC_2_REG_HISTOGRAM_RANGE1           (REG_DLC_2_BASE + offset_of_dlc_2_reg_histogram_range1)
#define REG_DLC_2_0C_L                       (DLC_2_REG_HISTOGRAM_RANGE1)
// h000c, bit: 15
/* Variable 8 section of histogram range 2*/
#define offset_of_dlc_2_reg_histogram_range2 (0x18)
#define mask_of_dlc_2_reg_histogram_range2   (0xff00)
#define shift_of_dlc_2_reg_histogram_range2  (8)
#define DLC_2_REG_HISTOGRAM_RANGE2           (REG_DLC_2_BASE + offset_of_dlc_2_reg_histogram_range2)
// h000d, bit: 7
/* Variable 8 section of histogram range 3*/
#define offset_of_dlc_2_reg_histogram_range3 (0x1a)
#define mask_of_dlc_2_reg_histogram_range3   (0xff)
#define shift_of_dlc_2_reg_histogram_range3  (0)
#define DLC_2_REG_HISTOGRAM_RANGE3           (REG_DLC_2_BASE + offset_of_dlc_2_reg_histogram_range3)
#define REG_DLC_2_0D_L                       (DLC_2_REG_HISTOGRAM_RANGE3)
// h000d, bit: 15
/* Variable 8 section of histogram range 4*/
#define offset_of_dlc_2_reg_histogram_range4 (0x1a)
#define mask_of_dlc_2_reg_histogram_range4   (0xff00)
#define shift_of_dlc_2_reg_histogram_range4  (8)
#define DLC_2_REG_HISTOGRAM_RANGE4           (REG_DLC_2_BASE + offset_of_dlc_2_reg_histogram_range4)
// h000e, bit: 7
/* Variable 8 section of histogram range 5*/
#define offset_of_dlc_2_reg_histogram_range5 (0x1c)
#define mask_of_dlc_2_reg_histogram_range5   (0xff)
#define shift_of_dlc_2_reg_histogram_range5  (0)
#define DLC_2_REG_HISTOGRAM_RANGE5           (REG_DLC_2_BASE + offset_of_dlc_2_reg_histogram_range5)
#define REG_DLC_2_0E_L                       (DLC_2_REG_HISTOGRAM_RANGE5)
// h000e, bit: 15
/* Variable 8 section of histogram range 6*/
#define offset_of_dlc_2_reg_histogram_range6 (0x1c)
#define mask_of_dlc_2_reg_histogram_range6   (0xff00)
#define shift_of_dlc_2_reg_histogram_range6  (8)
#define DLC_2_REG_HISTOGRAM_RANGE6           (REG_DLC_2_BASE + offset_of_dlc_2_reg_histogram_range6)
// h000f, bit: 7
/* Variable 8 section of histogram range 7*/
#define offset_of_dlc_2_reg_histogram_range7 (0x1e)
#define mask_of_dlc_2_reg_histogram_range7   (0xff)
#define shift_of_dlc_2_reg_histogram_range7  (0)
#define DLC_2_REG_HISTOGRAM_RANGE7           (REG_DLC_2_BASE + offset_of_dlc_2_reg_histogram_range7)
#define REG_DLC_2_0F_L                       (DLC_2_REG_HISTOGRAM_RANGE7)
// h0010, bit: 7
/* Main window curve table 0*/
#define offset_of_dlc_2_reg_main_curve_fit_table_0 (0x20)
#define mask_of_dlc_2_reg_main_curve_fit_table_0   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_0  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_0           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_0)
#define REG_DLC_2_10_L                             (DLC_2_REG_MAIN_CURVE_FIT_TABLE_0)
// h0010, bit: 15
/* Main window curve table 1*/
#define offset_of_dlc_2_reg_main_curve_fit_table_1 (0x20)
#define mask_of_dlc_2_reg_main_curve_fit_table_1   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_1  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_1           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_1)
// h0011, bit: 7
/* Main window curve table 2*/
#define offset_of_dlc_2_reg_main_curve_fit_table_2 (0x22)
#define mask_of_dlc_2_reg_main_curve_fit_table_2   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_2  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_2           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_2)
#define REG_DLC_2_11_L                             (DLC_2_REG_MAIN_CURVE_FIT_TABLE_2)
// h0011, bit: 15
/* Main window curve table 3*/
#define offset_of_dlc_2_reg_main_curve_fit_table_3 (0x22)
#define mask_of_dlc_2_reg_main_curve_fit_table_3   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_3  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_3           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_3)
// h0012, bit: 7
/* Main window curve table 4*/
#define offset_of_dlc_2_reg_main_curve_fit_table_4 (0x24)
#define mask_of_dlc_2_reg_main_curve_fit_table_4   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_4  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_4           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_4)
#define REG_DLC_2_12_L                             (DLC_2_REG_MAIN_CURVE_FIT_TABLE_4)
// h0012, bit: 15
/* Main window curve table 5*/
#define offset_of_dlc_2_reg_main_curve_fit_table_5 (0x24)
#define mask_of_dlc_2_reg_main_curve_fit_table_5   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_5  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_5           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_5)
// h0013, bit: 7
/* Main window curve table 6*/
#define offset_of_dlc_2_reg_main_curve_fit_table_6 (0x26)
#define mask_of_dlc_2_reg_main_curve_fit_table_6   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_6  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_6           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_6)
#define REG_DLC_2_13_L                             (DLC_2_REG_MAIN_CURVE_FIT_TABLE_6)
// h0013, bit: 15
/* Main window curve table 7*/
#define offset_of_dlc_2_reg_main_curve_fit_table_7 (0x26)
#define mask_of_dlc_2_reg_main_curve_fit_table_7   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_7  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_7           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_7)
// h0014, bit: 7
/* Main window curve table 8*/
#define offset_of_dlc_2_reg_main_curve_fit_table_8 (0x28)
#define mask_of_dlc_2_reg_main_curve_fit_table_8   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_8  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_8           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_8)
#define REG_DLC_2_14_L                             (DLC_2_REG_MAIN_CURVE_FIT_TABLE_8)
// h0014, bit: 15
/* Main window curve table 9*/
#define offset_of_dlc_2_reg_main_curve_fit_table_9 (0x28)
#define mask_of_dlc_2_reg_main_curve_fit_table_9   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_9  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_9           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_9)
// h0015, bit: 7
/* Main window curve table 10*/
#define offset_of_dlc_2_reg_main_curve_fit_table_10 (0x2a)
#define mask_of_dlc_2_reg_main_curve_fit_table_10   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_10  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_10           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_10)
#define REG_DLC_2_15_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_10)
// h0015, bit: 15
/* Main window curve table 11*/
#define offset_of_dlc_2_reg_main_curve_fit_table_11 (0x2a)
#define mask_of_dlc_2_reg_main_curve_fit_table_11   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_11  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_11           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_11)
// h0016, bit: 7
/* Main window curve table 12*/
#define offset_of_dlc_2_reg_main_curve_fit_table_12 (0x2c)
#define mask_of_dlc_2_reg_main_curve_fit_table_12   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_12  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_12           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_12)
#define REG_DLC_2_16_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_12)
// h0016, bit: 15
/* Main window curve table 13*/
#define offset_of_dlc_2_reg_main_curve_fit_table_13 (0x2c)
#define mask_of_dlc_2_reg_main_curve_fit_table_13   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_13  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_13           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_13)
// h0017, bit: 7
/* Main window curve table 14*/
#define offset_of_dlc_2_reg_main_curve_fit_table_14 (0x2e)
#define mask_of_dlc_2_reg_main_curve_fit_table_14   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_14  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_14           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_14)
#define REG_DLC_2_17_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_14)
// h0017, bit: 15
/* Main window curve table 15*/
#define offset_of_dlc_2_reg_main_curve_fit_table_15 (0x2e)
#define mask_of_dlc_2_reg_main_curve_fit_table_15   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_15  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_15           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_15)
// h0018, bit: 7
/* Main window curve table 16*/
#define offset_of_dlc_2_reg_main_curve_fit_table_16 (0x30)
#define mask_of_dlc_2_reg_main_curve_fit_table_16   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_16  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_16           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_16)
#define REG_DLC_2_18_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_16)
// h0018, bit: 15
/* Main window curve table 17*/
#define offset_of_dlc_2_reg_main_curve_fit_table_17 (0x30)
#define mask_of_dlc_2_reg_main_curve_fit_table_17   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_17  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_17           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_17)
// h0019, bit: 7
/* Main window curve table 18*/
#define offset_of_dlc_2_reg_main_curve_fit_table_18 (0x32)
#define mask_of_dlc_2_reg_main_curve_fit_table_18   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_18  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_18           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_18)
#define REG_DLC_2_19_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_18)
// h0019, bit: 15
/* Main window curve table 19*/
#define offset_of_dlc_2_reg_main_curve_fit_table_19 (0x32)
#define mask_of_dlc_2_reg_main_curve_fit_table_19   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_19  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_19           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_19)
// h001a, bit: 7
/* Main window curve table 20*/
#define offset_of_dlc_2_reg_main_curve_fit_table_20 (0x34)
#define mask_of_dlc_2_reg_main_curve_fit_table_20   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_20  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_20           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_20)
#define REG_DLC_2_1A_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_20)
// h001a, bit: 15
/* Main window curve table 21*/
#define offset_of_dlc_2_reg_main_curve_fit_table_21 (0x34)
#define mask_of_dlc_2_reg_main_curve_fit_table_21   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_21  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_21           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_21)
// h001b, bit: 7
/* Main window curve table 22*/
#define offset_of_dlc_2_reg_main_curve_fit_table_22 (0x36)
#define mask_of_dlc_2_reg_main_curve_fit_table_22   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_22  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_22           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_22)
#define REG_DLC_2_1B_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_22)
// h001b, bit: 15
/* Main window curve table 23*/
#define offset_of_dlc_2_reg_main_curve_fit_table_23 (0x36)
#define mask_of_dlc_2_reg_main_curve_fit_table_23   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_23  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_23           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_23)
// h001c, bit: 7
/* Main window curve table 24*/
#define offset_of_dlc_2_reg_main_curve_fit_table_24 (0x38)
#define mask_of_dlc_2_reg_main_curve_fit_table_24   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_24  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_24           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_24)
#define REG_DLC_2_1C_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_24)
// h001c, bit: 15
/* Main window curve table 25*/
#define offset_of_dlc_2_reg_main_curve_fit_table_25 (0x38)
#define mask_of_dlc_2_reg_main_curve_fit_table_25   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_25  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_25           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_25)
// h001d, bit: 7
/* Main window curve table 26*/
#define offset_of_dlc_2_reg_main_curve_fit_table_26 (0x3a)
#define mask_of_dlc_2_reg_main_curve_fit_table_26   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_26  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_26           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_26)
#define REG_DLC_2_1D_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_26)
// h001d, bit: 15
/* Main window curve table 27*/
#define offset_of_dlc_2_reg_main_curve_fit_table_27 (0x3a)
#define mask_of_dlc_2_reg_main_curve_fit_table_27   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_27  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_27           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_27)
// h001e, bit: 7
/* Main window curve table 28*/
#define offset_of_dlc_2_reg_main_curve_fit_table_28 (0x3c)
#define mask_of_dlc_2_reg_main_curve_fit_table_28   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_28  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_28           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_28)
#define REG_DLC_2_1E_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_28)
// h001e, bit: 15
/* Main window curve table 29*/
#define offset_of_dlc_2_reg_main_curve_fit_table_29 (0x3c)
#define mask_of_dlc_2_reg_main_curve_fit_table_29   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_29  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_29           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_29)
// h001f, bit: 7
/* Main window curve table 30*/
#define offset_of_dlc_2_reg_main_curve_fit_table_30 (0x3e)
#define mask_of_dlc_2_reg_main_curve_fit_table_30   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_30  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_30           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_30)
#define REG_DLC_2_1F_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_30)
// h001f, bit: 15
/* Main window curve table 31*/
#define offset_of_dlc_2_reg_main_curve_fit_table_31 (0x3e)
#define mask_of_dlc_2_reg_main_curve_fit_table_31   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_31  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_31           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_31)
// h0020, bit: 7
/* Main window curve table 32*/
#define offset_of_dlc_2_reg_main_curve_fit_table_32 (0x40)
#define mask_of_dlc_2_reg_main_curve_fit_table_32   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_32  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_32           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_32)
#define REG_DLC_2_20_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_32)
// h0020, bit: 15
/* Main window curve table 33*/
#define offset_of_dlc_2_reg_main_curve_fit_table_33 (0x40)
#define mask_of_dlc_2_reg_main_curve_fit_table_33   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_33  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_33           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_33)
// h0021, bit: 7
/* Main window curve table 34*/
#define offset_of_dlc_2_reg_main_curve_fit_table_34 (0x42)
#define mask_of_dlc_2_reg_main_curve_fit_table_34   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_34  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_34           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_34)
#define REG_DLC_2_21_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_34)
// h0021, bit: 15
/* Main window curve table 35*/
#define offset_of_dlc_2_reg_main_curve_fit_table_35 (0x42)
#define mask_of_dlc_2_reg_main_curve_fit_table_35   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_35  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_35           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_35)
// h0022, bit: 7
/* Main window curve table 36*/
#define offset_of_dlc_2_reg_main_curve_fit_table_36 (0x44)
#define mask_of_dlc_2_reg_main_curve_fit_table_36   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_36  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_36           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_36)
#define REG_DLC_2_22_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_36)
// h0022, bit: 15
/* Main window curve table 37*/
#define offset_of_dlc_2_reg_main_curve_fit_table_37 (0x44)
#define mask_of_dlc_2_reg_main_curve_fit_table_37   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_37  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_37           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_37)
// h0023, bit: 7
/* Main window curve table 38*/
#define offset_of_dlc_2_reg_main_curve_fit_table_38 (0x46)
#define mask_of_dlc_2_reg_main_curve_fit_table_38   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_38  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_38           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_38)
#define REG_DLC_2_23_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_38)
// h0023, bit: 15
/* Main window curve table 39*/
#define offset_of_dlc_2_reg_main_curve_fit_table_39 (0x46)
#define mask_of_dlc_2_reg_main_curve_fit_table_39   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_39  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_39           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_39)
// h0024, bit: 7
/* Main window curve table 40*/
#define offset_of_dlc_2_reg_main_curve_fit_table_40 (0x48)
#define mask_of_dlc_2_reg_main_curve_fit_table_40   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_40  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_40           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_40)
#define REG_DLC_2_24_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_40)
// h0024, bit: 15
/* Main window curve table 41*/
#define offset_of_dlc_2_reg_main_curve_fit_table_41 (0x48)
#define mask_of_dlc_2_reg_main_curve_fit_table_41   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_41  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_41           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_41)
// h0025, bit: 7
/* Main window curve table 42*/
#define offset_of_dlc_2_reg_main_curve_fit_table_42 (0x4a)
#define mask_of_dlc_2_reg_main_curve_fit_table_42   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_42  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_42           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_42)
#define REG_DLC_2_25_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_42)
// h0025, bit: 15
/* Main window curve table 43*/
#define offset_of_dlc_2_reg_main_curve_fit_table_43 (0x4a)
#define mask_of_dlc_2_reg_main_curve_fit_table_43   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_43  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_43           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_43)
// h0026, bit: 7
/* Main window curve table 44*/
#define offset_of_dlc_2_reg_main_curve_fit_table_44 (0x4c)
#define mask_of_dlc_2_reg_main_curve_fit_table_44   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_44  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_44           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_44)
#define REG_DLC_2_26_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_44)
// h0026, bit: 15
/* Main window curve table 45*/
#define offset_of_dlc_2_reg_main_curve_fit_table_45 (0x4c)
#define mask_of_dlc_2_reg_main_curve_fit_table_45   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_45  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_45           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_45)
// h0027, bit: 7
/* Main window curve table 46*/
#define offset_of_dlc_2_reg_main_curve_fit_table_46 (0x4e)
#define mask_of_dlc_2_reg_main_curve_fit_table_46   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_46  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_46           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_46)
#define REG_DLC_2_27_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_46)
// h0027, bit: 15
/* Main window curve table 47*/
#define offset_of_dlc_2_reg_main_curve_fit_table_47 (0x4e)
#define mask_of_dlc_2_reg_main_curve_fit_table_47   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_47  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_47           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_47)
// h0028, bit: 7
/* Main window curve table 48*/
#define offset_of_dlc_2_reg_main_curve_fit_table_48 (0x50)
#define mask_of_dlc_2_reg_main_curve_fit_table_48   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_48  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_48           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_48)
#define REG_DLC_2_28_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_48)
// h0028, bit: 15
/* Main window curve table 49*/
#define offset_of_dlc_2_reg_main_curve_fit_table_49 (0x50)
#define mask_of_dlc_2_reg_main_curve_fit_table_49   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_49  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_49           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_49)
// h0029, bit: 7
/* Main window curve table 50*/
#define offset_of_dlc_2_reg_main_curve_fit_table_50 (0x52)
#define mask_of_dlc_2_reg_main_curve_fit_table_50   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_50  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_50           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_50)
#define REG_DLC_2_29_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_50)
// h0029, bit: 15
/* Main window curve table 51*/
#define offset_of_dlc_2_reg_main_curve_fit_table_51 (0x52)
#define mask_of_dlc_2_reg_main_curve_fit_table_51   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_51  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_51           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_51)
// h002a, bit: 7
/* Main window curve table 52*/
#define offset_of_dlc_2_reg_main_curve_fit_table_52 (0x54)
#define mask_of_dlc_2_reg_main_curve_fit_table_52   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_52  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_52           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_52)
#define REG_DLC_2_2A_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_52)
// h002a, bit: 15
/* Main window curve table 53*/
#define offset_of_dlc_2_reg_main_curve_fit_table_53 (0x54)
#define mask_of_dlc_2_reg_main_curve_fit_table_53   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_53  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_53           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_53)
// h002b, bit: 7
/* Main window curve table 54*/
#define offset_of_dlc_2_reg_main_curve_fit_table_54 (0x56)
#define mask_of_dlc_2_reg_main_curve_fit_table_54   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_54  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_54           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_54)
#define REG_DLC_2_2B_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_54)
// h002b, bit: 15
/* Main window curve table 55*/
#define offset_of_dlc_2_reg_main_curve_fit_table_55 (0x56)
#define mask_of_dlc_2_reg_main_curve_fit_table_55   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_55  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_55           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_55)
// h002c, bit: 7
/* Main window curve table 56*/
#define offset_of_dlc_2_reg_main_curve_fit_table_56 (0x58)
#define mask_of_dlc_2_reg_main_curve_fit_table_56   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_56  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_56           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_56)
#define REG_DLC_2_2C_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_56)
// h002c, bit: 15
/* Main window curve table 57*/
#define offset_of_dlc_2_reg_main_curve_fit_table_57 (0x58)
#define mask_of_dlc_2_reg_main_curve_fit_table_57   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_57  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_57           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_57)
// h002d, bit: 7
/* Main window curve table 58*/
#define offset_of_dlc_2_reg_main_curve_fit_table_58 (0x5a)
#define mask_of_dlc_2_reg_main_curve_fit_table_58   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_58  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_58           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_58)
#define REG_DLC_2_2D_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_58)
// h002d, bit: 15
/* Main window curve table 59*/
#define offset_of_dlc_2_reg_main_curve_fit_table_59 (0x5a)
#define mask_of_dlc_2_reg_main_curve_fit_table_59   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_59  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_59           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_59)
// h002e, bit: 7
/* Main window curve table 60*/
#define offset_of_dlc_2_reg_main_curve_fit_table_60 (0x5c)
#define mask_of_dlc_2_reg_main_curve_fit_table_60   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_60  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_60           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_60)
#define REG_DLC_2_2E_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_60)
// h002e, bit: 15
/* Main window curve table 61*/
#define offset_of_dlc_2_reg_main_curve_fit_table_61 (0x5c)
#define mask_of_dlc_2_reg_main_curve_fit_table_61   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_61  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_61           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_61)
// h002f, bit: 7
/* Main window curve table 62*/
#define offset_of_dlc_2_reg_main_curve_fit_table_62 (0x5e)
#define mask_of_dlc_2_reg_main_curve_fit_table_62   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_62  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_62           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_62)
#define REG_DLC_2_2F_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_62)
// h002f, bit: 15
/* Main window curve table 63*/
#define offset_of_dlc_2_reg_main_curve_fit_table_63 (0x5e)
#define mask_of_dlc_2_reg_main_curve_fit_table_63   (0xff00)
#define shift_of_dlc_2_reg_main_curve_fit_table_63  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_63           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_63)
// h0030, bit: 0
/* Main window 16 variable piecewise linear DLC enable*/
#define offset_of_dlc_2_reg_main_curve_fit_var_pw_en (0x60)
#define mask_of_dlc_2_reg_main_curve_fit_var_pw_en   (0x1)
#define shift_of_dlc_2_reg_main_curve_fit_var_pw_en  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_VAR_PW_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_var_pw_en)
#define REG_DLC_2_30_L                               (DLC_2_REG_MAIN_CURVE_FIT_VAR_PW_EN)
// h0030, bit: 10
/* Main window c_gain emable for color0*/
#define offset_of_dlc_2_reg_main_cgain_color_en (0x60)
#define mask_of_dlc_2_reg_main_cgain_color_en   (0x400)
#define shift_of_dlc_2_reg_main_cgain_color_en  (10)
#define DLC_2_REG_MAIN_CGAIN_COLOR_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_cgain_color_en)
// h0030, bit: 15
/* sat normalize enanle for Cgain adaptive sat*/
#define offset_of_dlc_2_reg_cgain_adp_sat_norm_en (0x60)
#define mask_of_dlc_2_reg_cgain_adp_sat_norm_en   (0x8000)
#define shift_of_dlc_2_reg_cgain_adp_sat_norm_en  (15)
#define DLC_2_REG_CGAIN_ADP_SAT_NORM_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_cgain_adp_sat_norm_en)
// h0031, bit: 15
/* Main window color0 selection for  cgain of  Color Group*/
#define offset_of_dlc_2_reg_main_color_select_cgain (0x62)
#define mask_of_dlc_2_reg_main_color_select_cgain   (0xffff)
#define shift_of_dlc_2_reg_main_color_select_cgain  (0)
#define DLC_2_REG_MAIN_COLOR_SELECT_CGAIN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_color_select_cgain)
#define REG_DLC_2_31_L                              (DLC_2_REG_MAIN_COLOR_SELECT_CGAIN)
// h0032, bit: 7
/* Main window C gain for color0*/
#define offset_of_dlc_2_reg_main_c_gain_color (0x64)
#define mask_of_dlc_2_reg_main_c_gain_color   (0xff)
#define shift_of_dlc_2_reg_main_c_gain_color  (0)
#define DLC_2_REG_MAIN_C_GAIN_COLOR           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_c_gain_color)
#define REG_DLC_2_32_L                        (DLC_2_REG_MAIN_C_GAIN_COLOR)
#define REG_DLC_2_33_L                        (REG_DLC_2_BASE + 0x66)
#define REG_DLC_2_34_L                        (REG_DLC_2_BASE + 0x68)
#define REG_DLC_2_35_L                        (REG_DLC_2_BASE + 0x6a)
#define REG_DLC_2_36_L                        (REG_DLC_2_BASE + 0x6c)
#define REG_DLC_2_37_L                        (REG_DLC_2_BASE + 0x6e)
// h0038, bit: 10
/* y gain before dlc, 1.10*/
#define offset_of_dlc_2_reg_dlc_in_y_gain (0x70)
#define mask_of_dlc_2_reg_dlc_in_y_gain   (0x7ff)
#define shift_of_dlc_2_reg_dlc_in_y_gain  (0)
#define DLC_2_REG_DLC_IN_Y_GAIN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_dlc_in_y_gain)
#define REG_DLC_2_38_L                    (DLC_2_REG_DLC_IN_Y_GAIN)
// h0039, bit: 8
/* y offset before dlc, 8bit, sign magnitude*/
#define offset_of_dlc_2_reg_dlc_in_y_offset (0x72)
#define mask_of_dlc_2_reg_dlc_in_y_offset   (0x1ff)
#define shift_of_dlc_2_reg_dlc_in_y_offset  (0)
#define DLC_2_REG_DLC_IN_Y_OFFSET           (REG_DLC_2_BASE + offset_of_dlc_2_reg_dlc_in_y_offset)
#define REG_DLC_2_39_L                      (DLC_2_REG_DLC_IN_Y_OFFSET)
// h003a, bit: 10
/* c gain before dlc, 1.10*/
#define offset_of_dlc_2_reg_dlc_in_c_gain (0x74)
#define mask_of_dlc_2_reg_dlc_in_c_gain   (0x7ff)
#define shift_of_dlc_2_reg_dlc_in_c_gain  (0)
#define DLC_2_REG_DLC_IN_C_GAIN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_dlc_in_c_gain)
#define REG_DLC_2_3A_L                    (DLC_2_REG_DLC_IN_C_GAIN)
// h003b, bit: 8
/* c offset before dlc, 8bit, sign magnitude*/
#define offset_of_dlc_2_reg_dlc_in_c_offset (0x76)
#define mask_of_dlc_2_reg_dlc_in_c_offset   (0x1ff)
#define shift_of_dlc_2_reg_dlc_in_c_offset  (0)
#define DLC_2_REG_DLC_IN_C_OFFSET           (REG_DLC_2_BASE + offset_of_dlc_2_reg_dlc_in_c_offset)
#define REG_DLC_2_3B_L                      (DLC_2_REG_DLC_IN_C_OFFSET)
// h003c, bit: 10
/* y gain after dlc, 1.10*/
#define offset_of_dlc_2_reg_dlc_out_y_gain (0x78)
#define mask_of_dlc_2_reg_dlc_out_y_gain   (0x7ff)
#define shift_of_dlc_2_reg_dlc_out_y_gain  (0)
#define DLC_2_REG_DLC_OUT_Y_GAIN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_dlc_out_y_gain)
#define REG_DLC_2_3C_L                     (DLC_2_REG_DLC_OUT_Y_GAIN)
// h003d, bit: 8
/* y offset after dlc, 8bit, sign magnitude*/
#define offset_of_dlc_2_reg_dlc_out_y_offset (0x7a)
#define mask_of_dlc_2_reg_dlc_out_y_offset   (0x1ff)
#define shift_of_dlc_2_reg_dlc_out_y_offset  (0)
#define DLC_2_REG_DLC_OUT_Y_OFFSET           (REG_DLC_2_BASE + offset_of_dlc_2_reg_dlc_out_y_offset)
#define REG_DLC_2_3D_L                       (DLC_2_REG_DLC_OUT_Y_OFFSET)
// h003e, bit: 10
/* c gain after dlc, 1.10*/
#define offset_of_dlc_2_reg_dlc_out_c_gain (0x7c)
#define mask_of_dlc_2_reg_dlc_out_c_gain   (0x7ff)
#define shift_of_dlc_2_reg_dlc_out_c_gain  (0)
#define DLC_2_REG_DLC_OUT_C_GAIN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_dlc_out_c_gain)
#define REG_DLC_2_3E_L                     (DLC_2_REG_DLC_OUT_C_GAIN)
// h003f, bit: 8
/* c offset after dlc, 1.8, sign magnitude*/
#define offset_of_dlc_2_reg_dlc_out_c_offset (0x7e)
#define mask_of_dlc_2_reg_dlc_out_c_offset   (0x1ff)
#define shift_of_dlc_2_reg_dlc_out_c_offset  (0)
#define DLC_2_REG_DLC_OUT_C_OFFSET           (REG_DLC_2_BASE + offset_of_dlc_2_reg_dlc_out_c_offset)
#define REG_DLC_2_3F_L                       (DLC_2_REG_DLC_OUT_C_OFFSET)
// h0040, bit: 7
/* 16 variable piecewise linear DLC control point 1*/
#define offset_of_dlc_2_reg_curve_fit_var_cp1 (0x80)
#define mask_of_dlc_2_reg_curve_fit_var_cp1   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp1  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP1           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp1)
#define REG_DLC_2_40_L                        (DLC_2_REG_CURVE_FIT_VAR_CP1)
// h0040, bit: 15
/* 16 variable piecewise linear DLC control point 2*/
#define offset_of_dlc_2_reg_curve_fit_var_cp2 (0x80)
#define mask_of_dlc_2_reg_curve_fit_var_cp2   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp2  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP2           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp2)
// h0041, bit: 7
/* 16 variable piecewise linear DLC control point 3*/
#define offset_of_dlc_2_reg_curve_fit_var_cp3 (0x82)
#define mask_of_dlc_2_reg_curve_fit_var_cp3   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp3  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP3           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp3)
#define REG_DLC_2_41_L                        (DLC_2_REG_CURVE_FIT_VAR_CP3)
// h0041, bit: 15
/* 16 variable piecewise linear DLC control point 4*/
#define offset_of_dlc_2_reg_curve_fit_var_cp4 (0x82)
#define mask_of_dlc_2_reg_curve_fit_var_cp4   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp4  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP4           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp4)
// h0042, bit: 7
/* 16 variable piecewise linear DLC control point 5*/
#define offset_of_dlc_2_reg_curve_fit_var_cp5 (0x84)
#define mask_of_dlc_2_reg_curve_fit_var_cp5   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp5  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP5           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp5)
#define REG_DLC_2_42_L                        (DLC_2_REG_CURVE_FIT_VAR_CP5)
// h0042, bit: 15
/* 16 variable piecewise linear DLC control point 6*/
#define offset_of_dlc_2_reg_curve_fit_var_cp6 (0x84)
#define mask_of_dlc_2_reg_curve_fit_var_cp6   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp6  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP6           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp6)
// h0043, bit: 7
/* 16 variable piecewise linear DLC control point 7*/
#define offset_of_dlc_2_reg_curve_fit_var_cp7 (0x86)
#define mask_of_dlc_2_reg_curve_fit_var_cp7   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp7  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP7           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp7)
#define REG_DLC_2_43_L                        (DLC_2_REG_CURVE_FIT_VAR_CP7)
// h0043, bit: 15
/* 16 variable piecewise linear DLC control point 8*/
#define offset_of_dlc_2_reg_curve_fit_var_cp8 (0x86)
#define mask_of_dlc_2_reg_curve_fit_var_cp8   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp8  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP8           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp8)
// h0044, bit: 7
/* 16 variable piecewise linear DLC control point 9*/
#define offset_of_dlc_2_reg_curve_fit_var_cp9 (0x88)
#define mask_of_dlc_2_reg_curve_fit_var_cp9   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp9  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP9           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp9)
#define REG_DLC_2_44_L                        (DLC_2_REG_CURVE_FIT_VAR_CP9)
// h0044, bit: 15
/* 16 variable piecewise linear DLC control point 10*/
#define offset_of_dlc_2_reg_curve_fit_var_cp10 (0x88)
#define mask_of_dlc_2_reg_curve_fit_var_cp10   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp10  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP10           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp10)
// h0045, bit: 7
/* 16 variable piecewise linear DLC control point 11*/
#define offset_of_dlc_2_reg_curve_fit_var_cp11 (0x8a)
#define mask_of_dlc_2_reg_curve_fit_var_cp11   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp11  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP11           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp11)
#define REG_DLC_2_45_L                         (DLC_2_REG_CURVE_FIT_VAR_CP11)
// h0045, bit: 15
/* 16 variable piecewise linear DLC control point 12*/
#define offset_of_dlc_2_reg_curve_fit_var_cp12 (0x8a)
#define mask_of_dlc_2_reg_curve_fit_var_cp12   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp12  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP12           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp12)
// h0046, bit: 7
/* 16 variable piecewise linear DLC control point 13*/
#define offset_of_dlc_2_reg_curve_fit_var_cp13 (0x8c)
#define mask_of_dlc_2_reg_curve_fit_var_cp13   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp13  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP13           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp13)
#define REG_DLC_2_46_L                         (DLC_2_REG_CURVE_FIT_VAR_CP13)
// h0046, bit: 15
/* 16 variable piecewise linear DLC control point 14*/
#define offset_of_dlc_2_reg_curve_fit_var_cp14 (0x8c)
#define mask_of_dlc_2_reg_curve_fit_var_cp14   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp14  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP14           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp14)
// h0047, bit: 7
/* 16 variable piecewise linear DLC control point 15*/
#define offset_of_dlc_2_reg_curve_fit_var_cp15 (0x8e)
#define mask_of_dlc_2_reg_curve_fit_var_cp15   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp15  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP15           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp15)
#define REG_DLC_2_47_L                         (DLC_2_REG_CURVE_FIT_VAR_CP15)
// h0047, bit: 15
/* 16 variable piecewise linear DLC control point 16*/
#define offset_of_dlc_2_reg_curve_fit_var_cp16 (0x8e)
#define mask_of_dlc_2_reg_curve_fit_var_cp16   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp16  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP16           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp16)
// h0048, bit: 7
/* 17 variable piecewise linear DLC control point 1*/
#define offset_of_dlc_2_reg_curve_fit_var_cp17 (0x90)
#define mask_of_dlc_2_reg_curve_fit_var_cp17   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp17  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP17           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp17)
#define REG_DLC_2_48_L                         (DLC_2_REG_CURVE_FIT_VAR_CP17)
// h0048, bit: 15
/* 17 variable piecewise linear DLC control point 2*/
#define offset_of_dlc_2_reg_curve_fit_var_cp18 (0x90)
#define mask_of_dlc_2_reg_curve_fit_var_cp18   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp18  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP18           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp18)
// h0049, bit: 7
/* 17 variable piecewise linear DLC control point 3*/
#define offset_of_dlc_2_reg_curve_fit_var_cp19 (0x92)
#define mask_of_dlc_2_reg_curve_fit_var_cp19   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp19  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP19           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp19)
#define REG_DLC_2_49_L                         (DLC_2_REG_CURVE_FIT_VAR_CP19)
// h0049, bit: 15
/* 17 variable piecewise linear DLC control point 4*/
#define offset_of_dlc_2_reg_curve_fit_var_cp20 (0x92)
#define mask_of_dlc_2_reg_curve_fit_var_cp20   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp20  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP20           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp20)
// h004a, bit: 7
/* 17 variable piecewise linear DLC control point 5*/
#define offset_of_dlc_2_reg_curve_fit_var_cp21 (0x94)
#define mask_of_dlc_2_reg_curve_fit_var_cp21   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp21  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP21           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp21)
#define REG_DLC_2_4A_L                         (DLC_2_REG_CURVE_FIT_VAR_CP21)
// h004a, bit: 15
/* 17 variable piecewise linear DLC control point 6*/
#define offset_of_dlc_2_reg_curve_fit_var_cp22 (0x94)
#define mask_of_dlc_2_reg_curve_fit_var_cp22   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp22  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP22           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp22)
// h004b, bit: 7
/* 17 variable piecewise linear DLC control point 7*/
#define offset_of_dlc_2_reg_curve_fit_var_cp23 (0x96)
#define mask_of_dlc_2_reg_curve_fit_var_cp23   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp23  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP23           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp23)
#define REG_DLC_2_4B_L                         (DLC_2_REG_CURVE_FIT_VAR_CP23)
// h004b, bit: 15
/* 17 variable piecewise linear DLC control point 8*/
#define offset_of_dlc_2_reg_curve_fit_var_cp24 (0x96)
#define mask_of_dlc_2_reg_curve_fit_var_cp24   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp24  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP24           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp24)
// h004c, bit: 7
/* 17 variable piecewise linear DLC control point 9*/
#define offset_of_dlc_2_reg_curve_fit_var_cp25 (0x98)
#define mask_of_dlc_2_reg_curve_fit_var_cp25   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp25  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP25           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp25)
#define REG_DLC_2_4C_L                         (DLC_2_REG_CURVE_FIT_VAR_CP25)
// h004c, bit: 15
/* 17 variable piecewise linear DLC control point 10*/
#define offset_of_dlc_2_reg_curve_fit_var_cp26 (0x98)
#define mask_of_dlc_2_reg_curve_fit_var_cp26   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp26  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP26           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp26)
// h004d, bit: 7
/* 17 variable piecewise linear DLC control point 11*/
#define offset_of_dlc_2_reg_curve_fit_var_cp27 (0x9a)
#define mask_of_dlc_2_reg_curve_fit_var_cp27   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp27  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP27           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp27)
#define REG_DLC_2_4D_L                         (DLC_2_REG_CURVE_FIT_VAR_CP27)
// h004d, bit: 15
/* 17 variable piecewise linear DLC control point 12*/
#define offset_of_dlc_2_reg_curve_fit_var_cp28 (0x9a)
#define mask_of_dlc_2_reg_curve_fit_var_cp28   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp28  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP28           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp28)
// h004e, bit: 7
/* 17 variable piecewise linear DLC control point 13*/
#define offset_of_dlc_2_reg_curve_fit_var_cp29 (0x9c)
#define mask_of_dlc_2_reg_curve_fit_var_cp29   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp29  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP29           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp29)
#define REG_DLC_2_4E_L                         (DLC_2_REG_CURVE_FIT_VAR_CP29)
// h004e, bit: 15
/* 17 variable piecewise linear DLC control point 14*/
#define offset_of_dlc_2_reg_curve_fit_var_cp30 (0x9c)
#define mask_of_dlc_2_reg_curve_fit_var_cp30   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp30  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP30           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp30)
// h004f, bit: 7
/* 17 variable piecewise linear DLC control point 15*/
#define offset_of_dlc_2_reg_curve_fit_var_cp31 (0x9e)
#define mask_of_dlc_2_reg_curve_fit_var_cp31   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp31  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP31           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp31)
#define REG_DLC_2_4F_L                         (DLC_2_REG_CURVE_FIT_VAR_CP31)
// h004f, bit: 15
/* 17 variable piecewise linear DLC control point 16*/
#define offset_of_dlc_2_reg_curve_fit_var_cp32 (0x9e)
#define mask_of_dlc_2_reg_curve_fit_var_cp32   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp32  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP32           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp32)
// h0050, bit: 7
/* 18 variable piecewise linear DLC control point 1*/
#define offset_of_dlc_2_reg_curve_fit_var_cp33 (0xa0)
#define mask_of_dlc_2_reg_curve_fit_var_cp33   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp33  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP33           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp33)
#define REG_DLC_2_50_L                         (DLC_2_REG_CURVE_FIT_VAR_CP33)
// h0050, bit: 15
/* 18 variable piecewise linear DLC control point 2*/
#define offset_of_dlc_2_reg_curve_fit_var_cp34 (0xa0)
#define mask_of_dlc_2_reg_curve_fit_var_cp34   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp34  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP34           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp34)
// h0051, bit: 7
/* 18 variable piecewise linear DLC control point 3*/
#define offset_of_dlc_2_reg_curve_fit_var_cp35 (0xa2)
#define mask_of_dlc_2_reg_curve_fit_var_cp35   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp35  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP35           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp35)
#define REG_DLC_2_51_L                         (DLC_2_REG_CURVE_FIT_VAR_CP35)
// h0051, bit: 15
/* 18 variable piecewise linear DLC control point 4*/
#define offset_of_dlc_2_reg_curve_fit_var_cp36 (0xa2)
#define mask_of_dlc_2_reg_curve_fit_var_cp36   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp36  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP36           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp36)
// h0052, bit: 7
/* 18 variable piecewise linear DLC control point 5*/
#define offset_of_dlc_2_reg_curve_fit_var_cp37 (0xa4)
#define mask_of_dlc_2_reg_curve_fit_var_cp37   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp37  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP37           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp37)
#define REG_DLC_2_52_L                         (DLC_2_REG_CURVE_FIT_VAR_CP37)
// h0052, bit: 15
/* 18 variable piecewise linear DLC control point 6*/
#define offset_of_dlc_2_reg_curve_fit_var_cp38 (0xa4)
#define mask_of_dlc_2_reg_curve_fit_var_cp38   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp38  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP38           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp38)
// h0053, bit: 7
/* 18 variable piecewise linear DLC control point 7*/
#define offset_of_dlc_2_reg_curve_fit_var_cp39 (0xa6)
#define mask_of_dlc_2_reg_curve_fit_var_cp39   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp39  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP39           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp39)
#define REG_DLC_2_53_L                         (DLC_2_REG_CURVE_FIT_VAR_CP39)
// h0053, bit: 15
/* 18 variable piecewise linear DLC control point 8*/
#define offset_of_dlc_2_reg_curve_fit_var_cp40 (0xa6)
#define mask_of_dlc_2_reg_curve_fit_var_cp40   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp40  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP40           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp40)
// h0054, bit: 7
/* 18 variable piecewise linear DLC control point 9*/
#define offset_of_dlc_2_reg_curve_fit_var_cp41 (0xa8)
#define mask_of_dlc_2_reg_curve_fit_var_cp41   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp41  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP41           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp41)
#define REG_DLC_2_54_L                         (DLC_2_REG_CURVE_FIT_VAR_CP41)
// h0054, bit: 15
/* 18 variable piecewise linear DLC control point 10*/
#define offset_of_dlc_2_reg_curve_fit_var_cp42 (0xa8)
#define mask_of_dlc_2_reg_curve_fit_var_cp42   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp42  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP42           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp42)
// h0055, bit: 7
/* 18 variable piecewise linear DLC control point 11*/
#define offset_of_dlc_2_reg_curve_fit_var_cp43 (0xaa)
#define mask_of_dlc_2_reg_curve_fit_var_cp43   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp43  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP43           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp43)
#define REG_DLC_2_55_L                         (DLC_2_REG_CURVE_FIT_VAR_CP43)
// h0055, bit: 15
/* 18 variable piecewise linear DLC control point 12*/
#define offset_of_dlc_2_reg_curve_fit_var_cp44 (0xaa)
#define mask_of_dlc_2_reg_curve_fit_var_cp44   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp44  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP44           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp44)
// h0056, bit: 7
/* 18 variable piecewise linear DLC control point 13*/
#define offset_of_dlc_2_reg_curve_fit_var_cp45 (0xac)
#define mask_of_dlc_2_reg_curve_fit_var_cp45   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp45  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP45           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp45)
#define REG_DLC_2_56_L                         (DLC_2_REG_CURVE_FIT_VAR_CP45)
// h0056, bit: 15
/* 18 variable piecewise linear DLC control point 14*/
#define offset_of_dlc_2_reg_curve_fit_var_cp46 (0xac)
#define mask_of_dlc_2_reg_curve_fit_var_cp46   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp46  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP46           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp46)
// h0057, bit: 7
/* 18 variable piecewise linear DLC control point 15*/
#define offset_of_dlc_2_reg_curve_fit_var_cp47 (0xae)
#define mask_of_dlc_2_reg_curve_fit_var_cp47   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp47  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP47           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp47)
#define REG_DLC_2_57_L                         (DLC_2_REG_CURVE_FIT_VAR_CP47)
// h0057, bit: 15
/* 18 variable piecewise linear DLC control point 16*/
#define offset_of_dlc_2_reg_curve_fit_var_cp48 (0xae)
#define mask_of_dlc_2_reg_curve_fit_var_cp48   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp48  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP48           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp48)
// h0058, bit: 7
/* 19 variable piecewise linear DLC control point 1*/
#define offset_of_dlc_2_reg_curve_fit_var_cp49 (0xb0)
#define mask_of_dlc_2_reg_curve_fit_var_cp49   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp49  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP49           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp49)
#define REG_DLC_2_58_L                         (DLC_2_REG_CURVE_FIT_VAR_CP49)
// h0058, bit: 15
/* 19 variable piecewise linear DLC control point 2*/
#define offset_of_dlc_2_reg_curve_fit_var_cp50 (0xb0)
#define mask_of_dlc_2_reg_curve_fit_var_cp50   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp50  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP50           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp50)
// h0059, bit: 7
/* 19 variable piecewise linear DLC control point 3*/
#define offset_of_dlc_2_reg_curve_fit_var_cp51 (0xb2)
#define mask_of_dlc_2_reg_curve_fit_var_cp51   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp51  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP51           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp51)
#define REG_DLC_2_59_L                         (DLC_2_REG_CURVE_FIT_VAR_CP51)
// h0059, bit: 15
/* 19 variable piecewise linear DLC control point 4*/
#define offset_of_dlc_2_reg_curve_fit_var_cp52 (0xb2)
#define mask_of_dlc_2_reg_curve_fit_var_cp52   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp52  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP52           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp52)
// h005a, bit: 7
/* 19 variable piecewise linear DLC control point 5*/
#define offset_of_dlc_2_reg_curve_fit_var_cp53 (0xb4)
#define mask_of_dlc_2_reg_curve_fit_var_cp53   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp53  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP53           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp53)
#define REG_DLC_2_5A_L                         (DLC_2_REG_CURVE_FIT_VAR_CP53)
// h005a, bit: 15
/* 19 variable piecewise linear DLC control point 6*/
#define offset_of_dlc_2_reg_curve_fit_var_cp54 (0xb4)
#define mask_of_dlc_2_reg_curve_fit_var_cp54   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp54  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP54           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp54)
// h005b, bit: 7
/* 19 variable piecewise linear DLC control point 7*/
#define offset_of_dlc_2_reg_curve_fit_var_cp55 (0xb6)
#define mask_of_dlc_2_reg_curve_fit_var_cp55   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp55  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP55           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp55)
#define REG_DLC_2_5B_L                         (DLC_2_REG_CURVE_FIT_VAR_CP55)
// h005b, bit: 15
/* 19 variable piecewise linear DLC control point 8*/
#define offset_of_dlc_2_reg_curve_fit_var_cp56 (0xb6)
#define mask_of_dlc_2_reg_curve_fit_var_cp56   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp56  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP56           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp56)
// h005c, bit: 7
/* 19 variable piecewise linear DLC control point 9*/
#define offset_of_dlc_2_reg_curve_fit_var_cp57 (0xb8)
#define mask_of_dlc_2_reg_curve_fit_var_cp57   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp57  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP57           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp57)
#define REG_DLC_2_5C_L                         (DLC_2_REG_CURVE_FIT_VAR_CP57)
// h005c, bit: 15
/* 19 variable piecewise linear DLC control point 10*/
#define offset_of_dlc_2_reg_curve_fit_var_cp58 (0xb8)
#define mask_of_dlc_2_reg_curve_fit_var_cp58   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp58  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP58           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp58)
// h005d, bit: 7
/* 19 variable piecewise linear DLC control point 11*/
#define offset_of_dlc_2_reg_curve_fit_var_cp59 (0xba)
#define mask_of_dlc_2_reg_curve_fit_var_cp59   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp59  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP59           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp59)
#define REG_DLC_2_5D_L                         (DLC_2_REG_CURVE_FIT_VAR_CP59)
// h005d, bit: 15
/* 19 variable piecewise linear DLC control point 12*/
#define offset_of_dlc_2_reg_curve_fit_var_cp60 (0xba)
#define mask_of_dlc_2_reg_curve_fit_var_cp60   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp60  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP60           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp60)
// h005e, bit: 7
/* 19 variable piecewise linear DLC control point 13*/
#define offset_of_dlc_2_reg_curve_fit_var_cp61 (0xbc)
#define mask_of_dlc_2_reg_curve_fit_var_cp61   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp61  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP61           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp61)
#define REG_DLC_2_5E_L                         (DLC_2_REG_CURVE_FIT_VAR_CP61)
// h005e, bit: 15
/* 19 variable piecewise linear DLC control point 14*/
#define offset_of_dlc_2_reg_curve_fit_var_cp62 (0xbc)
#define mask_of_dlc_2_reg_curve_fit_var_cp62   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp62  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP62           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp62)
// h005f, bit: 7
/* 19 variable piecewise linear DLC control point 15*/
#define offset_of_dlc_2_reg_curve_fit_var_cp63 (0xbe)
#define mask_of_dlc_2_reg_curve_fit_var_cp63   (0xff)
#define shift_of_dlc_2_reg_curve_fit_var_cp63  (0)
#define DLC_2_REG_CURVE_FIT_VAR_CP63           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp63)
#define REG_DLC_2_5F_L                         (DLC_2_REG_CURVE_FIT_VAR_CP63)
// h005f, bit: 15
/* 19 variable piecewise linear DLC control point 16*/
#define offset_of_dlc_2_reg_curve_fit_var_cp64 (0xbe)
#define mask_of_dlc_2_reg_curve_fit_var_cp64   (0xff00)
#define shift_of_dlc_2_reg_curve_fit_var_cp64  (8)
#define DLC_2_REG_CURVE_FIT_VAR_CP64           (REG_DLC_2_BASE + offset_of_dlc_2_reg_curve_fit_var_cp64)
#define REG_DLC_2_60_L                         (REG_DLC_2_BASE + 0xc0)
// h0061, bit: 7
/* Main window minimun pixel saturation*/
#define offset_of_dlc_2_reg_main_max_pixel_sat (0xc2)
#define mask_of_dlc_2_reg_main_max_pixel_sat   (0xff)
#define shift_of_dlc_2_reg_main_max_pixel_sat  (0)
#define DLC_2_REG_MAIN_MAX_PIXEL_SAT           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_max_pixel_sat)
#define REG_DLC_2_61_L                         (DLC_2_REG_MAIN_MAX_PIXEL_SAT)
// h0061, bit: 15
/* Main window maximum pixel saturation*/
#define offset_of_dlc_2_reg_main_min_pixel_sat (0xc2)
#define mask_of_dlc_2_reg_main_min_pixel_sat   (0xff00)
#define shift_of_dlc_2_reg_main_min_pixel_sat  (8)
#define DLC_2_REG_MAIN_MIN_PIXEL_SAT           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_min_pixel_sat)
// h0062, bit: 7
/* Main window maximun pixel*/
#define offset_of_dlc_2_reg_main_max_pixel (0xc4)
#define mask_of_dlc_2_reg_main_max_pixel   (0xff)
#define shift_of_dlc_2_reg_main_max_pixel  (0)
#define DLC_2_REG_MAIN_MAX_PIXEL           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_max_pixel)
#define REG_DLC_2_62_L                     (DLC_2_REG_MAIN_MAX_PIXEL)
// h0062, bit: 15
/* Main window minimum pixel*/
#define offset_of_dlc_2_reg_main_min_pixel (0xc4)
#define mask_of_dlc_2_reg_main_min_pixel   (0xff00)
#define shift_of_dlc_2_reg_main_min_pixel  (8)
#define DLC_2_REG_MAIN_MIN_PIXEL           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_min_pixel)
#define REG_DLC_2_63_L                     (REG_DLC_2_BASE + 0xc6)
// h0064, bit: 11
/* Main window UV compensate gain up limit (format is 4.8)*/
#define offset_of_dlc_2_reg_main_uvc_gain_high_limit (0xc8)
#define mask_of_dlc_2_reg_main_uvc_gain_high_limit   (0xfff)
#define shift_of_dlc_2_reg_main_uvc_gain_high_limit  (0)
#define DLC_2_REG_MAIN_UVC_GAIN_HIGH_LIMIT           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_uvc_gain_high_limit)
#define REG_DLC_2_64_L                               (DLC_2_REG_MAIN_UVC_GAIN_HIGH_LIMIT)
// h0065, bit: 11
/* Main window UV compensate gain down limit (format is 4.8)*/
#define offset_of_dlc_2_reg_main_uvc_gain_low_limit (0xca)
#define mask_of_dlc_2_reg_main_uvc_gain_low_limit   (0xfff)
#define shift_of_dlc_2_reg_main_uvc_gain_low_limit  (0)
#define DLC_2_REG_MAIN_UVC_GAIN_LOW_LIMIT           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_uvc_gain_low_limit)
#define REG_DLC_2_65_L                              (DLC_2_REG_MAIN_UVC_GAIN_LOW_LIMIT)
#define REG_DLC_2_66_L                              (REG_DLC_2_BASE + 0xcc)
#define REG_DLC_2_67_L                              (REG_DLC_2_BASE + 0xce)
// h0068, bit: 0
/* Main window show pixel value for debug Left*/
#define offset_of_dlc_2_reg_main_debug_show_pixel_en (0xd0)
#define mask_of_dlc_2_reg_main_debug_show_pixel_en   (0x1)
#define shift_of_dlc_2_reg_main_debug_show_pixel_en  (0)
#define DLC_2_REG_MAIN_DEBUG_SHOW_PIXEL_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_debug_show_pixel_en)
#define REG_DLC_2_68_L                               (DLC_2_REG_MAIN_DEBUG_SHOW_PIXEL_EN)
// h0068, bit: 1
/* Sub window show pixel value for debug Right*/
#define offset_of_dlc_2_reg_sub_debug_show_pixel_en (0xd0)
#define mask_of_dlc_2_reg_sub_debug_show_pixel_en   (0x2)
#define shift_of_dlc_2_reg_sub_debug_show_pixel_en  (1)
#define DLC_2_REG_SUB_DEBUG_SHOW_PIXEL_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_sub_debug_show_pixel_en)
// h0068, bit: 7
/* debug location:
// 0000 : input data (y,cb,cr)
// 0001 : vip_noise_mask_top output (y,cb,cr)
// 0010 : vip_v_noise_mask_filter output (y,cb,cr)
// 0011 : vip_fcc output  (y,cb,cr)
// 0100 : vip_IHC output  (y,u,v)
// 0101 : vip_ICC  output (y,u,v)
// 0110 : vip_IBC output  (y,u,v)
// 0111 : ble/wle output  (y,u,v)
// 1000 : y_rgb_delta output  (y,u,v)
// 1001 : output_data (y,cb,cr)*/
#define offset_of_dlc_2_reg_debug_locate (0xd0)
#define mask_of_dlc_2_reg_debug_locate   (0xf0)
#define shift_of_dlc_2_reg_debug_locate  (4)
#define DLC_2_REG_DEBUG_LOCATE           (REG_DLC_2_BASE + offset_of_dlc_2_reg_debug_locate)
// h0068, bit: 15
/* Histogram test mode for flesh color enable
This location must be in locate=2'h2*/
#define offset_of_dlc_2_reg_his_color_test_en (0xd0)
#define mask_of_dlc_2_reg_his_color_test_en   (0x8000)
#define shift_of_dlc_2_reg_his_color_test_en  (15)
#define DLC_2_REG_HIS_COLOR_TEST_EN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_his_color_test_en)
// h0069, bit: 15
/* debug pixel Horizontal location (max:2048+256g)*/
#define offset_of_dlc_2_reg_debug_loc_h (0xd2)
#define mask_of_dlc_2_reg_debug_loc_h   (0xffff)
#define shift_of_dlc_2_reg_debug_loc_h  (0)
#define DLC_2_REG_DEBUG_LOC_H           (REG_DLC_2_BASE + offset_of_dlc_2_reg_debug_loc_h)
#define REG_DLC_2_69_L                  (DLC_2_REG_DEBUG_LOC_H)
// h006a, bit: 15
/* debug pixel Vertical location (max:4320)*/
#define offset_of_dlc_2_reg_debug_loc_v (0xd4)
#define mask_of_dlc_2_reg_debug_loc_v   (0xffff)
#define shift_of_dlc_2_reg_debug_loc_v  (0)
#define DLC_2_REG_DEBUG_LOC_V           (REG_DLC_2_BASE + offset_of_dlc_2_reg_debug_loc_v)
#define REG_DLC_2_6A_L                  (DLC_2_REG_DEBUG_LOC_V)
// h006b, bit: 9
/* debug value for Y*/
#define offset_of_dlc_2_reg_debug_show_pixel_y (0xd6)
#define mask_of_dlc_2_reg_debug_show_pixel_y   (0x3ff)
#define shift_of_dlc_2_reg_debug_show_pixel_y  (0)
#define DLC_2_REG_DEBUG_SHOW_PIXEL_Y           (REG_DLC_2_BASE + offset_of_dlc_2_reg_debug_show_pixel_y)
#define REG_DLC_2_6B_L                         (DLC_2_REG_DEBUG_SHOW_PIXEL_Y)
// h006c, bit: 9
/* debug value for Cb*/
#define offset_of_dlc_2_reg_debug_show_pixel_cb_u (0xd8)
#define mask_of_dlc_2_reg_debug_show_pixel_cb_u   (0x3ff)
#define shift_of_dlc_2_reg_debug_show_pixel_cb_u  (0)
#define DLC_2_REG_DEBUG_SHOW_PIXEL_CB_U           (REG_DLC_2_BASE + offset_of_dlc_2_reg_debug_show_pixel_cb_u)
#define REG_DLC_2_6C_L                            (DLC_2_REG_DEBUG_SHOW_PIXEL_CB_U)
// h006d, bit: 9
/* debug value for Cr*/
#define offset_of_dlc_2_reg_debug_show_pixel_cr_v (0xda)
#define mask_of_dlc_2_reg_debug_show_pixel_cr_v   (0x3ff)
#define shift_of_dlc_2_reg_debug_show_pixel_cr_v  (0)
#define DLC_2_REG_DEBUG_SHOW_PIXEL_CR_V           (REG_DLC_2_BASE + offset_of_dlc_2_reg_debug_show_pixel_cr_v)
#define REG_DLC_2_6D_L                            (DLC_2_REG_DEBUG_SHOW_PIXEL_CR_V)
#define REG_DLC_2_6E_L                            (REG_DLC_2_BASE + 0xdc)
#define REG_DLC_2_6F_L                            (REG_DLC_2_BASE + 0xde)
// h0070, bit: 7
/* Histogram Color adaptive win1 cb up*/
#define offset_of_dlc_2_reg_color_his_cb_up (0xe0)
#define mask_of_dlc_2_reg_color_his_cb_up   (0xff)
#define shift_of_dlc_2_reg_color_his_cb_up  (0)
#define DLC_2_REG_COLOR_HIS_CB_UP           (REG_DLC_2_BASE + offset_of_dlc_2_reg_color_his_cb_up)
#define REG_DLC_2_70_L                      (DLC_2_REG_COLOR_HIS_CB_UP)
// h0070, bit: 15
/* Histogram Color adaptive win1 cr up*/
#define offset_of_dlc_2_reg_color_his_cr_up (0xe0)
#define mask_of_dlc_2_reg_color_his_cr_up   (0xff00)
#define shift_of_dlc_2_reg_color_his_cr_up  (8)
#define DLC_2_REG_COLOR_HIS_CR_UP           (REG_DLC_2_BASE + offset_of_dlc_2_reg_color_his_cr_up)
// h0071, bit: 7
/* Histogram Color adaptive win1 cb down*/
#define offset_of_dlc_2_reg_color_his_cb_down (0xe2)
#define mask_of_dlc_2_reg_color_his_cb_down   (0xff)
#define shift_of_dlc_2_reg_color_his_cb_down  (0)
#define DLC_2_REG_COLOR_HIS_CB_DOWN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_color_his_cb_down)
#define REG_DLC_2_71_L                        (DLC_2_REG_COLOR_HIS_CB_DOWN)
// h0071, bit: 15
/* Histogram Color adaptive win1 cr down*/
#define offset_of_dlc_2_reg_color_his_cr_down (0xe2)
#define mask_of_dlc_2_reg_color_his_cr_down   (0xff00)
#define shift_of_dlc_2_reg_color_his_cr_down  (8)
#define DLC_2_REG_COLOR_HIS_CR_DOWN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_color_his_cr_down)
#define REG_DLC_2_72_L                        (REG_DLC_2_BASE + 0xe4)
#define REG_DLC_2_73_L                        (REG_DLC_2_BASE + 0xe6)
#define REG_DLC_2_74_L                        (REG_DLC_2_BASE + 0xe8)
// h0075, bit: 7
/* Main window curve table left point, MSB is sign bit*/
#define offset_of_dlc_2_reg_main_curve_fit_table_n0 (0xea)
#define mask_of_dlc_2_reg_main_curve_fit_table_n0   (0xff)
#define shift_of_dlc_2_reg_main_curve_fit_table_n0  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_N0           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_n0)
#define REG_DLC_2_75_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_N0)
// h0076, bit: 8
/* Main window curve table 64*/
#define offset_of_dlc_2_reg_main_curve_fit_table_64 (0xec)
#define mask_of_dlc_2_reg_main_curve_fit_table_64   (0x1ff)
#define shift_of_dlc_2_reg_main_curve_fit_table_64  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_64           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_64)
#define REG_DLC_2_76_L                              (DLC_2_REG_MAIN_CURVE_FIT_TABLE_64)
// h0077, bit: 1
/* Main window curve table n0 LSB*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_n0 (0xee)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_n0   (0x3)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_n0  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_N0           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_n0)
#define REG_DLC_2_77_L                                  (DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_N0)
// h0077, bit: 3
/* Main window curve table 64 LSB*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_64 (0xee)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_64   (0xc)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_64  (2)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_64           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_64)
// h0077, bit: 14
/* Main window curve table left point, MSB is sign bit*/
#define offset_of_dlc_2_reg_main_curve_fit_table_n0_sign (0xee)
#define mask_of_dlc_2_reg_main_curve_fit_table_n0_sign   (0x4000)
#define shift_of_dlc_2_reg_main_curve_fit_table_n0_sign  (14)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_N0_SIGN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_n0_sign)
// h0077, bit: 15
/* Sign bit of Main window curve table 0 */
#define offset_of_dlc_2_reg_main_curve_fit_table_0_sign (0xee)
#define mask_of_dlc_2_reg_main_curve_fit_table_0_sign   (0x8000)
#define shift_of_dlc_2_reg_main_curve_fit_table_0_sign  (15)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_0_SIGN           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_0_sign)
// h0078, bit: 1
/* Main window curve table_lsb 0*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_0 (0xf0)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_0   (0x3)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_0  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_0           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_0)
#define REG_DLC_2_78_L                                 (DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_0)
// h0078, bit: 3
/* Main window curve table_lsb 1*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_1 (0xf0)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_1   (0xc)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_1  (2)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_1           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_1)
// h0078, bit: 5
/* Main window curve table_lsb 2*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_2 (0xf0)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_2   (0x30)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_2  (4)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_2           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_2)
// h0078, bit: 7
/* Main window curve table_lsb 3*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_3 (0xf0)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_3   (0xc0)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_3  (6)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_3           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_3)
// h0078, bit: 9
/* Main window curve table_lsb 4*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_4 (0xf0)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_4   (0x300)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_4  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_4           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_4)
// h0078, bit: 11
/* Main window curve table_lsb 5*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_5 (0xf0)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_5   (0xc00)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_5  (10)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_5           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_5)
// h0078, bit: 13
/* Main window curve table_lsb 6*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_6 (0xf0)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_6   (0x3000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_6  (12)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_6           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_6)
// h0078, bit: 15
/* Main window curve table_lsb 7*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_7 (0xf0)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_7   (0xc000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_7  (14)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_7           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_7)
// h0079, bit: 1
/* Main window curve table_lsb 8*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_8 (0xf2)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_8   (0x3)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_8  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_8           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_8)
#define REG_DLC_2_79_L                                 (DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_8)
// h0079, bit: 3
/* Main window curve table_lsb 9*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_9 (0xf2)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_9   (0xc)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_9  (2)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_9           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_9)
// h0079, bit: 5
/* Main window curve table_lsb 10*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_10 (0xf2)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_10   (0x30)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_10  (4)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_10           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_10)
// h0079, bit: 7
/* Main window curve table_lsb 11*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_11 (0xf2)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_11   (0xc0)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_11  (6)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_11           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_11)
// h0079, bit: 9
/* Main window curve table_lsb 12*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_12 (0xf2)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_12   (0x300)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_12  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_12           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_12)
// h0079, bit: 11
/* Main window curve table_lsb 13*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_13 (0xf2)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_13   (0xc00)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_13  (10)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_13           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_13)
// h0079, bit: 13
/* Main window curve table_lsb 14*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_14 (0xf2)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_14   (0x3000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_14  (12)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_14           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_14)
// h0079, bit: 15
/* Main window curve table_lsb 15*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_15 (0xf2)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_15   (0xc000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_15  (14)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_15           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_15)
// h007a, bit: 1
/* Main window curve table_lsb 16*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_16 (0xf4)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_16   (0x3)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_16  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_16           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_16)
#define REG_DLC_2_7A_L                                  (DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_16)
// h007a, bit: 3
/* Main window curve table_lsb 17*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_17 (0xf4)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_17   (0xc)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_17  (2)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_17           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_17)
// h007a, bit: 5
/* Main window curve table_lsb 18*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_18 (0xf4)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_18   (0x30)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_18  (4)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_18           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_18)
// h007a, bit: 7
/* Main window curve table_lsb 19*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_19 (0xf4)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_19   (0xc0)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_19  (6)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_19           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_19)
// h007a, bit: 9
/* Main window curve table_lsb 20*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_20 (0xf4)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_20   (0x300)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_20  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_20           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_20)
// h007a, bit: 11
/* Main window curve table_lsb 21*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_21 (0xf4)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_21   (0xc00)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_21  (10)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_21           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_21)
// h007a, bit: 13
/* Main window curve table_lsb 22*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_22 (0xf4)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_22   (0x3000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_22  (12)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_22           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_22)
// h007a, bit: 15
/* Main window curve table_lsb 23*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_23 (0xf4)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_23   (0xc000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_23  (14)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_23           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_23)
// h007b, bit: 1
/* Main window curve table_lsb 24*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_24 (0xf6)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_24   (0x3)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_24  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_24           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_24)
#define REG_DLC_2_7B_L                                  (DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_24)
// h007b, bit: 3
/* Main window curve table_lsb 25*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_25 (0xf6)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_25   (0xc)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_25  (2)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_25           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_25)
// h007b, bit: 5
/* Main window curve table_lsb 26*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_26 (0xf6)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_26   (0x30)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_26  (4)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_26           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_26)
// h007b, bit: 7
/* Main window curve table_lsb 27*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_27 (0xf6)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_27   (0xc0)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_27  (6)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_27           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_27)
// h007b, bit: 9
/* Main window curve table_lsb 28*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_28 (0xf6)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_28   (0x300)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_28  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_28           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_28)
// h007b, bit: 11
/* Main window curve table_lsb 29*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_29 (0xf6)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_29   (0xc00)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_29  (10)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_29           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_29)
// h007b, bit: 13
/* Main window curve table_lsb 30*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_30 (0xf6)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_30   (0x3000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_30  (12)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_30           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_30)
// h007b, bit: 15
/* Main window curve table_lsb 31*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_31 (0xf6)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_31   (0xc000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_31  (14)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_31           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_31)
// h007c, bit: 1
/* Main window curve table_lsb 32*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_32 (0xf8)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_32   (0x3)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_32  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_32           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_32)
#define REG_DLC_2_7C_L                                  (DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_32)
// h007c, bit: 3
/* Main window curve table_lsb 33*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_33 (0xf8)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_33   (0xc)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_33  (2)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_33           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_33)
// h007c, bit: 5
/* Main window curve table_lsb 34*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_34 (0xf8)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_34   (0x30)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_34  (4)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_34           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_34)
// h007c, bit: 7
/* Main window curve table_lsb 35*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_35 (0xf8)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_35   (0xc0)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_35  (6)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_35           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_35)
// h007c, bit: 9
/* Main window curve table_lsb 36*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_36 (0xf8)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_36   (0x300)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_36  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_36           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_36)
// h007c, bit: 11
/* Main window curve table_lsb 37*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_37 (0xf8)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_37   (0xc00)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_37  (10)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_37           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_37)
// h007c, bit: 13
/* Main window curve table_lsb 38*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_38 (0xf8)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_38   (0x3000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_38  (12)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_38           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_38)
// h007c, bit: 15
/* Main window curve table_lsb 39*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_39 (0xf8)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_39   (0xc000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_39  (14)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_39           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_39)
// h007d, bit: 1
/* Main window curve table_lsb 40*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_40 (0xfa)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_40   (0x3)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_40  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_40           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_40)
#define REG_DLC_2_7D_L                                  (DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_40)
// h007d, bit: 3
/* Main window curve table_lsb 41*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_41 (0xfa)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_41   (0xc)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_41  (2)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_41           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_41)
// h007d, bit: 5
/* Main window curve table_lsb 42*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_42 (0xfa)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_42   (0x30)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_42  (4)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_42           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_42)
// h007d, bit: 7
/* Main window curve table_lsb 43*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_43 (0xfa)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_43   (0xc0)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_43  (6)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_43           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_43)
// h007d, bit: 9
/* Main window curve table_lsb 44*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_44 (0xfa)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_44   (0x300)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_44  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_44           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_44)
// h007d, bit: 11
/* Main window curve table_lsb 45*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_45 (0xfa)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_45   (0xc00)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_45  (10)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_45           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_45)
// h007d, bit: 13
/* Main window curve table_lsb 46*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_46 (0xfa)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_46   (0x3000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_46  (12)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_46           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_46)
// h007d, bit: 15
/* Main window curve table_lsb 47*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_47 (0xfa)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_47   (0xc000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_47  (14)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_47           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_47)
// h007e, bit: 1
/* Main window curve table_lsb 48*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_48 (0xfc)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_48   (0x3)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_48  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_48           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_48)
#define REG_DLC_2_7E_L                                  (DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_48)
// h007e, bit: 3
/* Main window curve table_lsb 49*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_49 (0xfc)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_49   (0xc)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_49  (2)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_49           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_49)
// h007e, bit: 5
/* Main window curve table_lsb 50*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_50 (0xfc)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_50   (0x30)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_50  (4)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_50           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_50)
// h007e, bit: 7
/* Main window curve table_lsb 51*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_51 (0xfc)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_51   (0xc0)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_51  (6)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_51           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_51)
// h007e, bit: 9
/* Main window curve table_lsb 52*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_52 (0xfc)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_52   (0x300)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_52  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_52           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_52)
// h007e, bit: 11
/* Main window curve table_lsb 53*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_53 (0xfc)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_53   (0xc00)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_53  (10)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_53           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_53)
// h007e, bit: 13
/* Main window curve table_lsb 54*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_54 (0xfc)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_54   (0x3000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_54  (12)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_54           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_54)
// h007e, bit: 15
/* Main window curve table_lsb 55*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_55 (0xfc)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_55   (0xc000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_55  (14)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_55           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_55)
// h007f, bit: 1
/* Main window curve table_lsb 56*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_56 (0xfe)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_56   (0x3)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_56  (0)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_56           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_56)
#define REG_DLC_2_7F_L                                  (DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_56)
// h007f, bit: 3
/* Main window curve table_lsb 57*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_57 (0xfe)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_57   (0xc)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_57  (2)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_57           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_57)
// h007f, bit: 5
/* Main window curve table_lsb 58*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_58 (0xfe)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_58   (0x30)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_58  (4)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_58           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_58)
// h007f, bit: 7
/* Main window curve table_lsb 59*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_59 (0xfe)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_59   (0xc0)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_59  (6)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_59           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_59)
// h007f, bit: 9
/* Main window curve table_lsb 60*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_60 (0xfe)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_60   (0x300)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_60  (8)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_60           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_60)
// h007f, bit: 11
/* Main window curve table_lsb 61*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_61 (0xfe)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_61   (0xc00)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_61  (10)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_61           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_61)
// h007f, bit: 13
/* Main window curve table_lsb 62*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_62 (0xfe)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_62   (0x3000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_62  (12)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_62           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_62)
// h007f, bit: 15
/* Main window curve table_lsb 63*/
#define offset_of_dlc_2_reg_main_curve_fit_table_lsb_63 (0xfe)
#define mask_of_dlc_2_reg_main_curve_fit_table_lsb_63   (0xc000)
#define shift_of_dlc_2_reg_main_curve_fit_table_lsb_63  (14)
#define DLC_2_REG_MAIN_CURVE_FIT_TABLE_LSB_63           (REG_DLC_2_BASE + offset_of_dlc_2_reg_main_curve_fit_table_lsb_63)
#define REG_LCE_2_00_L                                  (REG_LCE_2_BASE + 0x0)
#define REG_LCE_2_01_L                                  (REG_LCE_2_BASE + 0x2)
#define REG_LCE_2_02_L                                  (REG_LCE_2_BASE + 0x4)
#define REG_LCE_2_03_L                                  (REG_LCE_2_BASE + 0x6)
#define REG_LCE_2_04_L                                  (REG_LCE_2_BASE + 0x8)
#define REG_LCE_2_05_L                                  (REG_LCE_2_BASE + 0xa)
#define REG_LCE_2_06_L                                  (REG_LCE_2_BASE + 0xc)
#define REG_LCE_2_07_L                                  (REG_LCE_2_BASE + 0xe)
// h0008, bit: 15
/* Main window color selection for  lce of  Color 0*/
#define offset_of_lce_2_reg_main_color_g0_select_lce (0x10)
#define mask_of_lce_2_reg_main_color_g0_select_lce   (0xffff)
#define shift_of_lce_2_reg_main_color_g0_select_lce  (0)
#define LCE_2_REG_MAIN_COLOR_G0_SELECT_LCE           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_color_g0_select_lce)
#define REG_LCE_2_08_L                               (LCE_2_REG_MAIN_COLOR_G0_SELECT_LCE)
// h0009, bit: 15
/* Main window color selection for  lce of  Color 1*/
#define offset_of_lce_2_reg_main_color_g1_select_lce (0x12)
#define mask_of_lce_2_reg_main_color_g1_select_lce   (0xffff)
#define shift_of_lce_2_reg_main_color_g1_select_lce  (0)
#define LCE_2_REG_MAIN_COLOR_G1_SELECT_LCE           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_color_g1_select_lce)
#define REG_LCE_2_09_L                               (LCE_2_REG_MAIN_COLOR_G1_SELECT_LCE)
// h000a, bit: 15
/* Main window color selection for  lce of  Color 2*/
#define offset_of_lce_2_reg_main_color_g2_select_lce (0x14)
#define mask_of_lce_2_reg_main_color_g2_select_lce   (0xffff)
#define shift_of_lce_2_reg_main_color_g2_select_lce  (0)
#define LCE_2_REG_MAIN_COLOR_G2_SELECT_LCE           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_color_g2_select_lce)
#define REG_LCE_2_0A_L                               (LCE_2_REG_MAIN_COLOR_G2_SELECT_LCE)
// h000b, bit: 15
/* Main window color selection for  lce of  Color 3*/
#define offset_of_lce_2_reg_main_color_g3_select_lce (0x16)
#define mask_of_lce_2_reg_main_color_g3_select_lce   (0xffff)
#define shift_of_lce_2_reg_main_color_g3_select_lce  (0)
#define LCE_2_REG_MAIN_COLOR_G3_SELECT_LCE           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_color_g3_select_lce)
#define REG_LCE_2_0B_L                               (LCE_2_REG_MAIN_COLOR_G3_SELECT_LCE)
#define REG_LCE_2_0C_L                               (REG_LCE_2_BASE + 0x18)
#define REG_LCE_2_0D_L                               (REG_LCE_2_BASE + 0x1a)
#define REG_LCE_2_0E_L                               (REG_LCE_2_BASE + 0x1c)
#define REG_LCE_2_0F_L                               (REG_LCE_2_BASE + 0x1e)
// h0010, bit: 0
/* main window lce  enable*/
#define offset_of_lce_2_reg_main_lce_en (0x20)
#define mask_of_lce_2_reg_main_lce_en   (0x1)
#define shift_of_lce_2_reg_main_lce_en  (0)
#define LCE_2_REG_MAIN_LCE_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_en)
#define REG_LCE_2_10_L                  (LCE_2_REG_MAIN_LCE_EN)
// h0010, bit: 1
/* main window lce slop of dlc curve alpha blending enable*/
#define offset_of_lce_2_reg_main_lce_sodc_alpha_en (0x20)
#define mask_of_lce_2_reg_main_lce_sodc_alpha_en   (0x2)
#define shift_of_lce_2_reg_main_lce_sodc_alpha_en  (1)
#define LCE_2_REG_MAIN_LCE_SODC_ALPHA_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_sodc_alpha_en)
// h0010, bit: 2
/* main window lce dering alpha blending enable*/
#define offset_of_lce_2_reg_main_lce_dering_alpha_en (0x20)
#define mask_of_lce_2_reg_main_lce_dering_alpha_en   (0x4)
#define shift_of_lce_2_reg_main_lce_dering_alpha_en  (2)
#define LCE_2_REG_MAIN_LCE_DERING_ALPHA_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_dering_alpha_en)
// h0010, bit: 3
/* main window lce color adaptive alpha blending enable*/
#define offset_of_lce_2_reg_main_lce_color_alpha_en (0x20)
#define mask_of_lce_2_reg_main_lce_color_alpha_en   (0x8)
#define shift_of_lce_2_reg_main_lce_color_alpha_en  (3)
#define LCE_2_REG_MAIN_LCE_COLOR_ALPHA_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_color_alpha_en)
// h0010, bit: 4
/* main window lce y ave selection(1'b1: 5x7; 1'b0:5x11)*/
#define offset_of_lce_2_reg_main_lce_y_ave_sel (0x20)
#define mask_of_lce_2_reg_main_lce_y_ave_sel   (0x10)
#define shift_of_lce_2_reg_main_lce_y_ave_sel  (4)
#define LCE_2_REG_MAIN_LCE_Y_AVE_SEL           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_y_ave_sel)
// h0010, bit: 5
/* lce_debug_mode*/
#define offset_of_lce_2_reg_lce_debug_en (0x20)
#define mask_of_lce_2_reg_lce_debug_en   (0x20)
#define shift_of_lce_2_reg_lce_debug_en  (5)
#define LCE_2_REG_LCE_DEBUG_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_debug_en)
// h0010, bit: 6
/* lce 3 curve enable*/
#define offset_of_lce_2_reg_lce_3curve_en (0x20)
#define mask_of_lce_2_reg_lce_3curve_en   (0x40)
#define shift_of_lce_2_reg_lce_3curve_en  (6)
#define LCE_2_REG_LCE_3CURVE_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_3curve_en)
// h0010, bit: 7
/* lce dither enable*/
#define offset_of_lce_2_reg_lce_dither_en (0x20)
#define mask_of_lce_2_reg_lce_dither_en   (0x80)
#define shift_of_lce_2_reg_lce_dither_en  (7)
#define LCE_2_REG_LCE_DITHER_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_dither_en)
// h0010, bit: 11
/* main window lce std slop1: 0.00xxxx format*/
#define offset_of_lce_2_reg_main_lce_std_slop1 (0x20)
#define mask_of_lce_2_reg_main_lce_std_slop1   (0xf00)
#define shift_of_lce_2_reg_main_lce_std_slop1  (8)
#define LCE_2_REG_MAIN_LCE_STD_SLOP1           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_std_slop1)
// h0010, bit: 15
/* main window lce std slop2: 0.00xxxx format*/
#define offset_of_lce_2_reg_main_lce_std_slop2 (0x20)
#define mask_of_lce_2_reg_main_lce_std_slop2   (0xf000)
#define shift_of_lce_2_reg_main_lce_std_slop2  (12)
#define LCE_2_REG_MAIN_LCE_STD_SLOP2           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_std_slop2)
// h0011, bit: 7
/* main window lce std threshold 1: 8 bit precision*/
#define offset_of_lce_2_reg_main_lce_std_th1 (0x22)
#define mask_of_lce_2_reg_main_lce_std_th1   (0xff)
#define shift_of_lce_2_reg_main_lce_std_th1  (0)
#define LCE_2_REG_MAIN_LCE_STD_TH1           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_std_th1)
#define REG_LCE_2_11_L                       (LCE_2_REG_MAIN_LCE_STD_TH1)
// h0011, bit: 15
/* main window lce std threshold 2: 8 bit precision*/
#define offset_of_lce_2_reg_main_lce_std_th2 (0x22)
#define mask_of_lce_2_reg_main_lce_std_th2   (0xff00)
#define shift_of_lce_2_reg_main_lce_std_th2  (8)
#define LCE_2_REG_MAIN_LCE_STD_TH2           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_std_th2)
// h0012, bit: 6
/* main window lce std gain minimum: x.xxxxxx format*/
#define offset_of_lce_2_reg_main_lce_gain_min (0x24)
#define mask_of_lce_2_reg_main_lce_gain_min   (0x7f)
#define shift_of_lce_2_reg_main_lce_gain_min  (0)
#define LCE_2_REG_MAIN_LCE_GAIN_MIN           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_gain_min)
#define REG_LCE_2_12_L                        (LCE_2_REG_MAIN_LCE_GAIN_MIN)
// h0012, bit: 15
/* main window lce std gain maximum: xx.xxxxxx format*/
#define offset_of_lce_2_reg_main_lce_gain_max (0x24)
#define mask_of_lce_2_reg_main_lce_gain_max   (0xff00)
#define shift_of_lce_2_reg_main_lce_gain_max  (8)
#define LCE_2_REG_MAIN_LCE_GAIN_MAX           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_gain_max)
// h0013, bit: 5
/* main window lce slop of dlc curve low alpha*/
#define offset_of_lce_2_reg_main_lce_sodc_low_alpha (0x26)
#define mask_of_lce_2_reg_main_lce_sodc_low_alpha   (0x3f)
#define shift_of_lce_2_reg_main_lce_sodc_low_alpha  (0)
#define LCE_2_REG_MAIN_LCE_SODC_LOW_ALPHA           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_sodc_low_alpha)
#define REG_LCE_2_13_L                              (LCE_2_REG_MAIN_LCE_SODC_LOW_ALPHA)
// h0013, bit: 15
/* main window lce slop of dlc curve low threshold: 8 bit precesion*/
#define offset_of_lce_2_reg_main_lce_sodc_low_th (0x26)
#define mask_of_lce_2_reg_main_lce_sodc_low_th   (0xff00)
#define shift_of_lce_2_reg_main_lce_sodc_low_th  (8)
#define LCE_2_REG_MAIN_LCE_SODC_LOW_TH           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_sodc_low_th)
// h0014, bit: 3
/* main window lce slop of dlc curve slop; 0.000xxxx format*/
#define offset_of_lce_2_reg_main_lce_sodc_slop (0x28)
#define mask_of_lce_2_reg_main_lce_sodc_slop   (0xf)
#define shift_of_lce_2_reg_main_lce_sodc_slop  (0)
#define LCE_2_REG_MAIN_LCE_SODC_SLOP           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_sodc_slop)
#define REG_LCE_2_14_L                         (LCE_2_REG_MAIN_LCE_SODC_SLOP)
// h0014, bit: 13
/* main window lce diff gain; xx.xxxx format*/
#define offset_of_lce_2_reg_main_lce_diff_gain (0x28)
#define mask_of_lce_2_reg_main_lce_diff_gain   (0x3f00)
#define shift_of_lce_2_reg_main_lce_diff_gain  (8)
#define LCE_2_REG_MAIN_LCE_DIFF_GAIN           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_diff_gain)
// h0015, bit: 3
/* Main window color adaptive for  lce of Color 0*/
#define offset_of_lce_2_reg_main_color_g0_strength_lce (0x2a)
#define mask_of_lce_2_reg_main_color_g0_strength_lce   (0xf)
#define shift_of_lce_2_reg_main_color_g0_strength_lce  (0)
#define LCE_2_REG_MAIN_COLOR_G0_STRENGTH_LCE           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_color_g0_strength_lce)
#define REG_LCE_2_15_L                                 (LCE_2_REG_MAIN_COLOR_G0_STRENGTH_LCE)
// h0015, bit: 7
/* Main window color adaptive for  lce of Color 1*/
#define offset_of_lce_2_reg_main_color_g1_strength_lce (0x2a)
#define mask_of_lce_2_reg_main_color_g1_strength_lce   (0xf0)
#define shift_of_lce_2_reg_main_color_g1_strength_lce  (4)
#define LCE_2_REG_MAIN_COLOR_G1_STRENGTH_LCE           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_color_g1_strength_lce)
// h0015, bit: 11
/* Main window color adaptive for  lce of Color 2*/
#define offset_of_lce_2_reg_main_color_g2_strength_lce (0x2a)
#define mask_of_lce_2_reg_main_color_g2_strength_lce   (0xf00)
#define shift_of_lce_2_reg_main_color_g2_strength_lce  (8)
#define LCE_2_REG_MAIN_COLOR_G2_STRENGTH_LCE           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_color_g2_strength_lce)
// h0015, bit: 15
/* Main window color adaptive for  lce of Color 3*/
#define offset_of_lce_2_reg_main_color_g3_strength_lce (0x2a)
#define mask_of_lce_2_reg_main_color_g3_strength_lce   (0xf000)
#define shift_of_lce_2_reg_main_color_g3_strength_lce  (12)
#define LCE_2_REG_MAIN_COLOR_G3_STRENGTH_LCE           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_color_g3_strength_lce)
#define REG_LCE_2_16_L                                 (REG_LCE_2_BASE + 0x2c)
// h0017, bit: 7
/* main window lce curve threshold a; a<b<c<d; 8 bit precision */
#define offset_of_lce_2_reg_main_lce_curve_a (0x2e)
#define mask_of_lce_2_reg_main_lce_curve_a   (0xff)
#define shift_of_lce_2_reg_main_lce_curve_a  (0)
#define LCE_2_REG_MAIN_LCE_CURVE_A           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_curve_a)
#define REG_LCE_2_17_L                       (LCE_2_REG_MAIN_LCE_CURVE_A)
// h0017, bit: 15
/* main window lce curve threshold b; a<b<c<d; 8 bit precision */
#define offset_of_lce_2_reg_main_lce_curve_b (0x2e)
#define mask_of_lce_2_reg_main_lce_curve_b   (0xff00)
#define shift_of_lce_2_reg_main_lce_curve_b  (8)
#define LCE_2_REG_MAIN_LCE_CURVE_B           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_curve_b)
// h0018, bit: 7
/* main window lce curve threshold c; a<b<c<d; 8 bit precision */
#define offset_of_lce_2_reg_main_lce_curve_c (0x30)
#define mask_of_lce_2_reg_main_lce_curve_c   (0xff)
#define shift_of_lce_2_reg_main_lce_curve_c  (0)
#define LCE_2_REG_MAIN_LCE_CURVE_C           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_curve_c)
#define REG_LCE_2_18_L                       (LCE_2_REG_MAIN_LCE_CURVE_C)
// h0018, bit: 15
/* main window lce curve threshold d; a<b<c<d; 8 bit precision */
#define offset_of_lce_2_reg_main_lce_curve_d (0x30)
#define mask_of_lce_2_reg_main_lce_curve_d   (0xff00)
#define shift_of_lce_2_reg_main_lce_curve_d  (8)
#define LCE_2_REG_MAIN_LCE_CURVE_D           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_curve_d)
// h0019, bit: 7
/* main window lce std gain complex: xx.xxxxxx format*/
#define offset_of_lce_2_reg_main_lce_gain_complex (0x32)
#define mask_of_lce_2_reg_main_lce_gain_complex   (0xff)
#define shift_of_lce_2_reg_main_lce_gain_complex  (0)
#define LCE_2_REG_MAIN_LCE_GAIN_COMPLEX           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_lce_gain_complex)
#define REG_LCE_2_19_L                            (LCE_2_REG_MAIN_LCE_GAIN_COMPLEX)
// h001a, bit: 5
/* min sad gain for LCE ds patch, 2.4*/
#define offset_of_lce_2_reg_dsptch_lce_dsw_minsadgain (0x34)
#define mask_of_lce_2_reg_dsptch_lce_dsw_minsadgain   (0x3f)
#define shift_of_lce_2_reg_dsptch_lce_dsw_minsadgain  (0)
#define LCE_2_REG_DSPTCH_LCE_DSW_MINSADGAIN           (REG_LCE_2_BASE + offset_of_lce_2_reg_dsptch_lce_dsw_minsadgain)
#define REG_LCE_2_1A_L                                (LCE_2_REG_DSPTCH_LCE_DSW_MINSADGAIN)
// h001a, bit: 11
/* gain for LCE ds patch, 1.3*/
#define offset_of_lce_2_reg_dsptch_lce_dsw_gain (0x34)
#define mask_of_lce_2_reg_dsptch_lce_dsw_gain   (0xf00)
#define shift_of_lce_2_reg_dsptch_lce_dsw_gain  (8)
#define LCE_2_REG_DSPTCH_LCE_DSW_GAIN           (REG_LCE_2_BASE + offset_of_lce_2_reg_dsptch_lce_dsw_gain)
// h001b, bit: 4
/* threshold for LCE ds patch*/
#define offset_of_lce_2_reg_dsptch_lce_dsw_thrd (0x36)
#define mask_of_lce_2_reg_dsptch_lce_dsw_thrd   (0x1f)
#define shift_of_lce_2_reg_dsptch_lce_dsw_thrd  (0)
#define LCE_2_REG_DSPTCH_LCE_DSW_THRD           (REG_LCE_2_BASE + offset_of_lce_2_reg_dsptch_lce_dsw_thrd)
#define REG_LCE_2_1B_L                          (LCE_2_REG_DSPTCH_LCE_DSW_THRD)
#define REG_LCE_2_1C_L                          (REG_LCE_2_BASE + 0x38)
#define REG_LCE_2_1D_L                          (REG_LCE_2_BASE + 0x3a)
#define REG_LCE_2_1E_L                          (REG_LCE_2_BASE + 0x3c)
#define REG_LCE_2_1F_L                          (REG_LCE_2_BASE + 0x3e)
#define REG_LCE_2_20_L                          (REG_LCE_2_BASE + 0x40)
#define REG_LCE_2_21_L                          (REG_LCE_2_BASE + 0x42)
#define REG_LCE_2_22_L                          (REG_LCE_2_BASE + 0x44)
#define REG_LCE_2_23_L                          (REG_LCE_2_BASE + 0x46)
#define REG_LCE_2_24_L                          (REG_LCE_2_BASE + 0x48)
#define REG_LCE_2_25_L                          (REG_LCE_2_BASE + 0x4a)
#define REG_LCE_2_26_L                          (REG_LCE_2_BASE + 0x4c)
#define REG_LCE_2_27_L                          (REG_LCE_2_BASE + 0x4e)
#define REG_LCE_2_28_L                          (REG_LCE_2_BASE + 0x50)
#define REG_LCE_2_29_L                          (REG_LCE_2_BASE + 0x52)
#define REG_LCE_2_2A_L                          (REG_LCE_2_BASE + 0x54)
#define REG_LCE_2_2B_L                          (REG_LCE_2_BASE + 0x56)
#define REG_LCE_2_2C_L                          (REG_LCE_2_BASE + 0x58)
#define REG_LCE_2_2D_L                          (REG_LCE_2_BASE + 0x5a)
#define REG_LCE_2_2E_L                          (REG_LCE_2_BASE + 0x5c)
#define REG_LCE_2_2F_L                          (REG_LCE_2_BASE + 0x5e)
// h0030, bit: 7
/* lce curve lut1 luma equal to 0x08 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_08_8msb (0x60)
#define mask_of_lce_2_reg_lce_curve_lut1_08_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_08_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_08_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_08_8msb)
#define REG_LCE_2_30_L                             (LCE_2_REG_LCE_CURVE_LUT1_08_8MSB)
// h0030, bit: 9
/* lce curve lut1 luma equal to 0x08 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_08_2lsb (0x60)
#define mask_of_lce_2_reg_lce_curve_lut1_08_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_08_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_08_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_08_2lsb)
// h0031, bit: 7
/* lce curve lut1 luma equal to 0x18 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_18_8msb (0x62)
#define mask_of_lce_2_reg_lce_curve_lut1_18_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_18_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_18_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_18_8msb)
#define REG_LCE_2_31_L                             (LCE_2_REG_LCE_CURVE_LUT1_18_8MSB)
// h0031, bit: 9
/* lce curve lut1 luma equal to 0x18 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_18_2lsb (0x62)
#define mask_of_lce_2_reg_lce_curve_lut1_18_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_18_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_18_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_18_2lsb)
// h0032, bit: 7
/* lce curve lut1 luma equal to 0x28 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_28_8msb (0x64)
#define mask_of_lce_2_reg_lce_curve_lut1_28_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_28_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_28_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_28_8msb)
#define REG_LCE_2_32_L                             (LCE_2_REG_LCE_CURVE_LUT1_28_8MSB)
// h0032, bit: 9
/* lce curve lut1 luma equal to 0x28 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_28_2lsb (0x64)
#define mask_of_lce_2_reg_lce_curve_lut1_28_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_28_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_28_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_28_2lsb)
// h0033, bit: 7
/* lce curve lut1 luma equal to 0x38 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_38_8msb (0x66)
#define mask_of_lce_2_reg_lce_curve_lut1_38_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_38_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_38_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_38_8msb)
#define REG_LCE_2_33_L                             (LCE_2_REG_LCE_CURVE_LUT1_38_8MSB)
// h0033, bit: 9
/* lce curve lut1 luma equal to 0x38 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_38_2lsb (0x66)
#define mask_of_lce_2_reg_lce_curve_lut1_38_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_38_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_38_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_38_2lsb)
// h0034, bit: 7
/* lce curve lut1 luma equal to 0x48 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_48_8msb (0x68)
#define mask_of_lce_2_reg_lce_curve_lut1_48_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_48_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_48_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_48_8msb)
#define REG_LCE_2_34_L                             (LCE_2_REG_LCE_CURVE_LUT1_48_8MSB)
// h0034, bit: 9
/* lce curve lut1 luma equal to 0x48 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_48_2lsb (0x68)
#define mask_of_lce_2_reg_lce_curve_lut1_48_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_48_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_48_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_48_2lsb)
// h0035, bit: 7
/* lce curve lut1 luma equal to 0x58 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_58_8msb (0x6a)
#define mask_of_lce_2_reg_lce_curve_lut1_58_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_58_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_58_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_58_8msb)
#define REG_LCE_2_35_L                             (LCE_2_REG_LCE_CURVE_LUT1_58_8MSB)
// h0035, bit: 9
/* lce curve lut1 luma equal to 0x58 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_58_2lsb (0x6a)
#define mask_of_lce_2_reg_lce_curve_lut1_58_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_58_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_58_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_58_2lsb)
// h0036, bit: 7
/* lce curve lut1 luma equal to 0x68 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_68_8msb (0x6c)
#define mask_of_lce_2_reg_lce_curve_lut1_68_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_68_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_68_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_68_8msb)
#define REG_LCE_2_36_L                             (LCE_2_REG_LCE_CURVE_LUT1_68_8MSB)
// h0036, bit: 9
/* lce curve lut1 luma equal to 0x68 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_68_2lsb (0x6c)
#define mask_of_lce_2_reg_lce_curve_lut1_68_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_68_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_68_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_68_2lsb)
// h0037, bit: 7
/* lce curve lut1 luma equal to 0x78 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_78_8msb (0x6e)
#define mask_of_lce_2_reg_lce_curve_lut1_78_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_78_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_78_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_78_8msb)
#define REG_LCE_2_37_L                             (LCE_2_REG_LCE_CURVE_LUT1_78_8MSB)
// h0037, bit: 9
/* lce curve lut1 luma equal to 0x78 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_78_2lsb (0x6e)
#define mask_of_lce_2_reg_lce_curve_lut1_78_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_78_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_78_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_78_2lsb)
// h0038, bit: 7
/* lce curve lut1 luma equal to 0x88 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_88_8msb (0x70)
#define mask_of_lce_2_reg_lce_curve_lut1_88_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_88_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_88_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_88_8msb)
#define REG_LCE_2_38_L                             (LCE_2_REG_LCE_CURVE_LUT1_88_8MSB)
// h0038, bit: 9
/* lce curve lut1 luma equal to 0x88 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_88_2lsb (0x70)
#define mask_of_lce_2_reg_lce_curve_lut1_88_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_88_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_88_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_88_2lsb)
// h0039, bit: 7
/* lce curve lut1 luma equal to 0x98 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_98_8msb (0x72)
#define mask_of_lce_2_reg_lce_curve_lut1_98_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_98_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_98_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_98_8msb)
#define REG_LCE_2_39_L                             (LCE_2_REG_LCE_CURVE_LUT1_98_8MSB)
// h0039, bit: 9
/* lce curve lut1 luma equal to 0x98 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_98_2lsb (0x72)
#define mask_of_lce_2_reg_lce_curve_lut1_98_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_98_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_98_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_98_2lsb)
// h003a, bit: 7
/* lce curve lut1 luma equal to 0xa8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_a8_8msb (0x74)
#define mask_of_lce_2_reg_lce_curve_lut1_a8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_a8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_A8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_a8_8msb)
#define REG_LCE_2_3A_L                             (LCE_2_REG_LCE_CURVE_LUT1_A8_8MSB)
// h003a, bit: 9
/* lce curve lut1 luma equal to 0xa8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_a8_2lsb (0x74)
#define mask_of_lce_2_reg_lce_curve_lut1_a8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_a8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_A8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_a8_2lsb)
// h003b, bit: 7
/* lce curve lut1 luma equal to 0xb8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_b8_8msb (0x76)
#define mask_of_lce_2_reg_lce_curve_lut1_b8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_b8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_B8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_b8_8msb)
#define REG_LCE_2_3B_L                             (LCE_2_REG_LCE_CURVE_LUT1_B8_8MSB)
// h003b, bit: 9
/* lce curve lut1 luma equal to 0xb8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_b8_2lsb (0x76)
#define mask_of_lce_2_reg_lce_curve_lut1_b8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_b8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_B8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_b8_2lsb)
// h003c, bit: 7
/* lce curve lut1 luma equal to 0xc8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_c8_8msb (0x78)
#define mask_of_lce_2_reg_lce_curve_lut1_c8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_c8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_C8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_c8_8msb)
#define REG_LCE_2_3C_L                             (LCE_2_REG_LCE_CURVE_LUT1_C8_8MSB)
// h003c, bit: 9
/* lce curve lut1 luma equal to 0xc8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_c8_2lsb (0x78)
#define mask_of_lce_2_reg_lce_curve_lut1_c8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_c8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_C8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_c8_2lsb)
// h003d, bit: 7
/* lce curve lut1 luma equal to 0xd8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_d8_8msb (0x7a)
#define mask_of_lce_2_reg_lce_curve_lut1_d8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_d8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_D8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_d8_8msb)
#define REG_LCE_2_3D_L                             (LCE_2_REG_LCE_CURVE_LUT1_D8_8MSB)
// h003d, bit: 9
/* lce curve lut1 luma equal to 0xd8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_d8_2lsb (0x7a)
#define mask_of_lce_2_reg_lce_curve_lut1_d8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_d8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_D8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_d8_2lsb)
// h003e, bit: 7
/* lce curve lut1 luma equal to 0xe8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_e8_8msb (0x7c)
#define mask_of_lce_2_reg_lce_curve_lut1_e8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_e8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_E8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_e8_8msb)
#define REG_LCE_2_3E_L                             (LCE_2_REG_LCE_CURVE_LUT1_E8_8MSB)
// h003e, bit: 9
/* lce curve lut1 luma equal to 0xe8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_e8_2lsb (0x7c)
#define mask_of_lce_2_reg_lce_curve_lut1_e8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_e8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_E8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_e8_2lsb)
// h003f, bit: 7
/* lce curve lut1 luma equal to 0xf8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_f8_8msb (0x7e)
#define mask_of_lce_2_reg_lce_curve_lut1_f8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut1_f8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT1_F8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_f8_8msb)
#define REG_LCE_2_3F_L                             (LCE_2_REG_LCE_CURVE_LUT1_F8_8MSB)
// h003f, bit: 9
/* lce curve lut1 luma equal to 0xf8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut1_f8_2lsb (0x7e)
#define mask_of_lce_2_reg_lce_curve_lut1_f8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut1_f8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT1_F8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut1_f8_2lsb)
// h0040, bit: 7
/* lce curve lut2 luma equal to 0x08 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_08_8msb (0x80)
#define mask_of_lce_2_reg_lce_curve_lut2_08_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_08_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_08_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_08_8msb)
#define REG_LCE_2_40_L                             (LCE_2_REG_LCE_CURVE_LUT2_08_8MSB)
// h0040, bit: 9
/* lce curve lut2 luma equal to 0x08 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_08_2lsb (0x80)
#define mask_of_lce_2_reg_lce_curve_lut2_08_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_08_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_08_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_08_2lsb)
// h0041, bit: 7
/* lce curve lut2 luma equal to 0x18 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_18_8msb (0x82)
#define mask_of_lce_2_reg_lce_curve_lut2_18_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_18_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_18_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_18_8msb)
#define REG_LCE_2_41_L                             (LCE_2_REG_LCE_CURVE_LUT2_18_8MSB)
// h0041, bit: 9
/* lce curve lut2 luma equal to 0x18 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_18_2lsb (0x82)
#define mask_of_lce_2_reg_lce_curve_lut2_18_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_18_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_18_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_18_2lsb)
// h0042, bit: 7
/* lce curve lut2 luma equal to 0x28 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_28_8msb (0x84)
#define mask_of_lce_2_reg_lce_curve_lut2_28_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_28_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_28_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_28_8msb)
#define REG_LCE_2_42_L                             (LCE_2_REG_LCE_CURVE_LUT2_28_8MSB)
// h0042, bit: 9
/* lce curve lut2 luma equal to 0x28 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_28_2lsb (0x84)
#define mask_of_lce_2_reg_lce_curve_lut2_28_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_28_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_28_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_28_2lsb)
// h0043, bit: 7
/* lce curve lut2 luma equal to 0x38 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_38_8msb (0x86)
#define mask_of_lce_2_reg_lce_curve_lut2_38_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_38_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_38_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_38_8msb)
#define REG_LCE_2_43_L                             (LCE_2_REG_LCE_CURVE_LUT2_38_8MSB)
// h0043, bit: 9
/* lce curve lut2 luma equal to 0x38 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_38_2lsb (0x86)
#define mask_of_lce_2_reg_lce_curve_lut2_38_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_38_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_38_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_38_2lsb)
// h0044, bit: 7
/* lce curve lut2 luma equal to 0x48 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_48_8msb (0x88)
#define mask_of_lce_2_reg_lce_curve_lut2_48_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_48_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_48_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_48_8msb)
#define REG_LCE_2_44_L                             (LCE_2_REG_LCE_CURVE_LUT2_48_8MSB)
// h0044, bit: 9
/* lce curve lut2 luma equal to 0x48 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_48_2lsb (0x88)
#define mask_of_lce_2_reg_lce_curve_lut2_48_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_48_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_48_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_48_2lsb)
// h0045, bit: 7
/* lce curve lut2 luma equal to 0x58 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_58_8msb (0x8a)
#define mask_of_lce_2_reg_lce_curve_lut2_58_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_58_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_58_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_58_8msb)
#define REG_LCE_2_45_L                             (LCE_2_REG_LCE_CURVE_LUT2_58_8MSB)
// h0045, bit: 9
/* lce curve lut2 luma equal to 0x58 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_58_2lsb (0x8a)
#define mask_of_lce_2_reg_lce_curve_lut2_58_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_58_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_58_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_58_2lsb)
// h0046, bit: 7
/* lce curve lut2 luma equal to 0x68 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_68_8msb (0x8c)
#define mask_of_lce_2_reg_lce_curve_lut2_68_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_68_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_68_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_68_8msb)
#define REG_LCE_2_46_L                             (LCE_2_REG_LCE_CURVE_LUT2_68_8MSB)
// h0046, bit: 9
/* lce curve lut2 luma equal to 0x68 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_68_2lsb (0x8c)
#define mask_of_lce_2_reg_lce_curve_lut2_68_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_68_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_68_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_68_2lsb)
// h0047, bit: 7
/* lce curve lut2 luma equal to 0x78 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_78_8msb (0x8e)
#define mask_of_lce_2_reg_lce_curve_lut2_78_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_78_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_78_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_78_8msb)
#define REG_LCE_2_47_L                             (LCE_2_REG_LCE_CURVE_LUT2_78_8MSB)
// h0047, bit: 9
/* lce curve lut2 luma equal to 0x78 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_78_2lsb (0x8e)
#define mask_of_lce_2_reg_lce_curve_lut2_78_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_78_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_78_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_78_2lsb)
// h0048, bit: 7
/* lce curve lut2 luma equal to 0x88 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_88_8msb (0x90)
#define mask_of_lce_2_reg_lce_curve_lut2_88_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_88_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_88_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_88_8msb)
#define REG_LCE_2_48_L                             (LCE_2_REG_LCE_CURVE_LUT2_88_8MSB)
// h0048, bit: 9
/* lce curve lut2 luma equal to 0x88 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_88_2lsb (0x90)
#define mask_of_lce_2_reg_lce_curve_lut2_88_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_88_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_88_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_88_2lsb)
// h0049, bit: 7
/* lce curve lut2 luma equal to 0x98 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_98_8msb (0x92)
#define mask_of_lce_2_reg_lce_curve_lut2_98_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_98_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_98_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_98_8msb)
#define REG_LCE_2_49_L                             (LCE_2_REG_LCE_CURVE_LUT2_98_8MSB)
// h0049, bit: 9
/* lce curve lut2 luma equal to 0x98 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_98_2lsb (0x92)
#define mask_of_lce_2_reg_lce_curve_lut2_98_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_98_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_98_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_98_2lsb)
// h004a, bit: 7
/* lce curve lut2 luma equal to 0xa8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_a8_8msb (0x94)
#define mask_of_lce_2_reg_lce_curve_lut2_a8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_a8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_A8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_a8_8msb)
#define REG_LCE_2_4A_L                             (LCE_2_REG_LCE_CURVE_LUT2_A8_8MSB)
// h004a, bit: 9
/* lce curve lut2 luma equal to 0xa8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_a8_2lsb (0x94)
#define mask_of_lce_2_reg_lce_curve_lut2_a8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_a8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_A8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_a8_2lsb)
// h004b, bit: 7
/* lce curve lut2 luma equal to 0xb8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_b8_8msb (0x96)
#define mask_of_lce_2_reg_lce_curve_lut2_b8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_b8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_B8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_b8_8msb)
#define REG_LCE_2_4B_L                             (LCE_2_REG_LCE_CURVE_LUT2_B8_8MSB)
// h004b, bit: 9
/* lce curve lut2 luma equal to 0xb8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_b8_2lsb (0x96)
#define mask_of_lce_2_reg_lce_curve_lut2_b8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_b8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_B8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_b8_2lsb)
// h004c, bit: 7
/* lce curve lut2 luma equal to 0xc8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_c8_8msb (0x98)
#define mask_of_lce_2_reg_lce_curve_lut2_c8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_c8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_C8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_c8_8msb)
#define REG_LCE_2_4C_L                             (LCE_2_REG_LCE_CURVE_LUT2_C8_8MSB)
// h004c, bit: 9
/* lce curve lut2 luma equal to 0xc8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_c8_2lsb (0x98)
#define mask_of_lce_2_reg_lce_curve_lut2_c8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_c8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_C8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_c8_2lsb)
// h004d, bit: 7
/* lce curve lut2 luma equal to 0xd8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_d8_8msb (0x9a)
#define mask_of_lce_2_reg_lce_curve_lut2_d8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_d8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_D8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_d8_8msb)
#define REG_LCE_2_4D_L                             (LCE_2_REG_LCE_CURVE_LUT2_D8_8MSB)
// h004d, bit: 9
/* lce curve lut2 luma equal to 0xd8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_d8_2lsb (0x9a)
#define mask_of_lce_2_reg_lce_curve_lut2_d8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_d8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_D8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_d8_2lsb)
// h004e, bit: 7
/* lce curve lut2 luma equal to 0xe8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_e8_8msb (0x9c)
#define mask_of_lce_2_reg_lce_curve_lut2_e8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_e8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_E8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_e8_8msb)
#define REG_LCE_2_4E_L                             (LCE_2_REG_LCE_CURVE_LUT2_E8_8MSB)
// h004e, bit: 9
/* lce curve lut2 luma equal to 0xe8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_e8_2lsb (0x9c)
#define mask_of_lce_2_reg_lce_curve_lut2_e8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_e8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_E8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_e8_2lsb)
// h004f, bit: 7
/* lce curve lut2 luma equal to 0xf8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_f8_8msb (0x9e)
#define mask_of_lce_2_reg_lce_curve_lut2_f8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut2_f8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT2_F8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_f8_8msb)
#define REG_LCE_2_4F_L                             (LCE_2_REG_LCE_CURVE_LUT2_F8_8MSB)
// h004f, bit: 9
/* lce curve lut2 luma equal to 0xf8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut2_f8_2lsb (0x9e)
#define mask_of_lce_2_reg_lce_curve_lut2_f8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut2_f8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT2_F8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut2_f8_2lsb)
// h0050, bit: 7
/* lce curve lut3 luma equal to 0x08 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_08_8msb (0xa0)
#define mask_of_lce_2_reg_lce_curve_lut3_08_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_08_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_08_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_08_8msb)
#define REG_LCE_2_50_L                             (LCE_2_REG_LCE_CURVE_LUT3_08_8MSB)
// h0050, bit: 9
/* lce curve lut3 luma equal to 0x08 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_08_2lsb (0xa0)
#define mask_of_lce_2_reg_lce_curve_lut3_08_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_08_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_08_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_08_2lsb)
// h0051, bit: 7
/* lce curve lut3 luma equal to 0x18 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_18_8msb (0xa2)
#define mask_of_lce_2_reg_lce_curve_lut3_18_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_18_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_18_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_18_8msb)
#define REG_LCE_2_51_L                             (LCE_2_REG_LCE_CURVE_LUT3_18_8MSB)
// h0051, bit: 9
/* lce curve lut3 luma equal to 0x18 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_18_2lsb (0xa2)
#define mask_of_lce_2_reg_lce_curve_lut3_18_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_18_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_18_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_18_2lsb)
// h0052, bit: 7
/* lce curve lut3 luma equal to 0x28 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_28_8msb (0xa4)
#define mask_of_lce_2_reg_lce_curve_lut3_28_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_28_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_28_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_28_8msb)
#define REG_LCE_2_52_L                             (LCE_2_REG_LCE_CURVE_LUT3_28_8MSB)
// h0052, bit: 9
/* lce curve lut3 luma equal to 0x28 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_28_2lsb (0xa4)
#define mask_of_lce_2_reg_lce_curve_lut3_28_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_28_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_28_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_28_2lsb)
// h0053, bit: 7
/* lce curve lut3 luma equal to 0x38 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_38_8msb (0xa6)
#define mask_of_lce_2_reg_lce_curve_lut3_38_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_38_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_38_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_38_8msb)
#define REG_LCE_2_53_L                             (LCE_2_REG_LCE_CURVE_LUT3_38_8MSB)
// h0053, bit: 9
/* lce curve lut3 luma equal to 0x38 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_38_2lsb (0xa6)
#define mask_of_lce_2_reg_lce_curve_lut3_38_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_38_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_38_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_38_2lsb)
// h0054, bit: 7
/* lce curve lut3 luma equal to 0x48 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_48_8msb (0xa8)
#define mask_of_lce_2_reg_lce_curve_lut3_48_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_48_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_48_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_48_8msb)
#define REG_LCE_2_54_L                             (LCE_2_REG_LCE_CURVE_LUT3_48_8MSB)
// h0054, bit: 9
/* lce curve lut3 luma equal to 0x48 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_48_2lsb (0xa8)
#define mask_of_lce_2_reg_lce_curve_lut3_48_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_48_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_48_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_48_2lsb)
// h0055, bit: 7
/* lce curve lut3 luma equal to 0x58 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_58_8msb (0xaa)
#define mask_of_lce_2_reg_lce_curve_lut3_58_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_58_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_58_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_58_8msb)
#define REG_LCE_2_55_L                             (LCE_2_REG_LCE_CURVE_LUT3_58_8MSB)
// h0055, bit: 9
/* lce curve lut3 luma equal to 0x58 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_58_2lsb (0xaa)
#define mask_of_lce_2_reg_lce_curve_lut3_58_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_58_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_58_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_58_2lsb)
// h0056, bit: 7
/* lce curve lut3 luma equal to 0x68 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_68_8msb (0xac)
#define mask_of_lce_2_reg_lce_curve_lut3_68_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_68_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_68_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_68_8msb)
#define REG_LCE_2_56_L                             (LCE_2_REG_LCE_CURVE_LUT3_68_8MSB)
// h0056, bit: 9
/* lce curve lut3 luma equal to 0x68 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_68_2lsb (0xac)
#define mask_of_lce_2_reg_lce_curve_lut3_68_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_68_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_68_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_68_2lsb)
// h0057, bit: 7
/* lce curve lut3 luma equal to 0x78 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_78_8msb (0xae)
#define mask_of_lce_2_reg_lce_curve_lut3_78_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_78_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_78_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_78_8msb)
#define REG_LCE_2_57_L                             (LCE_2_REG_LCE_CURVE_LUT3_78_8MSB)
// h0057, bit: 9
/* lce curve lut3 luma equal to 0x78 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_78_2lsb (0xae)
#define mask_of_lce_2_reg_lce_curve_lut3_78_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_78_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_78_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_78_2lsb)
// h0058, bit: 7
/* lce curve lut3 luma equal to 0x88 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_88_8msb (0xb0)
#define mask_of_lce_2_reg_lce_curve_lut3_88_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_88_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_88_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_88_8msb)
#define REG_LCE_2_58_L                             (LCE_2_REG_LCE_CURVE_LUT3_88_8MSB)
// h0058, bit: 9
/* lce curve lut3 luma equal to 0x88 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_88_2lsb (0xb0)
#define mask_of_lce_2_reg_lce_curve_lut3_88_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_88_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_88_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_88_2lsb)
// h0059, bit: 7
/* lce curve lut3 luma equal to 0x98 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_98_8msb (0xb2)
#define mask_of_lce_2_reg_lce_curve_lut3_98_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_98_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_98_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_98_8msb)
#define REG_LCE_2_59_L                             (LCE_2_REG_LCE_CURVE_LUT3_98_8MSB)
// h0059, bit: 9
/* lce curve lut3 luma equal to 0x98 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_98_2lsb (0xb2)
#define mask_of_lce_2_reg_lce_curve_lut3_98_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_98_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_98_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_98_2lsb)
// h005a, bit: 7
/* lce curve lut3 luma equal to 0xa8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_a8_8msb (0xb4)
#define mask_of_lce_2_reg_lce_curve_lut3_a8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_a8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_A8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_a8_8msb)
#define REG_LCE_2_5A_L                             (LCE_2_REG_LCE_CURVE_LUT3_A8_8MSB)
// h005a, bit: 9
/* lce curve lut3 luma equal to 0xa8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_a8_2lsb (0xb4)
#define mask_of_lce_2_reg_lce_curve_lut3_a8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_a8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_A8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_a8_2lsb)
// h005b, bit: 7
/* lce curve lut3 luma equal to 0xb8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_b8_8msb (0xb6)
#define mask_of_lce_2_reg_lce_curve_lut3_b8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_b8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_B8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_b8_8msb)
#define REG_LCE_2_5B_L                             (LCE_2_REG_LCE_CURVE_LUT3_B8_8MSB)
// h005b, bit: 9
/* lce curve lut3 luma equal to 0xb8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_b8_2lsb (0xb6)
#define mask_of_lce_2_reg_lce_curve_lut3_b8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_b8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_B8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_b8_2lsb)
// h005c, bit: 7
/* lce curve lut3 luma equal to 0xc8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_c8_8msb (0xb8)
#define mask_of_lce_2_reg_lce_curve_lut3_c8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_c8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_C8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_c8_8msb)
#define REG_LCE_2_5C_L                             (LCE_2_REG_LCE_CURVE_LUT3_C8_8MSB)
// h005c, bit: 9
/* lce curve lut3 luma equal to 0xc8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_c8_2lsb (0xb8)
#define mask_of_lce_2_reg_lce_curve_lut3_c8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_c8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_C8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_c8_2lsb)
// h005d, bit: 7
/* lce curve lut3 luma equal to 0xd8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_d8_8msb (0xba)
#define mask_of_lce_2_reg_lce_curve_lut3_d8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_d8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_D8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_d8_8msb)
#define REG_LCE_2_5D_L                             (LCE_2_REG_LCE_CURVE_LUT3_D8_8MSB)
// h005d, bit: 9
/* lce curve lut3 luma equal to 0xd8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_d8_2lsb (0xba)
#define mask_of_lce_2_reg_lce_curve_lut3_d8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_d8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_D8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_d8_2lsb)
// h005e, bit: 7
/* lce curve lut3 luma equal to 0xe8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_e8_8msb (0xbc)
#define mask_of_lce_2_reg_lce_curve_lut3_e8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_e8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_E8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_e8_8msb)
#define REG_LCE_2_5E_L                             (LCE_2_REG_LCE_CURVE_LUT3_E8_8MSB)
// h005e, bit: 9
/* lce curve lut3 luma equal to 0xe8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_e8_2lsb (0xbc)
#define mask_of_lce_2_reg_lce_curve_lut3_e8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_e8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_E8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_e8_2lsb)
// h005f, bit: 7
/* lce curve lut3 luma equal to 0xf8 8 MSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_f8_8msb (0xbe)
#define mask_of_lce_2_reg_lce_curve_lut3_f8_8msb   (0xff)
#define shift_of_lce_2_reg_lce_curve_lut3_f8_8msb  (0)
#define LCE_2_REG_LCE_CURVE_LUT3_F8_8MSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_f8_8msb)
#define REG_LCE_2_5F_L                             (LCE_2_REG_LCE_CURVE_LUT3_F8_8MSB)
// h005f, bit: 9
/* lce curve lut3 luma equal to 0xf8 2 LSBs*/
#define offset_of_lce_2_reg_lce_curve_lut3_f8_2lsb (0xbe)
#define mask_of_lce_2_reg_lce_curve_lut3_f8_2lsb   (0x300)
#define shift_of_lce_2_reg_lce_curve_lut3_f8_2lsb  (8)
#define LCE_2_REG_LCE_CURVE_LUT3_F8_2LSB           (REG_LCE_2_BASE + offset_of_lce_2_reg_lce_curve_lut3_f8_2lsb)
#define REG_LCE_2_60_L                             (REG_LCE_2_BASE + 0xc0)
// h0061, bit: 0
/* Main window UV compensate adaptive luma enable*/
#define offset_of_lce_2_reg_main_uvc_adaptive_luma_en (0xc2)
#define mask_of_lce_2_reg_main_uvc_adaptive_luma_en   (0x1)
#define shift_of_lce_2_reg_main_uvc_adaptive_luma_en  (0)
#define LCE_2_REG_MAIN_UVC_ADAPTIVE_LUMA_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_adaptive_luma_en)
#define REG_LCE_2_61_L                                (LCE_2_REG_MAIN_UVC_ADAPTIVE_LUMA_EN)
// h0061, bit: 1
/* Main window UV compensate adaptive luma y input mux
#0 : Yout
#1 : Yin*/
#define offset_of_lce_2_reg_main_uvc_adaptive_luma_y_input (0xc2)
#define mask_of_lce_2_reg_main_uvc_adaptive_luma_y_input   (0x2)
#define shift_of_lce_2_reg_main_uvc_adaptive_luma_y_input  (1)
#define LCE_2_REG_MAIN_UVC_ADAPTIVE_LUMA_Y_INPUT           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_adaptive_luma_y_input)
// h0061, bit: 2
/* Main window UV compensate rgb mode enable*/
#define offset_of_lce_2_reg_main_uvc_rgb_en (0xc2)
#define mask_of_lce_2_reg_main_uvc_rgb_en   (0x4)
#define shift_of_lce_2_reg_main_uvc_rgb_en  (2)
#define LCE_2_REG_MAIN_UVC_RGB_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_rgb_en)
// h0061, bit: 3
/* Main window UV compensate cmc fullrange enable in rgb mode*/
#define offset_of_lce_2_reg_main_uvc_dlc_fullrange_en (0xc2)
#define mask_of_lce_2_reg_main_uvc_dlc_fullrange_en   (0x8)
#define shift_of_lce_2_reg_main_uvc_dlc_fullrange_en  (3)
#define LCE_2_REG_MAIN_UVC_DLC_FULLRANGE_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_dlc_fullrange_en)
// h0061, bit: 5
/* Main window UV compensate adaptive luma black region step*/
#define offset_of_lce_2_reg_main_uvc_adaptive_luma_black_step (0xc2)
#define mask_of_lce_2_reg_main_uvc_adaptive_luma_black_step   (0x30)
#define shift_of_lce_2_reg_main_uvc_adaptive_luma_black_step  (4)
#define LCE_2_REG_MAIN_UVC_ADAPTIVE_LUMA_BLACK_STEP \
    (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_adaptive_luma_black_step)
// h0061, bit: 7
/* Main window UV compensate adaptive luma white region step*/
#define offset_of_lce_2_reg_main_uvc_adaptive_luma_white_step (0xc2)
#define mask_of_lce_2_reg_main_uvc_adaptive_luma_white_step   (0xc0)
#define shift_of_lce_2_reg_main_uvc_adaptive_luma_white_step  (6)
#define LCE_2_REG_MAIN_UVC_ADAPTIVE_LUMA_WHITE_STEP \
    (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_adaptive_luma_white_step)
// h0062, bit: 7
/* Main window UV compensate adaptive luma black region threshold*/
#define offset_of_lce_2_reg_main_uvc_adaptive_luma_black_thrd (0xc4)
#define mask_of_lce_2_reg_main_uvc_adaptive_luma_black_thrd   (0xff)
#define shift_of_lce_2_reg_main_uvc_adaptive_luma_black_thrd  (0)
#define LCE_2_REG_MAIN_UVC_ADAPTIVE_LUMA_BLACK_THRD \
    (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_adaptive_luma_black_thrd)
#define REG_LCE_2_62_L (LCE_2_REG_MAIN_UVC_ADAPTIVE_LUMA_BLACK_THRD)
// h0062, bit: 15
/* Main window UV compensate adaptive luma white region threshold*/
#define offset_of_lce_2_reg_main_uvc_adaptive_luma_white_thrd (0xc4)
#define mask_of_lce_2_reg_main_uvc_adaptive_luma_white_thrd   (0xff00)
#define shift_of_lce_2_reg_main_uvc_adaptive_luma_white_thrd  (8)
#define LCE_2_REG_MAIN_UVC_ADAPTIVE_LUMA_WHITE_THRD \
    (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_adaptive_luma_white_thrd)
// h0063, bit: 4
/* Main window UV compensate adaptive luma gain in low threshold region(x.xxxx)*/
#define offset_of_lce_2_reg_main_uvc_adaptive_luma_gain_low (0xc6)
#define mask_of_lce_2_reg_main_uvc_adaptive_luma_gain_low   (0x1f)
#define shift_of_lce_2_reg_main_uvc_adaptive_luma_gain_low  (0)
#define LCE_2_REG_MAIN_UVC_ADAPTIVE_LUMA_GAIN_LOW           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_adaptive_luma_gain_low)
#define REG_LCE_2_63_L                                      (LCE_2_REG_MAIN_UVC_ADAPTIVE_LUMA_GAIN_LOW)
// h0063, bit: 12
/* Main window UV compensate adaptive luma gain in median threshold region*/
#define offset_of_lce_2_reg_main_uvc_adaptive_luma_gain_med (0xc6)
#define mask_of_lce_2_reg_main_uvc_adaptive_luma_gain_med   (0x1f00)
#define shift_of_lce_2_reg_main_uvc_adaptive_luma_gain_med  (8)
#define LCE_2_REG_MAIN_UVC_ADAPTIVE_LUMA_GAIN_MED           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_adaptive_luma_gain_med)
// h0064, bit: 4
/* Main window UV compensate adaptive luma gain in high threshold region*/
#define offset_of_lce_2_reg_main_uvc_adaptive_luma_gain_high (0xc8)
#define mask_of_lce_2_reg_main_uvc_adaptive_luma_gain_high   (0x1f)
#define shift_of_lce_2_reg_main_uvc_adaptive_luma_gain_high  (0)
#define LCE_2_REG_MAIN_UVC_ADAPTIVE_LUMA_GAIN_HIGH \
    (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_adaptive_luma_gain_high)
#define REG_LCE_2_64_L (LCE_2_REG_MAIN_UVC_ADAPTIVE_LUMA_GAIN_HIGH)
#define REG_LCE_2_65_L (REG_LCE_2_BASE + 0xca)
#define REG_LCE_2_66_L (REG_LCE_2_BASE + 0xcc)
#define REG_LCE_2_67_L (REG_LCE_2_BASE + 0xce)
#define REG_LCE_2_68_L (REG_LCE_2_BASE + 0xd0)
#define REG_LCE_2_69_L (REG_LCE_2_BASE + 0xd2)
#define REG_LCE_2_6A_L (REG_LCE_2_BASE + 0xd4)
#define REG_LCE_2_6B_L (REG_LCE_2_BASE + 0xd6)
#define REG_LCE_2_6C_L (REG_LCE_2_BASE + 0xd8)
#define REG_LCE_2_6D_L (REG_LCE_2_BASE + 0xda)
// h006e, bit: 15
/* VIP function horizontal pixel number enable ( max: 2048+256(guard))*/
#define offset_of_lce_2_reg_vip_horizontal_num (0xdc)
#define mask_of_lce_2_reg_vip_horizontal_num   (0xffff)
#define shift_of_lce_2_reg_vip_horizontal_num  (0)
#define LCE_2_REG_VIP_HORIZONTAL_NUM           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_horizontal_num)
#define REG_LCE_2_6E_L                         (LCE_2_REG_VIP_HORIZONTAL_NUM)
// h006f, bit: 15
/* VIP function vertical line number ( max: 4320)*/
#define offset_of_lce_2_reg_vip_vertical_num (0xde)
#define mask_of_lce_2_reg_vip_vertical_num   (0xffff)
#define shift_of_lce_2_reg_vip_vertical_num  (0)
#define LCE_2_REG_VIP_VERTICAL_NUM           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_vertical_num)
#define REG_LCE_2_6F_L                       (LCE_2_REG_VIP_VERTICAL_NUM)
// h0070, bit: 0
/* vip all function bypass enable*/
#define offset_of_lce_2_reg_vip_fun_bypass_en (0xe0)
#define mask_of_lce_2_reg_vip_fun_bypass_en   (0x1)
#define shift_of_lce_2_reg_vip_fun_bypass_en  (0)
#define LCE_2_REG_VIP_FUN_BYPASS_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_fun_bypass_en)
#define REG_LCE_2_70_L                        (LCE_2_REG_VIP_FUN_BYPASS_EN)
// h0070, bit: 1
/* vip main picture assign constant value enable Left*/
#define offset_of_lce_2_reg_vip_main_const_en (0xe0)
#define mask_of_lce_2_reg_vip_main_const_en   (0x2)
#define shift_of_lce_2_reg_vip_main_const_en  (1)
#define LCE_2_REG_VIP_MAIN_CONST_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_main_const_en)
// h0070, bit: 2
/* vip sub picture assign constant value enable Right*/
#define offset_of_lce_2_reg_vip_sub_const_en (0xe0)
#define mask_of_lce_2_reg_vip_sub_const_en   (0x4)
#define shift_of_lce_2_reg_vip_sub_const_en  (2)
#define LCE_2_REG_VIP_SUB_CONST_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_sub_const_en)
// h0070, bit: 3
/* vip low power control using latch signal  (panel_de) for flip-flops */
#define offset_of_lce_2_reg_vip_low_power_en (0xe0)
#define mask_of_lce_2_reg_vip_low_power_en   (0x8)
#define shift_of_lce_2_reg_vip_low_power_en  (3)
#define LCE_2_REG_VIP_LOW_POWER_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_low_power_en)
// h0070, bit: 4
/* vip main picture bypass enable Left*/
#define offset_of_lce_2_reg_vip_main_bypass_en (0xe0)
#define mask_of_lce_2_reg_vip_main_bypass_en   (0x10)
#define shift_of_lce_2_reg_vip_main_bypass_en  (4)
#define LCE_2_REG_VIP_MAIN_BYPASS_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_main_bypass_en)
// h0070, bit: 5
/* vip sub picture bypass enable Right*/
#define offset_of_lce_2_reg_vip_sub_bypass_en (0xe0)
#define mask_of_lce_2_reg_vip_sub_bypass_en   (0x20)
#define shift_of_lce_2_reg_vip_sub_bypass_en  (5)
#define LCE_2_REG_VIP_SUB_BYPASS_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_sub_bypass_en)
// h0070, bit: 6
/* force VIP enable no matter 422 mode is enable or not*/
#define offset_of_lce_2_reg_vip_force_en (0xe0)
#define mask_of_lce_2_reg_vip_force_en   (0x40)
#define shift_of_lce_2_reg_vip_force_en  (6)
#define LCE_2_REG_VIP_FORCE_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_force_en)
// h0070, bit: 8
/* vip ihc table using menu load*/
#define offset_of_lce_2_reg_vip_ihc_menu_en (0xe0)
#define mask_of_lce_2_reg_vip_ihc_menu_en   (0x100)
#define shift_of_lce_2_reg_vip_ihc_menu_en  (8)
#define LCE_2_REG_VIP_IHC_MENU_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_ihc_menu_en)
// h0070, bit: 9
/* vip icc table using menu load*/
#define offset_of_lce_2_reg_vip_icc_menu_en (0xe0)
#define mask_of_lce_2_reg_vip_icc_menu_en   (0x200)
#define shift_of_lce_2_reg_vip_icc_menu_en  (9)
#define LCE_2_REG_VIP_ICC_MENU_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_icc_menu_en)
// h0070, bit: 14
/* vip double buffer force write*/
#define offset_of_lce_2_reg_vip_rup_rp (0xe0)
#define mask_of_lce_2_reg_vip_rup_rp   (0x4000)
#define shift_of_lce_2_reg_vip_rup_rp  (14)
#define LCE_2_REG_VIP_RUP_RP           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_rup_rp)
// h0070, bit: 15
/* vip empty enable*/
#define offset_of_lce_2_reg_vip_empty_en (0xe0)
#define mask_of_lce_2_reg_vip_empty_en   (0x8000)
#define shift_of_lce_2_reg_vip_empty_en  (15)
#define LCE_2_REG_VIP_EMPTY_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_empty_en)
// h0071, bit: 15
/* vip ontrol guard pipe number*/
#define offset_of_lce_2_reg_pipe_guard_cycle (0xe2)
#define mask_of_lce_2_reg_pipe_guard_cycle   (0xff00)
#define shift_of_lce_2_reg_pipe_guard_cycle  (8)
#define LCE_2_REG_PIPE_GUARD_CYCLE           (REG_LCE_2_BASE + offset_of_lce_2_reg_pipe_guard_cycle)
#define REG_LCE_2_71_L                       (LCE_2_REG_PIPE_GUARD_CYCLE)
// h0072, bit: 1
/* vip 422 to 444 mode*/
#define offset_of_lce_2_reg_vip_422to444_md (0xe4)
#define mask_of_lce_2_reg_vip_422to444_md   (0x3)
#define shift_of_lce_2_reg_vip_422to444_md  (0)
#define LCE_2_REG_VIP_422TO444_MD           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_422to444_md)
#define REG_LCE_2_72_L                      (LCE_2_REG_VIP_422TO444_MD)
// h0072, bit: 2
/* vip 422 to 444 mode cr load ini*/
#define offset_of_lce_2_reg_vip_cr_load_ini (0xe4)
#define mask_of_lce_2_reg_vip_cr_load_ini   (0x4)
#define shift_of_lce_2_reg_vip_cr_load_ini  (2)
#define LCE_2_REG_VIP_CR_LOAD_INI           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_cr_load_ini)
// h0072, bit: 3
/* vip 422 to 444 mode trancate en*/
#define offset_of_lce_2_reg_vip_trancate_en (0xe4)
#define mask_of_lce_2_reg_vip_trancate_en   (0x8)
#define shift_of_lce_2_reg_vip_trancate_en  (3)
#define LCE_2_REG_VIP_TRANCATE_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_trancate_en)
// h0072, bit: 7
/* vip 422 to 444 mode enable*/
#define offset_of_lce_2_reg_vip_422to444_en (0xe4)
#define mask_of_lce_2_reg_vip_422to444_en   (0x80)
#define shift_of_lce_2_reg_vip_422to444_en  (7)
#define LCE_2_REG_VIP_422TO444_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_vip_422to444_en)
#define REG_LCE_2_73_L                      (REG_LCE_2_BASE + 0xe6)
#define REG_LCE_2_74_L                      (REG_LCE_2_BASE + 0xe8)
#define REG_LCE_2_75_L                      (REG_LCE_2_BASE + 0xea)
#define REG_LCE_2_76_L                      (REG_LCE_2_BASE + 0xec)
#define REG_LCE_2_77_L                      (REG_LCE_2_BASE + 0xee)
#define REG_LCE_2_78_L                      (REG_LCE_2_BASE + 0xf0)
// h0079, bit: 7
/* main window uv compensate low sat protect threshold*/
#define offset_of_lce_2_reg_main_uvc_low_sat_prot_thrd (0xf2)
#define mask_of_lce_2_reg_main_uvc_low_sat_prot_thrd   (0xff)
#define shift_of_lce_2_reg_main_uvc_low_sat_prot_thrd  (0)
#define LCE_2_REG_MAIN_UVC_LOW_SAT_PROT_THRD           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_low_sat_prot_thrd)
#define REG_LCE_2_79_L                                 (LCE_2_REG_MAIN_UVC_LOW_SAT_PROT_THRD)
// h0079, bit: 11
/* main window uv compensate low sat minimum strength*/
#define offset_of_lce_2_reg_main_uvc_low_sat_min_strength (0xf2)
#define mask_of_lce_2_reg_main_uvc_low_sat_min_strength   (0xf00)
#define shift_of_lce_2_reg_main_uvc_low_sat_min_strength  (8)
#define LCE_2_REG_MAIN_UVC_LOW_SAT_MIN_STRENGTH           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_low_sat_min_strength)
// h0079, bit: 12
/* main window uv compensate low y protect enable*/
#define offset_of_lce_2_reg_main_uvc_low_y_prot_en (0xf2)
#define mask_of_lce_2_reg_main_uvc_low_y_prot_en   (0x1000)
#define shift_of_lce_2_reg_main_uvc_low_y_prot_en  (12)
#define LCE_2_REG_MAIN_UVC_LOW_Y_PROT_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_low_y_prot_en)
// h0079, bit: 13
/* main window uv compensate low sat protect enable*/
#define offset_of_lce_2_reg_main_uvc_low_sat_prot_en (0xf2)
#define mask_of_lce_2_reg_main_uvc_low_sat_prot_en   (0x2000)
#define shift_of_lce_2_reg_main_uvc_low_sat_prot_en  (13)
#define LCE_2_REG_MAIN_UVC_LOW_SAT_PROT_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_low_sat_prot_en)
// h0079, bit: 14
/* main window uv compensate lpf for low y and low sat protect enable*/
#define offset_of_lce_2_reg_main_uvc_lpf_en (0xf2)
#define mask_of_lce_2_reg_main_uvc_lpf_en   (0x4000)
#define shift_of_lce_2_reg_main_uvc_lpf_en  (14)
#define LCE_2_REG_MAIN_UVC_LPF_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_lpf_en)
// h0079, bit: 15
/* main window uv compensate low y and low sat protect enable*/
#define offset_of_lce_2_reg_main_uvc_low_y_sat_prot_en (0xf2)
#define mask_of_lce_2_reg_main_uvc_low_y_sat_prot_en   (0x8000)
#define shift_of_lce_2_reg_main_uvc_low_y_sat_prot_en  (15)
#define LCE_2_REG_MAIN_UVC_LOW_Y_SAT_PROT_EN           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_low_y_sat_prot_en)
// h007a, bit: 5
/* main window uv compensate low sat protect slope*/
#define offset_of_lce_2_reg_main_uvc_low_sat_prot_slope (0xf4)
#define mask_of_lce_2_reg_main_uvc_low_sat_prot_slope   (0x3f)
#define shift_of_lce_2_reg_main_uvc_low_sat_prot_slope  (0)
#define LCE_2_REG_MAIN_UVC_LOW_SAT_PROT_SLOPE           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_low_sat_prot_slope)
#define REG_LCE_2_7A_L                                  (LCE_2_REG_MAIN_UVC_LOW_SAT_PROT_SLOPE)
// h007a, bit: 13
/* main window uv compensate low y protect slope*/
#define offset_of_lce_2_reg_main_uvc_low_y_prot_slope (0xf4)
#define mask_of_lce_2_reg_main_uvc_low_y_prot_slope   (0x3f00)
#define shift_of_lce_2_reg_main_uvc_low_y_prot_slope  (8)
#define LCE_2_REG_MAIN_UVC_LOW_Y_PROT_SLOPE           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_low_y_prot_slope)
// h007a, bit: 15
/* main window uv compensate y input selection*/
#define offset_of_lce_2_reg_main_uvc_low_y_sel (0xf4)
#define mask_of_lce_2_reg_main_uvc_low_y_sel   (0xc000)
#define shift_of_lce_2_reg_main_uvc_low_y_sel  (14)
#define LCE_2_REG_MAIN_UVC_LOW_Y_SEL           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_low_y_sel)
// h007b, bit: 7
/* main window uv compensate low y protect threshold*/
#define offset_of_lce_2_reg_main_uvc_low_y_prot_thrd (0xf6)
#define mask_of_lce_2_reg_main_uvc_low_y_prot_thrd   (0xff)
#define shift_of_lce_2_reg_main_uvc_low_y_prot_thrd  (0)
#define LCE_2_REG_MAIN_UVC_LOW_Y_PROT_THRD           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_low_y_prot_thrd)
#define REG_LCE_2_7B_L                               (LCE_2_REG_MAIN_UVC_LOW_Y_PROT_THRD)
// h007b, bit: 11
/* main window uv compensate low y minimum strength*/
#define offset_of_lce_2_reg_main_uvc_low_y_min_strength (0xf6)
#define mask_of_lce_2_reg_main_uvc_low_y_min_strength   (0xf00)
#define shift_of_lce_2_reg_main_uvc_low_y_min_strength  (8)
#define LCE_2_REG_MAIN_UVC_LOW_Y_MIN_STRENGTH           (REG_LCE_2_BASE + offset_of_lce_2_reg_main_uvc_low_y_min_strength)
#define REG_LCE_2_7C_L                                  (REG_LCE_2_BASE + 0xf8)
#define REG_LCE_2_7D_L                                  (REG_LCE_2_BASE + 0xfa)
#define REG_LCE_2_7E_L                                  (REG_LCE_2_BASE + 0xfc)
#define REG_LCE_2_7F_L                                  (REG_LCE_2_BASE + 0xfe)
#define REG_MWE_2_00_L                                  (REG_MWE_2_BASE + 0x0)
// h0001, bit: 9
/* Main window histogram vertical start (max:4320)
display_start = reg_start * 8*/
#define offset_of_mwe_2_reg_main_statistic_v_start (0x2)
#define mask_of_mwe_2_reg_main_statistic_v_start   (0x3ff)
#define shift_of_mwe_2_reg_main_statistic_v_start  (0)
#define MWE_2_REG_MAIN_STATISTIC_V_START           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_statistic_v_start)
#define REG_MWE_2_01_L                             (MWE_2_REG_MAIN_STATISTIC_V_START)
// h0002, bit: 9
/* Main window histogram vertical end (max:4320)
display_end = reg_end * 8*/
#define offset_of_mwe_2_reg_main_statistic_v_end (0x4)
#define mask_of_mwe_2_reg_main_statistic_v_end   (0x3ff)
#define shift_of_mwe_2_reg_main_statistic_v_end  (0)
#define MWE_2_REG_MAIN_STATISTIC_V_END           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_statistic_v_end)
#define REG_MWE_2_02_L                           (MWE_2_REG_MAIN_STATISTIC_V_END)
// h0003, bit: 8
/* Main window histogram horizontal start (max:2048+40g)
display_start = reg_start * 8*/
#define offset_of_mwe_2_reg_main_statistic_h_start (0x6)
#define mask_of_mwe_2_reg_main_statistic_h_start   (0x1ff)
#define shift_of_mwe_2_reg_main_statistic_h_start  (0)
#define MWE_2_REG_MAIN_STATISTIC_H_START           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_statistic_h_start)
#define REG_MWE_2_03_L                             (MWE_2_REG_MAIN_STATISTIC_H_START)
// h0004, bit: 8
/* Main window histogram horizontal end (max: 2048+40g)
display_end = reg_end * 8*/
#define offset_of_mwe_2_reg_main_statistic_h_end (0x8)
#define mask_of_mwe_2_reg_main_statistic_h_end   (0x1ff)
#define shift_of_mwe_2_reg_main_statistic_h_end  (0)
#define MWE_2_REG_MAIN_STATISTIC_H_END           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_statistic_h_end)
#define REG_MWE_2_04_L                           (MWE_2_REG_MAIN_STATISTIC_H_END)
#define REG_MWE_2_05_L                           (REG_MWE_2_BASE + 0xa)
// bigger than 16 bit case allh0006
#define offset_of_mwe_2_reg_main_total_pixel_sat_weight (0xc)
#define mask_of_mwe_2_reg_main_total_pixel_sat_weight   (0xfffff)
#define shift_of_mwe_2_reg_main_total_pixel_sat_weight  (0)
#define MWE_2_REG_MAIN_TOTAL_PIXEL_SAT_WEIGHT           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_pixel_sat_weight)
// h0006, bit: 15
/* Main window histogram saturation report sum of total saturation*/
#define offset_of_mwe_2_reg_main_total_pixel_sat_weight_0 (0xc)
#define mask_of_mwe_2_reg_main_total_pixel_sat_weight_0   (0xffff)
#define shift_of_mwe_2_reg_main_total_pixel_sat_weight_0  (0)
#define MWE_2_REG_MAIN_TOTAL_PIXEL_SAT_WEIGHT_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_pixel_sat_weight_0)
#define REG_MWE_2_06_L                                    (MWE_2_REG_MAIN_TOTAL_PIXEL_SAT_WEIGHT_0)
// h0007, bit: 3
/* Main window histogram saturation report sum of total saturation*/
#define offset_of_mwe_2_reg_main_total_pixel_sat_weight_1 (0xe)
#define mask_of_mwe_2_reg_main_total_pixel_sat_weight_1   (0xf)
#define shift_of_mwe_2_reg_main_total_pixel_sat_weight_1  (0)
#define MWE_2_REG_MAIN_TOTAL_PIXEL_SAT_WEIGHT_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_pixel_sat_weight_1)
#define REG_MWE_2_07_L                                    (MWE_2_REG_MAIN_TOTAL_PIXEL_SAT_WEIGHT_1)
// bigger than 16 bit case allh0008
#define offset_of_mwe_2_reg_main_total_pixel_count (0x10)
#define mask_of_mwe_2_reg_main_total_pixel_count   (0xfffff)
#define shift_of_mwe_2_reg_main_total_pixel_count  (0)
#define MWE_2_REG_MAIN_TOTAL_PIXEL_COUNT           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_pixel_count)
// h0008, bit: 15
/* Main window histogram report sum of pixel number (/2^5)*/
#define offset_of_mwe_2_reg_main_total_pixel_count_0 (0x10)
#define mask_of_mwe_2_reg_main_total_pixel_count_0   (0xffff)
#define shift_of_mwe_2_reg_main_total_pixel_count_0  (0)
#define MWE_2_REG_MAIN_TOTAL_PIXEL_COUNT_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_pixel_count_0)
#define REG_MWE_2_08_L                               (MWE_2_REG_MAIN_TOTAL_PIXEL_COUNT_0)
// h0009, bit: 3
/* Main window histogram report sum of pixel number (/2^5)*/
#define offset_of_mwe_2_reg_main_total_pixel_count_1 (0x12)
#define mask_of_mwe_2_reg_main_total_pixel_count_1   (0xf)
#define shift_of_mwe_2_reg_main_total_pixel_count_1  (0)
#define MWE_2_REG_MAIN_TOTAL_PIXEL_COUNT_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_pixel_count_1)
#define REG_MWE_2_09_L                               (MWE_2_REG_MAIN_TOTAL_PIXEL_COUNT_1)
// bigger than 16 bit case allh000a
#define offset_of_mwe_2_reg_main_total_pixel_weight (0x14)
#define mask_of_mwe_2_reg_main_total_pixel_weight   (0xfffff)
#define shift_of_mwe_2_reg_main_total_pixel_weight  (0)
#define MWE_2_REG_MAIN_TOTAL_PIXEL_WEIGHT           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_pixel_weight)
// h000a, bit: 15
/* Main window histogram report sum of total Y (/2^13)*/
#define offset_of_mwe_2_reg_main_total_pixel_weight_0 (0x14)
#define mask_of_mwe_2_reg_main_total_pixel_weight_0   (0xffff)
#define shift_of_mwe_2_reg_main_total_pixel_weight_0  (0)
#define MWE_2_REG_MAIN_TOTAL_PIXEL_WEIGHT_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_pixel_weight_0)
#define REG_MWE_2_0A_L                                (MWE_2_REG_MAIN_TOTAL_PIXEL_WEIGHT_0)
// h000b, bit: 3
/* Main window histogram report sum of total Y (/2^13)*/
#define offset_of_mwe_2_reg_main_total_pixel_weight_1 (0x16)
#define mask_of_mwe_2_reg_main_total_pixel_weight_1   (0xf)
#define shift_of_mwe_2_reg_main_total_pixel_weight_1  (0)
#define MWE_2_REG_MAIN_TOTAL_PIXEL_WEIGHT_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_pixel_weight_1)
#define REG_MWE_2_0B_L                                (MWE_2_REG_MAIN_TOTAL_PIXEL_WEIGHT_1)
// bigger than 16 bit case allh000c
#define offset_of_mwe_2_reg_main_total_pixel_diff (0x18)
#define mask_of_mwe_2_reg_main_total_pixel_diff   (0xfffff)
#define shift_of_mwe_2_reg_main_total_pixel_diff  (0)
#define MWE_2_REG_MAIN_TOTAL_PIXEL_DIFF           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_pixel_diff)
// h000c, bit: 15
/* Main window histogram report sum of difference Y (/2^13)*/
#define offset_of_mwe_2_reg_main_total_pixel_diff_0 (0x18)
#define mask_of_mwe_2_reg_main_total_pixel_diff_0   (0xffff)
#define shift_of_mwe_2_reg_main_total_pixel_diff_0  (0)
#define MWE_2_REG_MAIN_TOTAL_PIXEL_DIFF_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_pixel_diff_0)
#define REG_MWE_2_0C_L                              (MWE_2_REG_MAIN_TOTAL_PIXEL_DIFF_0)
// h000d, bit: 3
/* Main window histogram report sum of difference Y (/2^13)*/
#define offset_of_mwe_2_reg_main_total_pixel_diff_1 (0x1a)
#define mask_of_mwe_2_reg_main_total_pixel_diff_1   (0xf)
#define shift_of_mwe_2_reg_main_total_pixel_diff_1  (0)
#define MWE_2_REG_MAIN_TOTAL_PIXEL_DIFF_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_pixel_diff_1)
#define REG_MWE_2_0D_L                              (MWE_2_REG_MAIN_TOTAL_PIXEL_DIFF_1)
// bigger than 16 bit case allh000e
#define offset_of_mwe_2_reg_main_total_color_count (0x1c)
#define mask_of_mwe_2_reg_main_total_color_count   (0xfffff)
#define shift_of_mwe_2_reg_main_total_color_count  (0)
#define MWE_2_REG_MAIN_TOTAL_COLOR_COUNT           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_color_count)
// h000e, bit: 15
/* Main window histogram report sum of color pixel number (/2^8)*/
#define offset_of_mwe_2_reg_main_total_color_count_0 (0x1c)
#define mask_of_mwe_2_reg_main_total_color_count_0   (0xffff)
#define shift_of_mwe_2_reg_main_total_color_count_0  (0)
#define MWE_2_REG_MAIN_TOTAL_COLOR_COUNT_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_color_count_0)
#define REG_MWE_2_0E_L                               (MWE_2_REG_MAIN_TOTAL_COLOR_COUNT_0)
// h000f, bit: 3
/* Main window histogram report sum of color pixel number (/2^8)*/
#define offset_of_mwe_2_reg_main_total_color_count_1 (0x1e)
#define mask_of_mwe_2_reg_main_total_color_count_1   (0xf)
#define shift_of_mwe_2_reg_main_total_color_count_1  (0)
#define MWE_2_REG_MAIN_TOTAL_COLOR_COUNT_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_total_color_count_1)
#define REG_MWE_2_0F_L                               (MWE_2_REG_MAIN_TOTAL_COLOR_COUNT_1)
// h0010, bit: 0
/* MWE enable*/
#define offset_of_mwe_2_reg_mwe_en (0x20)
#define mask_of_mwe_2_reg_mwe_en   (0x1)
#define shift_of_mwe_2_reg_mwe_en  (0)
#define MWE_2_REG_MWE_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_mwe_en)
#define REG_MWE_2_10_L             (MWE_2_REG_MWE_EN)
// h0010, bit: 1
/* MWE debug enable*/
#define offset_of_mwe_2_reg_mwe_debug_en (0x20)
#define mask_of_mwe_2_reg_mwe_debug_en   (0x2)
#define shift_of_mwe_2_reg_mwe_debug_en  (1)
#define MWE_2_REG_MWE_DEBUG_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_mwe_debug_en)
// h0011, bit: 11
/* Main window MWE horizontal start (max:2048+40g)*/
#define offset_of_mwe_2_reg_main_mwe_h_start (0x22)
#define mask_of_mwe_2_reg_main_mwe_h_start   (0xfff)
#define shift_of_mwe_2_reg_main_mwe_h_start  (0)
#define MWE_2_REG_MAIN_MWE_H_START           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_h_start)
#define REG_MWE_2_11_L                       (MWE_2_REG_MAIN_MWE_H_START)
// h0012, bit: 11
/* Main window MWE horizontal start (max:2048+40g)*/
#define offset_of_mwe_2_reg_main_mwe_h_end (0x24)
#define mask_of_mwe_2_reg_main_mwe_h_end   (0xfff)
#define shift_of_mwe_2_reg_main_mwe_h_end  (0)
#define MWE_2_REG_MAIN_MWE_H_END           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_h_end)
#define REG_MWE_2_12_L                     (MWE_2_REG_MAIN_MWE_H_END)
// h0013, bit: 12
/* Main window MWE horizontal start (max:4320)*/
#define offset_of_mwe_2_reg_main_mwe_v_start (0x26)
#define mask_of_mwe_2_reg_main_mwe_v_start   (0x1fff)
#define shift_of_mwe_2_reg_main_mwe_v_start  (0)
#define MWE_2_REG_MAIN_MWE_V_START           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_v_start)
#define REG_MWE_2_13_L                       (MWE_2_REG_MAIN_MWE_V_START)
// h0014, bit: 12
/* Main window MWE horizontal start (max:4320)*/
#define offset_of_mwe_2_reg_main_mwe_v_end (0x28)
#define mask_of_mwe_2_reg_main_mwe_v_end   (0x1fff)
#define shift_of_mwe_2_reg_main_mwe_v_end  (0)
#define MWE_2_REG_MAIN_MWE_V_END           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_v_end)
#define REG_MWE_2_14_L                     (MWE_2_REG_MAIN_MWE_V_END)
// h0015, bit: 0
/* vip histogram to miu enable*/
#define offset_of_mwe_2_reg_vip_stat_miu_en (0x2a)
#define mask_of_mwe_2_reg_vip_stat_miu_en   (0x1)
#define shift_of_mwe_2_reg_vip_stat_miu_en  (0)
#define MWE_2_REG_VIP_STAT_MIU_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_miu_en)
#define REG_MWE_2_15_L                      (MWE_2_REG_VIP_STAT_MIU_EN)
// h0015, bit: 2
/* vip histogram to miu trigger mode:
0: vip_frame_end
1: vsync risng of vip
2: delay X line from vsync risng of vip */
#define offset_of_mwe_2_reg_vip_stat_trig_md (0x2a)
#define mask_of_mwe_2_reg_vip_stat_trig_md   (0x6)
#define shift_of_mwe_2_reg_vip_stat_trig_md  (1)
#define MWE_2_REG_VIP_STAT_TRIG_MD           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_trig_md)
// h0015, bit: 6
/*
set trig (delay X line from vsync risng of vip) for histogram report */
#define offset_of_mwe_2_reg_vip_stat_trig_dlyl (0x2a)
#define mask_of_mwe_2_reg_vip_stat_trig_dlyl   (0x78)
#define shift_of_mwe_2_reg_vip_stat_trig_dlyl  (3)
#define MWE_2_REG_VIP_STAT_TRIG_DLYL           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_trig_dlyl)
// h0015, bit: 7
/* report baseaddress idx*/
#define offset_of_mwe_2_reg_vip_stat_baseidx (0x2a)
#define mask_of_mwe_2_reg_vip_stat_baseidx   (0x80)
#define shift_of_mwe_2_reg_vip_stat_baseidx  (7)
#define MWE_2_REG_VIP_STAT_BASEIDX           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_baseidx)
// h0015, bit: 12
/* vip histogram to miu burst length*/
#define offset_of_mwe_2_reg_vip_stat_burst_len (0x2a)
#define mask_of_mwe_2_reg_vip_stat_burst_len   (0x1f00)
#define shift_of_mwe_2_reg_vip_stat_burst_len  (8)
#define MWE_2_REG_VIP_STAT_BURST_LEN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_burst_len)
// h0015, bit: 14
/* report vip histgroam to miu finish*/
#define offset_of_mwe_2_reg_vip_stat_finish (0x2a)
#define mask_of_mwe_2_reg_vip_stat_finish   (0x4000)
#define shift_of_mwe_2_reg_vip_stat_finish  (14)
#define MWE_2_REG_VIP_STAT_FINISH           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_finish)
// h0015, bit: 15
/* vip histogram to miu priority*/
#define offset_of_mwe_2_reg_vip_stat_miu_priority (0x2a)
#define mask_of_mwe_2_reg_vip_stat_miu_priority   (0x8000)
#define shift_of_mwe_2_reg_vip_stat_miu_priority  (15)
#define MWE_2_REG_VIP_STAT_MIU_PRIORITY           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_miu_priority)
#define REG_MWE_2_16_L                            (REG_MWE_2_BASE + 0x2c)
#define REG_MWE_2_17_L                            (REG_MWE_2_BASE + 0x2e)
// bigger than 16 bit case allh0018
#define offset_of_mwe_2_reg_vip_stat_base0 (0x30)
#define mask_of_mwe_2_reg_vip_stat_base0   (0xffffffff)
#define shift_of_mwe_2_reg_vip_stat_base0  (0)
#define MWE_2_REG_VIP_STAT_BASE0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_base0)
// h0018, bit: 15
/* vip histogram base address 0*/
#define offset_of_mwe_2_reg_vip_stat_base0_0 (0x30)
#define mask_of_mwe_2_reg_vip_stat_base0_0   (0xffff)
#define shift_of_mwe_2_reg_vip_stat_base0_0  (0)
#define MWE_2_REG_VIP_STAT_BASE0_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_base0_0)
#define REG_MWE_2_18_L                       (MWE_2_REG_VIP_STAT_BASE0_0)
// h0019, bit: 15
/* vip histogram base address 0*/
#define offset_of_mwe_2_reg_vip_stat_base0_1 (0x32)
#define mask_of_mwe_2_reg_vip_stat_base0_1   (0xffff)
#define shift_of_mwe_2_reg_vip_stat_base0_1  (0)
#define MWE_2_REG_VIP_STAT_BASE0_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_base0_1)
#define REG_MWE_2_19_L                       (MWE_2_REG_VIP_STAT_BASE0_1)
// bigger than 16 bit case allh001a
#define offset_of_mwe_2_reg_vip_stat_base1 (0x34)
#define mask_of_mwe_2_reg_vip_stat_base1   (0xffffffff)
#define shift_of_mwe_2_reg_vip_stat_base1  (0)
#define MWE_2_REG_VIP_STAT_BASE1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_base1)
// h001a, bit: 15
/* vip histogram base address 1*/
#define offset_of_mwe_2_reg_vip_stat_base1_0 (0x34)
#define mask_of_mwe_2_reg_vip_stat_base1_0   (0xffff)
#define shift_of_mwe_2_reg_vip_stat_base1_0  (0)
#define MWE_2_REG_VIP_STAT_BASE1_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_base1_0)
#define REG_MWE_2_1A_L                       (MWE_2_REG_VIP_STAT_BASE1_0)
// h001b, bit: 15
/* vip histogram base address 1*/
#define offset_of_mwe_2_reg_vip_stat_base1_1 (0x36)
#define mask_of_mwe_2_reg_vip_stat_base1_1   (0xffff)
#define shift_of_mwe_2_reg_vip_stat_base1_1  (0)
#define MWE_2_REG_VIP_STAT_BASE1_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_base1_1)
#define REG_MWE_2_1B_L                       (MWE_2_REG_VIP_STAT_BASE1_1)
// h001c, bit: 0
/* SW  trigger baseaddress idx*/
#define offset_of_mwe_2_reg_vip_stat_sw_trig_baseidx (0x38)
#define mask_of_mwe_2_reg_vip_stat_sw_trig_baseidx   (0x1)
#define shift_of_mwe_2_reg_vip_stat_sw_trig_baseidx  (0)
#define MWE_2_REG_VIP_STAT_SW_TRIG_BASEIDX           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_sw_trig_baseidx)
#define REG_MWE_2_1C_L                               (MWE_2_REG_VIP_STAT_SW_TRIG_BASEIDX)
// h001c, bit: 1
/* SW  trigger baseaddress idx*/
#define offset_of_mwe_2_reg_vip_stat_sw_trig (0x38)
#define mask_of_mwe_2_reg_vip_stat_sw_trig   (0x2)
#define shift_of_mwe_2_reg_vip_stat_sw_trig  (1)
#define MWE_2_REG_VIP_STAT_SW_TRIG           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_sw_trig)
// h001c, bit: 2
/* */
#define offset_of_mwe_2_reg_vip_stat_trig_ref_md (0x38)
#define mask_of_mwe_2_reg_vip_stat_trig_ref_md   (0x4)
#define shift_of_mwe_2_reg_vip_stat_trig_ref_md  (2)
#define MWE_2_REG_VIP_STAT_TRIG_REF_MD           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_trig_ref_md)
// h001d, bit: 15
/* */
#define offset_of_mwe_2_reg_vip_stat_trig_ref_st (0x3a)
#define mask_of_mwe_2_reg_vip_stat_trig_ref_st   (0xffff)
#define shift_of_mwe_2_reg_vip_stat_trig_ref_st  (0)
#define MWE_2_REG_VIP_STAT_TRIG_REF_ST           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_trig_ref_st)
#define REG_MWE_2_1D_L                           (MWE_2_REG_VIP_STAT_TRIG_REF_ST)
// h001e, bit: 15
/* */
#define offset_of_mwe_2_reg_vip_stat_trig_ref_ed (0x3c)
#define mask_of_mwe_2_reg_vip_stat_trig_ref_ed   (0xffff)
#define shift_of_mwe_2_reg_vip_stat_trig_ref_ed  (0)
#define MWE_2_REG_VIP_STAT_TRIG_REF_ED           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_trig_ref_ed)
#define REG_MWE_2_1E_L                           (MWE_2_REG_VIP_STAT_TRIG_REF_ED)
// h001f, bit: 15
/* */
#define offset_of_mwe_2_reg_vip_stat_trig_ref_len (0x3e)
#define mask_of_mwe_2_reg_vip_stat_trig_ref_len   (0xffff)
#define shift_of_mwe_2_reg_vip_stat_trig_ref_len  (0)
#define MWE_2_REG_VIP_STAT_TRIG_REF_LEN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_vip_stat_trig_ref_len)
#define REG_MWE_2_1F_L                            (MWE_2_REG_VIP_STAT_TRIG_REF_LEN)
// bigger than 16 bit case allh0020
#define offset_of_mwe_2_reg_total_1f0 (0x40)
#define mask_of_mwe_2_reg_total_1f0   (0xfffff)
#define shift_of_mwe_2_reg_total_1f0  (0)
#define MWE_2_REG_TOTAL_1F0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_1f0)
// h0020, bit: 15
/* Histogram report section1
1. as reg_acc_counter22_en=1, (/2^5)
2. as reg_acc_counter22_en=0, (/2^4) */
#define offset_of_mwe_2_reg_total_1f_00_0 (0x40)
#define mask_of_mwe_2_reg_total_1f_00_0   (0xffff)
#define shift_of_mwe_2_reg_total_1f_00_0  (0)
#define MWE_2_REG_TOTAL_1F_00_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_1f_00_0)
#define REG_MWE_2_20_L                    (MWE_2_REG_TOTAL_1F_00_0)
// h0021, bit: 3
/* Histogram report section1
1. as reg_acc_counter22_en=1, (/2^5)
2. as reg_acc_counter22_en=0, (/2^4) */
#define offset_of_mwe_2_reg_total_1f_00_1 (0x42)
#define mask_of_mwe_2_reg_total_1f_00_1   (0xf)
#define shift_of_mwe_2_reg_total_1f_00_1  (0)
#define MWE_2_REG_TOTAL_1F_00_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_1f_00_1)
#define REG_MWE_2_21_L                    (MWE_2_REG_TOTAL_1F_00_1)
// bigger than 16 bit case allh0022
#define offset_of_mwe_2_reg_total_3f_20 (0x44)
#define mask_of_mwe_2_reg_total_3f_20   (0xfffff)
#define shift_of_mwe_2_reg_total_3f_20  (0)
#define MWE_2_REG_TOTAL_3F_20           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_3f_20)
// h0022, bit: 15
/* Histogram report section2 (/2^5)*/
#define offset_of_mwe_2_reg_total_3f_20_0 (0x44)
#define mask_of_mwe_2_reg_total_3f_20_0   (0xffff)
#define shift_of_mwe_2_reg_total_3f_20_0  (0)
#define MWE_2_REG_TOTAL_3F_20_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_3f_20_0)
#define REG_MWE_2_22_L                    (MWE_2_REG_TOTAL_3F_20_0)
// h0023, bit: 3
/* Histogram report section2 (/2^5)*/
#define offset_of_mwe_2_reg_total_3f_20_1 (0x46)
#define mask_of_mwe_2_reg_total_3f_20_1   (0xf)
#define shift_of_mwe_2_reg_total_3f_20_1  (0)
#define MWE_2_REG_TOTAL_3F_20_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_3f_20_1)
#define REG_MWE_2_23_L                    (MWE_2_REG_TOTAL_3F_20_1)
// bigger than 16 bit case allh0024
#define offset_of_mwe_2_reg_total_5f_40 (0x48)
#define mask_of_mwe_2_reg_total_5f_40   (0xfffff)
#define shift_of_mwe_2_reg_total_5f_40  (0)
#define MWE_2_REG_TOTAL_5F_40           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_5f_40)
// h0024, bit: 15
/* Histogram report section3*/
#define offset_of_mwe_2_reg_total_5f_40_0 (0x48)
#define mask_of_mwe_2_reg_total_5f_40_0   (0xffff)
#define shift_of_mwe_2_reg_total_5f_40_0  (0)
#define MWE_2_REG_TOTAL_5F_40_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_5f_40_0)
#define REG_MWE_2_24_L                    (MWE_2_REG_TOTAL_5F_40_0)
// h0025, bit: 3
/* Histogram report section3*/
#define offset_of_mwe_2_reg_total_5f_40_1 (0x4a)
#define mask_of_mwe_2_reg_total_5f_40_1   (0xf)
#define shift_of_mwe_2_reg_total_5f_40_1  (0)
#define MWE_2_REG_TOTAL_5F_40_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_5f_40_1)
#define REG_MWE_2_25_L                    (MWE_2_REG_TOTAL_5F_40_1)
// bigger than 16 bit case allh0026
#define offset_of_mwe_2_reg_total_7f_60 (0x4c)
#define mask_of_mwe_2_reg_total_7f_60   (0xfffff)
#define shift_of_mwe_2_reg_total_7f_60  (0)
#define MWE_2_REG_TOTAL_7F_60           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_7f_60)
// h0026, bit: 15
/* Histogram report section4*/
#define offset_of_mwe_2_reg_total_7f_60_0 (0x4c)
#define mask_of_mwe_2_reg_total_7f_60_0   (0xffff)
#define shift_of_mwe_2_reg_total_7f_60_0  (0)
#define MWE_2_REG_TOTAL_7F_60_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_7f_60_0)
#define REG_MWE_2_26_L                    (MWE_2_REG_TOTAL_7F_60_0)
// h0027, bit: 3
/* Histogram report section4*/
#define offset_of_mwe_2_reg_total_7f_60_1 (0x4e)
#define mask_of_mwe_2_reg_total_7f_60_1   (0xf)
#define shift_of_mwe_2_reg_total_7f_60_1  (0)
#define MWE_2_REG_TOTAL_7F_60_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_7f_60_1)
#define REG_MWE_2_27_L                    (MWE_2_REG_TOTAL_7F_60_1)
// bigger than 16 bit case allh0028
#define offset_of_mwe_2_reg_total_9f_80 (0x50)
#define mask_of_mwe_2_reg_total_9f_80   (0xfffff)
#define shift_of_mwe_2_reg_total_9f_80  (0)
#define MWE_2_REG_TOTAL_9F_80           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_9f_80)
// h0028, bit: 15
/* Histogram report section5*/
#define offset_of_mwe_2_reg_total_9f_80_0 (0x50)
#define mask_of_mwe_2_reg_total_9f_80_0   (0xffff)
#define shift_of_mwe_2_reg_total_9f_80_0  (0)
#define MWE_2_REG_TOTAL_9F_80_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_9f_80_0)
#define REG_MWE_2_28_L                    (MWE_2_REG_TOTAL_9F_80_0)
// h0029, bit: 3
/* Histogram report section5*/
#define offset_of_mwe_2_reg_total_9f_80_1 (0x52)
#define mask_of_mwe_2_reg_total_9f_80_1   (0xf)
#define shift_of_mwe_2_reg_total_9f_80_1  (0)
#define MWE_2_REG_TOTAL_9F_80_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_9f_80_1)
#define REG_MWE_2_29_L                    (MWE_2_REG_TOTAL_9F_80_1)
// bigger than 16 bit case allh002a
#define offset_of_mwe_2_reg_total_bf_a0 (0x54)
#define mask_of_mwe_2_reg_total_bf_a0   (0xfffff)
#define shift_of_mwe_2_reg_total_bf_a0  (0)
#define MWE_2_REG_TOTAL_BF_A0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_bf_a0)
// h002a, bit: 15
/* Histogram report section6*/
#define offset_of_mwe_2_reg_total_bf_a0_0 (0x54)
#define mask_of_mwe_2_reg_total_bf_a0_0   (0xffff)
#define shift_of_mwe_2_reg_total_bf_a0_0  (0)
#define MWE_2_REG_TOTAL_BF_A0_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_bf_a0_0)
#define REG_MWE_2_2A_L                    (MWE_2_REG_TOTAL_BF_A0_0)
// h002b, bit: 3
/* Histogram report section6*/
#define offset_of_mwe_2_reg_total_bf_a0_1 (0x56)
#define mask_of_mwe_2_reg_total_bf_a0_1   (0xf)
#define shift_of_mwe_2_reg_total_bf_a0_1  (0)
#define MWE_2_REG_TOTAL_BF_A0_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_bf_a0_1)
#define REG_MWE_2_2B_L                    (MWE_2_REG_TOTAL_BF_A0_1)
// bigger than 16 bit case allh002c
#define offset_of_mwe_2_reg_total_df_c0 (0x58)
#define mask_of_mwe_2_reg_total_df_c0   (0xfffff)
#define shift_of_mwe_2_reg_total_df_c0  (0)
#define MWE_2_REG_TOTAL_DF_C0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_df_c0)
// h002c, bit: 15
/* Histogram report section7*/
#define offset_of_mwe_2_reg_total_df_c0_0 (0x58)
#define mask_of_mwe_2_reg_total_df_c0_0   (0xffff)
#define shift_of_mwe_2_reg_total_df_c0_0  (0)
#define MWE_2_REG_TOTAL_DF_C0_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_df_c0_0)
#define REG_MWE_2_2C_L                    (MWE_2_REG_TOTAL_DF_C0_0)
// h002d, bit: 3
/* Histogram report section7*/
#define offset_of_mwe_2_reg_total_df_c0_1 (0x5a)
#define mask_of_mwe_2_reg_total_df_c0_1   (0xf)
#define shift_of_mwe_2_reg_total_df_c0_1  (0)
#define MWE_2_REG_TOTAL_DF_C0_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_df_c0_1)
#define REG_MWE_2_2D_L                    (MWE_2_REG_TOTAL_DF_C0_1)
// bigger than 16 bit case allh002e
#define offset_of_mwe_2_reg_total_ff_e0 (0x5c)
#define mask_of_mwe_2_reg_total_ff_e0   (0xfffff)
#define shift_of_mwe_2_reg_total_ff_e0  (0)
#define MWE_2_REG_TOTAL_FF_E0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_ff_e0)
// h002e, bit: 15
/* Histogram report section8*/
#define offset_of_mwe_2_reg_total_ff_e0_0 (0x5c)
#define mask_of_mwe_2_reg_total_ff_e0_0   (0xffff)
#define shift_of_mwe_2_reg_total_ff_e0_0  (0)
#define MWE_2_REG_TOTAL_FF_E0_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_ff_e0_0)
#define REG_MWE_2_2E_L                    (MWE_2_REG_TOTAL_FF_E0_0)
// h002f, bit: 3
/* Histogram report section8*/
#define offset_of_mwe_2_reg_total_ff_e0_1 (0x5e)
#define mask_of_mwe_2_reg_total_ff_e0_1   (0xf)
#define shift_of_mwe_2_reg_total_ff_e0_1  (0)
#define MWE_2_REG_TOTAL_FF_E0_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_total_ff_e0_1)
#define REG_MWE_2_2F_L                    (MWE_2_REG_TOTAL_FF_E0_1)
// h0030, bit: 0
/* Main window FCC region 1 enable*/
#define offset_of_mwe_2_reg_main_mwe_fcc_1t_en (0x60)
#define mask_of_mwe_2_reg_main_mwe_fcc_1t_en   (0x1)
#define shift_of_mwe_2_reg_main_mwe_fcc_1t_en  (0)
#define MWE_2_REG_MAIN_MWE_FCC_1T_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_fcc_1t_en)
#define REG_MWE_2_30_L                         (MWE_2_REG_MAIN_MWE_FCC_1T_EN)
// h0030, bit: 1
/* Main window FCC region 2 enable*/
#define offset_of_mwe_2_reg_main_mwe_fcc_2t_en (0x60)
#define mask_of_mwe_2_reg_main_mwe_fcc_2t_en   (0x2)
#define shift_of_mwe_2_reg_main_mwe_fcc_2t_en  (1)
#define MWE_2_REG_MAIN_MWE_FCC_2T_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_fcc_2t_en)
// h0030, bit: 2
/* Main window FCC region 3 enable*/
#define offset_of_mwe_2_reg_main_mwe_fcc_3t_en (0x60)
#define mask_of_mwe_2_reg_main_mwe_fcc_3t_en   (0x4)
#define shift_of_mwe_2_reg_main_mwe_fcc_3t_en  (2)
#define MWE_2_REG_MAIN_MWE_FCC_3T_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_fcc_3t_en)
// h0030, bit: 3
/* Main window FCC region 4 enable*/
#define offset_of_mwe_2_reg_main_mwe_fcc_4t_en (0x60)
#define mask_of_mwe_2_reg_main_mwe_fcc_4t_en   (0x8)
#define shift_of_mwe_2_reg_main_mwe_fcc_4t_en  (3)
#define MWE_2_REG_MAIN_MWE_FCC_4T_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_fcc_4t_en)
// h0030, bit: 4
/* Main window FCC region 5 enable*/
#define offset_of_mwe_2_reg_main_mwe_fcc_5t_en (0x60)
#define mask_of_mwe_2_reg_main_mwe_fcc_5t_en   (0x10)
#define shift_of_mwe_2_reg_main_mwe_fcc_5t_en  (4)
#define MWE_2_REG_MAIN_MWE_FCC_5T_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_fcc_5t_en)
// h0030, bit: 5
/* Main window FCC region 6 enable*/
#define offset_of_mwe_2_reg_main_mwe_fcc_6t_en (0x60)
#define mask_of_mwe_2_reg_main_mwe_fcc_6t_en   (0x20)
#define shift_of_mwe_2_reg_main_mwe_fcc_6t_en  (5)
#define MWE_2_REG_MAIN_MWE_FCC_6T_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_fcc_6t_en)
// h0030, bit: 6
/* Main window FCC region 7 enable*/
#define offset_of_mwe_2_reg_main_mwe_fcc_7t_en (0x60)
#define mask_of_mwe_2_reg_main_mwe_fcc_7t_en   (0x40)
#define shift_of_mwe_2_reg_main_mwe_fcc_7t_en  (6)
#define MWE_2_REG_MAIN_MWE_FCC_7T_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_fcc_7t_en)
// h0030, bit: 7
/* Main window FCC region 8 enable*/
#define offset_of_mwe_2_reg_main_mwe_fcc_8t_en (0x60)
#define mask_of_mwe_2_reg_main_mwe_fcc_8t_en   (0x80)
#define shift_of_mwe_2_reg_main_mwe_fcc_8t_en  (7)
#define MWE_2_REG_MAIN_MWE_FCC_8T_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_fcc_8t_en)
// h0030, bit: 8
/* Main window FCC window 9 enable*/
#define offset_of_mwe_2_reg_main_mwe_fcc_9t_en (0x60)
#define mask_of_mwe_2_reg_main_mwe_fcc_9t_en   (0x100)
#define shift_of_mwe_2_reg_main_mwe_fcc_9t_en  (8)
#define MWE_2_REG_MAIN_MWE_FCC_9T_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_fcc_9t_en)
// h0031, bit: 0
/* Main window 2D peaking enable*/
#define offset_of_mwe_2_reg_main_mwe_post_peaking_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_post_peaking_en   (0x1)
#define shift_of_mwe_2_reg_main_mwe_post_peaking_en  (0)
#define MWE_2_REG_MAIN_MWE_POST_PEAKING_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_post_peaking_en)
#define REG_MWE_2_31_L                               (MWE_2_REG_MAIN_MWE_POST_PEAKING_EN)
// h0031, bit: 1
/* Main window Gaussian SNR enable*/
#define offset_of_mwe_2_reg_main_mwe_gauss_nr_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_gauss_nr_en   (0x2)
#define shift_of_mwe_2_reg_main_mwe_gauss_nr_en  (1)
#define MWE_2_REG_MAIN_MWE_GAUSS_NR_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_gauss_nr_en)
// h0031, bit: 2
/* Main window edge enhance enable*/
#define offset_of_mwe_2_reg_main_mwe_ee_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_ee_en   (0x4)
#define shift_of_mwe_2_reg_main_mwe_ee_en  (2)
#define MWE_2_REG_MAIN_MWE_EE_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_ee_en)
// h0031, bit: 3
/* Main window luma curve enable*/
#define offset_of_mwe_2_reg_main_mwe_curve_fit_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_curve_fit_en   (0x8)
#define shift_of_mwe_2_reg_main_mwe_curve_fit_en  (3)
#define MWE_2_REG_MAIN_MWE_CURVE_FIT_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_curve_fit_en)
// h0031, bit: 4
/* Main window luma curve enable as PC(RGB) mode enable*/
#define offset_of_mwe_2_reg_main_mwe_curve_fit_rgb_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_curve_fit_rgb_en   (0x10)
#define shift_of_mwe_2_reg_main_mwe_curve_fit_rgb_en  (4)
#define MWE_2_REG_MAIN_MWE_CURVE_FIT_RGB_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_curve_fit_rgb_en)
// h0031, bit: 5
/* Main window BLE/WLE enable*/
#define offset_of_mwe_2_reg_main_mwe_bw_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_bw_en   (0x20)
#define shift_of_mwe_2_reg_main_mwe_bw_en  (5)
#define MWE_2_REG_MAIN_MWE_BW_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_bw_en)
// h0031, bit: 6
/* Main window lce  enable*/
#define offset_of_mwe_2_reg_main_mwe_lce_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_lce_en   (0x40)
#define shift_of_mwe_2_reg_main_mwe_lce_en  (6)
#define MWE_2_REG_MAIN_MWE_LCE_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_lce_en)
// h0031, bit: 7
/* Main window 1D LTI enable*/
#define offset_of_mwe_2_reg_main_mwe_lti_filter_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_lti_filter_en   (0x80)
#define shift_of_mwe_2_reg_main_mwe_lti_filter_en  (7)
#define MWE_2_REG_MAIN_MWE_LTI_FILTER_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_lti_filter_en)
// h0031, bit: 8
/* Main window ACK enable*/
#define offset_of_mwe_2_reg_main_mwe_ack_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_ack_en   (0x100)
#define shift_of_mwe_2_reg_main_mwe_ack_en  (8)
#define MWE_2_REG_MAIN_MWE_ACK_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_ack_en)
// h0031, bit: 9
/* Main window Y switch enable*/
#define offset_of_mwe_2_reg_main_mwe_y_switch_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_y_switch_en   (0x200)
#define shift_of_mwe_2_reg_main_mwe_y_switch_en  (9)
#define MWE_2_REG_MAIN_MWE_Y_SWITCH_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_y_switch_en)
// h0031, bit: 10
/* Main window IBC enable*/
#define offset_of_mwe_2_reg_main_mwe_ibc_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_ibc_en   (0x400)
#define shift_of_mwe_2_reg_main_mwe_ibc_en  (10)
#define MWE_2_REG_MAIN_MWE_IBC_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_ibc_en)
// h0031, bit: 11
/* Main window ICC enable*/
#define offset_of_mwe_2_reg_main_mwe_icc_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_icc_en   (0x800)
#define shift_of_mwe_2_reg_main_mwe_icc_en  (11)
#define MWE_2_REG_MAIN_MWE_ICC_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_icc_en)
// h0031, bit: 12
/* Main window IHC enable*/
#define offset_of_mwe_2_reg_main_mwe_ihc_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_ihc_en   (0x1000)
#define shift_of_mwe_2_reg_main_mwe_ihc_en  (12)
#define MWE_2_REG_MAIN_MWE_IHC_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_ihc_en)
// h0031, bit: 13
/* Main window UV compensate enable*/
#define offset_of_mwe_2_reg_main_mwe_uvc_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_uvc_en   (0x2000)
#define shift_of_mwe_2_reg_main_mwe_uvc_en  (13)
#define MWE_2_REG_MAIN_MWE_UVC_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_uvc_en)
// h0031, bit: 14
/* Main window CTI enable*/
#define offset_of_mwe_2_reg_main_mwe_cti_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_cti_en   (0x4000)
#define shift_of_mwe_2_reg_main_mwe_cti_en  (14)
#define MWE_2_REG_MAIN_MWE_CTI_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_cti_en)
// h0031, bit: 15
/* Main window clamp enable*/
#define offset_of_mwe_2_reg_main_mwe_clamp_en (0x62)
#define mask_of_mwe_2_reg_main_mwe_clamp_en   (0x8000)
#define shift_of_mwe_2_reg_main_mwe_clamp_en  (15)
#define MWE_2_REG_MAIN_MWE_CLAMP_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_clamp_en)
// h0032, bit: 0
/* Main window Y band1 H_coring enable*/
#define offset_of_mwe_2_reg_main_mwe_y_band1_h_coring_en (0x64)
#define mask_of_mwe_2_reg_main_mwe_y_band1_h_coring_en   (0x1)
#define shift_of_mwe_2_reg_main_mwe_y_band1_h_coring_en  (0)
#define MWE_2_REG_MAIN_MWE_Y_BAND1_H_CORING_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_y_band1_h_coring_en)
#define REG_MWE_2_32_L                                   (MWE_2_REG_MAIN_MWE_Y_BAND1_H_CORING_EN)
// h0032, bit: 1
/* Main window Y band2 H_coring enable*/
#define offset_of_mwe_2_reg_main_mwe_y_band2_h_coring_en (0x64)
#define mask_of_mwe_2_reg_main_mwe_y_band2_h_coring_en   (0x2)
#define shift_of_mwe_2_reg_main_mwe_y_band2_h_coring_en  (1)
#define MWE_2_REG_MAIN_MWE_Y_BAND2_H_CORING_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_y_band2_h_coring_en)
// h0032, bit: 2
/* Main window C band1 H_coring enable*/
#define offset_of_mwe_2_reg_main_mwe_c_band1_h_coring_en (0x64)
#define mask_of_mwe_2_reg_main_mwe_c_band1_h_coring_en   (0x4)
#define shift_of_mwe_2_reg_main_mwe_c_band1_h_coring_en  (2)
#define MWE_2_REG_MAIN_MWE_C_BAND1_H_CORING_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_c_band1_h_coring_en)
// h0032, bit: 3
/* Main window C band2 H_coring enable*/
#define offset_of_mwe_2_reg_main_mwe_c_band2_h_coring_en (0x64)
#define mask_of_mwe_2_reg_main_mwe_c_band2_h_coring_en   (0x8)
#define shift_of_mwe_2_reg_main_mwe_c_band2_h_coring_en  (3)
#define MWE_2_REG_MAIN_MWE_C_BAND2_H_CORING_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_c_band2_h_coring_en)
// h0032, bit: 4
/* Main window horizontal Y noise-masking enable*/
#define offset_of_mwe_2_reg_main_mwe_y_noise_masking_en (0x64)
#define mask_of_mwe_2_reg_main_mwe_y_noise_masking_en   (0x10)
#define shift_of_mwe_2_reg_main_mwe_y_noise_masking_en  (4)
#define MWE_2_REG_MAIN_MWE_Y_NOISE_MASKING_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_y_noise_masking_en)
// h0032, bit: 5
/* Main window horizontal C noise-masking enable*/
#define offset_of_mwe_2_reg_main_mwe_c_noise_masking_en (0x64)
#define mask_of_mwe_2_reg_main_mwe_c_noise_masking_en   (0x20)
#define shift_of_mwe_2_reg_main_mwe_c_noise_masking_en  (5)
#define MWE_2_REG_MAIN_MWE_C_NOISE_MASKING_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_c_noise_masking_en)
// h0032, bit: 6
/* Main window vertical Y noise-masking enable*/
#define offset_of_mwe_2_reg_main_mwe_v_noise_masking_en (0x64)
#define mask_of_mwe_2_reg_main_mwe_v_noise_masking_en   (0x40)
#define shift_of_mwe_2_reg_main_mwe_v_noise_masking_en  (6)
#define MWE_2_REG_MAIN_MWE_V_NOISE_MASKING_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_v_noise_masking_en)
// h0033, bit: 2
/* Main window horizontal Y low pass filter coefficient*/
#define offset_of_mwe_2_reg_main_mwe_y_lpf_coef (0x66)
#define mask_of_mwe_2_reg_main_mwe_y_lpf_coef   (0x7)
#define shift_of_mwe_2_reg_main_mwe_y_lpf_coef  (0)
#define MWE_2_REG_MAIN_MWE_Y_LPF_COEF           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_y_lpf_coef)
#define REG_MWE_2_33_L                          (MWE_2_REG_MAIN_MWE_Y_LPF_COEF)
// h0033, bit: 10
/* Main window vertical up-dwon pixel Y LPF coefficient*/
#define offset_of_mwe_2_reg_main_mwe_v_lpf_coef_1 (0x66)
#define mask_of_mwe_2_reg_main_mwe_v_lpf_coef_1   (0x700)
#define shift_of_mwe_2_reg_main_mwe_v_lpf_coef_1  (8)
#define MWE_2_REG_MAIN_MWE_V_LPF_COEF_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_v_lpf_coef_1)
// h0033, bit: 14
/* Main window vertical central pixel Y LPF coefficient*/
#define offset_of_mwe_2_reg_main_mwe_v_lpf_coef_2 (0x66)
#define mask_of_mwe_2_reg_main_mwe_v_lpf_coef_2   (0x7000)
#define shift_of_mwe_2_reg_main_mwe_v_lpf_coef_2  (12)
#define MWE_2_REG_MAIN_MWE_V_LPF_COEF_2           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_v_lpf_coef_2)
// h0034, bit: 6
/* Main window Y gain MSB
y_gain_new(1.10) = {y_gain,y_gain_lsb}*/
#define offset_of_mwe_2_reg_main_mwe_y_gain (0x68)
#define mask_of_mwe_2_reg_main_mwe_y_gain   (0x7f)
#define shift_of_mwe_2_reg_main_mwe_y_gain  (0)
#define MWE_2_REG_MAIN_MWE_Y_GAIN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_y_gain)
#define REG_MWE_2_34_L                      (MWE_2_REG_MAIN_MWE_Y_GAIN)
// h0034, bit: 11
/* Main window Y gain LSB
y_gain_new(1.10) = {y_gain,y_gain_lsb}*/
#define offset_of_mwe_2_reg_main_mwe_y_gain_lsb (0x68)
#define mask_of_mwe_2_reg_main_mwe_y_gain_lsb   (0xf00)
#define shift_of_mwe_2_reg_main_mwe_y_gain_lsb  (8)
#define MWE_2_REG_MAIN_MWE_Y_GAIN_LSB           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_y_gain_lsb)
// h0035, bit: 6
/* Main window pre Y gain MSB
pre_y_gain_new(1.10) = {pre_y_gain,pre_y_gain_lsb}*/
#define offset_of_mwe_2_reg_main_mwe_pre_y_gain (0x6a)
#define mask_of_mwe_2_reg_main_mwe_pre_y_gain   (0x7f)
#define shift_of_mwe_2_reg_main_mwe_pre_y_gain  (0)
#define MWE_2_REG_MAIN_MWE_PRE_Y_GAIN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_pre_y_gain)
#define REG_MWE_2_35_L                          (MWE_2_REG_MAIN_MWE_PRE_Y_GAIN)
// h0035, bit: 11
/* Main window pre Y gain LSB
pre_y_gain_new(1.10) = {pre_y_gain,pre_y_gain_lsb}*/
#define offset_of_mwe_2_reg_main_mwe_pre_y_gain_lsb (0x6a)
#define mask_of_mwe_2_reg_main_mwe_pre_y_gain_lsb   (0xf00)
#define shift_of_mwe_2_reg_main_mwe_pre_y_gain_lsb  (8)
#define MWE_2_REG_MAIN_MWE_PRE_Y_GAIN_LSB           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_pre_y_gain_lsb)
// h0036, bit: 7
/* Main window Y adjust (2's complement)*/
#define offset_of_mwe_2_reg_main_mwe_bri_adjust (0x6c)
#define mask_of_mwe_2_reg_main_mwe_bri_adjust   (0xff)
#define shift_of_mwe_2_reg_main_mwe_bri_adjust  (0)
#define MWE_2_REG_MAIN_MWE_BRI_ADJUST           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_bri_adjust)
#define REG_MWE_2_36_L                          (MWE_2_REG_MAIN_MWE_BRI_ADJUST)
// h0036, bit: 9
/* Main window Y adjust low bit*/
#define offset_of_mwe_2_reg_main_mwe_bri_adjust_lsb (0x6c)
#define mask_of_mwe_2_reg_main_mwe_bri_adjust_lsb   (0x300)
#define shift_of_mwe_2_reg_main_mwe_bri_adjust_lsb  (8)
#define MWE_2_REG_MAIN_MWE_BRI_ADJUST_LSB           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_bri_adjust_lsb)
// h0037, bit: 7
/* Main window post Y adjust*/
#define offset_of_mwe_2_reg_main_mwe_post_bri_adjust (0x6e)
#define mask_of_mwe_2_reg_main_mwe_post_bri_adjust   (0xff)
#define shift_of_mwe_2_reg_main_mwe_post_bri_adjust  (0)
#define MWE_2_REG_MAIN_MWE_POST_BRI_ADJUST           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_post_bri_adjust)
#define REG_MWE_2_37_L                               (MWE_2_REG_MAIN_MWE_POST_BRI_ADJUST)
// h0037, bit: 9
/* Main window post Y adjust low bit (2's complement)*/
#define offset_of_mwe_2_reg_main_mwe_post_bri_adjust_lsb (0x6e)
#define mask_of_mwe_2_reg_main_mwe_post_bri_adjust_lsb   (0x300)
#define shift_of_mwe_2_reg_main_mwe_post_bri_adjust_lsb  (8)
#define MWE_2_REG_MAIN_MWE_POST_BRI_ADJUST_LSB           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_post_bri_adjust_lsb)
// h0038, bit: 7
/* main window second post Y adjust*/
#define offset_of_mwe_2_reg_main_mwe_second_post_bri_adjust (0x70)
#define mask_of_mwe_2_reg_main_mwe_second_post_bri_adjust   (0xff)
#define shift_of_mwe_2_reg_main_mwe_second_post_bri_adjust  (0)
#define MWE_2_REG_MAIN_MWE_SECOND_POST_BRI_ADJUST           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_second_post_bri_adjust)
#define REG_MWE_2_38_L                                      (MWE_2_REG_MAIN_MWE_SECOND_POST_BRI_ADJUST)
// h0038, bit: 9
/* Main window second post Y adjust low bit (2's complement)*/
#define offset_of_mwe_2_reg_main_mwe_second_post_bri_adjust_lsb (0x70)
#define mask_of_mwe_2_reg_main_mwe_second_post_bri_adjust_lsb   (0x300)
#define shift_of_mwe_2_reg_main_mwe_second_post_bri_adjust_lsb  (8)
#define MWE_2_REG_MAIN_MWE_SECOND_POST_BRI_ADJUST_LSB \
    (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_second_post_bri_adjust_lsb)
// h0039, bit: 7
/* Main window C gain*/
#define offset_of_mwe_2_reg_main_mwe_c_gain (0x72)
#define mask_of_mwe_2_reg_main_mwe_c_gain   (0xff)
#define shift_of_mwe_2_reg_main_mwe_c_gain  (0)
#define MWE_2_REG_MAIN_MWE_C_GAIN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_c_gain)
#define REG_MWE_2_39_L                      (MWE_2_REG_MAIN_MWE_C_GAIN)
// h0039, bit: 8
/* Main window fresh white enable*/
#define offset_of_mwe_2_reg_main_mwe_fwc_en (0x72)
#define mask_of_mwe_2_reg_main_mwe_fwc_en   (0x100)
#define shift_of_mwe_2_reg_main_mwe_fwc_en  (8)
#define MWE_2_REG_MAIN_MWE_FWC_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_fwc_en)
// h0039, bit: 9
/* Main window NLM enable*/
#define offset_of_mwe_2_reg_main_mwe_nlm_en (0x72)
#define mask_of_mwe_2_reg_main_mwe_nlm_en   (0x200)
#define shift_of_mwe_2_reg_main_mwe_nlm_en  (9)
#define MWE_2_REG_MAIN_MWE_NLM_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_nlm_en)
// h0039, bit: 10
/* Main window 2D LTI enable*/
#define offset_of_mwe_2_reg_main_mwe_lti_en (0x72)
#define mask_of_mwe_2_reg_main_mwe_lti_en   (0x400)
#define shift_of_mwe_2_reg_main_mwe_lti_en  (10)
#define MWE_2_REG_MAIN_MWE_LTI_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_lti_en)
// h0039, bit: 11
/* Main window post3x3 filter enable*/
#define offset_of_mwe_2_reg_main_mwe_post3x3pk_en (0x72)
#define mask_of_mwe_2_reg_main_mwe_post3x3pk_en   (0x800)
#define shift_of_mwe_2_reg_main_mwe_post3x3pk_en  (11)
#define MWE_2_REG_MAIN_MWE_POST3X3PK_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_mwe_post3x3pk_en)
#define REG_MWE_2_3A_L                            (REG_MWE_2_BASE + 0x74)
#define REG_MWE_2_3B_L                            (REG_MWE_2_BASE + 0x76)
#define REG_MWE_2_3C_L                            (REG_MWE_2_BASE + 0x78)
#define REG_MWE_2_3D_L                            (REG_MWE_2_BASE + 0x7a)
#define REG_MWE_2_3E_L                            (REG_MWE_2_BASE + 0x7c)
#define REG_MWE_2_3F_L                            (REG_MWE_2_BASE + 0x7e)
// h0040, bit: 0
/* Main window FCC adaptive window0 enable*/
#define offset_of_mwe_2_reg_main_fcc_adp_y_win0_en (0x80)
#define mask_of_mwe_2_reg_main_fcc_adp_y_win0_en   (0x1)
#define shift_of_mwe_2_reg_main_fcc_adp_y_win0_en  (0)
#define MWE_2_REG_MAIN_FCC_ADP_Y_WIN0_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_fcc_adp_y_win0_en)
#define REG_MWE_2_40_L                             (MWE_2_REG_MAIN_FCC_ADP_Y_WIN0_EN)
// h0040, bit: 1
/* Main window FCC adaptive window1 enable*/
#define offset_of_mwe_2_reg_main_fcc_adp_y_win1_en (0x80)
#define mask_of_mwe_2_reg_main_fcc_adp_y_win1_en   (0x2)
#define shift_of_mwe_2_reg_main_fcc_adp_y_win1_en  (1)
#define MWE_2_REG_MAIN_FCC_ADP_Y_WIN1_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_fcc_adp_y_win1_en)
// h0040, bit: 2
/* Main window FCC adaptive window2 enable*/
#define offset_of_mwe_2_reg_main_fcc_adp_y_win2_en (0x80)
#define mask_of_mwe_2_reg_main_fcc_adp_y_win2_en   (0x4)
#define shift_of_mwe_2_reg_main_fcc_adp_y_win2_en  (2)
#define MWE_2_REG_MAIN_FCC_ADP_Y_WIN2_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_fcc_adp_y_win2_en)
// h0040, bit: 3
/* Main window FCC adaptive window3 enable*/
#define offset_of_mwe_2_reg_main_fcc_adp_y_win3_en (0x80)
#define mask_of_mwe_2_reg_main_fcc_adp_y_win3_en   (0x8)
#define shift_of_mwe_2_reg_main_fcc_adp_y_win3_en  (3)
#define MWE_2_REG_MAIN_FCC_ADP_Y_WIN3_EN           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_fcc_adp_y_win3_en)
// h0041, bit: 3
/* Main window FCC adaptive window0 nmuber*/
#define offset_of_mwe_2_reg_main_fcc_adp_y_win0_num (0x82)
#define mask_of_mwe_2_reg_main_fcc_adp_y_win0_num   (0xf)
#define shift_of_mwe_2_reg_main_fcc_adp_y_win0_num  (0)
#define MWE_2_REG_MAIN_FCC_ADP_Y_WIN0_NUM           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_fcc_adp_y_win0_num)
#define REG_MWE_2_41_L                              (MWE_2_REG_MAIN_FCC_ADP_Y_WIN0_NUM)
// h0041, bit: 7
/* Main window FCC adaptive window1 nmuber*/
#define offset_of_mwe_2_reg_main_fcc_adp_y_win1_num (0x82)
#define mask_of_mwe_2_reg_main_fcc_adp_y_win1_num   (0xf0)
#define shift_of_mwe_2_reg_main_fcc_adp_y_win1_num  (4)
#define MWE_2_REG_MAIN_FCC_ADP_Y_WIN1_NUM           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_fcc_adp_y_win1_num)
// h0041, bit: 11
/* Main window FCC adaptive window2 nmuber*/
#define offset_of_mwe_2_reg_main_fcc_adp_y_win2_num (0x82)
#define mask_of_mwe_2_reg_main_fcc_adp_y_win2_num   (0xf00)
#define shift_of_mwe_2_reg_main_fcc_adp_y_win2_num  (8)
#define MWE_2_REG_MAIN_FCC_ADP_Y_WIN2_NUM           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_fcc_adp_y_win2_num)
// h0041, bit: 15
/* Main window FCC adaptive window3 nmuber*/
#define offset_of_mwe_2_reg_main_fcc_adp_y_win3_num (0x82)
#define mask_of_mwe_2_reg_main_fcc_adp_y_win3_num   (0xf000)
#define shift_of_mwe_2_reg_main_fcc_adp_y_win3_num  (12)
#define MWE_2_REG_MAIN_FCC_ADP_Y_WIN3_NUM           (REG_MWE_2_BASE + offset_of_mwe_2_reg_main_fcc_adp_y_win3_num)
#define REG_MWE_2_42_L                              (REG_MWE_2_BASE + 0x84)
#define REG_MWE_2_43_L                              (REG_MWE_2_BASE + 0x86)
// h0044, bit: 3
/* FCC adaptive y debug mode*/
#define offset_of_mwe_2_reg_fcc_adp_y_debug (0x88)
#define mask_of_mwe_2_reg_fcc_adp_y_debug   (0xf)
#define shift_of_mwe_2_reg_fcc_adp_y_debug  (0)
#define MWE_2_REG_FCC_ADP_Y_DEBUG           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_debug)
#define REG_MWE_2_44_L                      (MWE_2_REG_FCC_ADP_Y_DEBUG)
// h0045, bit: 5
/* FCC look up table window0_16 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_16 (0x8a)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_16   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_16  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_16           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_16)
#define REG_MWE_2_45_L                            (MWE_2_REG_FCC_ADP_Y_LUT_WIN0_16)
// h0045, bit: 13
/* FCC look up table window1_16 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_16 (0x8a)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_16   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_16  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_16           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_16)
// h0046, bit: 5
/* FCC look up table window3_16 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_16 (0x8c)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_16   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_16  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_16           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_16)
#define REG_MWE_2_46_L                            (MWE_2_REG_FCC_ADP_Y_LUT_WIN2_16)
// h0046, bit: 13
/* FCC look up table window3_16 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_16 (0x8c)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_16   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_16  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_16           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_16)
#define REG_MWE_2_47_L                            (REG_MWE_2_BASE + 0x8e)
// h0048, bit: 5
/* FCC look up table window0_0 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_0 (0x90)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_0   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_0  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_0)
#define REG_MWE_2_48_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN0_0)
// h0048, bit: 13
/* FCC look up table window0_1 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_1 (0x90)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_1   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_1  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_1)
// h0049, bit: 5
/* FCC look up table window0_2 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_2 (0x92)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_2   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_2  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_2           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_2)
#define REG_MWE_2_49_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN0_2)
// h0049, bit: 13
/* FCC look up table window0_3 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_3 (0x92)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_3   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_3  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_3           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_3)
// h004a, bit: 5
/* FCC look up table window0_4 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_4 (0x94)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_4   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_4  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_4           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_4)
#define REG_MWE_2_4A_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN0_4)
// h004a, bit: 13
/* FCC look up table window0_5 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_5 (0x94)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_5   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_5  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_5           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_5)
// h004b, bit: 5
/* FCC look up table window0_6 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_6 (0x96)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_6   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_6  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_6           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_6)
#define REG_MWE_2_4B_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN0_6)
// h004b, bit: 13
/* FCC look up table window0_7 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_7 (0x96)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_7   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_7  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_7           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_7)
// h004c, bit: 5
/* FCC look up table window0_8 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_8 (0x98)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_8   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_8  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_8           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_8)
#define REG_MWE_2_4C_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN0_8)
// h004c, bit: 13
/* FCC look up table window0_9 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_9 (0x98)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_9   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_9  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_9           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_9)
// h004d, bit: 5
/* FCC look up table window0_10 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_10 (0x9a)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_10   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_10  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_10           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_10)
#define REG_MWE_2_4D_L                            (MWE_2_REG_FCC_ADP_Y_LUT_WIN0_10)
// h004d, bit: 13
/* FCC look up table window0_11 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_11 (0x9a)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_11   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_11  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_11           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_11)
// h004e, bit: 5
/* FCC look up table window0_12 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_12 (0x9c)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_12   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_12  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_12           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_12)
#define REG_MWE_2_4E_L                            (MWE_2_REG_FCC_ADP_Y_LUT_WIN0_12)
// h004e, bit: 13
/* FCC look up table window0_13 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_13 (0x9c)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_13   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_13  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_13           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_13)
// h004f, bit: 5
/* FCC look up table window0_14 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_14 (0x9e)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_14   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_14  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_14           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_14)
#define REG_MWE_2_4F_L                            (MWE_2_REG_FCC_ADP_Y_LUT_WIN0_14)
// h004f, bit: 13
/* FCC look up table window0_15 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win0_15 (0x9e)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win0_15   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win0_15  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN0_15           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win0_15)
// h0050, bit: 5
/* FCC look up table window1_0 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_0 (0xa0)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_0   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_0  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_0)
#define REG_MWE_2_50_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN1_0)
// h0050, bit: 13
/* FCC look up table window1_1 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_1 (0xa0)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_1   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_1  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_1)
// h0051, bit: 5
/* FCC look up table window1_2 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_2 (0xa2)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_2   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_2  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_2           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_2)
#define REG_MWE_2_51_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN1_2)
// h0051, bit: 13
/* FCC look up table window1_3 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_3 (0xa2)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_3   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_3  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_3           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_3)
// h0052, bit: 5
/* FCC look up table window1_4 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_4 (0xa4)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_4   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_4  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_4           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_4)
#define REG_MWE_2_52_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN1_4)
// h0052, bit: 13
/* FCC look up table window1_5 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_5 (0xa4)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_5   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_5  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_5           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_5)
// h0053, bit: 5
/* FCC look up table window1_6 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_6 (0xa6)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_6   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_6  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_6           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_6)
#define REG_MWE_2_53_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN1_6)
// h0053, bit: 13
/* FCC look up table window1_7 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_7 (0xa6)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_7   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_7  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_7           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_7)
// h0054, bit: 5
/* FCC look up table window1_8 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_8 (0xa8)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_8   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_8  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_8           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_8)
#define REG_MWE_2_54_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN1_8)
// h0054, bit: 13
/* FCC look up table window1_9 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_9 (0xa8)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_9   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_9  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_9           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_9)
// h0055, bit: 5
/* FCC look up table window1_10 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_10 (0xaa)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_10   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_10  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_10           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_10)
#define REG_MWE_2_55_L                            (MWE_2_REG_FCC_ADP_Y_LUT_WIN1_10)
// h0055, bit: 13
/* FCC look up table window1_11 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_11 (0xaa)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_11   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_11  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_11           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_11)
// h0056, bit: 5
/* FCC look up table window1_12 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_12 (0xac)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_12   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_12  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_12           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_12)
#define REG_MWE_2_56_L                            (MWE_2_REG_FCC_ADP_Y_LUT_WIN1_12)
// h0056, bit: 13
/* FCC look up table window1_13 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_13 (0xac)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_13   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_13  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_13           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_13)
// h0057, bit: 5
/* FCC look up table window1_14 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_14 (0xae)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_14   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_14  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_14           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_14)
#define REG_MWE_2_57_L                            (MWE_2_REG_FCC_ADP_Y_LUT_WIN1_14)
// h0057, bit: 13
/* FCC look up table window1_15 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win1_15 (0xae)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win1_15   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win1_15  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN1_15           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win1_15)
// h0058, bit: 5
/* FCC look up table window2_0 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_0 (0xb0)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_0   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_0  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_0)
#define REG_MWE_2_58_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN2_0)
// h0058, bit: 13
/* FCC look up table window2_1 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_1 (0xb0)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_1   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_1  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_1)
// h0059, bit: 5
/* FCC look up table window2_2 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_2 (0xb2)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_2   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_2  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_2           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_2)
#define REG_MWE_2_59_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN2_2)
// h0059, bit: 13
/* FCC look up table window2_3 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_3 (0xb2)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_3   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_3  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_3           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_3)
// h005a, bit: 5
/* FCC look up table window2_4 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_4 (0xb4)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_4   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_4  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_4           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_4)
#define REG_MWE_2_5A_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN2_4)
// h005a, bit: 13
/* FCC look up table window2_5 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_5 (0xb4)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_5   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_5  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_5           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_5)
// h005b, bit: 5
/* FCC look up table window2_6 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_6 (0xb6)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_6   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_6  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_6           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_6)
#define REG_MWE_2_5B_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN2_6)
// h005b, bit: 13
/* FCC look up table window2_7 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_7 (0xb6)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_7   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_7  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_7           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_7)
// h005c, bit: 5
/* FCC look up table window2_8 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_8 (0xb8)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_8   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_8  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_8           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_8)
#define REG_MWE_2_5C_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN2_8)
// h005c, bit: 13
/* FCC look up table window2_9 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_9 (0xb8)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_9   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_9  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_9           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_9)
// h005d, bit: 5
/* FCC look up table window2_10 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_10 (0xba)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_10   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_10  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_10           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_10)
#define REG_MWE_2_5D_L                            (MWE_2_REG_FCC_ADP_Y_LUT_WIN2_10)
// h005d, bit: 13
/* FCC look up table window2_11 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_11 (0xba)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_11   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_11  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_11           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_11)
// h005e, bit: 5
/* FCC look up table window2_12 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_12 (0xbc)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_12   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_12  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_12           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_12)
#define REG_MWE_2_5E_L                            (MWE_2_REG_FCC_ADP_Y_LUT_WIN2_12)
// h005e, bit: 13
/* FCC look up table window2_13 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_13 (0xbc)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_13   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_13  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_13           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_13)
// h005f, bit: 5
/* FCC look up table window2_14 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_14 (0xbe)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_14   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_14  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_14           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_14)
#define REG_MWE_2_5F_L                            (MWE_2_REG_FCC_ADP_Y_LUT_WIN2_14)
// h005f, bit: 13
/* FCC look up table window2_15 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win2_15 (0xbe)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win2_15   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win2_15  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN2_15           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win2_15)
// h0060, bit: 5
/* FCC look up table window3_0 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_0 (0xc0)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_0   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_0  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_0)
#define REG_MWE_2_60_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN3_0)
// h0060, bit: 13
/* FCC look up table window3_1 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_1 (0xc0)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_1   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_1  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_1)
// h0061, bit: 5
/* FCC look up table window3_2 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_2 (0xc2)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_2   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_2  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_2           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_2)
#define REG_MWE_2_61_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN3_2)
// h0061, bit: 13
/* FCC look up table window3_3 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_3 (0xc2)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_3   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_3  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_3           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_3)
// h0062, bit: 5
/* FCC look up table window3_4 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_4 (0xc4)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_4   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_4  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_4           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_4)
#define REG_MWE_2_62_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN3_4)
// h0062, bit: 13
/* FCC look up table window3_5 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_5 (0xc4)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_5   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_5  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_5           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_5)
// h0063, bit: 5
/* FCC look up table window3_6 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_6 (0xc6)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_6   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_6  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_6           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_6)
#define REG_MWE_2_63_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN3_6)
// h0063, bit: 13
/* FCC look up table window3_7 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_7 (0xc6)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_7   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_7  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_7           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_7)
// h0064, bit: 5
/* FCC look up table window3_8 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_8 (0xc8)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_8   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_8  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_8           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_8)
#define REG_MWE_2_64_L                           (MWE_2_REG_FCC_ADP_Y_LUT_WIN3_8)
// h0064, bit: 13
/* FCC look up table window3_9 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_9 (0xc8)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_9   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_9  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_9           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_9)
// h0065, bit: 5
/* FCC look up table window3_10 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_10 (0xca)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_10   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_10  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_10           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_10)
#define REG_MWE_2_65_L                            (MWE_2_REG_FCC_ADP_Y_LUT_WIN3_10)
// h0065, bit: 13
/* FCC look up table window3_11 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_11 (0xca)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_11   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_11  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_11           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_11)
// h0066, bit: 5
/* FCC look up table window3_12 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_12 (0xcc)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_12   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_12  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_12           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_12)
#define REG_MWE_2_66_L                            (MWE_2_REG_FCC_ADP_Y_LUT_WIN3_12)
// h0066, bit: 13
/* FCC look up table window3_13 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_13 (0xcc)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_13   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_13  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_13           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_13)
// h0067, bit: 5
/* FCC look up table window3_14 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_14 (0xce)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_14   (0x3f)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_14  (0)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_14           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_14)
#define REG_MWE_2_67_L                            (MWE_2_REG_FCC_ADP_Y_LUT_WIN3_14)
// h0067, bit: 13
/* FCC look up table window3_15 (x.xxxxx)*/
#define offset_of_mwe_2_reg_fcc_adp_y_lut_win3_15 (0xce)
#define mask_of_mwe_2_reg_fcc_adp_y_lut_win3_15   (0x3f00)
#define shift_of_mwe_2_reg_fcc_adp_y_lut_win3_15  (8)
#define MWE_2_REG_FCC_ADP_Y_LUT_WIN3_15           (REG_MWE_2_BASE + offset_of_mwe_2_reg_fcc_adp_y_lut_win3_15)
#define REG_MWE_2_68_L                            (REG_MWE_2_BASE + 0xd0)
#define REG_MWE_2_69_L                            (REG_MWE_2_BASE + 0xd2)
#define REG_MWE_2_6A_L                            (REG_MWE_2_BASE + 0xd4)
#define REG_MWE_2_6B_L                            (REG_MWE_2_BASE + 0xd6)
#define REG_MWE_2_6C_L                            (REG_MWE_2_BASE + 0xd8)
#define REG_MWE_2_6D_L                            (REG_MWE_2_BASE + 0xda)
#define REG_MWE_2_6E_L                            (REG_MWE_2_BASE + 0xdc)
#define REG_MWE_2_6F_L                            (REG_MWE_2_BASE + 0xde)
// bigger than 16 bit case allh0070
#define offset_of_mwe_2_reg_sat_total_8 (0xe0)
#define mask_of_mwe_2_reg_sat_total_8   (0xfffff)
#define shift_of_mwe_2_reg_sat_total_8  (0)
#define MWE_2_REG_SAT_TOTAL_8           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8)
// h0070, bit: 15
/* Histogram report section_8_1 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_0_0 (0xe0)
#define mask_of_mwe_2_reg_sat_total_8_0_0   (0xffff)
#define shift_of_mwe_2_reg_sat_total_8_0_0  (0)
#define MWE_2_REG_SAT_TOTAL_8_0_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_0_0)
#define REG_MWE_2_70_L                      (MWE_2_REG_SAT_TOTAL_8_0_0)
// h0071, bit: 3
/* Histogram report section_8_1 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_0_1 (0xe2)
#define mask_of_mwe_2_reg_sat_total_8_0_1   (0xf)
#define shift_of_mwe_2_reg_sat_total_8_0_1  (0)
#define MWE_2_REG_SAT_TOTAL_8_0_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_0_1)
#define REG_MWE_2_71_L                      (MWE_2_REG_SAT_TOTAL_8_0_1)
// bigger than 16 bit case allh0072
#define offset_of_mwe_2_reg_sat_total_8_1 (0xe4)
#define mask_of_mwe_2_reg_sat_total_8_1   (0xfffff)
#define shift_of_mwe_2_reg_sat_total_8_1  (0)
#define MWE_2_REG_SAT_TOTAL_8_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_1)
// h0072, bit: 15
/* Histogram report section_8_2 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_1_0 (0xe4)
#define mask_of_mwe_2_reg_sat_total_8_1_0   (0xffff)
#define shift_of_mwe_2_reg_sat_total_8_1_0  (0)
#define MWE_2_REG_SAT_TOTAL_8_1_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_1_0)
#define REG_MWE_2_72_L                      (MWE_2_REG_SAT_TOTAL_8_1_0)
// h0073, bit: 3
/* Histogram report section_8_2 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_1_1 (0xe6)
#define mask_of_mwe_2_reg_sat_total_8_1_1   (0xf)
#define shift_of_mwe_2_reg_sat_total_8_1_1  (0)
#define MWE_2_REG_SAT_TOTAL_8_1_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_1_1)
#define REG_MWE_2_73_L                      (MWE_2_REG_SAT_TOTAL_8_1_1)
// bigger than 16 bit case allh0074
#define offset_of_mwe_2_reg_sat_total_8_2 (0xe8)
#define mask_of_mwe_2_reg_sat_total_8_2   (0xfffff)
#define shift_of_mwe_2_reg_sat_total_8_2  (0)
#define MWE_2_REG_SAT_TOTAL_8_2           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_2)
// h0074, bit: 15
/* Histogram report section_8_3 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_2_0 (0xe8)
#define mask_of_mwe_2_reg_sat_total_8_2_0   (0xffff)
#define shift_of_mwe_2_reg_sat_total_8_2_0  (0)
#define MWE_2_REG_SAT_TOTAL_8_2_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_2_0)
#define REG_MWE_2_74_L                      (MWE_2_REG_SAT_TOTAL_8_2_0)
// h0075, bit: 3
/* Histogram report section_8_3 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_2_1 (0xea)
#define mask_of_mwe_2_reg_sat_total_8_2_1   (0xf)
#define shift_of_mwe_2_reg_sat_total_8_2_1  (0)
#define MWE_2_REG_SAT_TOTAL_8_2_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_2_1)
#define REG_MWE_2_75_L                      (MWE_2_REG_SAT_TOTAL_8_2_1)
// bigger than 16 bit case allh0076
#define offset_of_mwe_2_reg_sat_total_8_3 (0xec)
#define mask_of_mwe_2_reg_sat_total_8_3   (0xfffff)
#define shift_of_mwe_2_reg_sat_total_8_3  (0)
#define MWE_2_REG_SAT_TOTAL_8_3           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_3)
// h0076, bit: 15
/* Histogram report section_8_4 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_3_0 (0xec)
#define mask_of_mwe_2_reg_sat_total_8_3_0   (0xffff)
#define shift_of_mwe_2_reg_sat_total_8_3_0  (0)
#define MWE_2_REG_SAT_TOTAL_8_3_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_3_0)
#define REG_MWE_2_76_L                      (MWE_2_REG_SAT_TOTAL_8_3_0)
// h0077, bit: 3
/* Histogram report section_8_4 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_3_1 (0xee)
#define mask_of_mwe_2_reg_sat_total_8_3_1   (0xf)
#define shift_of_mwe_2_reg_sat_total_8_3_1  (0)
#define MWE_2_REG_SAT_TOTAL_8_3_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_3_1)
#define REG_MWE_2_77_L                      (MWE_2_REG_SAT_TOTAL_8_3_1)
// bigger than 16 bit case allh0078
#define offset_of_mwe_2_reg_sat_total_8_4 (0xf0)
#define mask_of_mwe_2_reg_sat_total_8_4   (0xfffff)
#define shift_of_mwe_2_reg_sat_total_8_4  (0)
#define MWE_2_REG_SAT_TOTAL_8_4           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_4)
// h0078, bit: 15
/* Histogram report section_8_5 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_4_0 (0xf0)
#define mask_of_mwe_2_reg_sat_total_8_4_0   (0xffff)
#define shift_of_mwe_2_reg_sat_total_8_4_0  (0)
#define MWE_2_REG_SAT_TOTAL_8_4_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_4_0)
#define REG_MWE_2_78_L                      (MWE_2_REG_SAT_TOTAL_8_4_0)
// h0079, bit: 3
/* Histogram report section_8_5 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_4_1 (0xf2)
#define mask_of_mwe_2_reg_sat_total_8_4_1   (0xf)
#define shift_of_mwe_2_reg_sat_total_8_4_1  (0)
#define MWE_2_REG_SAT_TOTAL_8_4_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_4_1)
#define REG_MWE_2_79_L                      (MWE_2_REG_SAT_TOTAL_8_4_1)
// bigger than 16 bit case allh007a
#define offset_of_mwe_2_reg_sat_total_8_5 (0xf4)
#define mask_of_mwe_2_reg_sat_total_8_5   (0xfffff)
#define shift_of_mwe_2_reg_sat_total_8_5  (0)
#define MWE_2_REG_SAT_TOTAL_8_5           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_5)
// h007a, bit: 15
/* Histogram report section_8_6 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_5_0 (0xf4)
#define mask_of_mwe_2_reg_sat_total_8_5_0   (0xffff)
#define shift_of_mwe_2_reg_sat_total_8_5_0  (0)
#define MWE_2_REG_SAT_TOTAL_8_5_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_5_0)
#define REG_MWE_2_7A_L                      (MWE_2_REG_SAT_TOTAL_8_5_0)
// h007b, bit: 3
/* Histogram report section_8_6 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_5_1 (0xf6)
#define mask_of_mwe_2_reg_sat_total_8_5_1   (0xf)
#define shift_of_mwe_2_reg_sat_total_8_5_1  (0)
#define MWE_2_REG_SAT_TOTAL_8_5_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_5_1)
#define REG_MWE_2_7B_L                      (MWE_2_REG_SAT_TOTAL_8_5_1)
// bigger than 16 bit case allh007c
#define offset_of_mwe_2_reg_sat_total_8_6 (0xf8)
#define mask_of_mwe_2_reg_sat_total_8_6   (0xfffff)
#define shift_of_mwe_2_reg_sat_total_8_6  (0)
#define MWE_2_REG_SAT_TOTAL_8_6           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_6)
// h007c, bit: 15
/* Histogram report section_8_7 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_6_0 (0xf8)
#define mask_of_mwe_2_reg_sat_total_8_6_0   (0xffff)
#define shift_of_mwe_2_reg_sat_total_8_6_0  (0)
#define MWE_2_REG_SAT_TOTAL_8_6_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_6_0)
#define REG_MWE_2_7C_L                      (MWE_2_REG_SAT_TOTAL_8_6_0)
// h007d, bit: 3
/* Histogram report section_8_7 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_6_1 (0xfa)
#define mask_of_mwe_2_reg_sat_total_8_6_1   (0xf)
#define shift_of_mwe_2_reg_sat_total_8_6_1  (0)
#define MWE_2_REG_SAT_TOTAL_8_6_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_6_1)
#define REG_MWE_2_7D_L                      (MWE_2_REG_SAT_TOTAL_8_6_1)
// bigger than 16 bit case allh007e
#define offset_of_mwe_2_reg_sat_total_8_7 (0xfc)
#define mask_of_mwe_2_reg_sat_total_8_7   (0xfffff)
#define shift_of_mwe_2_reg_sat_total_8_7  (0)
#define MWE_2_REG_SAT_TOTAL_8_7           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_7)
// h007e, bit: 15
/* Histogram report section_8_8 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_7_0 (0xfc)
#define mask_of_mwe_2_reg_sat_total_8_7_0   (0xffff)
#define shift_of_mwe_2_reg_sat_total_8_7_0  (0)
#define MWE_2_REG_SAT_TOTAL_8_7_0           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_7_0)
#define REG_MWE_2_7E_L                      (MWE_2_REG_SAT_TOTAL_8_7_0)
// h007f, bit: 3
/* Histogram report section_8_8 for saturation*/
#define offset_of_mwe_2_reg_sat_total_8_7_1 (0xfe)
#define mask_of_mwe_2_reg_sat_total_8_7_1   (0xf)
#define shift_of_mwe_2_reg_sat_total_8_7_1  (0)
#define MWE_2_REG_SAT_TOTAL_8_7_1           (REG_MWE_2_BASE + offset_of_mwe_2_reg_sat_total_8_7_1)
#define REG_MWE_2_7F_L                      (MWE_2_REG_SAT_TOTAL_8_7_1)
#define REG_VPS_2_00_L                      (REG_VPS_2_BASE + 0x0)
#define REG_VPS_2_01_L                      (REG_VPS_2_BASE + 0x2)
#define REG_VPS_2_02_L                      (REG_VPS_2_BASE + 0x4)
#define REG_VPS_2_03_L                      (REG_VPS_2_BASE + 0x6)
#define REG_VPS_2_04_L                      (REG_VPS_2_BASE + 0x8)
#define REG_VPS_2_05_L                      (REG_VPS_2_BASE + 0xa)
#define REG_VPS_2_06_L                      (REG_VPS_2_BASE + 0xc)
#define REG_VPS_2_07_L                      (REG_VPS_2_BASE + 0xe)
#define REG_VPS_2_08_L                      (REG_VPS_2_BASE + 0x10)
#define REG_VPS_2_09_L                      (REG_VPS_2_BASE + 0x12)
#define REG_VPS_2_0A_L                      (REG_VPS_2_BASE + 0x14)
// h000b, bit: 0
/* peaking ac add in yee ,not in vip*/
#define offset_of_vps_2_reg_peaking_ac_yee_mode (0x16)
#define mask_of_vps_2_reg_peaking_ac_yee_mode   (0x1)
#define shift_of_vps_2_reg_peaking_ac_yee_mode  (0)
#define VPS_2_REG_PEAKING_AC_YEE_MODE           (REG_VPS_2_BASE + offset_of_vps_2_reg_peaking_ac_yee_mode)
#define REG_VPS_2_0B_L                          (VPS_2_REG_PEAKING_AC_YEE_MODE)
// h000b, bit: 14
/* Main window band6 filter select
#0 : filter diff
#1 : filter sum*/
#define offset_of_vps_2_reg_main_band6_dia_filter_sel (0x16)
#define mask_of_vps_2_reg_main_band6_dia_filter_sel   (0x4000)
#define shift_of_vps_2_reg_main_band6_dia_filter_sel  (14)
#define VPS_2_REG_MAIN_BAND6_DIA_FILTER_SEL           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band6_dia_filter_sel)
// h000c, bit: 0
/* Main window band9 peaking enable*/
#define offset_of_vps_2_reg_main_band9_peaking_en (0x18)
#define mask_of_vps_2_reg_main_band9_peaking_en   (0x1)
#define shift_of_vps_2_reg_main_band9_peaking_en  (0)
#define VPS_2_REG_MAIN_BAND9_PEAKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band9_peaking_en)
#define REG_VPS_2_0C_L                            (VPS_2_REG_MAIN_BAND9_PEAKING_EN)
// h000c, bit: 1
/* Main window band10 peaking enable*/
#define offset_of_vps_2_reg_main_band10_peaking_en (0x18)
#define mask_of_vps_2_reg_main_band10_peaking_en   (0x2)
#define shift_of_vps_2_reg_main_band10_peaking_en  (1)
#define VPS_2_REG_MAIN_BAND10_PEAKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band10_peaking_en)
// h000c, bit: 2
/* Main window band11 peaking enable*/
#define offset_of_vps_2_reg_main_band11_peaking_en (0x18)
#define mask_of_vps_2_reg_main_band11_peaking_en   (0x4)
#define shift_of_vps_2_reg_main_band11_peaking_en  (2)
#define VPS_2_REG_MAIN_BAND11_PEAKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band11_peaking_en)
// h000c, bit: 3
/* Main window band12 peaking enable*/
#define offset_of_vps_2_reg_main_band12_peaking_en (0x18)
#define mask_of_vps_2_reg_main_band12_peaking_en   (0x8)
#define shift_of_vps_2_reg_main_band12_peaking_en  (3)
#define VPS_2_REG_MAIN_BAND12_PEAKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band12_peaking_en)
// h000c, bit: 8
/* Main window band9 differential adaptive enable*/
#define offset_of_vps_2_reg_main_band9_adaptive_en (0x18)
#define mask_of_vps_2_reg_main_band9_adaptive_en   (0x100)
#define shift_of_vps_2_reg_main_band9_adaptive_en  (8)
#define VPS_2_REG_MAIN_BAND9_ADAPTIVE_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band9_adaptive_en)
// h000c, bit: 9
/* Main window band10 differential adaptive enable*/
#define offset_of_vps_2_reg_main_band10_adaptive_en (0x18)
#define mask_of_vps_2_reg_main_band10_adaptive_en   (0x200)
#define shift_of_vps_2_reg_main_band10_adaptive_en  (9)
#define VPS_2_REG_MAIN_BAND10_ADAPTIVE_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band10_adaptive_en)
// h000c, bit: 10
/* Main window band11 differential adaptive enable*/
#define offset_of_vps_2_reg_main_band11_adaptive_en (0x18)
#define mask_of_vps_2_reg_main_band11_adaptive_en   (0x400)
#define shift_of_vps_2_reg_main_band11_adaptive_en  (10)
#define VPS_2_REG_MAIN_BAND11_ADAPTIVE_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band11_adaptive_en)
// h000c, bit: 11
/* Main window band12 differential adaptive enable*/
#define offset_of_vps_2_reg_main_band12_adaptive_en (0x18)
#define mask_of_vps_2_reg_main_band12_adaptive_en   (0x800)
#define shift_of_vps_2_reg_main_band12_adaptive_en  (11)
#define VPS_2_REG_MAIN_BAND12_ADAPTIVE_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band12_adaptive_en)
#define REG_VPS_2_0D_L                              (REG_VPS_2_BASE + 0x1a)
// h000e, bit: 1
/* Main window band9 coefficient step*/
#define offset_of_vps_2_reg_main_band9_coef_step (0x1c)
#define mask_of_vps_2_reg_main_band9_coef_step   (0x3)
#define shift_of_vps_2_reg_main_band9_coef_step  (0)
#define VPS_2_REG_MAIN_BAND9_COEF_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band9_coef_step)
#define REG_VPS_2_0E_L                           (VPS_2_REG_MAIN_BAND9_COEF_STEP)
// h000e, bit: 3
/* Main window band10 coefficient step*/
#define offset_of_vps_2_reg_main_band10_coef_step (0x1c)
#define mask_of_vps_2_reg_main_band10_coef_step   (0xc)
#define shift_of_vps_2_reg_main_band10_coef_step  (2)
#define VPS_2_REG_MAIN_BAND10_COEF_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band10_coef_step)
// h000e, bit: 5
/* Main window band11 coefficient step*/
#define offset_of_vps_2_reg_main_band11_coef_step (0x1c)
#define mask_of_vps_2_reg_main_band11_coef_step   (0x30)
#define shift_of_vps_2_reg_main_band11_coef_step  (4)
#define VPS_2_REG_MAIN_BAND11_COEF_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band11_coef_step)
// h000e, bit: 7
/* Main window band12 coefficient step*/
#define offset_of_vps_2_reg_main_band12_coef_step (0x1c)
#define mask_of_vps_2_reg_main_band12_coef_step   (0xc0)
#define shift_of_vps_2_reg_main_band12_coef_step  (6)
#define VPS_2_REG_MAIN_BAND12_COEF_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band12_coef_step)
#define REG_VPS_2_0F_L                            (REG_VPS_2_BASE + 0x1e)
// h0010, bit: 0
/* Main window 2D peaking enable*/
#define offset_of_vps_2_reg_main_post_peaking_en (0x20)
#define mask_of_vps_2_reg_main_post_peaking_en   (0x1)
#define shift_of_vps_2_reg_main_post_peaking_en  (0)
#define VPS_2_REG_MAIN_POST_PEAKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_post_peaking_en)
#define REG_VPS_2_10_L                           (VPS_2_REG_MAIN_POST_PEAKING_EN)
// h0010, bit: 1
/* H Low pass filter dither bit enable     */
#define offset_of_vps_2_reg_hlpf_dither_en (0x20)
#define mask_of_vps_2_reg_hlpf_dither_en   (0x2)
#define shift_of_vps_2_reg_hlpf_dither_en  (1)
#define VPS_2_REG_HLPF_DITHER_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_hlpf_dither_en)
// h0010, bit: 2
/* Main window show edge mode*/
#define offset_of_vps_2_reg_main_show_edge_mode (0x20)
#define mask_of_vps_2_reg_main_show_edge_mode   (0x4)
#define shift_of_vps_2_reg_main_show_edge_mode  (2)
#define VPS_2_REG_MAIN_SHOW_EDGE_MODE           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_show_edge_mode)
// h0010, bit: 6
/* Main window horizontal Y low pass filter coefficient*/
#define offset_of_vps_2_reg_main_y_lpf_coef (0x20)
#define mask_of_vps_2_reg_main_y_lpf_coef   (0x70)
#define shift_of_vps_2_reg_main_y_lpf_coef  (4)
#define VPS_2_REG_MAIN_Y_LPF_COEF           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_y_lpf_coef)
// h0010, bit: 7
/* 2D peaking line-buffer sram active*/
#define offset_of_vps_2_reg_vps_sram_act (0x20)
#define mask_of_vps_2_reg_vps_sram_act   (0x80)
#define shift_of_vps_2_reg_vps_sram_act  (7)
#define VPS_2_REG_VPS_SRAM_ACT           (REG_VPS_2_BASE + offset_of_vps_2_reg_vps_sram_act)
// h0010, bit: 8
/* Main window band1 peaking enable*/
#define offset_of_vps_2_reg_main_band1_peaking_en (0x20)
#define mask_of_vps_2_reg_main_band1_peaking_en   (0x100)
#define shift_of_vps_2_reg_main_band1_peaking_en  (8)
#define VPS_2_REG_MAIN_BAND1_PEAKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band1_peaking_en)
// h0010, bit: 9
/* Main window band2 peaking enable*/
#define offset_of_vps_2_reg_main_band2_peaking_en (0x20)
#define mask_of_vps_2_reg_main_band2_peaking_en   (0x200)
#define shift_of_vps_2_reg_main_band2_peaking_en  (9)
#define VPS_2_REG_MAIN_BAND2_PEAKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band2_peaking_en)
// h0010, bit: 10
/* Main window band3 peaking enable*/
#define offset_of_vps_2_reg_main_band3_peaking_en (0x20)
#define mask_of_vps_2_reg_main_band3_peaking_en   (0x400)
#define shift_of_vps_2_reg_main_band3_peaking_en  (10)
#define VPS_2_REG_MAIN_BAND3_PEAKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band3_peaking_en)
// h0010, bit: 11
/* Main window band4 peaking enable*/
#define offset_of_vps_2_reg_main_band4_peaking_en (0x20)
#define mask_of_vps_2_reg_main_band4_peaking_en   (0x800)
#define shift_of_vps_2_reg_main_band4_peaking_en  (11)
#define VPS_2_REG_MAIN_BAND4_PEAKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band4_peaking_en)
// h0010, bit: 12
/* Main window band5 peaking enable*/
#define offset_of_vps_2_reg_main_band5_peaking_en (0x20)
#define mask_of_vps_2_reg_main_band5_peaking_en   (0x1000)
#define shift_of_vps_2_reg_main_band5_peaking_en  (12)
#define VPS_2_REG_MAIN_BAND5_PEAKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band5_peaking_en)
// h0010, bit: 13
/* Main window band6 peaking enable*/
#define offset_of_vps_2_reg_main_band6_peaking_en (0x20)
#define mask_of_vps_2_reg_main_band6_peaking_en   (0x2000)
#define shift_of_vps_2_reg_main_band6_peaking_en  (13)
#define VPS_2_REG_MAIN_BAND6_PEAKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band6_peaking_en)
// h0010, bit: 14
/* Main window band7 peaking enable*/
#define offset_of_vps_2_reg_main_band7_peaking_en (0x20)
#define mask_of_vps_2_reg_main_band7_peaking_en   (0x4000)
#define shift_of_vps_2_reg_main_band7_peaking_en  (14)
#define VPS_2_REG_MAIN_BAND7_PEAKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band7_peaking_en)
// h0010, bit: 15
/* Main window band8 peaking enable*/
#define offset_of_vps_2_reg_main_band8_peaking_en (0x20)
#define mask_of_vps_2_reg_main_band8_peaking_en   (0x8000)
#define shift_of_vps_2_reg_main_band8_peaking_en  (15)
#define VPS_2_REG_MAIN_BAND8_PEAKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band8_peaking_en)
// h0011, bit: 1
/* Main window band1 coefficient step*/
#define offset_of_vps_2_reg_main_band1_coef_step (0x22)
#define mask_of_vps_2_reg_main_band1_coef_step   (0x3)
#define shift_of_vps_2_reg_main_band1_coef_step  (0)
#define VPS_2_REG_MAIN_BAND1_COEF_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band1_coef_step)
#define REG_VPS_2_11_L                           (VPS_2_REG_MAIN_BAND1_COEF_STEP)
// h0011, bit: 3
/* Main window band2 coefficient step*/
#define offset_of_vps_2_reg_main_band2_coef_step (0x22)
#define mask_of_vps_2_reg_main_band2_coef_step   (0xc)
#define shift_of_vps_2_reg_main_band2_coef_step  (2)
#define VPS_2_REG_MAIN_BAND2_COEF_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band2_coef_step)
// h0011, bit: 5
/* Main window band3 coefficient step*/
#define offset_of_vps_2_reg_main_band3_coef_step (0x22)
#define mask_of_vps_2_reg_main_band3_coef_step   (0x30)
#define shift_of_vps_2_reg_main_band3_coef_step  (4)
#define VPS_2_REG_MAIN_BAND3_COEF_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band3_coef_step)
// h0011, bit: 7
/* Main window band4 coefficient step*/
#define offset_of_vps_2_reg_main_band4_coef_step (0x22)
#define mask_of_vps_2_reg_main_band4_coef_step   (0xc0)
#define shift_of_vps_2_reg_main_band4_coef_step  (6)
#define VPS_2_REG_MAIN_BAND4_COEF_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band4_coef_step)
// h0011, bit: 9
/* Main window band5 coefficient step*/
#define offset_of_vps_2_reg_main_band5_coef_step (0x22)
#define mask_of_vps_2_reg_main_band5_coef_step   (0x300)
#define shift_of_vps_2_reg_main_band5_coef_step  (8)
#define VPS_2_REG_MAIN_BAND5_COEF_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band5_coef_step)
// h0011, bit: 11
/* Main window band6 coefficient step*/
#define offset_of_vps_2_reg_main_band6_coef_step (0x22)
#define mask_of_vps_2_reg_main_band6_coef_step   (0xc00)
#define shift_of_vps_2_reg_main_band6_coef_step  (10)
#define VPS_2_REG_MAIN_BAND6_COEF_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band6_coef_step)
// h0011, bit: 13
/* Main window band7 coefficient step*/
#define offset_of_vps_2_reg_main_band7_coef_step (0x22)
#define mask_of_vps_2_reg_main_band7_coef_step   (0x3000)
#define shift_of_vps_2_reg_main_band7_coef_step  (12)
#define VPS_2_REG_MAIN_BAND7_COEF_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band7_coef_step)
// h0011, bit: 15
/* Main window band8 coefficient step*/
#define offset_of_vps_2_reg_main_band8_coef_step (0x22)
#define mask_of_vps_2_reg_main_band8_coef_step   (0xc000)
#define shift_of_vps_2_reg_main_band8_coef_step  (14)
#define VPS_2_REG_MAIN_BAND8_COEF_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band8_coef_step)
// h0012, bit: 5
/* Main window vertical Y noise-masking gain*/
#define offset_of_vps_2_reg_main_v_noise_mask_gain (0x24)
#define mask_of_vps_2_reg_main_v_noise_mask_gain   (0x3f)
#define shift_of_vps_2_reg_main_v_noise_mask_gain  (0)
#define VPS_2_REG_MAIN_V_NOISE_MASK_GAIN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_v_noise_mask_gain)
#define REG_VPS_2_12_L                             (VPS_2_REG_MAIN_V_NOISE_MASK_GAIN)
// h0012, bit: 6
/* reserved                     */
#define offset_of_vps_2_reg_main_v_resever1 (0x24)
#define mask_of_vps_2_reg_main_v_resever1   (0x40)
#define shift_of_vps_2_reg_main_v_resever1  (6)
#define VPS_2_REG_MAIN_V_RESEVER1           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_v_resever1)
// h0012, bit: 7
/* Main window vertical Y noise-masking enable*/
#define offset_of_vps_2_reg_main_v_noise_masking_en (0x24)
#define mask_of_vps_2_reg_main_v_noise_masking_en   (0x80)
#define shift_of_vps_2_reg_main_v_noise_masking_en  (7)
#define VPS_2_REG_MAIN_V_NOISE_MASKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_v_noise_masking_en)
// h0012, bit: 10
/* Main window vertical up-dwon pixel Y LPF coefficient*/
#define offset_of_vps_2_reg_main_v_lpf_coef_1 (0x24)
#define mask_of_vps_2_reg_main_v_lpf_coef_1   (0x700)
#define shift_of_vps_2_reg_main_v_lpf_coef_1  (8)
#define VPS_2_REG_MAIN_V_LPF_COEF_1           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_v_lpf_coef_1)
// h0012, bit: 14
/* Main window vertical central pixel Y LPF coefficient*/
#define offset_of_vps_2_reg_main_v_lpf_coef_2 (0x24)
#define mask_of_vps_2_reg_main_v_lpf_coef_2   (0x7000)
#define shift_of_vps_2_reg_main_v_lpf_coef_2  (12)
#define VPS_2_REG_MAIN_V_LPF_COEF_2           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_v_lpf_coef_2)
// h0012, bit: 15
/* Vertical Low pass filter dither bit enable*/
#define offset_of_vps_2_reg_vlpf_dither_en (0x24)
#define mask_of_vps_2_reg_vlpf_dither_en   (0x8000)
#define shift_of_vps_2_reg_vlpf_dither_en  (15)
#define VPS_2_REG_VLPF_DITHER_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_vlpf_dither_en)
// h0013, bit: 3
/* Main window coring threshold 1*/
#define offset_of_vps_2_reg_main_coring_thrd_1 (0x26)
#define mask_of_vps_2_reg_main_coring_thrd_1   (0xf)
#define shift_of_vps_2_reg_main_coring_thrd_1  (0)
#define VPS_2_REG_MAIN_CORING_THRD_1           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_coring_thrd_1)
#define REG_VPS_2_13_L                         (VPS_2_REG_MAIN_CORING_THRD_1)
// h0013, bit: 7
/* Main window coring threshold 2*/
#define offset_of_vps_2_reg_main_coring_thrd_2 (0x26)
#define mask_of_vps_2_reg_main_coring_thrd_2   (0xf0)
#define shift_of_vps_2_reg_main_coring_thrd_2  (4)
#define VPS_2_REG_MAIN_CORING_THRD_2           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_coring_thrd_2)
// h0013, bit: 14
/* Main window user sharpness adjust (Sxx.xxxx)*/
#define offset_of_vps_2_reg_main_osd_sharpness_ctrl (0x26)
#define mask_of_vps_2_reg_main_osd_sharpness_ctrl   (0x7f00)
#define shift_of_vps_2_reg_main_osd_sharpness_ctrl  (8)
#define VPS_2_REG_MAIN_OSD_SHARPNESS_CTRL           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_osd_sharpness_ctrl)
#define REG_VPS_2_14_L                              (REG_VPS_2_BASE + 0x28)
#define REG_VPS_2_15_L                              (REG_VPS_2_BASE + 0x2a)
#define REG_VPS_2_16_L                              (REG_VPS_2_BASE + 0x2c)
#define REG_VPS_2_17_L                              (REG_VPS_2_BASE + 0x2e)
// h0018, bit: 6
/* Main window band1 coefficient (Sxxx.xxx)*/
#define offset_of_vps_2_reg_main_band1_coef (0x30)
#define mask_of_vps_2_reg_main_band1_coef   (0x7f)
#define shift_of_vps_2_reg_main_band1_coef  (0)
#define VPS_2_REG_MAIN_BAND1_COEF           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band1_coef)
#define REG_VPS_2_18_L                      (VPS_2_REG_MAIN_BAND1_COEF)
// h0018, bit: 14
/* Main window band2 coefficient (Sxxx.xxx)*/
#define offset_of_vps_2_reg_main_band2_coef (0x30)
#define mask_of_vps_2_reg_main_band2_coef   (0x7f00)
#define shift_of_vps_2_reg_main_band2_coef  (8)
#define VPS_2_REG_MAIN_BAND2_COEF           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band2_coef)
// h0019, bit: 6
/* Main window band3 coefficient (Sxxx.xxx)*/
#define offset_of_vps_2_reg_main_band3_coef (0x32)
#define mask_of_vps_2_reg_main_band3_coef   (0x7f)
#define shift_of_vps_2_reg_main_band3_coef  (0)
#define VPS_2_REG_MAIN_BAND3_COEF           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band3_coef)
#define REG_VPS_2_19_L                      (VPS_2_REG_MAIN_BAND3_COEF)
// h0019, bit: 14
/* Main window band4 coefficient (Sxxx.xxx)*/
#define offset_of_vps_2_reg_main_band4_coef (0x32)
#define mask_of_vps_2_reg_main_band4_coef   (0x7f00)
#define shift_of_vps_2_reg_main_band4_coef  (8)
#define VPS_2_REG_MAIN_BAND4_COEF           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band4_coef)
// h001a, bit: 6
/* Main window band5 coefficient (Sxxx.xxx)*/
#define offset_of_vps_2_reg_main_band5_coef (0x34)
#define mask_of_vps_2_reg_main_band5_coef   (0x7f)
#define shift_of_vps_2_reg_main_band5_coef  (0)
#define VPS_2_REG_MAIN_BAND5_COEF           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band5_coef)
#define REG_VPS_2_1A_L                      (VPS_2_REG_MAIN_BAND5_COEF)
// h001a, bit: 14
/* Main window band6 coefficient (Sxxx.xxx)*/
#define offset_of_vps_2_reg_main_band6_coef (0x34)
#define mask_of_vps_2_reg_main_band6_coef   (0x7f00)
#define shift_of_vps_2_reg_main_band6_coef  (8)
#define VPS_2_REG_MAIN_BAND6_COEF           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band6_coef)
// h001b, bit: 6
/* Main window band7 coefficient (Sxxx.xxx)*/
#define offset_of_vps_2_reg_main_band7_coef (0x36)
#define mask_of_vps_2_reg_main_band7_coef   (0x7f)
#define shift_of_vps_2_reg_main_band7_coef  (0)
#define VPS_2_REG_MAIN_BAND7_COEF           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band7_coef)
#define REG_VPS_2_1B_L                      (VPS_2_REG_MAIN_BAND7_COEF)
// h001b, bit: 14
/* Main window band8 coefficient (Sxxx.xxx)*/
#define offset_of_vps_2_reg_main_band8_coef (0x36)
#define mask_of_vps_2_reg_main_band8_coef   (0x7f00)
#define shift_of_vps_2_reg_main_band8_coef  (8)
#define VPS_2_REG_MAIN_BAND8_COEF           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band8_coef)
// h001c, bit: 3
/* Main window peaking term1 select*/
#define offset_of_vps_2_reg_main_peaking_term1_select (0x38)
#define mask_of_vps_2_reg_main_peaking_term1_select   (0xf)
#define shift_of_vps_2_reg_main_peaking_term1_select  (0)
#define VPS_2_REG_MAIN_PEAKING_TERM1_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term1_select)
#define REG_VPS_2_1C_L                                (VPS_2_REG_MAIN_PEAKING_TERM1_SELECT)
// h001c, bit: 7
/* Main window peaking term2 select*/
#define offset_of_vps_2_reg_main_peaking_term2_select (0x38)
#define mask_of_vps_2_reg_main_peaking_term2_select   (0xf0)
#define shift_of_vps_2_reg_main_peaking_term2_select  (4)
#define VPS_2_REG_MAIN_PEAKING_TERM2_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term2_select)
// h001c, bit: 11
/* Main window peaking term3 select*/
#define offset_of_vps_2_reg_main_peaking_term3_select (0x38)
#define mask_of_vps_2_reg_main_peaking_term3_select   (0xf00)
#define shift_of_vps_2_reg_main_peaking_term3_select  (8)
#define VPS_2_REG_MAIN_PEAKING_TERM3_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term3_select)
// h001c, bit: 15
/* Main window peaking term4 select*/
#define offset_of_vps_2_reg_main_peaking_term4_select (0x38)
#define mask_of_vps_2_reg_main_peaking_term4_select   (0xf000)
#define shift_of_vps_2_reg_main_peaking_term4_select  (12)
#define VPS_2_REG_MAIN_PEAKING_TERM4_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term4_select)
// h001d, bit: 3
/* Main window peaking term5 select*/
#define offset_of_vps_2_reg_main_peaking_term5_select (0x3a)
#define mask_of_vps_2_reg_main_peaking_term5_select   (0xf)
#define shift_of_vps_2_reg_main_peaking_term5_select  (0)
#define VPS_2_REG_MAIN_PEAKING_TERM5_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term5_select)
#define REG_VPS_2_1D_L                                (VPS_2_REG_MAIN_PEAKING_TERM5_SELECT)
// h001d, bit: 7
/* Main window peaking term6 select*/
#define offset_of_vps_2_reg_main_peaking_term6_select (0x3a)
#define mask_of_vps_2_reg_main_peaking_term6_select   (0xf0)
#define shift_of_vps_2_reg_main_peaking_term6_select  (4)
#define VPS_2_REG_MAIN_PEAKING_TERM6_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term6_select)
// h001d, bit: 11
/* Main window peaking term7 select*/
#define offset_of_vps_2_reg_main_peaking_term7_select (0x3a)
#define mask_of_vps_2_reg_main_peaking_term7_select   (0xf00)
#define shift_of_vps_2_reg_main_peaking_term7_select  (8)
#define VPS_2_REG_MAIN_PEAKING_TERM7_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term7_select)
// h001d, bit: 15
/* Main window peaking term8 select*/
#define offset_of_vps_2_reg_main_peaking_term8_select (0x3a)
#define mask_of_vps_2_reg_main_peaking_term8_select   (0xf000)
#define shift_of_vps_2_reg_main_peaking_term8_select  (12)
#define VPS_2_REG_MAIN_PEAKING_TERM8_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term8_select)
// h001e, bit: 3
/* Main window peaking term9 select*/
#define offset_of_vps_2_reg_main_peaking_term9_select (0x3c)
#define mask_of_vps_2_reg_main_peaking_term9_select   (0xf)
#define shift_of_vps_2_reg_main_peaking_term9_select  (0)
#define VPS_2_REG_MAIN_PEAKING_TERM9_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term9_select)
#define REG_VPS_2_1E_L                                (VPS_2_REG_MAIN_PEAKING_TERM9_SELECT)
// h001e, bit: 7
/* Main window peaking term10 select*/
#define offset_of_vps_2_reg_main_peaking_term10_select (0x3c)
#define mask_of_vps_2_reg_main_peaking_term10_select   (0xf0)
#define shift_of_vps_2_reg_main_peaking_term10_select  (4)
#define VPS_2_REG_MAIN_PEAKING_TERM10_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term10_select)
// h001e, bit: 11
/* Main window peaking term11 select*/
#define offset_of_vps_2_reg_main_peaking_term11_select (0x3c)
#define mask_of_vps_2_reg_main_peaking_term11_select   (0xf00)
#define shift_of_vps_2_reg_main_peaking_term11_select  (8)
#define VPS_2_REG_MAIN_PEAKING_TERM11_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term11_select)
// h001e, bit: 15
/* Main window peaking term12 select*/
#define offset_of_vps_2_reg_main_peaking_term12_select (0x3c)
#define mask_of_vps_2_reg_main_peaking_term12_select   (0xf000)
#define shift_of_vps_2_reg_main_peaking_term12_select  (12)
#define VPS_2_REG_MAIN_PEAKING_TERM12_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term12_select)
// h001f, bit: 3
/* Main window peaking term13 select*/
#define offset_of_vps_2_reg_main_peaking_term13_select (0x3e)
#define mask_of_vps_2_reg_main_peaking_term13_select   (0xf)
#define shift_of_vps_2_reg_main_peaking_term13_select  (0)
#define VPS_2_REG_MAIN_PEAKING_TERM13_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term13_select)
#define REG_VPS_2_1F_L                                 (VPS_2_REG_MAIN_PEAKING_TERM13_SELECT)
// h001f, bit: 7
/* Main window peaking term14 select*/
#define offset_of_vps_2_reg_main_peaking_term14_select (0x3e)
#define mask_of_vps_2_reg_main_peaking_term14_select   (0xf0)
#define shift_of_vps_2_reg_main_peaking_term14_select  (4)
#define VPS_2_REG_MAIN_PEAKING_TERM14_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term14_select)
// h001f, bit: 11
/* Main window peaking term15 select*/
#define offset_of_vps_2_reg_main_peaking_term15_select (0x3e)
#define mask_of_vps_2_reg_main_peaking_term15_select   (0xf00)
#define shift_of_vps_2_reg_main_peaking_term15_select  (8)
#define VPS_2_REG_MAIN_PEAKING_TERM15_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term15_select)
// h001f, bit: 15
/* Main window peaking term16 select*/
#define offset_of_vps_2_reg_main_peaking_term16_select (0x3e)
#define mask_of_vps_2_reg_main_peaking_term16_select   (0xf000)
#define shift_of_vps_2_reg_main_peaking_term16_select  (12)
#define VPS_2_REG_MAIN_PEAKING_TERM16_SELECT           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_peaking_term16_select)
// h0020, bit: 7
/* window band1 overshoot limit*/
#define offset_of_vps_2_reg_band1_overshoot_limit (0x40)
#define mask_of_vps_2_reg_band1_overshoot_limit   (0xff)
#define shift_of_vps_2_reg_band1_overshoot_limit  (0)
#define VPS_2_REG_BAND1_OVERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band1_overshoot_limit)
#define REG_VPS_2_20_L                            (VPS_2_REG_BAND1_OVERSHOOT_LIMIT)
// h0020, bit: 15
/* window band2 overshoot limit*/
#define offset_of_vps_2_reg_band2_overshoot_limit (0x40)
#define mask_of_vps_2_reg_band2_overshoot_limit   (0xff00)
#define shift_of_vps_2_reg_band2_overshoot_limit  (8)
#define VPS_2_REG_BAND2_OVERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band2_overshoot_limit)
// h0021, bit: 7
/* window band3 overshoot limit*/
#define offset_of_vps_2_reg_band3_overshoot_limit (0x42)
#define mask_of_vps_2_reg_band3_overshoot_limit   (0xff)
#define shift_of_vps_2_reg_band3_overshoot_limit  (0)
#define VPS_2_REG_BAND3_OVERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band3_overshoot_limit)
#define REG_VPS_2_21_L                            (VPS_2_REG_BAND3_OVERSHOOT_LIMIT)
// h0021, bit: 15
/* window band4 overshoot limit*/
#define offset_of_vps_2_reg_band4_overshoot_limit (0x42)
#define mask_of_vps_2_reg_band4_overshoot_limit   (0xff00)
#define shift_of_vps_2_reg_band4_overshoot_limit  (8)
#define VPS_2_REG_BAND4_OVERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band4_overshoot_limit)
// h0022, bit: 7
/* window band5 overshoot limit*/
#define offset_of_vps_2_reg_band5_overshoot_limit (0x44)
#define mask_of_vps_2_reg_band5_overshoot_limit   (0xff)
#define shift_of_vps_2_reg_band5_overshoot_limit  (0)
#define VPS_2_REG_BAND5_OVERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band5_overshoot_limit)
#define REG_VPS_2_22_L                            (VPS_2_REG_BAND5_OVERSHOOT_LIMIT)
// h0022, bit: 15
/* window band6 overshoot limit*/
#define offset_of_vps_2_reg_band6_overshoot_limit (0x44)
#define mask_of_vps_2_reg_band6_overshoot_limit   (0xff00)
#define shift_of_vps_2_reg_band6_overshoot_limit  (8)
#define VPS_2_REG_BAND6_OVERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band6_overshoot_limit)
// h0023, bit: 7
/* window band7 overshoot limit*/
#define offset_of_vps_2_reg_band7_overshoot_limit (0x46)
#define mask_of_vps_2_reg_band7_overshoot_limit   (0xff)
#define shift_of_vps_2_reg_band7_overshoot_limit  (0)
#define VPS_2_REG_BAND7_OVERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band7_overshoot_limit)
#define REG_VPS_2_23_L                            (VPS_2_REG_BAND7_OVERSHOOT_LIMIT)
// h0023, bit: 15
/* window band8 overshoot limit*/
#define offset_of_vps_2_reg_band8_overshoot_limit (0x46)
#define mask_of_vps_2_reg_band8_overshoot_limit   (0xff00)
#define shift_of_vps_2_reg_band8_overshoot_limit  (8)
#define VPS_2_REG_BAND8_OVERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band8_overshoot_limit)
// h0024, bit: 7
/* window band1 undershoot limit*/
#define offset_of_vps_2_reg_band1_undershoot_limit (0x48)
#define mask_of_vps_2_reg_band1_undershoot_limit   (0xff)
#define shift_of_vps_2_reg_band1_undershoot_limit  (0)
#define VPS_2_REG_BAND1_UNDERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band1_undershoot_limit)
#define REG_VPS_2_24_L                             (VPS_2_REG_BAND1_UNDERSHOOT_LIMIT)
// h0024, bit: 15
/* window band2 undershoot limit*/
#define offset_of_vps_2_reg_band2_undershoot_limit (0x48)
#define mask_of_vps_2_reg_band2_undershoot_limit   (0xff00)
#define shift_of_vps_2_reg_band2_undershoot_limit  (8)
#define VPS_2_REG_BAND2_UNDERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band2_undershoot_limit)
// h0025, bit: 7
/* window band3 undershoot limit*/
#define offset_of_vps_2_reg_band3_undershoot_limit (0x4a)
#define mask_of_vps_2_reg_band3_undershoot_limit   (0xff)
#define shift_of_vps_2_reg_band3_undershoot_limit  (0)
#define VPS_2_REG_BAND3_UNDERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band3_undershoot_limit)
#define REG_VPS_2_25_L                             (VPS_2_REG_BAND3_UNDERSHOOT_LIMIT)
// h0025, bit: 15
/* window band4 undershoot limit*/
#define offset_of_vps_2_reg_band4_undershoot_limit (0x4a)
#define mask_of_vps_2_reg_band4_undershoot_limit   (0xff00)
#define shift_of_vps_2_reg_band4_undershoot_limit  (8)
#define VPS_2_REG_BAND4_UNDERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band4_undershoot_limit)
// h0026, bit: 7
/* window band5 undershoot limit*/
#define offset_of_vps_2_reg_band5_undershoot_limit (0x4c)
#define mask_of_vps_2_reg_band5_undershoot_limit   (0xff)
#define shift_of_vps_2_reg_band5_undershoot_limit  (0)
#define VPS_2_REG_BAND5_UNDERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band5_undershoot_limit)
#define REG_VPS_2_26_L                             (VPS_2_REG_BAND5_UNDERSHOOT_LIMIT)
// h0026, bit: 15
/* window band6 undershoot limit*/
#define offset_of_vps_2_reg_band6_undershoot_limit (0x4c)
#define mask_of_vps_2_reg_band6_undershoot_limit   (0xff00)
#define shift_of_vps_2_reg_band6_undershoot_limit  (8)
#define VPS_2_REG_BAND6_UNDERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band6_undershoot_limit)
// h0027, bit: 7
/* window band7 undershoot limit*/
#define offset_of_vps_2_reg_band7_undershoot_limit (0x4e)
#define mask_of_vps_2_reg_band7_undershoot_limit   (0xff)
#define shift_of_vps_2_reg_band7_undershoot_limit  (0)
#define VPS_2_REG_BAND7_UNDERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band7_undershoot_limit)
#define REG_VPS_2_27_L                             (VPS_2_REG_BAND7_UNDERSHOOT_LIMIT)
// h0027, bit: 15
/* window band8 undershoot limit*/
#define offset_of_vps_2_reg_band8_undershoot_limit (0x4e)
#define mask_of_vps_2_reg_band8_undershoot_limit   (0xff00)
#define shift_of_vps_2_reg_band8_undershoot_limit  (8)
#define VPS_2_REG_BAND8_UNDERSHOOT_LIMIT           (REG_VPS_2_BASE + offset_of_vps_2_reg_band8_undershoot_limit)
#define REG_VPS_2_28_L                             (REG_VPS_2_BASE + 0x50)
#define REG_VPS_2_29_L                             (REG_VPS_2_BASE + 0x52)
#define REG_VPS_2_2A_L                             (REG_VPS_2_BASE + 0x54)
#define REG_VPS_2_2B_L                             (REG_VPS_2_BASE + 0x56)
#define REG_VPS_2_2C_L                             (REG_VPS_2_BASE + 0x58)
#define REG_VPS_2_2D_L                             (REG_VPS_2_BASE + 0x5a)
#define REG_VPS_2_2E_L                             (REG_VPS_2_BASE + 0x5c)
#define REG_VPS_2_2F_L                             (REG_VPS_2_BASE + 0x5e)
// h0030, bit: 0
/* Main window peaking color factor control separate enable*/
#define offset_of_vps_2_reg_main_pk_color_ctrl_sep_en (0x60)
#define mask_of_vps_2_reg_main_pk_color_ctrl_sep_en   (0x1)
#define shift_of_vps_2_reg_main_pk_color_ctrl_sep_en  (0)
#define VPS_2_REG_MAIN_PK_COLOR_CTRL_SEP_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_pk_color_ctrl_sep_en)
#define REG_VPS_2_30_L                                (VPS_2_REG_MAIN_PK_COLOR_CTRL_SEP_EN)
// h0030, bit: 6
/* reserved                     */
#define offset_of_vps_2_reg_main_color_reversed (0x60)
#define mask_of_vps_2_reg_main_color_reversed   (0x40)
#define shift_of_vps_2_reg_main_color_reversed  (6)
#define VPS_2_REG_MAIN_COLOR_REVERSED           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_color_reversed)
// h0030, bit: 7
/* Main window color adaptive peaking enable*/
#define offset_of_vps_2_reg_main_color_peaking_en (0x60)
#define mask_of_vps_2_reg_main_color_peaking_en   (0x80)
#define shift_of_vps_2_reg_main_color_peaking_en  (7)
#define VPS_2_REG_MAIN_COLOR_PEAKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_color_peaking_en)
// h0030, bit: 13
/* Main window coring step*/
#define offset_of_vps_2_reg_main_coring_thrd_step (0x60)
#define mask_of_vps_2_reg_main_coring_thrd_step   (0x3000)
#define shift_of_vps_2_reg_main_coring_thrd_step  (12)
#define VPS_2_REG_MAIN_CORING_THRD_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_coring_thrd_step)
// h0030, bit: 15
/* Main window color adaptive coring enable*/
#define offset_of_vps_2_reg_main_color_coring_en (0x60)
#define mask_of_vps_2_reg_main_color_coring_en   (0x8000)
#define shift_of_vps_2_reg_main_color_coring_en  (15)
#define VPS_2_REG_MAIN_COLOR_CORING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_color_coring_en)
// h0031, bit: 0
/* Main window band1 differential adaptive enable*/
#define offset_of_vps_2_reg_main_band1_adaptive_en (0x62)
#define mask_of_vps_2_reg_main_band1_adaptive_en   (0x1)
#define shift_of_vps_2_reg_main_band1_adaptive_en  (0)
#define VPS_2_REG_MAIN_BAND1_ADAPTIVE_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band1_adaptive_en)
#define REG_VPS_2_31_L                             (VPS_2_REG_MAIN_BAND1_ADAPTIVE_EN)
// h0031, bit: 1
/* Main window band2 differential adaptive enable*/
#define offset_of_vps_2_reg_main_band2_adaptive_en (0x62)
#define mask_of_vps_2_reg_main_band2_adaptive_en   (0x2)
#define shift_of_vps_2_reg_main_band2_adaptive_en  (1)
#define VPS_2_REG_MAIN_BAND2_ADAPTIVE_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band2_adaptive_en)
// h0031, bit: 2
/* Main window band3 differential adaptive enable*/
#define offset_of_vps_2_reg_main_band3_adaptive_en (0x62)
#define mask_of_vps_2_reg_main_band3_adaptive_en   (0x4)
#define shift_of_vps_2_reg_main_band3_adaptive_en  (2)
#define VPS_2_REG_MAIN_BAND3_ADAPTIVE_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band3_adaptive_en)
// h0031, bit: 3
/* Main window band4 differential adaptive enable*/
#define offset_of_vps_2_reg_main_band4_adaptive_en (0x62)
#define mask_of_vps_2_reg_main_band4_adaptive_en   (0x8)
#define shift_of_vps_2_reg_main_band4_adaptive_en  (3)
#define VPS_2_REG_MAIN_BAND4_ADAPTIVE_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band4_adaptive_en)
// h0031, bit: 4
/* Main window band5 differential adaptive enable*/
#define offset_of_vps_2_reg_main_band5_adaptive_en (0x62)
#define mask_of_vps_2_reg_main_band5_adaptive_en   (0x10)
#define shift_of_vps_2_reg_main_band5_adaptive_en  (4)
#define VPS_2_REG_MAIN_BAND5_ADAPTIVE_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band5_adaptive_en)
// h0031, bit: 5
/* Main window band6 differential adaptive enable*/
#define offset_of_vps_2_reg_main_band6_adaptive_en (0x62)
#define mask_of_vps_2_reg_main_band6_adaptive_en   (0x20)
#define shift_of_vps_2_reg_main_band6_adaptive_en  (5)
#define VPS_2_REG_MAIN_BAND6_ADAPTIVE_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band6_adaptive_en)
// h0031, bit: 6
/* Main window band7 differential adaptive enable*/
#define offset_of_vps_2_reg_main_band7_adaptive_en (0x62)
#define mask_of_vps_2_reg_main_band7_adaptive_en   (0x40)
#define shift_of_vps_2_reg_main_band7_adaptive_en  (6)
#define VPS_2_REG_MAIN_BAND7_ADAPTIVE_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band7_adaptive_en)
// h0031, bit: 7
/* Main window band8 differential adaptive enable*/
#define offset_of_vps_2_reg_main_band8_adaptive_en (0x62)
#define mask_of_vps_2_reg_main_band8_adaptive_en   (0x80)
#define shift_of_vps_2_reg_main_band8_adaptive_en  (7)
#define VPS_2_REG_MAIN_BAND8_ADAPTIVE_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band8_adaptive_en)
#define REG_VPS_2_32_L                             (REG_VPS_2_BASE + 0x64)
// h0033, bit: 3
/* Main window band1 coring threshold*/
#define offset_of_vps_2_reg_main_band1_coring_thrd (0x66)
#define mask_of_vps_2_reg_main_band1_coring_thrd   (0xf)
#define shift_of_vps_2_reg_main_band1_coring_thrd  (0)
#define VPS_2_REG_MAIN_BAND1_CORING_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band1_coring_thrd)
#define REG_VPS_2_33_L                             (VPS_2_REG_MAIN_BAND1_CORING_THRD)
// h0033, bit: 7
/* Main window band2 coring threshold*/
#define offset_of_vps_2_reg_main_band2_coring_thrd (0x66)
#define mask_of_vps_2_reg_main_band2_coring_thrd   (0xf0)
#define shift_of_vps_2_reg_main_band2_coring_thrd  (4)
#define VPS_2_REG_MAIN_BAND2_CORING_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band2_coring_thrd)
// h0033, bit: 11
/* Main window band3 coring threshold*/
#define offset_of_vps_2_reg_main_band3_coring_thrd (0x66)
#define mask_of_vps_2_reg_main_band3_coring_thrd   (0xf00)
#define shift_of_vps_2_reg_main_band3_coring_thrd  (8)
#define VPS_2_REG_MAIN_BAND3_CORING_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band3_coring_thrd)
// h0033, bit: 15
/* Main window band4 coring threshold*/
#define offset_of_vps_2_reg_main_band4_coring_thrd (0x66)
#define mask_of_vps_2_reg_main_band4_coring_thrd   (0xf000)
#define shift_of_vps_2_reg_main_band4_coring_thrd  (12)
#define VPS_2_REG_MAIN_BAND4_CORING_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band4_coring_thrd)
// h0034, bit: 3
/* Main window band5 coring threshold*/
#define offset_of_vps_2_reg_main_band5_coring_thrd (0x68)
#define mask_of_vps_2_reg_main_band5_coring_thrd   (0xf)
#define shift_of_vps_2_reg_main_band5_coring_thrd  (0)
#define VPS_2_REG_MAIN_BAND5_CORING_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band5_coring_thrd)
#define REG_VPS_2_34_L                             (VPS_2_REG_MAIN_BAND5_CORING_THRD)
// h0034, bit: 7
/* Main window band6 coring threshold*/
#define offset_of_vps_2_reg_main_band6_coring_thrd (0x68)
#define mask_of_vps_2_reg_main_band6_coring_thrd   (0xf0)
#define shift_of_vps_2_reg_main_band6_coring_thrd  (4)
#define VPS_2_REG_MAIN_BAND6_CORING_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band6_coring_thrd)
// h0034, bit: 11
/* Main window band7 coring threshold*/
#define offset_of_vps_2_reg_main_band7_coring_thrd (0x68)
#define mask_of_vps_2_reg_main_band7_coring_thrd   (0xf00)
#define shift_of_vps_2_reg_main_band7_coring_thrd  (8)
#define VPS_2_REG_MAIN_BAND7_CORING_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band7_coring_thrd)
// h0034, bit: 15
/* Main window band8 coring threshold*/
#define offset_of_vps_2_reg_main_band8_coring_thrd (0x68)
#define mask_of_vps_2_reg_main_band8_coring_thrd   (0xf000)
#define shift_of_vps_2_reg_main_band8_coring_thrd  (12)
#define VPS_2_REG_MAIN_BAND8_CORING_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band8_coring_thrd)
#define REG_VPS_2_35_L                             (REG_VPS_2_BASE + 0x6a)
#define REG_VPS_2_36_L                             (REG_VPS_2_BASE + 0x6c)
// h0037, bit: 5
/* Main window color coring limit*/
#define offset_of_vps_2_reg_main_coring_thrd_sec (0x6e)
#define mask_of_vps_2_reg_main_coring_thrd_sec   (0x3f)
#define shift_of_vps_2_reg_main_coring_thrd_sec  (0)
#define VPS_2_REG_MAIN_CORING_THRD_SEC           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_coring_thrd_sec)
#define REG_VPS_2_37_L                           (VPS_2_REG_MAIN_CORING_THRD_SEC)
// h0038, bit: 7
/* Main window diagonal mode alpha threshold*/
#define offset_of_vps_2_reg_main_alpha_thrd (0x70)
#define mask_of_vps_2_reg_main_alpha_thrd   (0xff)
#define shift_of_vps_2_reg_main_alpha_thrd  (0)
#define VPS_2_REG_MAIN_ALPHA_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_alpha_thrd)
#define REG_VPS_2_38_L                      (VPS_2_REG_MAIN_ALPHA_THRD)
// h0039, bit: 3
/* Main window vertical Y noise_masking max value threshold*/
#define offset_of_vps_2_reg_main_y_v_nm_max_thrd (0x72)
#define mask_of_vps_2_reg_main_y_v_nm_max_thrd   (0xf)
#define shift_of_vps_2_reg_main_y_v_nm_max_thrd  (0)
#define VPS_2_REG_MAIN_Y_V_NM_MAX_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_y_v_nm_max_thrd)
#define REG_VPS_2_39_L                           (VPS_2_REG_MAIN_Y_V_NM_MAX_THRD)
// h0039, bit: 7
/* Main window vertical Y noise_masking min value threshold*/
#define offset_of_vps_2_reg_main_y_v_nm_min_thrd (0x72)
#define mask_of_vps_2_reg_main_y_v_nm_min_thrd   (0xf0)
#define shift_of_vps_2_reg_main_y_v_nm_min_thrd  (4)
#define VPS_2_REG_MAIN_Y_V_NM_MIN_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_y_v_nm_min_thrd)
#define REG_VPS_2_3A_L                           (REG_VPS_2_BASE + 0x74)
// h003b, bit: 0
/* Main window yc delay enable*/
#define offset_of_vps_2_reg_main_yc_delay_en (0x76)
#define mask_of_vps_2_reg_main_yc_delay_en   (0x1)
#define shift_of_vps_2_reg_main_yc_delay_en  (0)
#define VPS_2_REG_MAIN_YC_DELAY_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_yc_delay_en)
#define REG_VPS_2_3B_L                       (VPS_2_REG_MAIN_YC_DELAY_EN)
// h003b, bit: 5
/* Main window cr delay number
#0: no delay
#1: delay 1T
#2: delay 2T
#3: delay 3T*/
#define offset_of_vps_2_reg_main_cr_delay_num (0x76)
#define mask_of_vps_2_reg_main_cr_delay_num   (0x30)
#define shift_of_vps_2_reg_main_cr_delay_num  (4)
#define VPS_2_REG_MAIN_CR_DELAY_NUM           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_cr_delay_num)
// h003b, bit: 9
/* Main window y delay number
#0: no delay
#1: delay 1T
#2: delay 2T
#3: delay 3T*/
#define offset_of_vps_2_reg_main_y_delay_num (0x76)
#define mask_of_vps_2_reg_main_y_delay_num   (0x300)
#define shift_of_vps_2_reg_main_y_delay_num  (8)
#define VPS_2_REG_MAIN_Y_DELAY_NUM           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_y_delay_num)
// h003b, bit: 11
/* Main window cb delay number
#0: no delay
#1: delay 1T
#2: delay 2T
#3: delay 3T*/
#define offset_of_vps_2_reg_main_cb_delay_num (0x76)
#define mask_of_vps_2_reg_main_cb_delay_num   (0xc00)
#define shift_of_vps_2_reg_main_cb_delay_num  (10)
#define VPS_2_REG_MAIN_CB_DELAY_NUM           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_cb_delay_num)
// h003c, bit: 3
/* Main window band1 coring threshold*/
#define offset_of_vps_2_reg_main_band9_coring_thrd (0x78)
#define mask_of_vps_2_reg_main_band9_coring_thrd   (0xf)
#define shift_of_vps_2_reg_main_band9_coring_thrd  (0)
#define VPS_2_REG_MAIN_BAND9_CORING_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band9_coring_thrd)
#define REG_VPS_2_3C_L                             (VPS_2_REG_MAIN_BAND9_CORING_THRD)
// h003c, bit: 7
/* Main window band2 coring threshold*/
#define offset_of_vps_2_reg_main_band10_coring_thrd (0x78)
#define mask_of_vps_2_reg_main_band10_coring_thrd   (0xf0)
#define shift_of_vps_2_reg_main_band10_coring_thrd  (4)
#define VPS_2_REG_MAIN_BAND10_CORING_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band10_coring_thrd)
// h003c, bit: 11
/* Main window band3 coring threshold*/
#define offset_of_vps_2_reg_main_band11_coring_thrd (0x78)
#define mask_of_vps_2_reg_main_band11_coring_thrd   (0xf00)
#define shift_of_vps_2_reg_main_band11_coring_thrd  (8)
#define VPS_2_REG_MAIN_BAND11_CORING_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band11_coring_thrd)
// h003c, bit: 15
/* Main window band4 coring threshold*/
#define offset_of_vps_2_reg_main_band12_coring_thrd (0x78)
#define mask_of_vps_2_reg_main_band12_coring_thrd   (0xf000)
#define shift_of_vps_2_reg_main_band12_coring_thrd  (12)
#define VPS_2_REG_MAIN_BAND12_CORING_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_band12_coring_thrd)
#define REG_VPS_2_3D_L                              (REG_VPS_2_BASE + 0x7a)
// h003e, bit: 6
/* Main window user sharpness horizontal adjust (Sxx.xxxx)*/
#define offset_of_vps_2_reg_main_osd_sharpness_ctrl_h (0x7c)
#define mask_of_vps_2_reg_main_osd_sharpness_ctrl_h   (0x7f)
#define shift_of_vps_2_reg_main_osd_sharpness_ctrl_h  (0)
#define VPS_2_REG_MAIN_OSD_SHARPNESS_CTRL_H           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_osd_sharpness_ctrl_h)
#define REG_VPS_2_3E_L                                (VPS_2_REG_MAIN_OSD_SHARPNESS_CTRL_H)
// h003e, bit: 7
/* Main window user sharpness separate HV enable*/
#define offset_of_vps_2_reg_main_osd_sharpness_sep_hv_en (0x7c)
#define mask_of_vps_2_reg_main_osd_sharpness_sep_hv_en   (0x80)
#define shift_of_vps_2_reg_main_osd_sharpness_sep_hv_en  (7)
#define VPS_2_REG_MAIN_OSD_SHARPNESS_SEP_HV_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_osd_sharpness_sep_hv_en)
// h003e, bit: 14
/* Main window user sharpness vertical adjust (Sxx.xxxx)*/
#define offset_of_vps_2_reg_main_osd_sharpness_ctrl_v (0x7c)
#define mask_of_vps_2_reg_main_osd_sharpness_ctrl_v   (0x7f00)
#define shift_of_vps_2_reg_main_osd_sharpness_ctrl_v  (8)
#define VPS_2_REG_MAIN_OSD_SHARPNESS_CTRL_V           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_osd_sharpness_ctrl_v)
#define REG_VPS_2_3F_L                                (REG_VPS_2_BASE + 0x7e)
// h0040, bit: 5
/* Horizontal differential adaptive LUT 0*/
#define offset_of_vps_2_reg_hor_lut_0 (0x80)
#define mask_of_vps_2_reg_hor_lut_0   (0x3f)
#define shift_of_vps_2_reg_hor_lut_0  (0)
#define VPS_2_REG_HOR_LUT_0           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_0)
#define REG_VPS_2_40_L                (VPS_2_REG_HOR_LUT_0)
// h0040, bit: 13
/* Horizontal differential adaptive LUT 1*/
#define offset_of_vps_2_reg_hor_lut_1 (0x80)
#define mask_of_vps_2_reg_hor_lut_1   (0x3f00)
#define shift_of_vps_2_reg_hor_lut_1  (8)
#define VPS_2_REG_HOR_LUT_1           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_1)
// h0041, bit: 5
/* Horizontal differential adaptive LUT 2*/
#define offset_of_vps_2_reg_hor_lut_2 (0x82)
#define mask_of_vps_2_reg_hor_lut_2   (0x3f)
#define shift_of_vps_2_reg_hor_lut_2  (0)
#define VPS_2_REG_HOR_LUT_2           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_2)
#define REG_VPS_2_41_L                (VPS_2_REG_HOR_LUT_2)
// h0041, bit: 13
/* Horizontal differential adaptive LUT 3*/
#define offset_of_vps_2_reg_hor_lut_3 (0x82)
#define mask_of_vps_2_reg_hor_lut_3   (0x3f00)
#define shift_of_vps_2_reg_hor_lut_3  (8)
#define VPS_2_REG_HOR_LUT_3           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_3)
// h0042, bit: 5
/* Horizontal differential adaptive LUT 4*/
#define offset_of_vps_2_reg_hor_lut_4 (0x84)
#define mask_of_vps_2_reg_hor_lut_4   (0x3f)
#define shift_of_vps_2_reg_hor_lut_4  (0)
#define VPS_2_REG_HOR_LUT_4           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_4)
#define REG_VPS_2_42_L                (VPS_2_REG_HOR_LUT_4)
// h0042, bit: 13
/* Horizontal differential adaptive LUT 5*/
#define offset_of_vps_2_reg_hor_lut_5 (0x84)
#define mask_of_vps_2_reg_hor_lut_5   (0x3f00)
#define shift_of_vps_2_reg_hor_lut_5  (8)
#define VPS_2_REG_HOR_LUT_5           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_5)
// h0043, bit: 5
/* Horizontal differential adaptive LUT 6*/
#define offset_of_vps_2_reg_hor_lut_6 (0x86)
#define mask_of_vps_2_reg_hor_lut_6   (0x3f)
#define shift_of_vps_2_reg_hor_lut_6  (0)
#define VPS_2_REG_HOR_LUT_6           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_6)
#define REG_VPS_2_43_L                (VPS_2_REG_HOR_LUT_6)
// h0043, bit: 13
/* Horizontal differential adaptive LUT 7*/
#define offset_of_vps_2_reg_hor_lut_7 (0x86)
#define mask_of_vps_2_reg_hor_lut_7   (0x3f00)
#define shift_of_vps_2_reg_hor_lut_7  (8)
#define VPS_2_REG_HOR_LUT_7           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_7)
// h0044, bit: 5
/* Horizontal differential adaptive LUT 8*/
#define offset_of_vps_2_reg_hor_lut_8 (0x88)
#define mask_of_vps_2_reg_hor_lut_8   (0x3f)
#define shift_of_vps_2_reg_hor_lut_8  (0)
#define VPS_2_REG_HOR_LUT_8           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_8)
#define REG_VPS_2_44_L                (VPS_2_REG_HOR_LUT_8)
// h0044, bit: 13
/* Horizontal differential adaptive LUT 9*/
#define offset_of_vps_2_reg_hor_lut_9 (0x88)
#define mask_of_vps_2_reg_hor_lut_9   (0x3f00)
#define shift_of_vps_2_reg_hor_lut_9  (8)
#define VPS_2_REG_HOR_LUT_9           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_9)
// h0045, bit: 5
/* Horizontal differential adaptive LUT 10*/
#define offset_of_vps_2_reg_hor_lut_10 (0x8a)
#define mask_of_vps_2_reg_hor_lut_10   (0x3f)
#define shift_of_vps_2_reg_hor_lut_10  (0)
#define VPS_2_REG_HOR_LUT_10           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_10)
#define REG_VPS_2_45_L                 (VPS_2_REG_HOR_LUT_10)
// h0045, bit: 13
/* Horizontal differential adaptive LUT 11*/
#define offset_of_vps_2_reg_hor_lut_11 (0x8a)
#define mask_of_vps_2_reg_hor_lut_11   (0x3f00)
#define shift_of_vps_2_reg_hor_lut_11  (8)
#define VPS_2_REG_HOR_LUT_11           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_11)
// h0046, bit: 5
/* Horizontal differential adaptive LUT 12*/
#define offset_of_vps_2_reg_hor_lut_12 (0x8c)
#define mask_of_vps_2_reg_hor_lut_12   (0x3f)
#define shift_of_vps_2_reg_hor_lut_12  (0)
#define VPS_2_REG_HOR_LUT_12           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_12)
#define REG_VPS_2_46_L                 (VPS_2_REG_HOR_LUT_12)
// h0046, bit: 13
/* Horizontal differential adaptive LUT 13*/
#define offset_of_vps_2_reg_hor_lut_13 (0x8c)
#define mask_of_vps_2_reg_hor_lut_13   (0x3f00)
#define shift_of_vps_2_reg_hor_lut_13  (8)
#define VPS_2_REG_HOR_LUT_13           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_13)
// h0047, bit: 5
/* Horizontal differential adaptive LUT 14*/
#define offset_of_vps_2_reg_hor_lut_14 (0x8e)
#define mask_of_vps_2_reg_hor_lut_14   (0x3f)
#define shift_of_vps_2_reg_hor_lut_14  (0)
#define VPS_2_REG_HOR_LUT_14           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_14)
#define REG_VPS_2_47_L                 (VPS_2_REG_HOR_LUT_14)
// h0047, bit: 13
/* Horizontal differential adaptive LUT 15*/
#define offset_of_vps_2_reg_hor_lut_15 (0x8e)
#define mask_of_vps_2_reg_hor_lut_15   (0x3f00)
#define shift_of_vps_2_reg_hor_lut_15  (8)
#define VPS_2_REG_HOR_LUT_15           (REG_VPS_2_BASE + offset_of_vps_2_reg_hor_lut_15)
// h0048, bit: 5
/* Vertical differential adaptive LUT 0 */
#define offset_of_vps_2_reg_ver_lut_0 (0x90)
#define mask_of_vps_2_reg_ver_lut_0   (0x3f)
#define shift_of_vps_2_reg_ver_lut_0  (0)
#define VPS_2_REG_VER_LUT_0           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_0)
#define REG_VPS_2_48_L                (VPS_2_REG_VER_LUT_0)
// h0048, bit: 13
/* Vertical differential adaptive LUT 1 */
#define offset_of_vps_2_reg_ver_lut_1 (0x90)
#define mask_of_vps_2_reg_ver_lut_1   (0x3f00)
#define shift_of_vps_2_reg_ver_lut_1  (8)
#define VPS_2_REG_VER_LUT_1           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_1)
// h0049, bit: 5
/* Vertical differential adaptive LUT 2 */
#define offset_of_vps_2_reg_ver_lut_2 (0x92)
#define mask_of_vps_2_reg_ver_lut_2   (0x3f)
#define shift_of_vps_2_reg_ver_lut_2  (0)
#define VPS_2_REG_VER_LUT_2           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_2)
#define REG_VPS_2_49_L                (VPS_2_REG_VER_LUT_2)
// h0049, bit: 13
/* Vertical differential adaptive LUT 3 */
#define offset_of_vps_2_reg_ver_lut_3 (0x92)
#define mask_of_vps_2_reg_ver_lut_3   (0x3f00)
#define shift_of_vps_2_reg_ver_lut_3  (8)
#define VPS_2_REG_VER_LUT_3           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_3)
// h004a, bit: 5
/* Vertical differential adaptive LUT 4 */
#define offset_of_vps_2_reg_ver_lut_4 (0x94)
#define mask_of_vps_2_reg_ver_lut_4   (0x3f)
#define shift_of_vps_2_reg_ver_lut_4  (0)
#define VPS_2_REG_VER_LUT_4           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_4)
#define REG_VPS_2_4A_L                (VPS_2_REG_VER_LUT_4)
// h004a, bit: 13
/* Vertical differential adaptive LUT 5 */
#define offset_of_vps_2_reg_ver_lut_5 (0x94)
#define mask_of_vps_2_reg_ver_lut_5   (0x3f00)
#define shift_of_vps_2_reg_ver_lut_5  (8)
#define VPS_2_REG_VER_LUT_5           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_5)
// h004b, bit: 5
/* Vertical differential adaptive LUT 6 */
#define offset_of_vps_2_reg_ver_lut_6 (0x96)
#define mask_of_vps_2_reg_ver_lut_6   (0x3f)
#define shift_of_vps_2_reg_ver_lut_6  (0)
#define VPS_2_REG_VER_LUT_6           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_6)
#define REG_VPS_2_4B_L                (VPS_2_REG_VER_LUT_6)
// h004b, bit: 13
/* Vertical differential adaptive LUT 7 */
#define offset_of_vps_2_reg_ver_lut_7 (0x96)
#define mask_of_vps_2_reg_ver_lut_7   (0x3f00)
#define shift_of_vps_2_reg_ver_lut_7  (8)
#define VPS_2_REG_VER_LUT_7           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_7)
// h004c, bit: 5
/* Vertical differential adaptive LUT 8 */
#define offset_of_vps_2_reg_ver_lut_8 (0x98)
#define mask_of_vps_2_reg_ver_lut_8   (0x3f)
#define shift_of_vps_2_reg_ver_lut_8  (0)
#define VPS_2_REG_VER_LUT_8           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_8)
#define REG_VPS_2_4C_L                (VPS_2_REG_VER_LUT_8)
// h004c, bit: 13
/* Vertical differential adaptive LUT 9 */
#define offset_of_vps_2_reg_ver_lut_9 (0x98)
#define mask_of_vps_2_reg_ver_lut_9   (0x3f00)
#define shift_of_vps_2_reg_ver_lut_9  (8)
#define VPS_2_REG_VER_LUT_9           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_9)
// h004d, bit: 5
/* Vertical differential adaptive LUT 10*/
#define offset_of_vps_2_reg_ver_lut_10 (0x9a)
#define mask_of_vps_2_reg_ver_lut_10   (0x3f)
#define shift_of_vps_2_reg_ver_lut_10  (0)
#define VPS_2_REG_VER_LUT_10           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_10)
#define REG_VPS_2_4D_L                 (VPS_2_REG_VER_LUT_10)
// h004d, bit: 13
/* Vertical differential adaptive LUT 11*/
#define offset_of_vps_2_reg_ver_lut_11 (0x9a)
#define mask_of_vps_2_reg_ver_lut_11   (0x3f00)
#define shift_of_vps_2_reg_ver_lut_11  (8)
#define VPS_2_REG_VER_LUT_11           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_11)
// h004e, bit: 5
/* Vertical differential adaptive LUT 12*/
#define offset_of_vps_2_reg_ver_lut_12 (0x9c)
#define mask_of_vps_2_reg_ver_lut_12   (0x3f)
#define shift_of_vps_2_reg_ver_lut_12  (0)
#define VPS_2_REG_VER_LUT_12           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_12)
#define REG_VPS_2_4E_L                 (VPS_2_REG_VER_LUT_12)
// h004e, bit: 13
/* Vertical differential adaptive LUT 13*/
#define offset_of_vps_2_reg_ver_lut_13 (0x9c)
#define mask_of_vps_2_reg_ver_lut_13   (0x3f00)
#define shift_of_vps_2_reg_ver_lut_13  (8)
#define VPS_2_REG_VER_LUT_13           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_13)
// h004f, bit: 5
/* Vertical differential adaptive LUT 14*/
#define offset_of_vps_2_reg_ver_lut_14 (0x9e)
#define mask_of_vps_2_reg_ver_lut_14   (0x3f)
#define shift_of_vps_2_reg_ver_lut_14  (0)
#define VPS_2_REG_VER_LUT_14           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_14)
#define REG_VPS_2_4F_L                 (VPS_2_REG_VER_LUT_14)
// h004f, bit: 13
/* Vertical differential adaptive LUT 15*/
#define offset_of_vps_2_reg_ver_lut_15 (0x9e)
#define mask_of_vps_2_reg_ver_lut_15   (0x3f00)
#define shift_of_vps_2_reg_ver_lut_15  (8)
#define VPS_2_REG_VER_LUT_15           (REG_VPS_2_BASE + offset_of_vps_2_reg_ver_lut_15)
// h0050, bit: 15
/* reserved                     */
#define offset_of_vps_2_reg_reserved_v_color_range (0xa0)
#define mask_of_vps_2_reg_reserved_v_color_range   (0xffff)
#define shift_of_vps_2_reg_reserved_v_color_range  (0)
#define VPS_2_REG_RESERVED_V_COLOR_RANGE           (REG_VPS_2_BASE + offset_of_vps_2_reg_reserved_v_color_range)
#define REG_VPS_2_50_L                             (VPS_2_REG_RESERVED_V_COLOR_RANGE)
#define REG_VPS_2_51_L                             (REG_VPS_2_BASE + 0xa2)
#define REG_VPS_2_52_L                             (REG_VPS_2_BASE + 0xa4)
#define REG_VPS_2_53_L                             (REG_VPS_2_BASE + 0xa6)
#define REG_VPS_2_54_L                             (REG_VPS_2_BASE + 0xa8)
// h0055, bit: 0
/* Main window peaking adaptive y enable*/
#define offset_of_vps_2_reg_main_pk_adp_y_en (0xaa)
#define mask_of_vps_2_reg_main_pk_adp_y_en   (0x1)
#define shift_of_vps_2_reg_main_pk_adp_y_en  (0)
#define VPS_2_REG_MAIN_PK_ADP_Y_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_pk_adp_y_en)
#define REG_VPS_2_55_L                       (VPS_2_REG_MAIN_PK_ADP_Y_EN)
// h0055, bit: 1
/* Main window peaking adaptive y alpha low pass filter enable*/
#define offset_of_vps_2_reg_main_pk_adp_y_alpha_lpf_en (0xaa)
#define mask_of_vps_2_reg_main_pk_adp_y_alpha_lpf_en   (0x2)
#define shift_of_vps_2_reg_main_pk_adp_y_alpha_lpf_en  (1)
#define VPS_2_REG_MAIN_PK_ADP_Y_ALPHA_LPF_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_pk_adp_y_alpha_lpf_en)
// h0055, bit: 5
/* Main window peaking adaptive y alpha step*/
#define offset_of_vps_2_reg_main_pk_adp_y_step (0xaa)
#define mask_of_vps_2_reg_main_pk_adp_y_step   (0x30)
#define shift_of_vps_2_reg_main_pk_adp_y_step  (4)
#define VPS_2_REG_MAIN_PK_ADP_Y_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_pk_adp_y_step)
// h0055, bit: 15
/* Main window peaking adaptive y low threshold */
#define offset_of_vps_2_reg_main_pk_y_low_thrd (0xaa)
#define mask_of_vps_2_reg_main_pk_y_low_thrd   (0xff00)
#define shift_of_vps_2_reg_main_pk_y_low_thrd  (8)
#define VPS_2_REG_MAIN_PK_Y_LOW_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_pk_y_low_thrd)
// h0056, bit: 3
/* Main window peaking adaptive y alpha LUT 0*/
#define offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_0 (0xac)
#define mask_of_vps_2_reg_main_pk_adp_y_alpha_lut_0   (0xf)
#define shift_of_vps_2_reg_main_pk_adp_y_alpha_lut_0  (0)
#define VPS_2_REG_MAIN_PK_ADP_Y_ALPHA_LUT_0           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_0)
#define REG_VPS_2_56_L                                (VPS_2_REG_MAIN_PK_ADP_Y_ALPHA_LUT_0)
// h0056, bit: 7
/* Main window peaking adaptive y alpha LUT 1*/
#define offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_1 (0xac)
#define mask_of_vps_2_reg_main_pk_adp_y_alpha_lut_1   (0xf0)
#define shift_of_vps_2_reg_main_pk_adp_y_alpha_lut_1  (4)
#define VPS_2_REG_MAIN_PK_ADP_Y_ALPHA_LUT_1           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_1)
// h0056, bit: 11
/* Main window peaking adaptive y alpha LUT 2*/
#define offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_2 (0xac)
#define mask_of_vps_2_reg_main_pk_adp_y_alpha_lut_2   (0xf00)
#define shift_of_vps_2_reg_main_pk_adp_y_alpha_lut_2  (8)
#define VPS_2_REG_MAIN_PK_ADP_Y_ALPHA_LUT_2           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_2)
// h0056, bit: 15
/* Main window peaking adaptive y alpha LUT 3*/
#define offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_3 (0xac)
#define mask_of_vps_2_reg_main_pk_adp_y_alpha_lut_3   (0xf000)
#define shift_of_vps_2_reg_main_pk_adp_y_alpha_lut_3  (12)
#define VPS_2_REG_MAIN_PK_ADP_Y_ALPHA_LUT_3           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_3)
// h0057, bit: 3
/* Main window peaking adaptive y alpha LUT 4*/
#define offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_4 (0xae)
#define mask_of_vps_2_reg_main_pk_adp_y_alpha_lut_4   (0xf)
#define shift_of_vps_2_reg_main_pk_adp_y_alpha_lut_4  (0)
#define VPS_2_REG_MAIN_PK_ADP_Y_ALPHA_LUT_4           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_4)
#define REG_VPS_2_57_L                                (VPS_2_REG_MAIN_PK_ADP_Y_ALPHA_LUT_4)
// h0057, bit: 7
/* Main window peaking adaptive y alpha LUT 5*/
#define offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_5 (0xae)
#define mask_of_vps_2_reg_main_pk_adp_y_alpha_lut_5   (0xf0)
#define shift_of_vps_2_reg_main_pk_adp_y_alpha_lut_5  (4)
#define VPS_2_REG_MAIN_PK_ADP_Y_ALPHA_LUT_5           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_5)
// h0057, bit: 11
/* Main window peaking adaptive y alpha LUT 6*/
#define offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_6 (0xae)
#define mask_of_vps_2_reg_main_pk_adp_y_alpha_lut_6   (0xf00)
#define shift_of_vps_2_reg_main_pk_adp_y_alpha_lut_6  (8)
#define VPS_2_REG_MAIN_PK_ADP_Y_ALPHA_LUT_6           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_6)
// h0057, bit: 15
/* Main window peaking adaptive y alpha LUT 7*/
#define offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_7 (0xae)
#define mask_of_vps_2_reg_main_pk_adp_y_alpha_lut_7   (0xf000)
#define shift_of_vps_2_reg_main_pk_adp_y_alpha_lut_7  (12)
#define VPS_2_REG_MAIN_PK_ADP_Y_ALPHA_LUT_7           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_pk_adp_y_alpha_lut_7)
// h0058, bit: 0
/* reserved                     */
#define offset_of_vps_2_reg_reserved_v_color_range2 (0xb0)
#define mask_of_vps_2_reg_reserved_v_color_range2   (0x1)
#define shift_of_vps_2_reg_reserved_v_color_range2  (0)
#define VPS_2_REG_RESERVED_V_COLOR_RANGE2           (REG_VPS_2_BASE + offset_of_vps_2_reg_reserved_v_color_range2)
#define REG_VPS_2_58_L                              (VPS_2_REG_RESERVED_V_COLOR_RANGE2)
// h0059, bit: 6
/* Main window user sharpness adjust offset (Sxx.xxxx)*/
#define offset_of_vps_2_reg_main_osd_sharpness_ctrl_offset (0xb2)
#define mask_of_vps_2_reg_main_osd_sharpness_ctrl_offset   (0x7f)
#define shift_of_vps_2_reg_main_osd_sharpness_ctrl_offset  (0)
#define VPS_2_REG_MAIN_OSD_SHARPNESS_CTRL_OFFSET           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_osd_sharpness_ctrl_offset)
#define REG_VPS_2_59_L                                     (VPS_2_REG_MAIN_OSD_SHARPNESS_CTRL_OFFSET)
// h005a, bit: 6
/* Main window user sharpness horizontal adjust offset (Sxx.xxxx)*/
#define offset_of_vps_2_reg_main_osd_sharpness_ctrl_h_offset (0xb4)
#define mask_of_vps_2_reg_main_osd_sharpness_ctrl_h_offset   (0x7f)
#define shift_of_vps_2_reg_main_osd_sharpness_ctrl_h_offset  (0)
#define VPS_2_REG_MAIN_OSD_SHARPNESS_CTRL_H_OFFSET \
    (REG_VPS_2_BASE + offset_of_vps_2_reg_main_osd_sharpness_ctrl_h_offset)
#define REG_VPS_2_5A_L (VPS_2_REG_MAIN_OSD_SHARPNESS_CTRL_H_OFFSET)
// h005b, bit: 6
/* Main window user sharpness vertical adjust offset (Sxx.xxxx)*/
#define offset_of_vps_2_reg_main_osd_sharpness_ctrl_v_offset (0xb6)
#define mask_of_vps_2_reg_main_osd_sharpness_ctrl_v_offset   (0x7f)
#define shift_of_vps_2_reg_main_osd_sharpness_ctrl_v_offset  (0)
#define VPS_2_REG_MAIN_OSD_SHARPNESS_CTRL_V_OFFSET \
    (REG_VPS_2_BASE + offset_of_vps_2_reg_main_osd_sharpness_ctrl_v_offset)
#define REG_VPS_2_5B_L (VPS_2_REG_MAIN_OSD_SHARPNESS_CTRL_V_OFFSET)
#define REG_VPS_2_5C_L (REG_VPS_2_BASE + 0xb8)
#define REG_VPS_2_5D_L (REG_VPS_2_BASE + 0xba)
#define REG_VPS_2_5E_L (REG_VPS_2_BASE + 0xbc)
#define REG_VPS_2_5F_L (REG_VPS_2_BASE + 0xbe)
// h0060, bit: 0
/* Main window Gaussian SNR enable*/
#define offset_of_vps_2_reg_main_gauss_nr_en (0xc0)
#define mask_of_vps_2_reg_main_gauss_nr_en   (0x1)
#define shift_of_vps_2_reg_main_gauss_nr_en  (0)
#define VPS_2_REG_MAIN_GAUSS_NR_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_gauss_nr_en)
#define REG_VPS_2_60_L                       (VPS_2_REG_MAIN_GAUSS_NR_EN)
// h0060, bit: 1
/* Main window Gaussian SNR adaptive factor enable*/
#define offset_of_vps_2_reg_main_gauss_adj_en (0xc0)
#define mask_of_vps_2_reg_main_gauss_adj_en   (0x2)
#define shift_of_vps_2_reg_main_gauss_adj_en  (1)
#define VPS_2_REG_MAIN_GAUSS_ADJ_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_gauss_adj_en)
// h0060, bit: 5
/* Main window Gaussian SNR LUT step*/
#define offset_of_vps_2_reg_main_gauss_lut_step (0xc0)
#define mask_of_vps_2_reg_main_gauss_lut_step   (0x30)
#define shift_of_vps_2_reg_main_gauss_lut_step  (4)
#define VPS_2_REG_MAIN_GAUSS_LUT_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_gauss_lut_step)
// h0060, bit: 12
/* Main window Gaussian SNR threshold*/
#define offset_of_vps_2_reg_main_gauss_thrd (0xc0)
#define mask_of_vps_2_reg_main_gauss_thrd   (0x1f00)
#define shift_of_vps_2_reg_main_gauss_thrd  (8)
#define VPS_2_REG_MAIN_GAUSS_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_gauss_thrd)
#define REG_VPS_2_61_L                      (REG_VPS_2_BASE + 0xc2)
#define REG_VPS_2_62_L                      (REG_VPS_2_BASE + 0xc4)
#define REG_VPS_2_63_L                      (REG_VPS_2_BASE + 0xc6)
// h0064, bit: 7
/* Gaussian SNR Table 0*/
#define offset_of_vps_2_reg_snr_lut_0 (0xc8)
#define mask_of_vps_2_reg_snr_lut_0   (0xff)
#define shift_of_vps_2_reg_snr_lut_0  (0)
#define VPS_2_REG_SNR_LUT_0           (REG_VPS_2_BASE + offset_of_vps_2_reg_snr_lut_0)
#define REG_VPS_2_64_L                (VPS_2_REG_SNR_LUT_0)
// h0064, bit: 15
/* Gaussian SNR Table 1*/
#define offset_of_vps_2_reg_snr_lut_1 (0xc8)
#define mask_of_vps_2_reg_snr_lut_1   (0xff00)
#define shift_of_vps_2_reg_snr_lut_1  (8)
#define VPS_2_REG_SNR_LUT_1           (REG_VPS_2_BASE + offset_of_vps_2_reg_snr_lut_1)
// h0065, bit: 7
/* Gaussian SNR Table 2*/
#define offset_of_vps_2_reg_snr_lut_2 (0xca)
#define mask_of_vps_2_reg_snr_lut_2   (0xff)
#define shift_of_vps_2_reg_snr_lut_2  (0)
#define VPS_2_REG_SNR_LUT_2           (REG_VPS_2_BASE + offset_of_vps_2_reg_snr_lut_2)
#define REG_VPS_2_65_L                (VPS_2_REG_SNR_LUT_2)
// h0065, bit: 15
/* Gaussian SNR Table 3*/
#define offset_of_vps_2_reg_snr_lut_3 (0xca)
#define mask_of_vps_2_reg_snr_lut_3   (0xff00)
#define shift_of_vps_2_reg_snr_lut_3  (8)
#define VPS_2_REG_SNR_LUT_3           (REG_VPS_2_BASE + offset_of_vps_2_reg_snr_lut_3)
// h0066, bit: 7
/* Gaussian SNR Table 4*/
#define offset_of_vps_2_reg_snr_lut_4 (0xcc)
#define mask_of_vps_2_reg_snr_lut_4   (0xff)
#define shift_of_vps_2_reg_snr_lut_4  (0)
#define VPS_2_REG_SNR_LUT_4           (REG_VPS_2_BASE + offset_of_vps_2_reg_snr_lut_4)
#define REG_VPS_2_66_L                (VPS_2_REG_SNR_LUT_4)
// h0066, bit: 15
/* Gaussian SNR Table 5*/
#define offset_of_vps_2_reg_snr_lut_5 (0xcc)
#define mask_of_vps_2_reg_snr_lut_5   (0xff00)
#define shift_of_vps_2_reg_snr_lut_5  (8)
#define VPS_2_REG_SNR_LUT_5           (REG_VPS_2_BASE + offset_of_vps_2_reg_snr_lut_5)
// h0067, bit: 7
/* Gaussian SNR Table 6*/
#define offset_of_vps_2_reg_snr_lut_6 (0xce)
#define mask_of_vps_2_reg_snr_lut_6   (0xff)
#define shift_of_vps_2_reg_snr_lut_6  (0)
#define VPS_2_REG_SNR_LUT_6           (REG_VPS_2_BASE + offset_of_vps_2_reg_snr_lut_6)
#define REG_VPS_2_67_L                (VPS_2_REG_SNR_LUT_6)
// h0067, bit: 15
/* Gaussian SNR Table 7*/
#define offset_of_vps_2_reg_snr_lut_7 (0xce)
#define mask_of_vps_2_reg_snr_lut_7   (0xff00)
#define shift_of_vps_2_reg_snr_lut_7  (8)
#define VPS_2_REG_SNR_LUT_7           (REG_VPS_2_BASE + offset_of_vps_2_reg_snr_lut_7)
// h0068, bit: 5
/* diagonal differential adaptive LUT 0*/
#define offset_of_vps_2_reg_dia_lut_0 (0xd0)
#define mask_of_vps_2_reg_dia_lut_0   (0x3f)
#define shift_of_vps_2_reg_dia_lut_0  (0)
#define VPS_2_REG_DIA_LUT_0           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_0)
#define REG_VPS_2_68_L                (VPS_2_REG_DIA_LUT_0)
// h0068, bit: 13
/* diagonal differential adaptive LUT 1*/
#define offset_of_vps_2_reg_dia_lut_1 (0xd0)
#define mask_of_vps_2_reg_dia_lut_1   (0x3f00)
#define shift_of_vps_2_reg_dia_lut_1  (8)
#define VPS_2_REG_DIA_LUT_1           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_1)
// h0069, bit: 5
/* diagonal differential adaptive LUT 2*/
#define offset_of_vps_2_reg_dia_lut_2 (0xd2)
#define mask_of_vps_2_reg_dia_lut_2   (0x3f)
#define shift_of_vps_2_reg_dia_lut_2  (0)
#define VPS_2_REG_DIA_LUT_2           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_2)
#define REG_VPS_2_69_L                (VPS_2_REG_DIA_LUT_2)
// h0069, bit: 13
/* diagonal differential adaptive LUT 3*/
#define offset_of_vps_2_reg_dia_lut_3 (0xd2)
#define mask_of_vps_2_reg_dia_lut_3   (0x3f00)
#define shift_of_vps_2_reg_dia_lut_3  (8)
#define VPS_2_REG_DIA_LUT_3           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_3)
// h006a, bit: 5
/* diagonal differential adaptive LUT 4*/
#define offset_of_vps_2_reg_dia_lut_4 (0xd4)
#define mask_of_vps_2_reg_dia_lut_4   (0x3f)
#define shift_of_vps_2_reg_dia_lut_4  (0)
#define VPS_2_REG_DIA_LUT_4           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_4)
#define REG_VPS_2_6A_L                (VPS_2_REG_DIA_LUT_4)
// h006a, bit: 13
/* diagonal differential adaptive LUT 5*/
#define offset_of_vps_2_reg_dia_lut_5 (0xd4)
#define mask_of_vps_2_reg_dia_lut_5   (0x3f00)
#define shift_of_vps_2_reg_dia_lut_5  (8)
#define VPS_2_REG_DIA_LUT_5           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_5)
// h006b, bit: 5
/* diagonal differential adaptive LUT 6*/
#define offset_of_vps_2_reg_dia_lut_6 (0xd6)
#define mask_of_vps_2_reg_dia_lut_6   (0x3f)
#define shift_of_vps_2_reg_dia_lut_6  (0)
#define VPS_2_REG_DIA_LUT_6           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_6)
#define REG_VPS_2_6B_L                (VPS_2_REG_DIA_LUT_6)
// h006b, bit: 13
/* diagonal differential adaptive LUT 7*/
#define offset_of_vps_2_reg_dia_lut_7 (0xd6)
#define mask_of_vps_2_reg_dia_lut_7   (0x3f00)
#define shift_of_vps_2_reg_dia_lut_7  (8)
#define VPS_2_REG_DIA_LUT_7           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_7)
// h006c, bit: 5
/* diagonal differential adaptive LUT 8*/
#define offset_of_vps_2_reg_dia_lut_8 (0xd8)
#define mask_of_vps_2_reg_dia_lut_8   (0x3f)
#define shift_of_vps_2_reg_dia_lut_8  (0)
#define VPS_2_REG_DIA_LUT_8           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_8)
#define REG_VPS_2_6C_L                (VPS_2_REG_DIA_LUT_8)
// h006c, bit: 13
/* diagonal differential adaptive LUT 9*/
#define offset_of_vps_2_reg_dia_lut_9 (0xd8)
#define mask_of_vps_2_reg_dia_lut_9   (0x3f00)
#define shift_of_vps_2_reg_dia_lut_9  (8)
#define VPS_2_REG_DIA_LUT_9           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_9)
// h006d, bit: 5
/* diagonal differential adaptive LUT 10*/
#define offset_of_vps_2_reg_dia_lut_10 (0xda)
#define mask_of_vps_2_reg_dia_lut_10   (0x3f)
#define shift_of_vps_2_reg_dia_lut_10  (0)
#define VPS_2_REG_DIA_LUT_10           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_10)
#define REG_VPS_2_6D_L                 (VPS_2_REG_DIA_LUT_10)
// h006d, bit: 13
/* diagonal differential adaptive LUT 11*/
#define offset_of_vps_2_reg_dia_lut_11 (0xda)
#define mask_of_vps_2_reg_dia_lut_11   (0x3f00)
#define shift_of_vps_2_reg_dia_lut_11  (8)
#define VPS_2_REG_DIA_LUT_11           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_11)
// h006e, bit: 5
/* diagonal differential adaptive LUT 12*/
#define offset_of_vps_2_reg_dia_lut_12 (0xdc)
#define mask_of_vps_2_reg_dia_lut_12   (0x3f)
#define shift_of_vps_2_reg_dia_lut_12  (0)
#define VPS_2_REG_DIA_LUT_12           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_12)
#define REG_VPS_2_6E_L                 (VPS_2_REG_DIA_LUT_12)
// h006e, bit: 13
/* diagonal differential adaptive LUT 13*/
#define offset_of_vps_2_reg_dia_lut_13 (0xdc)
#define mask_of_vps_2_reg_dia_lut_13   (0x3f00)
#define shift_of_vps_2_reg_dia_lut_13  (8)
#define VPS_2_REG_DIA_LUT_13           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_13)
// h006f, bit: 5
/* diagonal differential adaptive LUT 14*/
#define offset_of_vps_2_reg_dia_lut_14 (0xde)
#define mask_of_vps_2_reg_dia_lut_14   (0x3f)
#define shift_of_vps_2_reg_dia_lut_14  (0)
#define VPS_2_REG_DIA_LUT_14           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_14)
#define REG_VPS_2_6F_L                 (VPS_2_REG_DIA_LUT_14)
// h006f, bit: 13
/* diagonal differential adaptive LUT 15*/
#define offset_of_vps_2_reg_dia_lut_15 (0xde)
#define mask_of_vps_2_reg_dia_lut_15   (0x3f00)
#define shift_of_vps_2_reg_dia_lut_15  (8)
#define VPS_2_REG_DIA_LUT_15           (REG_VPS_2_BASE + offset_of_vps_2_reg_dia_lut_15)
// h0070, bit: 5
/* Main window horizontal Y noise-masking gain (xxxx.xx)*/
#define offset_of_vps_2_reg_main_y_noise_mask_gain (0xe0)
#define mask_of_vps_2_reg_main_y_noise_mask_gain   (0x3f)
#define shift_of_vps_2_reg_main_y_noise_mask_gain  (0)
#define VPS_2_REG_MAIN_Y_NOISE_MASK_GAIN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_y_noise_mask_gain)
#define REG_VPS_2_70_L                             (VPS_2_REG_MAIN_Y_NOISE_MASK_GAIN)
// h0070, bit: 6
/* Main window horizontal Y noise-masking color adaptive enable*/
#define offset_of_vps_2_reg_main_y_color_noise_masking_en (0xe0)
#define mask_of_vps_2_reg_main_y_color_noise_masking_en   (0x40)
#define shift_of_vps_2_reg_main_y_color_noise_masking_en  (6)
#define VPS_2_REG_MAIN_Y_COLOR_NOISE_MASKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_y_color_noise_masking_en)
// h0070, bit: 7
/* Main window horizontal Y noise-masking enable*/
#define offset_of_vps_2_reg_main_y_noise_masking_en (0xe0)
#define mask_of_vps_2_reg_main_y_noise_masking_en   (0x80)
#define shift_of_vps_2_reg_main_y_noise_masking_en  (7)
#define VPS_2_REG_MAIN_Y_NOISE_MASKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_y_noise_masking_en)
// h0070, bit: 13
/* Main window horizontal C noise-masking gain (xxxx.xx)*/
#define offset_of_vps_2_reg_main_c_noise_mask_gain (0xe0)
#define mask_of_vps_2_reg_main_c_noise_mask_gain   (0x3f00)
#define shift_of_vps_2_reg_main_c_noise_mask_gain  (8)
#define VPS_2_REG_MAIN_C_NOISE_MASK_GAIN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_c_noise_mask_gain)
// h0070, bit: 14
/* Main window horizontal C noise-masking color adaptive enable*/
#define offset_of_vps_2_reg_main_c_color_noise_masking_en (0xe0)
#define mask_of_vps_2_reg_main_c_color_noise_masking_en   (0x4000)
#define shift_of_vps_2_reg_main_c_color_noise_masking_en  (14)
#define VPS_2_REG_MAIN_C_COLOR_NOISE_MASKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_c_color_noise_masking_en)
// h0070, bit: 15
/* Main window horizontal C noise-masking enable*/
#define offset_of_vps_2_reg_main_c_noise_masking_en (0xe0)
#define mask_of_vps_2_reg_main_c_noise_masking_en   (0x8000)
#define shift_of_vps_2_reg_main_c_noise_masking_en  (15)
#define VPS_2_REG_MAIN_C_NOISE_MASKING_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_c_noise_masking_en)
// h0071, bit: 3
/* Main window Y noise_masking max value threshold*/
#define offset_of_vps_2_reg_main_y_nm_max_thrd (0xe2)
#define mask_of_vps_2_reg_main_y_nm_max_thrd   (0xf)
#define shift_of_vps_2_reg_main_y_nm_max_thrd  (0)
#define VPS_2_REG_MAIN_Y_NM_MAX_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_y_nm_max_thrd)
#define REG_VPS_2_71_L                         (VPS_2_REG_MAIN_Y_NM_MAX_THRD)
// h0071, bit: 7
/* Main window Y noise_masking min value threshold*/
#define offset_of_vps_2_reg_main_y_nm_min_thrd (0xe2)
#define mask_of_vps_2_reg_main_y_nm_min_thrd   (0xf0)
#define shift_of_vps_2_reg_main_y_nm_min_thrd  (4)
#define VPS_2_REG_MAIN_Y_NM_MIN_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_y_nm_min_thrd)
// h0071, bit: 11
/* Main window C noise_masking max value threshold*/
#define offset_of_vps_2_reg_main_c_nm_max_thrd (0xe2)
#define mask_of_vps_2_reg_main_c_nm_max_thrd   (0xf00)
#define shift_of_vps_2_reg_main_c_nm_max_thrd  (8)
#define VPS_2_REG_MAIN_C_NM_MAX_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_c_nm_max_thrd)
// h0071, bit: 15
/* Main window C noise_masking min value threshold*/
#define offset_of_vps_2_reg_main_c_nm_min_thrd (0xe2)
#define mask_of_vps_2_reg_main_c_nm_min_thrd   (0xf000)
#define shift_of_vps_2_reg_main_c_nm_min_thrd  (12)
#define VPS_2_REG_MAIN_C_NM_MIN_THRD           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_c_nm_min_thrd)
// h0072, bit: 1
/* Main window color noise_masking step*/
#define offset_of_vps_2_reg_main_color_nm_step (0xe4)
#define mask_of_vps_2_reg_main_color_nm_step   (0x3)
#define shift_of_vps_2_reg_main_color_nm_step  (0)
#define VPS_2_REG_MAIN_COLOR_NM_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_color_nm_step)
#define REG_VPS_2_72_L                         (VPS_2_REG_MAIN_COLOR_NM_STEP)
// h0072, bit: 3
/* reversed*/
#define offset_of_vps_2_reg_nm_reserved_2 (0xe4)
#define mask_of_vps_2_reg_nm_reserved_2   (0xc)
#define shift_of_vps_2_reg_nm_reserved_2  (2)
#define VPS_2_REG_NM_RESERVED_2           (REG_VPS_2_BASE + offset_of_vps_2_reg_nm_reserved_2)
// h0072, bit: 7
/* Flesh color adaptive noise masking strength (x.xxx)*/
#define offset_of_vps_2_reg_color_pk_win1_nm_entry_value (0xe4)
#define mask_of_vps_2_reg_color_pk_win1_nm_entry_value   (0xf0)
#define shift_of_vps_2_reg_color_pk_win1_nm_entry_value  (4)
#define VPS_2_REG_COLOR_PK_WIN1_NM_ENTRY_VALUE           (REG_VPS_2_BASE + offset_of_vps_2_reg_color_pk_win1_nm_entry_value)
// h0072, bit: 11
/* reversed*/
#define offset_of_vps_2_reg_nm_reserved_3 (0xe4)
#define mask_of_vps_2_reg_nm_reserved_3   (0xc00)
#define shift_of_vps_2_reg_nm_reserved_3  (10)
#define VPS_2_REG_NM_RESERVED_3           (REG_VPS_2_BASE + offset_of_vps_2_reg_nm_reserved_3)
// h0072, bit: 15
/* Blue color adaptive noise masking strength (x.xxx)*/
#define offset_of_vps_2_reg_color_pk_win2_nm_entry_value (0xe4)
#define mask_of_vps_2_reg_color_pk_win2_nm_entry_value   (0xf000)
#define shift_of_vps_2_reg_color_pk_win2_nm_entry_value  (12)
#define VPS_2_REG_COLOR_PK_WIN2_NM_ENTRY_VALUE           (REG_VPS_2_BASE + offset_of_vps_2_reg_color_pk_win2_nm_entry_value)
// h0073, bit: 0
/* As panel_de less than hde */
#define offset_of_vps_2_reg_hde_ref_panel_de_en (0xe6)
#define mask_of_vps_2_reg_hde_ref_panel_de_en   (0x1)
#define shift_of_vps_2_reg_hde_ref_panel_de_en  (0)
#define VPS_2_REG_HDE_REF_PANEL_DE_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_hde_ref_panel_de_en)
#define REG_VPS_2_73_L                          (VPS_2_REG_HDE_REF_PANEL_DE_EN)
// h0073, bit: 1
/* As pseudo hde enable */
#define offset_of_vps_2_reg_pseudo_hde_en (0xe6)
#define mask_of_vps_2_reg_pseudo_hde_en   (0x2)
#define shift_of_vps_2_reg_pseudo_hde_en  (1)
#define VPS_2_REG_PSEUDO_HDE_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_pseudo_hde_en)
// h0073, bit: 3
/* reversed*/
#define offset_of_vps_2_reg_reserved_top (0xe6)
#define mask_of_vps_2_reg_reserved_top   (0xc)
#define shift_of_vps_2_reg_reserved_top  (2)
#define VPS_2_REG_RESERVED_TOP           (REG_VPS_2_BASE + offset_of_vps_2_reg_reserved_top)
// h0073, bit: 15
/* reserved*/
#define offset_of_vps_2_reg_nm_reserved_1 (0xe6)
#define mask_of_vps_2_reg_nm_reserved_1   (0xff00)
#define shift_of_vps_2_reg_nm_reserved_1  (8)
#define VPS_2_REG_NM_RESERVED_1           (REG_VPS_2_BASE + offset_of_vps_2_reg_nm_reserved_1)
// h0074, bit: 0
/* Main window mosquito noise low y mode enable*/
#define offset_of_vps_2_reg_main_nm_low_y_en (0xe8)
#define mask_of_vps_2_reg_main_nm_low_y_en   (0x1)
#define shift_of_vps_2_reg_main_nm_low_y_en  (0)
#define VPS_2_REG_MAIN_NM_LOW_Y_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_nm_low_y_en)
#define REG_VPS_2_74_L                       (VPS_2_REG_MAIN_NM_LOW_Y_EN)
// h0074, bit: 3
/* reserved*/
#define offset_of_vps_2_reg_nm_reserved_4 (0xe8)
#define mask_of_vps_2_reg_nm_reserved_4   (0xe)
#define shift_of_vps_2_reg_nm_reserved_4  (1)
#define VPS_2_REG_NM_RESERVED_4           (REG_VPS_2_BASE + offset_of_vps_2_reg_nm_reserved_4)
// h0074, bit: 15
/* reserved*/
#define offset_of_vps_2_reg_nm_reserved_5 (0xe8)
#define mask_of_vps_2_reg_nm_reserved_5   (0xff00)
#define shift_of_vps_2_reg_nm_reserved_5  (8)
#define VPS_2_REG_NM_RESERVED_5           (REG_VPS_2_BASE + offset_of_vps_2_reg_nm_reserved_5)
// h0075, bit: 7
/* Main window  mosquito noise low y mode threshold*/
#define offset_of_vps_2_reg_main_nm_low_y_th (0xea)
#define mask_of_vps_2_reg_main_nm_low_y_th   (0xff)
#define shift_of_vps_2_reg_main_nm_low_y_th  (0)
#define VPS_2_REG_MAIN_NM_LOW_Y_TH           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_nm_low_y_th)
#define REG_VPS_2_75_L                       (VPS_2_REG_MAIN_NM_LOW_Y_TH)
// h0076, bit: 5
/* Main window mosquito noise low y mode gain*/
#define offset_of_vps_2_reg_main_nm_low_y_gain (0xec)
#define mask_of_vps_2_reg_main_nm_low_y_gain   (0x3f)
#define shift_of_vps_2_reg_main_nm_low_y_gain  (0)
#define VPS_2_REG_MAIN_NM_LOW_Y_GAIN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_nm_low_y_gain)
#define REG_VPS_2_76_L                         (VPS_2_REG_MAIN_NM_LOW_Y_GAIN)
// h0076, bit: 9
/* Main window mosquito noise low y mode step*/
#define offset_of_vps_2_reg_main_nm_low_y_step (0xec)
#define mask_of_vps_2_reg_main_nm_low_y_step   (0x300)
#define shift_of_vps_2_reg_main_nm_low_y_step  (8)
#define VPS_2_REG_MAIN_NM_LOW_Y_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_nm_low_y_step)
// h0076, bit: 15
/* reserved*/
#define offset_of_vps_2_reg_nm_reserved_6 (0xec)
#define mask_of_vps_2_reg_nm_reserved_6   (0xfc00)
#define shift_of_vps_2_reg_nm_reserved_6  (10)
#define VPS_2_REG_NM_RESERVED_6           (REG_VPS_2_BASE + offset_of_vps_2_reg_nm_reserved_6)
#define REG_VPS_2_77_L                    (REG_VPS_2_BASE + 0xee)
// h0078, bit: 0
/* pseudo return to initial value by vclear enable*/
#define offset_of_vps_2_reg_pseudo_vclr_en (0xf0)
#define mask_of_vps_2_reg_pseudo_vclr_en   (0x1)
#define shift_of_vps_2_reg_pseudo_vclr_en  (0)
#define VPS_2_REG_PSEUDO_VCLR_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_pseudo_vclr_en)
#define REG_VPS_2_78_L                     (VPS_2_REG_PSEUDO_VCLR_EN)
// h0078, bit: 2
/* pseudo return to initial value frame numbers
#2'b00 : 1 frame initial
#2'b01 : 2 frame initial
#2'b10 : 4 frame initial
#2'b11 : 8 frame initial*/
#define offset_of_vps_2_reg_pseudo_vclr_no (0xf0)
#define mask_of_vps_2_reg_pseudo_vclr_no   (0x6)
#define shift_of_vps_2_reg_pseudo_vclr_no  (1)
#define VPS_2_REG_PSEUDO_VCLR_NO           (REG_VPS_2_BASE + offset_of_vps_2_reg_pseudo_vclr_no)
// h0079, bit: 3
/* Main window dering data low pass filter coefficient
# >=8 : lpf strong
# 1~7 : median
# 0 : no lpf*/
#define offset_of_vps_2_reg_main_dering_lpf_coef (0xf2)
#define mask_of_vps_2_reg_main_dering_lpf_coef   (0xf)
#define shift_of_vps_2_reg_main_dering_lpf_coef  (0)
#define VPS_2_REG_MAIN_DERING_LPF_COEF           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_dering_lpf_coef)
#define REG_VPS_2_79_L                           (VPS_2_REG_MAIN_DERING_LPF_COEF)
#define REG_VPS_2_7A_L                           (REG_VPS_2_BASE + 0xf4)
// h007b, bit: 0
/* Main window vertical mosquito noise low y mode enable*/
#define offset_of_vps_2_reg_main_v_nm_low_y_en (0xf6)
#define mask_of_vps_2_reg_main_v_nm_low_y_en   (0x1)
#define shift_of_vps_2_reg_main_v_nm_low_y_en  (0)
#define VPS_2_REG_MAIN_V_NM_LOW_Y_EN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_v_nm_low_y_en)
#define REG_VPS_2_7B_L                         (VPS_2_REG_MAIN_V_NM_LOW_Y_EN)
// h007b, bit: 3
/* reserved*/
#define offset_of_vps_2_reg_pk_reserved_6 (0xf6)
#define mask_of_vps_2_reg_pk_reserved_6   (0xe)
#define shift_of_vps_2_reg_pk_reserved_6  (1)
#define VPS_2_REG_PK_RESERVED_6           (REG_VPS_2_BASE + offset_of_vps_2_reg_pk_reserved_6)
// h007b, bit: 15
/* reserved*/
#define offset_of_vps_2_reg_pk_reserved_7 (0xf6)
#define mask_of_vps_2_reg_pk_reserved_7   (0xff00)
#define shift_of_vps_2_reg_pk_reserved_7  (8)
#define VPS_2_REG_PK_RESERVED_7           (REG_VPS_2_BASE + offset_of_vps_2_reg_pk_reserved_7)
// h007c, bit: 7
/* Main window vertical mosquito noise low y mode threshold*/
#define offset_of_vps_2_reg_main_v_nm_low_y_th (0xf8)
#define mask_of_vps_2_reg_main_v_nm_low_y_th   (0xff)
#define shift_of_vps_2_reg_main_v_nm_low_y_th  (0)
#define VPS_2_REG_MAIN_V_NM_LOW_Y_TH           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_v_nm_low_y_th)
#define REG_VPS_2_7C_L                         (VPS_2_REG_MAIN_V_NM_LOW_Y_TH)
// h007d, bit: 5
/* Main window vertical mosquito noise low y mode gain*/
#define offset_of_vps_2_reg_main_v_nm_low_y_gain (0xfa)
#define mask_of_vps_2_reg_main_v_nm_low_y_gain   (0x3f)
#define shift_of_vps_2_reg_main_v_nm_low_y_gain  (0)
#define VPS_2_REG_MAIN_V_NM_LOW_Y_GAIN           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_v_nm_low_y_gain)
#define REG_VPS_2_7D_L                           (VPS_2_REG_MAIN_V_NM_LOW_Y_GAIN)
// h007d, bit: 9
/* Main window vertical mosquito noise low y mode step*/
#define offset_of_vps_2_reg_main_v_nm_low_y_step (0xfa)
#define mask_of_vps_2_reg_main_v_nm_low_y_step   (0x300)
#define shift_of_vps_2_reg_main_v_nm_low_y_step  (8)
#define VPS_2_REG_MAIN_V_NM_LOW_Y_STEP           (REG_VPS_2_BASE + offset_of_vps_2_reg_main_v_nm_low_y_step)
// h007d, bit: 15
/* reserved*/
#define offset_of_vps_2_reg_pk_reserved_8 (0xfa)
#define mask_of_vps_2_reg_pk_reserved_8   (0xfc00)
#define shift_of_vps_2_reg_pk_reserved_8  (10)
#define VPS_2_REG_PK_RESERVED_8           (REG_VPS_2_BASE + offset_of_vps_2_reg_pk_reserved_8)
#define REG_VPS_2_7E_L                    (REG_VPS_2_BASE + 0xfc)
#define REG_VPS_2_7F_L                    (REG_VPS_2_BASE + 0xfe)
#endif
